- \Interactions\Finance\FindPayment.cs
- \Interactions\PayCentral\ValidationForLink.cs
- \iParts\Commerce\OrderDetailsBillingDetails.cs
- \iParts\Commerce\OrderDetailsTotalSection.cs
- \iParts\Commerce\OrderSelector.cs
- \iParts\Commerce\ItemCreator\AddItemDialog.cs
- \iParts\Common\DynamicContentCollectionOrganizer.cs
- \iParts\Common\BigButtonPanel\BigButtonPanelEdit.cs
- \iParts\Fundraising\GiftRequest\GiftRequest.cs
- \iParts\Fundraising\GiftRequest\GiftRequestAddEditDialog.cs
- \iParts\Membership\ClubStaffCheckInOut.cs
- \obj\Debug\net7.0\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs
- \obj\Debug\net7.0\Asi.Selenium.Web.AssemblyInfo.cs
- \obj\Debug\net7.0\MSTest.AssemblyHooks.cs
- \Pages\Commerce\ProcessOrders\ConvertQuotesPage.cs
- \Pages\Commerce\ProcessOrders\GenerateInvoicesPage.cs
- \Pages\Commerce\ProcessOrders\IssueQuotesPage.cs
- \Pages\Commerce\ProcessOrders\PrintShippingPapersPage.cs
- \Pages\Commerce\ProcessOrders\ReleaseBackordersPage.cs
- \Pages\Commerce\ProcessOrders\ShipOrdersPage.cs
- \Pages\Community\FindContactsPage.cs
- \Pages\Contacts\AdjustMembershipFeesPage.cs
- \Pages\Events\EventProgramDetails\EventStaffFunctionDialog.cs
- \Pages\Events\EventProgramDetails\EventStaffFunctionDisplayPage.cs
- \Pages\Finance\BatchDetailPage.cs
- \Pages\Finance\BatchesPage.cs
- \Pages\Finance\PayCentral\FindPaymentsPage.cs
- \Pages\Fundraising\Receipting\IssueReceiptsPage.cs
- \Pages\LicenseServer\LicenseServerPage.cs
- \Pages\LicenseServer\UpsertLicenseIssuedModal.cs
- \Pages\LicenseServer\UpsertLicenseModal.cs
- \Pages\MemberResponsive\ContactManagement\MemberResponsiveMembershipPage.cs
- \Pages\RiSE\Maintenance\PublishServersListPage.cs
- \Pages\Settings\Finance\PayCentral\Gateway\ImisRedirectPage.cs
- \Pages\Settings\Finance\PayCentral\Gateway\GoCardless\GoCardlessDialog.cs
- \Pages\Settings\Finance\PayCentral\Gateway\GoCardless\GoCardlessOAuth.cs
- \Pages\Settings\Finance\PayCentral\Gateway\Stripe\StripeDialog.cs
- \Pages\Settings\Finance\PayCentral\Gateway\Stripe\StripeOnboarding.cs
- \Pages\Shop\PayPalCheckOutPage.cs
- \TestMethods\Fundraising\FundraisingTestMethods.cs
- \TestMethods\Fundraising\ReceiptingTestMethods.cs
+ \iParts\Fundraising\GiftRequest.cs
+ \iParts\Fundraising\GiftRequestAddEdit.cs
+ \Pages\Finance\Batches.cs
+ \Pages\Membership\ProductDisplayPage.cs

<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\AsiWeb\Lister.cs
=         public IWebLocator AddToGrid => GetLocatorById("TopRightPanel", "div");
=         public ListerSheetCollection Queries { get; set; }
-         public IWebLocator FirstPageButton => LocatorByXPath("rgPageFirst", "input", "class");

-         public IWebLocator LastPageButton => LocatorByXPath("rgPageLast", "input", "class");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\AsiWeb\MultiSelectControl.cs
=         }
= 
-         public IWebLocator SearchField { get => LocatorByXPath(_selectId, "div", "id", "/ul/li/input"); }

+         public IWebLocator SearchField { get => LocatorByXPath(_selectId, "/ul/li/input"); }
=         public IWebLocator Add { get => LocatorByXPath(_selectId, "/div/ul/li/a"); }
-         public IWebLocator ActiveItem { get => LocatorByXPath(_selectId, "div", "id", "/div/ul/li"); }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\AsiWeb\RadioButtonList.cs
= 
=         public IWebLocator Button(int placement) => LocatorByXPath($"{_id}_{placement}", "input");
-         public IWebLocator Label(int placement) => LocatorByXPath($"{_id}_{placement}", "label","for");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\AsiWeb\Helpers\DialogWindowWrapper.cs
=         public static IWebLocator ReloadButton => LocatorByXPath("Reload", "a", "title");
=         public static IWebLocator MaximizeButton => LocatorByXPath("Maximize", "a", "title");
-         public static IWebLocator CloseButtonTop => LocatorByXPath("Close", "a", "title");

+         public static IWebLocator CloseButtonTop => LocatorByXPath("Close", "*", "title");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Angular\AngularControl.cs
=     }
= 
-     public class ReceiptMessage: AngularControl

-     {

-         public ReceiptMessage(string parentXPath): base("div", parentXPath)

-         {

- 

-         }

- 

-         public new IWebLocator GetLocator(string message) => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage'][contains(text(),'{message}')]");

-         public new IWebLocator GetLocator() => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage']");

-     }

- 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Angular\AsiCommonFinder.cs
= namespace Asi.Selenium.Web.Controls.Angular
= {
-     public class SplitGiftGrid : PageBase

-     {

-         public string ParentXPath { get; set; }

- 

-         public SplitGiftGrid(string parentXPath) : base()

-         {

-             ParentXPath = parentXPath;

-         }

- 

-         public AsiCommonFinder GiftID(int row) => new AsiCommonFinder($"Gift Item ID for Row {row}", ParentXPath);

-         public IWebLocator Amount(int row) => LocatorForXpath($"{ParentXPath}//input[@title='Gift Item Amount for Row {row}'][@type='text']");

-     }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Basic\ListView.cs
=             return LocatorByXPath($"{prefix}{Name}_ctrl{index}_{id}");
=         }
+ 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Basic\HtmlInput\HtmlInput.cs
=         public string Description { get => $"XPath for HTML Input type={InputType}"; }
=         public By Query { get => ByXPath(Name, "input", postXPath: $"[contains(@type,'{InputType}')]"); }
+ 

+         public IWebElement FindElement(IWebDriver driver)

+         {

+             throw new NotImplementedException();

+         }

+ 

+         public ReadOnlyCollection<IWebElement> FindElements(IWebDriver driver)

+         {

+             throw new NotImplementedException();

+         }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Telerik\RadGrid.cs
=         /// <param name="postXPath">post pends xpath to the default table row/column</param>
=         /// <param name="tableSection">tbody, thead, tfoot</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator Cell(string text, bool link = false, string postXPath = "", string tag = "id", string tableSection = "tbody", bool exactMatch = false) =>

-             WebLocator.L("SelectedItem locator", GetTableXPath(GetId(GridIdSuffix), Predicate("text()", text, exactMatch), link, postXPath, tag, tableSection));

+         public IWebLocator Cell(string text, bool link = false, string postXPath = "", string tag ="id", string tableSection = "tbody") =>

+             WebLocator.L("SelectedItem locator", GetTableXPath(GetId(GridIdSuffix), $"contains(text(),'{text}')", link, postXPath, tag, tableSection));
= 
=         /// <summary>
-         /// Returns a weblocator of cells which matches the given text

+         /// Returns a weblocator of cells which contain the given text
=         /// </summary>
=         /// <param name="text">text to search for</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator TextInTable(string text, bool exactMatch = false) => Cell(text, exactMatch);

+         public IWebLocator TextInTable(string text) => Cell(text);
=         /// </summary>
=         /// <param name="text">text to search for</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator LinkInTable(string text, bool exactMatch = false) => Cell(string.Empty, true, $"[{Predicate("text()",text,exactMatch)}]");

+         public IWebLocator LinkInTable(string text) => Cell(string.Empty, true, $"[contains(text(),'{text}')]");
=         /// </summary>
=         /// <param name="linkText">Link text to find row to delete</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator DeleteButtonByLink(string linkText, bool exactMatch = false) => LocatorForXpath($"//tr[td[a[{Predicate("text()",linkText,exactMatch)}]]]//td//input");

+         public IWebLocator DeleteButtonByLink(string linkText) => LocatorForXpath($"//tr[td[a[contains(text(),'{linkText}')]]]//td//input");
= 
=         /// <summary>
-         /// Returns the IWebLocator of the edit button for a specific row in the Rad Grid which

-         /// contains the specified link text.

-         /// </summary>

-         /// <param name="linkText">Link text to find row to edit</param>

-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>

-         /// <returns></returns>

-         public IWebLocator EditButtonByLink(string linkText, bool exactMatch = false) => LocatorForXpath($"//tr[td[a[{Predicate("text()", linkText, exactMatch)}]]]//td//input");

- 

-         /// <summary>
=         /// </summary>
=         /// <param name="text">text to search for</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator SpanInTable(string text, bool exactMatch = false) => Cell(string.Empty, postXPath: $"//span[{Predicate("text()",text,exactMatch)}]");

+         public IWebLocator SpanInTable(string text) => Cell(string.Empty, postXPath: $"//span[contains(text(),'{text}')]");
= 
=         /// <summary>
-         /// Returns the cell with the provided data

+         /// Returns the IWebLocator of the edit button for a specific row in the Rad Grid which

+         /// contains the specified link text.
=         /// </summary>
-         /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>

+         /// <param name="linkText">Link text to find row to edit</param>

-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator CellAnyElementWithText(string text, bool exactMatch = false)

+         public IWebLocator EditButtonByLink(string linkText) => LocatorForXpath($"//tr[td[a[contains(text(),'{linkText}')]]]//td//input");

-         {

-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]//parent::*//input");

-         }
=         /// </summary>
=         /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>
-         /// <param name="postXPath">post pends xpath to the default table row/column</param>

-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator CellWithText(string text, string postXPath = "", bool exactMatch = false)

+         public IWebLocator CellInputWithText(string text)
=         {
-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]{postXPath}");

+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]//parent::*//input");
= 
=         /// <summary>
-         /// Returns the cell with the provided data in the provided element type

+         /// Returns the cell with the provided data
=         /// </summary>
=         /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>
-         /// <param name="element">The element you want to search with, for example "input"</param>
=         /// <param name="postXPath">post pends xpath to the default table row/column</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator CellInputWithText(string text, string postXPath = "", bool exactMatch = false)

+         public IWebLocator CellWithText(string text, string postXPath = "")
=         {
-             return Cell(string.Empty, false, $"//input[{Predicate("value", text, exactMatch)}]{postXPath}");

+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]{postXPath}");
=         /// </summary>
=         /// <param name="text">finds the text and returns the link associated with it.</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator CellLinkWithText(string text, bool exactMatch = false)

+         public IWebLocator CellLinkWithText(string text)
=         {
-             return Cell(string.Empty, false, $"//a[{Predicate("text()", text, exactMatch)}]");

+             return Cell(string.Empty, false, $"//a[contains(text(),'{text}')]");
=         /// </summary>
=         /// <param name="text">finds the text and returns the link associated with it.</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator CellSpanLinkWithText(string text, bool exactMatch = false)

+         public IWebLocator CellSpanLinkWithText(string text)
=         {
-             return Cell(string.Empty, false, $"//span[{Predicate("text()", text, exactMatch)}]");

+             return Cell(string.Empty, false, $"//span[contains(text(),'{text}')]");
=         /// </summary>
=         /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
=         /// <returns></returns>
-         public IWebLocator SelectLinkWithRowText(string text, bool exactMatch = false)

+         public IWebLocator SelectLinkWithRowText(string text)
=         {
-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]//ancestor::tr//a");

+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]//ancestor::tr//a");
=         /// <returns></returns>
=         public IWebLocator Pager(int pageNumber = 1, string tableSection = "thead") =>
-             WebLocator.L("RadGrid Pager", GetTableXPath(GetId(GridIdSuffix), "", false, $"//div[{Predicate("class", "rgNumPart")}]/a[{pageNumber}]", "id", tableSection));

+             WebLocator.L("RadGrid Pager", GetTableXPath(GetId(GridIdSuffix), "", false, $"//div[contains(@class,'rgNumPart')]/a[{pageNumber}]", "id", tableSection));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Telerik\RadTab.cs
=     public class RadTab : DisplayIPartBase
=     {
-         private readonly int _index;

-         private readonly string _tabName;

+         private int _index;

+         public RadTab(int index, string name) : base(name)

- 

-         public RadTab(int index, string tabStripName, string tabName) : base(tabStripName)
=         {
=             _index = index;
-             _tabName = tabName;
=         }
- 
=         public IWebLocator Tab => GetLocatorById("", postXPath: $"/div/ul/li[{_index}]/a/span/span/span");
-         public IWebLocator TabByName => GetLocatorById("", postXPath: $"/div/ul/li/a/span/span/span[text()='{_tabName}']");

+         public IWebLocator TabByName => GetLocatorById("", postXPath: $"/div/ul/li/a/span/span/span[text()='{Name}']");
=         {
=             foreach (var tabName in tabNames)
-                 base.Add(tabName, new RadTab(_i++, Name, tabName));

+                 base.Add(tabName, new RadTab(_i++, Name));
=         public void Add(string key)
=         {
-             base.Add(key, new RadTab(_i++, Name, key));

+             base.Add(key, new RadTab(_i++, Name));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Controls\Telerik\RadTabStrip.cs
=             return Tabs.Get(tabName).Tab;
=         }
- 
=         {
=             return Tabs.Get(tabName).TabByName;
-         }

- 

-         public IWebLocator GetDynamicTab(string tabName)

-         {

-             return new RadTab(0, Name, tabName).TabByName;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Commerce\CreateProduct.cs
=         #region Constructor
= 
-         private CreateProduct(CreateProductData createProductData, ProductTypeEnum productType, ProductContext productContext,

+         private CreateProduct(CreateProductData createProductData, ProductTypeEnum productType)

-             IEnumerable<ProductItemData> productItemsData = null)
=         {
+             CreateProductData = createProductData;
=             AddProductPage = new AddProductPage();
=             ItemPage = new ItemPage();
-             CreateProductData = createProductData;

+ 

-             ProductType = productType;

-             ProductContext = productContext;

-             ProductItemsData = productItemsData;
=         }
- 
= 
=         #region Properties
- 

-         private AddProductPage AddProductPage { get; }

-         private ItemPage ItemPage { get; }

-         private CreateProductData CreateProductData { get; }

+         private ProductTypeEnum ProductType { get; set; }

+         private CreateProductData CreateProductData { get; set; }

+         private AddProductPage AddProductPage { get; set; }

+         private ItemPage ItemPage { get; set; }

-         private ProductTypeEnum ProductType { get; }

-         private ProductContext ProductContext { get; }

-         private IEnumerable<ProductItemData> ProductItemsData { get; }

- 
= 
=         #region Builder Methods
- 

+         public static CreateProduct SimpleItem(CreateProductData createProductData) => new CreateProduct(createProductData, ProductTypeEnum.SimpleItem);

-         public static CreateProduct SimpleItem(CreateProductData createProductData, ProductContext productContext) =>

-             new CreateProduct(createProductData, ProductTypeEnum.SimpleItem, productContext);

- 

-         public static CreateProduct CollectionOfItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData, ProductContext productContext) =>

-             new CreateProduct(createProductData, ProductTypeEnum.CollectionOfItems, productContext, productItemsData);

- 
=                 case ProductTypeEnum.SimpleItem:
=                     user.AttemptsTo(Click.On(AddProductPage.ItemCreator.SimpleRadioButton));
-                     EntryProductData(user, context);

+                     CreateProductHelper(user, driver, context);

-                     SaveProductData(user);
=                     break;
-                 case ProductTypeEnum.CollectionOfItems:

-                     user.AttemptsTo(Click.On(AddProductPage.ItemCreator.CollectionRadioButton));

-                     EntryProductData(user, context);

-                     EntryItemsToCollection(user);

-                     SaveProductData(user);

-                     break;
= 
=         /// <summary>
-         /// Entry product data based on what the user provides

+         /// Creates the product based on what the user provides
=         /// </summary>
=         /// <param name="user"></param>
-         public void EntryProductData(IActor user, IAsiWebContext context)

+         public void CreateProductHelper(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
+ 
=             var itemCreator = AddProductPage.ItemCreator;
= 
-             ProductContext.Code = TestHelper.GenerateRandomString(14);

-             ProductContext.Name = string.IsNullOrEmpty(CreateProductData.Name) ? ProductContext.Code : CreateProductData.Name;

-             ProductContext.Class = string.IsNullOrEmpty(CreateProductData.Class) ? "Sales" : CreateProductData.Class;

+             string itemCode = TestHelper.GenerateRandomString(10);

+             string itemName = string.IsNullOrEmpty(CreateProductData.Name) ? itemCode : CreateProductData.Name;

+             string itemClass = string.IsNullOrEmpty(CreateProductData.Class) ? "Sales" : CreateProductData.Class;

-             ProductContext.Description = string.IsNullOrEmpty(CreateProductData.Description) ? "DESC " + ProductContext.Code : CreateProductData.Description;
= 
=             // class first as it causes a postback
-             user.AttemptsTo(Select.ByText(itemCreator.ProductClassDropDown, ProductContext.Class));

+             user.AttemptsTo(Select.ByText(itemCreator.ProductClassDropDown, itemClass));

-             user.AttemptsTo(SendKeys.To(itemCreator.TxtItemCode, ProductContext.Code));

-             user.AttemptsTo(SendKeys.To(itemCreator.TxtName, ProductContext.Name));

-             user.AttemptsTo(SendKeys.To(itemCreator.TxtDescription.TextArea, ProductContext.Description));

-             if (CreateProductData.PriceIsTotal)

-             {

-                 user.AttemptsTo(Check.On(itemCreator.PriceIsTotalCheckBox));

-             }

-             else

-             {

-                 user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.TxtStandardPrice, CreateProductData.StandardPrice ?? TestHelper.GenerateRandomNumber(1, 1000)));
= 
-                 // trigger the script that defaults the discount price

-                 user.AttemptsTo(Click.On(itemCreator.TxtDiscountPrice));

-                 user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.TxtDiscountPrice, CreateProductData.DiscountPrice));

-             }

- 

-             user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.PublishStartDate.TextBox, CreateProductData.Beginning?.Date.ToString("dd/MM/yyyy")));

-             user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.PublishStartTime.TextBox, CreateProductData.Beginning?.Date.ToString("hh:mm tt")));

- 

+             user.AttemptsTo(SendKeys.To(itemCreator.TxtItemCode, itemCode).UsingClearMethod());

+             user.AttemptsTo(SendKeys.To(itemCreator.TxtName, itemName).UsingClearMethod());

+             user.AttemptsTo(SetWhenProvided.TextBox(AddProductPage.ItemCreator.TxtStandardPrice, CreateProductData.StandardPrice));

+             user.AttemptsTo(Click.On(AddProductPage.ItemCreator.TxtDiscountPrice));   // trigger the script that defaults the discount price

+             user.AttemptsTo(SetWhenProvided.TextBox(AddProductPage.ItemCreator.TxtDiscountPrice, CreateProductData.DiscountPrice));

+             user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Accounting")));

+             user.WaitsUntil(Appearance.Of(itemCreator.TaxInfo.TaxableCheckBox), IsEqualTo.True());

+             if (CreateProductData.IsTaxable ?? false)

-             if (CreateProductData.HasAccountingInformation)
=             {
-                 user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Accounting")));

-                 user.AttemptsTo(Select.ByText(itemCreator.FinancialEntityDropDownList, CreateProductData.FinancialEntity ?? "Default"));

+                 //user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.TaxInfo.TaxableCheckBox, CreateProductData.IsTaxable));

+                 user.AttemptsTo(Click.On(itemCreator.TaxInfo.TaxableCheckBox));

- 

-                 if (CreateProductData.IsTaxable)

-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.TaxableCheckBox));

- 

-                 if (CreateProductData.IsGstHstEnabled)

-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.CheckBoxGstHst));

- 

-                 if (CreateProductData.IsPstEnabled)

-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.CheckBoxPst));

- 

-                 if (!string.IsNullOrEmpty(CreateProductData.TaxCode))
=                 user.AttemptsTo(SetWhenProvided.DropDown(itemCreator.TaxInfo.TaxAuthorityDropDown, CreateProductData.TaxCode));
- 

+             }
=             user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.IncursHandlingCheckBox, CreateProductData.IncursHandling));
=             user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.InventoryItemCheckBox, CreateProductData.InventoryItem));
-                 user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Summary")));

-             }
= 
-             context.UpsertData("ItemCode", ProductContext.Code);

-         }

+             user.AttemptsTo(Click.On(AddProductPage.ItemCreator.TabStripControl.GetTab("Summary")));

+             user.AttemptsTo(ClickCommandButton.Save());
= 
-         /// <summary>

+             user.AsksFor(Text.Of(ItemPage.GeneralProductDisplay.DynamicProductDisplay.ProductTitle)).Should().Be(itemName);

-         /// Adds items to the product based on what the user provides

-         /// </summary>

-         /// <param name="user"></param>

-         public void EntryItemsToCollection(IActor user)

-         {

-             var itemDialog = AddProductPage.AddItemDialog;

-             var itemCreator = AddProductPage.ItemCreator;

-             var row = 1;
= 
-             foreach (var productItem in ProductItemsData)

+             context.UpsertData("ItemCode", itemCode);

-             {

-                 user.AttemptsTo(Click.On(itemCreator.AddLinkButton));

-                 user.AttemptsTo(SwitchFrame.ToGenericWindow());

- 

-                 var parameterName = string.IsNullOrEmpty(productItem.Title)

-                     ? "Product Code Starts With"

-                     : "Product Title";
= 
-                 var searchProductTextBox = ((QueryTextParameter)itemDialog.Lister.GetParameter("Add Item", parameterName)).Textbox;

-                 var searchProductText = string.IsNullOrEmpty(productItem.Title) ? productItem.Code : productItem.Title;

- 

-                 user.AttemptsTo(SendKeys.To(searchProductTextBox, searchProductText).ThenHitEnter());

-                 user.WaitsUntil(itemDialog.Lister.GetRowCount(), IsEqualTo.Value(1));

-                 user.AttemptsTo(Click.On(itemDialog.Lister.FirstCellLink));

-                 user.AttemptsTo(SwitchFrame.ToDefaultFrame());

- 

-                 user.WaitsUntil(Text.Of(itemCreator.CollectionItemsGrid.Cells(row)), IsNotEqualTo.Value("There are no set items."));

-                 if (productItem.Quantity > 1)

-                 {

-                     user.AttemptsTo(SendKeys.To(itemCreator.CollectionItemsGrid.Cell(row, 4, tableSection: "tbody", postXPath: "//input"),

-                         productItem.Quantity.ToString()));
=         }
= 
-                 row++;

-             }

-         }

- 

-         /// <summary>

-         /// Saves the product

-         /// </summary>

-         /// <param name="user"></param>

-         public void SaveProductData(IActor user)

-         {

-             user.AttemptsTo(ClickCommandButton.Save());

- 

-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;

-             user.WaitsUntil(Text.Of(productDisplay.ProductTitle), IsEqualTo.Value(ProductContext.Name));

-             if (user.AsksFor(Existence.Of(productDisplay.InventoryDetailsButton)))

-             {

-                 user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));

-                 ProductContext.LastCost = user.WaitsUntil(Text.Of(productDisplay.TotalCostValueLabel), IsNotEqualTo.Value(""));

-                 ProductContext.ContainsInventory = true;

-             }

-         }

- 
=         #endregion
- 
=         public enum ProductTypeEnum
=         {
-             SimpleItem,

+             SimpleItem

-             CollectionOfItems,


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Events\CreateEvent.cs
=             //TODO Add other verification points to make sure event was created correctly
=             user.AsksFor(Text.Of(EventDashboardPage.EventDisplay.TitleText)).Should().Contain(context.GetData<string>("Event Name"));
-             if (context.IsV10)

+             if(context.IsV10)
=         {
=             //TODO add Calendar Start/End time and date options
+             string randNumber = TestHelper.GenerateRandomString(5);
=             if (context.IsV10)
-             {

-                 var eventCode = TestHelper.GenerateRandomString(5);

-                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.Code, eventCode));

+                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.Code, randNumber));

+             user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventName, "Copy of " + CreateEventData.EventName).UsingClearMethod());

+             context.UpsertData("Event Name", "Copy of " + CreateEventData.EventName);

-                 context.UpsertData("ItemCode", eventCode);

-             }

- 

-             var eventName = $"Copy of {CreateEventData.EventName}";

-             user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventName, eventName).UsingClearMethod());

-             context.UpsertData("Event Name", eventName);
=             user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.TextNotes, CreateEventData.Notes).Clear());
=             user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.TextNotes, CreateEventData.Notes).Clear());
-             if (CreateEventData.HasPricingData)

-             {

-                 user.AttemptsTo(Click.On(EditEventPage.EventEdit.Tabs.GetTab("Pricing")));

-                 user.WaitsUntil(UserMessageState.HasAny().WithMessage("The event has been saved"), IsEqualTo.True());

-                 if (CreateEventData.TaxByAddress)

-                     user.AttemptsTo(Check.On(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxByAddressCheckBox));

- 

-                 if (!string.IsNullOrEmpty(CreateEventData.TaxCode))

-                     user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxAuthorityDropDown, CreateEventData.TaxCode));

- 

-                 if (!string.IsNullOrEmpty(CreateEventData.VatExceptionRule))

-                     user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.VatRuleSetDropDown, CreateEventData.VatExceptionRule));

- 

-                 if (CreateEventData.HasRegistrationOptionData)

-                 {

-                     CreateEventFunction(user, EventDashboardPage.FunctionEdit.AddNewRegistrationOptionLink,

-                         CreateEventData.RegistrationOptionDefaultRegularPrice,

-                         CreateEventData.IsRegistrationOptionTaxable,

-                         CreateEventData.IsRegistrationOptionPstEnabled,

-                         CreateEventData.IsRegistrationOptionGstHstEnabled,

-                         CreateEventData.RegistrationOptionTaxCode);

-                 }

-             }

- 
=             user.AttemptsTo(ClickCommandButton.SaveAndClose());
- 

-             if (CreateEventData.HasProgramItemData)

-             {

-                 CreateEventFunction(user, EventDashboardPage.EventProgramDisplay.AddNewProgramItemLink,

-                     CreateEventData.ProgramItemDefaultRegularPrice,

-                     CreateEventData.IsProgramItemTaxable,

-                     CreateEventData.IsProgramItemPstEnabled,

-                     CreateEventData.IsProgramItemGstHstEnabled,

-                     CreateEventData.ProgramItemTaxCode);

-             }

-         }

- 

-         /// <summary>

-         /// Creates event function such as program item or registration option

-         /// </summary>

-         /// <param name="user"></param>

-         /// <param name="addFunctionLink"></param>

-         /// <param name="defaultRegularPrice"></param>

-         /// <param name="isTaxable"></param>

-         /// <param name="isPstEnabled"></param>

-         /// <param name="isGstHstEnabled"></param>

-         /// <param name="taxCode"></param>

-         private void CreateEventFunction(IActor user, IWebLocator addFunctionLink, double defaultRegularPrice, bool isTaxable, bool isPstEnabled, bool isGstHstEnabled, string taxCode)

-         {

-             user.AttemptsTo(Click.On(addFunctionLink));

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

-             user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextCode, TestHelper.GenerateRandomString(5)));

-             user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextName, TestHelper.GenerateRandomString(5)));

- 

-             if (defaultRegularPrice != 0)

-             {

-                 user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Pricing")));

-                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventFunctionPricing.TextPriceStandardRegular, defaultRegularPrice.ToString()));

-             }

- 

-             if (isTaxable || isPstEnabled || isGstHstEnabled || !string.IsNullOrEmpty(taxCode))

-             {

-                 user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Accounting")));

- 

-                 var taxInfo = EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo;

-                 if (isTaxable)

-                     user.AttemptsTo(Check.On(taxInfo.TaxableCheckBox));

- 

-                 if (isGstHstEnabled)

-                     user.AttemptsTo(Check.On(taxInfo.CheckBoxGstHst));

- 

-                 if (isPstEnabled)

-                     user.AttemptsTo(Check.On(taxInfo.CheckBoxPst));

- 

-                 if (!string.IsNullOrEmpty(taxCode))

-                     user.AttemptsTo(SetWhenProvided.DropDown(taxInfo.TaxAuthorityDropDown, taxCode));

-             }

- 

-             user.AttemptsTo(ClickCommandButton.SaveAndClose());

-             user.WaitsUntil(Appearance.Of(EventDashboardPage.FunctionEdit.TextCode), IsEqualTo.False());

-             user.AttemptsTo(SwitchFrame.ToDefaultFrame());


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Events\RegisterForAnEvent.cs
= 
=         #region Builder Methods
-         public static RegisterForAnEvent ToEvent(EventData eventData) => new(eventData);

+         public static RegisterForAnEvent ToEvent(EventData eventData) => new (eventData);
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
+ 
=             if (EventData.EventCode != null)
=                 user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(EventData.EventCode)));
- 
=             user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegisterButton));
=             if (!string.IsNullOrEmpty(EventData.RegistrationOption))
-                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellAnyElementWithText(EventData.RegistrationOption)));

- 

+                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellInputWithText(EventData.RegistrationOption)));

+             if(EventData.Programs.Count >= 1)

-             if (EventData.AddFirstProgram)

-                 EventData.Programs = new List<string> { user.WaitsUntil(Text.Of(EventDisplayPage.EventProgramDisplay.FirstProgramName), IsNotEqualTo.Value("")) };

- 

-             if (EventData.Programs.Any())
=                 foreach (var program in EventData.Programs)
=                 {
-                     var itemProgram = EventDisplayPage.EventProgramDisplay.AddProgram(program);

-                     user.WaitsUntil(Appearance.Of(itemProgram), IsEqualTo.True());

-                     user.AttemptsTo(Click.On(itemProgram));

- 

+                     if (user.AsksFor(Appearance.Of(EventDisplayPage.EventProgramDisplay.AddProgram(program))))

+                         user.AttemptsTo(Click.On(EventDisplayPage.EventProgramDisplay.AddProgram(program)));

+                     else

+                         throw new ElementNotVisibleException();
=                 }
= 
-             var yesNoQuestion = EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion);

+             user.AttemptsTo(SetWhenProvided.CheckBox(EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion), true));

-             if (user.AsksFor(Existence.Of(yesNoQuestion)))

-                 user.AttemptsTo(Check.On(yesNoQuestion));

- 
=                     user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(eventCode)));
=             else
-                 NavigateToEvent(user, context);

+                 NavigateToEvent(user,context);


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Events\RegisterSomeoneElse.cs
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
-             if (context.IsV10)

-             {
= 
=             user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(context.GetData<string>("Event Code"))));
-             }

+ 
=             context.UpsertData("FullName", EventData.BillTo);
=             if (!string.IsNullOrEmpty(EventData.RegistrationOption))
-                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellAnyElementWithText(EventData.RegistrationOption)));

+                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellInputWithText(EventData.RegistrationOption)));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Finance\Settings\SelectDefaultCountry.cs
=         {
=             user.AttemptsTo(Browse.InStaffSite(ContactGeneralSettingsPage.BaseUrl));
-             user.WaitsUntil(Text.Of(ContactGeneralSettingsPage.PageTitle),IsEqualTo.Value("Contact settings"));

+             user.AsksFor(Text.Of(ContactGeneralSettingsPage.PageTitle)).Should().Be("Contact settings");
=             user.AttemptsTo(Select.ByText(ContactGeneralSettingsPage.DefaultCountry, CountryName));
=             user.AttemptsTo(ClickCommandButton.Save());
-             user.WaitsUntil(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry),IsEqualTo.Value(CountryName));

+             user.AsksFor(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)).Should().Be(CountryName);
=         {
=             user.AttemptsTo(Browse.InStaffSite(ContactGeneralSettingsPage.BaseUrl));
-             user.WaitsUntil(Text.Of(ContactGeneralSettingsPage.PageTitle), IsEqualTo.Value("Contact settings"));

-             user.WaitsUntil(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry), IsEqualTo.Value(CountryName));

+             user.AsksFor(Text.Of(ContactGeneralSettingsPage.PageTitle)).Should().Be("Contact settings");

+             user.AsksFor(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)).Should().Be(CountryName);


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Finance\Settings\SelectDefaultCountryCurrency.cs
=         {
=             user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));
-             user.WaitsUntil(Text.Of(FinanceGeneralSettingsPage.PageTitle),IsEqualTo.Value("Accounting settings"));

+             user.AsksFor(Text.Of(FinanceGeneralSettingsPage.PageTitle)).Should().Be("Accounting settings");
=             {
=                 user.AttemptsTo(Select.ByText(FinanceGeneralSettingsPage.DefaultCountryCurrency, CurrencyType.GetDisplayName()));
+                 if(CurrencyType.ToString()=="Other")

+                 {

+                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox,"CRC").UsingClearMethod());

+                 }
=                 user.AttemptsTo(ClickCommandButton.Save().AndUseJavaScript().AndExpectMessage());
=             }
-             user.WaitsUntil(SelectedOptionText.Of(FinanceGeneralSettingsPage.DefaultCountryCurrency),

+             user.AsksFor(SelectedOptionText.Of(FinanceGeneralSettingsPage.DefaultCountryCurrency)).Should().Be(CurrencyType.GetDisplayName());

-                 IsEqualTo.Value(CurrencyType.GetDisplayName()));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Finance\Settings\SetFinancialEntity.cs
=             //Set Defualt Financial Entity
=             user.AttemptsTo(Browse.InStaffSite(FinancialEntitiesPage.BaseUrl));
-             user.WaitsUntil(Text.Of(FinancialEntitiesPage.PageTitle),IsEqualTo.Value("Financial entities"));

+             user.AsksFor(Text.Of(FinancialEntitiesPage.PageTitle)).Should().Be("Financial entities");
=         {
=             user.AttemptsTo(Browse.InStaffSite(FinancialEntitiesPage.BaseUrl));
-             user.WaitsUntil(Text.Of(FinancialEntitiesPage.PageTitle), IsEqualTo.Value("Financial entities"));

+             user.AsksFor(Text.Of(FinancialEntitiesPage.PageTitle)).Should().Be("Financial entities");
=             user.AsksFor(SelectedState.Of(FinancialEntityCreatorPage.DefaultCheckBox)).Should().BeTrue();
=             user.AttemptsTo(Browse.InStaffSite(ContactGeneralSettingsPage.BaseUrl));
-             user.WaitsUntil(Text.Of(FinancialEntitiesPage.PageTitle), IsEqualTo.Value("Contact settings"));

+             user.AsksFor(Text.Of(ContactGeneralSettingsPage.PageTitle)).Should().Be("Contact settings");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Fundraising\Donate.cs
=             else
=             {
-                 user.AttemptsTo(Click.On(DonateNowPage.DonationCreator.GiftAmount.Label(1)));

+                 user.AttemptsTo(Click.On(DonateNowPage.DonationCreator.GiftAmount.Button(1)));

+                 //Need to wait for the changes to take place
=             }
=            
-             user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.PaymentCreator.CCName, CartData.BillTo));

+ 
=                 user.AttemptsTo(CheckOut.WithCreditCardPayment(CartData).DonationPayment().SkipSubmitOrderButton());
= 
+             user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.PaymentCreator.CCName, CartData.BillTo));
=                         user.AttemptsTo(Click.On(GiveToACausePage.DonationCreator.PaymentOptions.Button(1)));
=                     else
-                         user.AttemptsTo(Click.On(DonateNowPage.RecurringDonationCreator.RecurringDonationOption.Label(1)));

+                         user.AttemptsTo(Click.On(DonateNowPage.RecurringDonationCreator.RecurringDonationOption.Button(1)));
=                         user.AttemptsTo(Click.On(GiveToACausePage.DonationCreator.PaymentOptions.Button(0)));
=                     else
-                         user.AttemptsTo(Click.On(DonateNowPage.RecurringDonationCreator.RecurringDonationOption.Label(0)));

+                         user.AttemptsTo(Click.On(DonateNowPage.RecurringDonationCreator.RecurringDonationOption.Button(0)));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Membership\JoinNow.cs
=         /// (Use static builder methods to construct.)
=         /// </summary>
-         private JoinNow(JoinBillingCyclesType billingCycleType, JoinNowData joinNowData = null)

+         private JoinNow(JoinBillingCyclesType billingCycleType)

+         {

+             BillingCycleType = billingCycleType;

+             AccountPageStaff = new AccountPageStaff();

+             JoinNowPage = new JoinNowPage();

+         }

+ 

+         private JoinNow(JoinBillingCyclesType billingCycleType, JoinNowData joinNowData)
=             JoinNowPage = new JoinNowPage();
=             JoinNowData = joinNowData;
-             JoinBillingCyclesTypesCodes = InitializeJoinBillingCyclesTypesCodes();
=         private JoinNowPage JoinNowPage { get; set; }
=         private JoinNowData JoinNowData { get; set; }
-         private Dictionary<JoinBillingCyclesType, string> JoinBillingCyclesTypesCodes { get; }
=         /// Constructs the Task object with passed Membership types.
=         /// </summary>
-         /// <param name="joinBillingType"></param>
=         /// Constructs the Task object with Chapter Membership fees.
=         /// </summary>
-         /// <param name="joinNowData">JoinNowData is required for this type</param>
=         /// <returns></returns>
=         public static JoinNow WithYoungProfessionalMembership() => new JoinNow(JoinBillingCyclesType.YoungProfessionalMembership);
- 

-         /// <summary>

-         /// Initialization with JoinNowData

-         /// </summary>

-         /// <param name="data"></param>

-         /// <returns></returns>

-         public JoinNow WithJoinNowData(JoinNowData data)

-         {

-             JoinNowData = data;

-             return this;

-         }
=             user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(context.SelectedPartyId)));
=             string memberType;
-             try

-             {

-                 var memberTypeLocator = AccountPageStaff.ContactProfile.ContactStatus.MemberType;

+             if (user.AsksFor(Appearance.Of(AccountPageStaff.ContactProfile.ContactStatus.MemberType)))

+                 memberType = user.AskingFor(Text.Of(AccountPageStaff.ContactProfile.ContactStatus.MemberType));

+             else memberType = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("Type")));

-                 user.WaitsUntil(Appearance.Of(memberTypeLocator), IsEqualTo.True(), timeout: 5);

-                 memberType = user.AsksFor(Text.Of(memberTypeLocator));

-             }

-             catch (WaitingException)

-             {

-                 memberType = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("Type")));

-             }

- 
=             context.UpsertData("FullName", name);
=             if (memberType.Equals("Non Member"))
-             {

-                 if (Site == SitesToBrowse.Mbrr)

-                 {

-                     SelectBillingCycleInMemberSite(user);

-                 }

-                 else
=                 user.AttemptsTo(Click.On(AccountPageStaff.RenewalButton.JoinNowButton));
=                 ClickBillingCycle(user);
-                 }

- 

-                 if (!string.IsNullOrEmpty(JoinNowData?.Chapter))

-                     user.AttemptsTo(SendKeys.To(JoinNowPage.MOO.DynamicProductDisplay.PickList(1, 0), JoinNowData.Chapter).ThenHitEnter());

- 

-                 if (JoinNowData?.ItemNames?.Any() ?? false)

-                     SetupItems(user);

- 
=                     user.AttemptsTo(SetWhenProvided.TextBox(JoinNowPage.MOO.DynamicProductDisplay.PickList(0, 0), JoinNowData.ProductCode + Keys.Enter));
=                     // wait until page unit amounts have been updated before verifying it
-                     bool finishedUpdating = false;

-                     do

+                     // jkh 

+                     for (var i=0; i<10; i++)
=                     {
-                         if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) > 0) finishedUpdating = true;

-                     } while (finishedUpdating == false);

+                         if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) > 0) break;

+                         if (i==10) {

+                             throw new Exception("Unit price is 0");

+                         }

+                         System.Threading.Thread.Sleep(1000);

+                     };
=                 user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));
=                 // verify success message - added both messages so test is rerunable
-                 user.WaitsUntil(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel), IsNotEqualTo.Value(""))

-                     .Should().BeOneOf("This item has been added to your cart", "Your cart has been updated");

+                 string message = user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel));

+                 if (message!="This item has been added to your cart" && message!="Your cart has been updated") throw new InvalidElementStateException();

- 
=                     user.AttemptsTo(Click.On(JoinBillingCycles.YoungProfessionalMembership));
=                     break;
-             }

-         }

- 

-         /// <summary>

-         /// Navigate billing cycle on Member site

-         /// </summary>

-         /// <param name="user"></param>

-         private void SelectBillingCycleInMemberSite(IActor user)

-         {

-             user.AttemptsTo(Browse.InMemberSite(JoinNowPage.GetUrl(JoinBillingCyclesTypesCodes[BillingCycleType])));

-         }

- 

-         /// <summary>

-         /// Setup Items when place your order

-         /// </summary>

-         /// <param name="user"></param>

-         private void SetupItems(IActor user)

-         {

-             var dynamicProductDisplay = JoinNowPage.MOO.DynamicProductDisplay;

- 

-             foreach (var item in JoinNowData.ItemNames)

-             {

-                 user.AttemptsTo(Check.On(dynamicProductDisplay.GetItemCheckBoxByText(item)));

-                 if (!string.IsNullOrEmpty(JoinNowData.AmountTo))

-                     user.AttemptsTo(SendKeys.To(dynamicProductDisplay.GetAmountTextBoxByText(item), JoinNowData.AmountTo));
=             }
-         }

- 

-         /// <summary>

-         /// Initialize ProductCodes for JoinBillingCyclesTypes

-         /// </summary>

-         private static Dictionary<JoinBillingCyclesType, string> InitializeJoinBillingCyclesTypesCodes()

-         {

-             return new Dictionary<JoinBillingCyclesType, string>

-             {

-                 { JoinBillingCyclesType.RegularMembershipFees, "REGULAR_MEMBERSHIP_FEES" },

-                 { JoinBillingCyclesType.NonMemberSubscriptions, "Non-Member_Subscriptions" },

-             };
=             RetiredMembers,
=             StudentMemberJoin,
-             YoungProfessionalMembership,

+             YoungProfessionalMembership

-             NonMemberSubscriptions,


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\Shop\CheckOut.cs
=             Cart = new Cart();
=             DonateNowPage = new DonateNowPage();
-             PayPalCheckOutPage = new PayPalCheckOutPage();
=         {
=             PaymentMethodType = paymentMethodType;
-             CartData = cartData;

-             Cart = new Cart();

-             DonateNowPage = new DonateNowPage();

-             PayPalCheckOutPage = new PayPalCheckOutPage();

-             OrderConfirmation = new OrderConfirmation();

-         }

- 

-         private CheckOut(CartData cartData)

-         {

-             PaymentMethodType = (CheckOutPaymentMethodType)Enum.Parse(

-                 typeof(CheckOutPaymentMethodType),

-                 cartData.PaymentMethodType,

-                 ignoreCase: true);
=             Cart = new Cart();
=             DonateNowPage = new DonateNowPage();
-             PayPalCheckOutPage = new PayPalCheckOutPage();
= 
=         #region Properties
-         private Cart Cart { get; }

-         private DonateNowPage DonateNowPage { get; }

-         private PayPalCheckOutPage PayPalCheckOutPage { get; }

-         private CartData CartData { get; }

+         private Cart Cart { get; set; }

+         private DonateNowPage DonateNowPage { get; set; }

+         private CartData CartData { get; set; }

+         private OrderConfirmation OrderConfirmation { get; set; }

-         private OrderConfirmation OrderConfirmation { get; }

-         private CheckOutPaymentMethodType PaymentMethodType { get; }
= 
-         private const string _payPalUserEmail = "USA_Pers@advsol.com";

+         private CheckOutPaymentMethodType PaymentMethodType { get; set; }

-         private const string _payPalUserPassword = "qaperson123";

- 
=         /// <returns></returns>
=         public static CheckOut WithFoundationCheckingAccountPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.FoundationCheckingAccount, cartData);
- 

-         /// <summary>

-         /// Proceeds to pay for the items with PayPal button

-         /// </summary>

-         /// <returns></returns>

-         public static CheckOut WithPayPal() => new CheckOut(CheckOutPaymentMethodType.PayPal).SkipSubmitOrderButton();

- 

-         /// <summary>

-         /// Proceeds to submit the zero dollar order without providing a payment

-         /// </summary>

-         /// <returns></returns>

-         public static CheckOut WithoutPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.WithoutPayment, cartData);
= 
=         /// <summary>
-         /// Proceeds and parses the payment type from the CartData in order to use the correct checkout logic.

-         /// </summary>

-         /// <returns></returns>

-         internal static CheckOut WithPaymentMethodType(CartData cartData) => new CheckOut(cartData);

- 

-         /// <summary>
=             if (!IsDonateNowPayment)
=                 user.AttemptsTo(Browse.InImis(Cart.BaseUrl));
- 

-             if (!string.IsNullOrEmpty(CartData?.PromoCode))

-             {

-                 user.AttemptsTo(SendKeys.To(Cart.PromotionManagerDisplay.PromotionalCode, CartData.PromoCode));

-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(Cart.PromotionManagerDisplay.ApplyPromotionalCodeButton));

-             }

- 

-             if (CartData?.IsPrepayment ?? false)

-                 user.AttemptsTo(Check.On(Cart.PaymentDetails.PrepaymentCheckBox));

-             
=             if (!SkipSubmittingOrder)
=             {
+                 user.WaitsUntil(Appearance.Of(Cart.SubmitOrderButtonLink.SubmitCartOrderButton), IsEqualTo.True());
=         {
=             PaymentCreator paymentCreator = IsDonateNowPayment ? DonateNowPage.PaymentCreator : Cart.PaymentDetails;
-             user.AttemptsTo(Waiting.InSeconds(1));
= 
+             user.WaitsUntil(Appearance.Of(paymentCreator.PaymentAmount), IsEqualTo.True());
=                     PayWithCard(user, context, paymentCreator, false);
=                     break;
-                 case CheckOutPaymentMethodType.PayPal:

-                     PayWithPayPal(user, paymentCreator);

-                     break;

-                 case CheckOutPaymentMethodType.WithoutPayment:

-                     return;
=                         else
=                             user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.PurchaseOrder, CartData.PurchaseOrderNumber));
-                     else if (CartData.PaymentMethod.Contains("Check", StringComparison.OrdinalIgnoreCase) || (CartData.PaymentMethodType.Contains("Check", StringComparison.OrdinalIgnoreCase)))

+                     else if (CartData.PaymentMethodType.Contains("Check"))
=                         PayWithChecking(user, context, paymentCreator);
-                     else if (CartData.PaymentMethodType.Contains("Credit", StringComparison.OrdinalIgnoreCase))

+                     else if (CartData.PaymentMethodType.Contains("Credit"))
=         public void PayWithChecking(IActor user, IAsiWebContext context, PaymentCreator paymentCreator)
=         {
-             if (context.IsV10)

+             if(context.IsV10)
=             else
=                 user.AttemptsTo(Select.ByText(paymentCreator.PaymentMethodDropDown, "Check"));
+             user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, TestHelper.GenerateRandomString(5)));
=             user.AttemptsTo(SetWhenProvided.TextBox(Cart.PaymentDetails.PaymentAmount, CartData?.PaymentAmount));
-             user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, TestHelper.GenerateRandomString(5)));
=                 else
=                     user.AttemptsTo(SwitchFrame.ToFrameByXpath("//iFrame[contains(@name,'iFrame-PayCentral')]"));
+                 
=             }
= 
-             if (!CartData.PostalCode.IsNullOrEmpty() && creditCard)

+             if (!(CartData.PostalCode is {Length:>0}) && creditCard)

-                 if (user.AsksFor(Appearance.Of(paymentCreator.CCPostalCode)))
= 
=             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
-         }

+             user.AttemptsTo(SetWhenProvided.TextBox(Cart.PaymentDetails.CardHolderName, CartData.BillTo).Clear());

- 

-         /// <summary>

-         /// Pays with PayPal

-         /// </summary>

-         /// <param name="user">Screenplay user</param>

-         /// <param name="paymentCreator">Payment creator page</param>

-         public void PayWithPayPal(IActor user, PaymentCreator paymentCreator)

-         {

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(paymentCreator.CheckoutWithPayPalButton));

- 

-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.EmailInput), IsEqualTo.True());

-             user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.EmailInput, _payPalUserEmail));

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.NextButton));

- 

-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.PasswordInput), IsEqualTo.True());

-             user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.PasswordInput, _payPalUserPassword));

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.LoginButton));

- 

-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.CompletePurchaseButton), IsEqualTo.True());

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.CompletePurchaseButton));
=             // confirm details from saved context data
=             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.OrderDate)).Should().Be(orderDate);
-             if (string.IsNullOrEmpty(context.GetData<string>("FullName")))

+             if(string.IsNullOrEmpty(context.GetData<string>("FullName")))
=             if (string.IsNullOrEmpty(context.GetData<string>("GrandTotal")))
=                 user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be(context.GetData<string>("GrandTotal"));
+ 
=             InKind,
=             CreditCard,
-             DebitCard,

+             DebitCard

-             PayPal,

-             WithoutPayment,


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\System\ManageLicense.cs
=         public static ManageLicense CheckLicensedProductName(string licenseName) => new ManageLicense(LicenseActions.CheckLicensedProductName, licenseName);
=         public static ManageLicense ResetLicense() => new ManageLicense(LicenseActions.UpdateAndSync, "reset", "anything");
-         //enum being used for the switch case
=                     break;
=                 case LicenseActions.CheckLicenseName:
-                     user.WaitsUntil(Text.Of(AboutiMIS.LicensedTo), IsEqualTo.Value(LicenseName));

+                     user.AsksFor(Text.Of(AboutiMIS.LicensedTo)).Should().Be(LicenseName);
=                 case LicenseActions.CheckLicensedProductName:
=                     var item = context.IsV10 ? 3 : 1;
- 
=         private void UpdateAndSync(IActor user, IAsiWebContext context)
=         {
-             switch (LicenseKey.ToLower())

+             switch(LicenseKey.ToLower())
=                     LicenseKey = context.GetData<string>("licenseKey");
=                     break;
-                 default:

-                     LicenseKey = context.GetData<string>("licenseKey");

-                     break;
= 
=             user.AttemptsTo(Click.On(AboutiMIS.UpdateClientKeyLink));
-             user.WaitsUntil(Appearance.Of(AboutiMIS.ClientKey), IsEqualTo.True());

-             user.Logger.Info($"License Key '{LicenseKey}'");
=             user.AttemptsTo(SendKeys.To(AboutiMIS.ClientKey, LicenseKey));
-             user.WaitsUntil(Appearance.Of(AboutiMIS.ClientKey), IsEqualTo.True());
=             user.AttemptsTo(SendKeys.To(AboutiMIS.AccessCode, AccessCode));
=             user.AttemptsTo(Click.On(AboutiMIS.SaveAndSyncButton));
-             user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("The license sync was successful."));

-             user.AttemptsTo(Waiting.InMilliSeconds(500));

- 

+             var first = user.AsksFor(UserMessageContents.First());

+             if (!first.Equals("The license sync was successful."))

+                 throw new Exception("Could not resync license.");

+             else

+                 return;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Interactions\User\SignIn.cs
=             AccountArea = new AccountArea("AccountArea");
=             Random = new Random();
-             LicenseServerPage = new LicenseServerPage();
=         private Random Random { get; set; }
=         private OBOToggleDialog OBOToggleDialog { get; set; }
-         private LicenseServerPage LicenseServerPage { get; set; }
=         public static SignIn WithUserID(string userId) => new SignIn(LogInType.UserId, userId);
=         public static SignIn WithUserRole(string userRole) => new SignIn(LogInType.UserRole, userRole);
-         public static SignIn ToLicenseServer(string userRole ="License Administrator") => new SignIn(LogInType.UserRole, userRole);
=         {
=             OBOToggleDialog = new OBOToggleDialog(context);
-             if(LogInTypeValue.Equals(LogInType.UserRole))

-                 context.SetContextByRole(Site.ToString(), UserNameValue);

-             else

+             context.Website = Site.ToString();

+             context.UserName = LogInTypeValue.Equals(LogInType.UserRole) ? SelectUser() : UserNameValue;

+             Password = "demo123";

-                 context.SetContextByName(Site.ToString(), UserNameValue);

- 

-             if(UserNameValue != "License Administrator") 

-             {
=             {
=                 user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInUserName, context.UserName));
-                     user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInPassword, context.Password));

+                 user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInPassword, Password));
=             {
=                 user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInUserName, context.UserName));
-                     user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInPassword, context.Password));

+                 user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInPassword, Password));
=                 user.AttemptsTo(Browse.InImis(PublicSignInPage.BaseUrl));
=                 user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInUserName, context.UserName));
-                     user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInPassword, context.Password));

+                 user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInPassword, Password));
=             }
=             user.AttemptsTo(ClickCommandButton.Submit());
-                 user.AttemptsTo(Waiting.ForPageReload()); // Wait for iMIS to fully authenticate
=                 user.WaitsUntil(Appearance.Of(OBOToggleDialog.SelectAQuery.FirstCell), IsEqualTo.True());
=                 user.AttemptsTo(Click.On(OBOToggleDialog.SelectAQuery.FirstCellLink));
-                     user.WaitsUntil(Appearance.Of(AccountArea.PartyName), IsEqualTo.True());
=                 AccountName.Should().Contain(OBOFirstName);
=                 AccountName.Should().Contain(OBOLastName);
-                     context.OnBehalfName = AccountName;

+                 context.UpsertData("OBOFullName", AccountName);     
=             }
=         }
-             //condition to access license server site. "License Administrator" role value is provided in feature file and saved in Users.json

-             else

+ 

+ 

+         public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
-                 user.AttemptsTo(Browse.ToUrl(context.LicenseUrl.ToString()));

+             user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Be(LogInTypeValue.ToString());

-                 user.AttemptsTo(SendKeys.To(LicenseServerPage.User, context.UserName));

-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));

-                 user.AttemptsTo(SendKeys.To(LicenseServerPage.Password, context.Password));

-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));

-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));

-             }
=         }
= 
-         public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)

+         private string SelectUser()
=         {        
-             user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Be(LogInTypeValue.ToString());

+             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");

+             var userSelection = userList.Where(t => t.Role.Equals(UserNameValue));

+             int userCount = userSelection.Count();

+             var user = userSelection.ElementAt(Random.Next(userSelection.Count()));

+             return user.UserName;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\AccountArea.cs
=         {
=             OBOControlPanel = new ContactProxyPanel("OBOControlPanel");
-             BatchSelector = new BatchSelector("BatchSelectorDisplayPanel");
= 
=         public ContactProxyPanel OBOControlPanel { get; set; }
-         public BatchSelector BatchSelector { get; }
=         public IWebLocator OBOToggle => LocatorByXPath("OBOToggleLI", "li", "id", "//a[contains(@id,'OBOToggle')]");
=         public IWebLocator BatchToggle => LocatorByXPath("BatchToggleLI", "li", "id", "//a[contains(@id,'BatchToggle')]");
-         public IWebLocator BatchSelectorDropdown => LocatorByXPath("BatchSelectVisibilityPanel", "div");

-         public IWebLocator OverrideTransactionDateWrapper => LocatorByXPath("DateViewInputWrapper", "div");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\DisplayIPartBase.cs
=             LocatorByXPath(GetId(elementId), tag, attribute, postXPath);
= 
+         public IWebLocator GetLocatorByIdWithoutName(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>

+             LocatorByXPath(elementId, tag, attribute, postXPath);

+ 
=             return $"{Name}_{elementId}";
=         }
- 

-         public IWebLocator PartialLinkText(string linkName) =>

-             WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Advertising\Settings\Component\MediaAsset\RateCardDetailsSetting.cs
=         public static IWebLocator AdSizeSelect { get => LocatorByXPath("AdSizeValue", "ng-select", "formcontrolname"); }
=         public static IWebLocator FrequencySelect { get => LocatorByXPath("FrequencyValue", "ng-select", "formcontrolname"); }
-         public static IWebLocator CreateMatrix { get => LocatorByXPath("btnRateCardDetails", "button"); }

-         public static IWebLocator Save { get => LocatorByTextXPath(" Save ", "button", true); }

+         public static IWebLocator CreateRateCardDetailsMatrix { get => LocatorByTextXPath(" Create Rate Card Details Matrix", "button", true); }

+         public static IWebLocator AddRateInRateCardDetailsMatrix { get => LocatorByTextXPath("Add Rate Card Details", "button", true); }

+         public static IWebLocator EditRateInRateCardDetailsMatrix { get => LocatorByTextXPath("Edit Rate Card Details", "button", true); }
=         public static IWebLocator AdSizeClearAllIcon { get => LocatorByXPath("inventoryDetailsForm", "form", "name", "//ng-select[contains(@formcontrolname,'SelectedIssueDateValue')]//span[contains(@title,'Clear all')]"); }
=         public static IWebLocator FrequencyClearAllIcon { get => LocatorByXPath("inventoryDetailsForm", "form", "name", "//ng-select[contains(@formcontrolname,'SelectedAdSizeValue')]//span[contains(@title,'Clear all')]"); }
-         public static IWebLocator ContentPanel { get => LocatorByXPath("ctl01_ContentPanel"); }

-         public static IWebLocator DeletePopUpDialog { get => LocatorByXPath("modal-dialog center-popup", "div", "class"); }

-         public static IWebLocator DeletePopUpDeleteOption { get => LocatorByTextXPath("Delete", "button", true); }

- 

-         public static IWebLocator GetRemovedIconWithValue(string value)

-          => LocatorForXpath("//span[contains(text(),'" + value + "')]//parent::div//span[contains(@class,'ng-value-icon')]");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\CartChargesDisplay.cs
=         public IWebLocator InvoiceTotal { get => GetLocatorById("TxtInvoiceTotal"); }
=         public IWebLocator TaxAmountTotal { get => GetLocatorById("TxtTaxAmountTotal"); }
-         public IWebLocator PstTaxAmount => GetLocatorById("1");

-         public IWebLocator GstTaxAmount => GetLocatorById("2");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\DataVaultLiveDisplay.cs
=         }
= 
-         public BusinessCalendar2 SearchDateFrom { get; set; }

-         public BusinessCalendar2 SearchDateTo { get; set; }

-         public BusinessDataGrid DataVaultLiveGrid { get; set; }

+         BusinessCalendar2 SearchDateFrom { get; set; }

+         BusinessCalendar2 SearchDateTo { get; set; }

+         BusinessDataGrid DataVaultLiveGrid { get; set; }
=         public IWebLocator SearchAmountFrom => LocatorByXPath("SearchAmountFrom");
=         public IWebLocator SearchAmountTo => LocatorByXPath("SearchAmountTo");
-         public IWebLocator SearchButton => LocatorByXPath("_SearchButton");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\OrderConfirmationDisplay.cs
=         public IWebLocator HandlingAmount { get => GetLocatorById("TxtHandlingAmount"); }
=         public IWebLocator TaxAmountTotal { get => GetLocatorById("TxtTaxAmountTotal"); }
-         public IWebLocator PstTaxAmount => GetLocatorById("1");

-         public IWebLocator GstTaxAmount => GetLocatorById("2");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\OrderDetailsHeader.cs
=     public class OrderDetailsHeader : DisplayIPartBase 
=     {
-         public OrderDetailsHeader(string name) : base(name) { }

+         public OrderDetailsHeader(string name) : base(name) {}
=         public OrderDetailsHeader() : base("New OrderDetailsHeaderCommon") { }
- 
=         public IWebLocator PrintButton => LocatorByXPath("PrintButton");
-         public IWebLocator ActionButton => GetLocatorById("ActionButtonDiv", postXPath: "/div/button");
= 
=         #region Label
- 

-         public IWebLocator HeaderLabel => GetLocatorById("HeaderLabel");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\PaymentCreator.cs
=         public IWebLocator CCExpiryMonthDropDown { get => LocatorByXPath("CCExpiryMonthDropDown", "select"); }
=         public IWebLocator CCExpiryYearDropDown { get => LocatorByXPath("CCExpiryYearDropDown", "select"); }
-         public IWebLocator PrepaymentCheckBox => GetLocatorById("PrepaymentCheckBox");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\PromotionManager.cs
=         public PromotionManager() : base("New PromotionManagerCommon") { }
= 
-         public IWebLocator RemovePromotionalCodeLink => GetLocatorById("RemovePromotionalCode");

-         public IWebLocator ApplyPromotionalCodeButton => GetLocatorById("ApplyPromotionalCode");

-         public IWebLocator PromotionalCode => GetLocatorById("PromotionalCode", "input");

+         public IWebLocator RemovePromotionalCodeLink => LocatorForXpath("RemovePromotionalCode");

+         public IWebLocator ApplyPromotionalCodeButton => LocatorForXpath("ApplyPromotionalCode");

+         public IWebLocator PromotionalCode => LocatorForXpath("PromotionalCode", "input");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\RefundDisplay.cs
= namespace Asi.Selenium.Web.iParts.Commerce
= {
-     public class RefundDisplay : DisplayIPartBase

+     public class RefundDisplay: DisplayIPartBase
=     {
-         public RefundDisplay(string name) : base(name)

+         public RefundDisplay(string name): base(name)
=         {
-             AdjustmentDetailsGrid = new BusinessDataGrid("AdjustmentDetailsGrid");

-         }
= 
-         public BusinessDataGrid AdjustmentDetailsGrid { get; }

+         }
=         public IWebLocator AdjustmentType => GetLocatorById("AdjustmentTypeList");
-         public IWebLocator PaymentMethod => GetLocatorById("RefundPaymentMethodList", "select");

- 

-         public IWebLocator GetAmountToRefundLabel(string description) =>

-             AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");

- 

-         public IWebLocator GetAmountTextbox(string description) =>

-             AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//span[contains(@id,'AmountAppliedLabel')]");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\GeneralProductDisplay\DynamicProductDisplay.cs
=         public ListView ChildMooListView;
=         public BackLinkControl BackLink;
- 

-         public IWebLocator GetItemCheckBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'SelectCheckBox')]");

-         public IWebLocator GetAmountTextBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");
=         public IWebLocator OverridePricing(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "OverridePricing");
=         public IWebLocator AmountLabel(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "AmountLabel");
-         public IWebLocator AmountTextBox(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "AmountTextBox");
=         public IWebLocator SubmitAdjustmentButton => LocatorByXPath("SubmitAdjustmentButton");
=         public BusinessCalendar2 TermStartDate => new BusinessCalendar2("TermStartDate");
-         public IWebLocator TermStartDateLabel => LocatorByXPath("TermStartDateLabel");

+         public BusinessCalendar2 TermEndDate => new BusinessCalendar2("TermEndDate"); 

-         public IWebLocator TermEndDate => LocatorByXPath("TermEndDate");
=         public IWebLocator TermLength => LocatorByXPath("TermLengthTextBox");
=         public IWebLocator SubtotalValueLabel { get => GetLocatorById("SubtotalValueLabel"); }
-         public IWebLocator AddToCartButton { get => GetLocatorById("AddToCartButton"); }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\GeneralProductDisplay\ProductDisplay.cs
=         public IWebLocator CartLink => LocatorByXPath("CartLink");
=         public IWebLocator ProductImage => LocatorByXPath("ProductImage");
-         public IWebLocator ProductTitle => LocatorByXPath("ProductTitle");

+         public IWebLocator ProductTitle => LocatorByXPath("ProductTitleHeader");
=         public IWebLocator LastReceivedValueLabel => LocatorByXPath("LastReceivedValueLabel");
=         public IWebLocator RefreshButton => LocatorByXPath("RefreshButton");
-         public IWebLocator InventoryDetailsButton => LocatorByXPath("InventoryDetailsSection", attribute: "aria-controls");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\InvoiceDetail\InvoiceLinesTemplate.cs
=         {
=             InvoiceAdjustmentsGrid = new RadGrid("OtherInvoiceAdjustmentsGrid");
-             InvoiceLinesGrid = new RadGrid("InvoiceLinesGrid");
=             PaymentsGrid = new RadGrid("PaymentsGrid");
-             TaxGrid = new RadGrid("TaxLinesDataGrid");
=         }
= 
-         public IWebLocator TotalChargesValue => GetLocatorById("TotalChargesValue");

-         public IWebLocator AdjustmentsValue => GetLocatorById("AdjustmentsValue");

-         public IWebLocator AdjustedTotalChargesValue => GetLocatorById("AdjustedTotalChargesValue");

-         public IWebLocator Tax => GetLocatorById("TaxTotalValue");

-         public IWebLocator PaymentsValue => GetLocatorById("PaymentsValue");

+         public IWebLocator TotalChargesValue { get => GetLocatorById("TotalChargesValue"); }

+         public IWebLocator AdjustmentsValue { get => GetLocatorById("AdjustmentsValue"); }

+         public IWebLocator AdjustedTotalChargesValue { get => GetLocatorById("AdjustedTotalChargesValue"); }

+         public IWebLocator PaymentsValue { get => GetLocatorById("PaymentsValue"); }

+         public IWebLocator RemainingBalanceValue { get => GetLocatorById("RemainingBalanceValue"); }

-         public IWebLocator RemainingBalanceValue => GetLocatorById("RemainingBalanceValue");
=         public IWebLocator Adjustments => LocatorByXPath("AdjustmentsValue");
=         
-         public RadGrid InvoiceAdjustmentsGrid { get; }

-         public RadGrid InvoiceLinesGrid { get; }

+         public RadGrid InvoiceAdjustmentsGrid { get; set; }

+         public RadGrid PaymentsGrid { get; set; }   

-         public RadGrid PaymentsGrid { get; }

-         public RadGrid TaxGrid { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\ItemCreator\ItemCreator.cs
=             Adjustments = new GeneralLedgerAccount("Adjustments");
=             TaxInfo = new ItemCreatorTaxInfo("TaxInfo");
-             TxtDescription = new BusinessHtmlEditor("txtDescription");
=         public GeneralLedgerAccount Adjustments { get; set; }
=         public ItemCreatorTaxInfo TaxInfo { get; set; }
-         public BusinessHtmlEditor TxtDescription { get; private set; }

+ 
= 
=         public IWebLocator TypeDescriptionTextBox => GetLocatorById("TypeDescriptionTextBox");
-         public IWebLocator ProductTypeDropDown => GetLocatorById("ProductTypeDropDown", "select");

-         public IWebLocator ProductClassDropDown => GetLocatorById("ProductClassDropDown", "select");

+         public IWebLocator ProductTypeDropDown => GetLocatorById("ProductTypeDropDown","select");

+         public IWebLocator ProductClassDropDown => GetLocatorById("ProductClassDropDown","select");
=         public IWebLocator TxtMinimumAllowed => GetLocatorById("txtMinimumAllowed");
=         public IWebLocator TxtMaximumAllowed => GetLocatorById("txtMaximumAllowed");
-         public IWebLocator ProductStatusDropDown => GetLocatorById("ProductStatusDropDown", "select");

+         public IWebLocator ProductStatusDropDown => GetLocatorById("ProductStatusDropDown","select");
= 
=         #region GridUpdatePanel
- 

+         public IWebLocator AddLinkButton => GetLocatorById("AddLinkButton");

-         public IWebLocator AddLinkButton => CollectionItemsGrid.Cell(1, 1, tableSection: "thead", postXPath: "//a[contains(@id,'AddLinkButton')]");
= 
=         public IWebLocator PayPriorityTextBox => GetLocatorById("PayPriorityTextBox");
+         public IWebLocator TxtDescription => GetLocatorById("txtDescription");     


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\OpenInvoiceReversal\ReversalLog.cs
=         {
=             ReversalLogGrid = new Lister("ReversalLogGrid");
-             Invoices = new Lister("ReversalLogDetailGrid");
=         }
= 
-         public Lister ReversalLogGrid { get; }

+         public Lister ReversalLogGrid;

-         public Lister Invoices { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Commerce\ThreeDSPaymentModal\ThreeDSPaymentModal.cs
=         public IWebLocator ThreeDSChallengeWindow { get => LocatorByXPath("PayCentral-overlay", "div"); }
=         public IWebLocator PayCentralOKButton { get => LocatorByXPath("ok", "input"); }
-         public IWebLocator CompleteAuthenticationButton { get => LocatorByXPath("test-source-authorize-3ds", "button"); }

-         public IWebLocator FailAuthenticationButton { get => LocatorByXPath("test-source-fail-3ds", "button"); }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Common\PanelEditor.cs
=         public IWebLocator Select(string boName, string propertyName) => GetLocatorById($"{boName}___{propertyName}","select"); 
=         public IWebLocator CheckBox(string boName, string propertyName, int placement) => GetLocatorById($"{boName}___{propertyName}_{placement}"); 
-         public IWebLocator PanelDescription { get => GetLocatorById("_Description", "div", "id", "//div"); }

+ 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Common\FormBuilder\FormsDisplay.cs
=         public IWebLocator TextInputField(string id) => LocatorByXPath($"FB_TextBox_{id}", "input");
= 
-         public IWebLocator ClientStateTextInputField(string id) => LocatorByXPath($"FB_TextBox_{id}_ClientState", "input");

- 
=         public IWebLocator LabelField(string id) => LocatorByXPath($"FB_Label_{id}", "input");
- 

-         public IWebLocator TextBoxLabelField(string id) => LocatorByXPath($"FB_TextBox_{id}", "label");
= 
=         public IWebLocator AddLinkButton { get => LocatorByXPath("TextButtonM", "a", "class"); }
- 

-         public IWebLocator LabelLocation(string id, string location) => LocatorByXPath($"Section_{id}", "div", postXPath: $"//div[contains(@class,'{location}')]");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Common\FormBuilder\Controls\FormLibrary.cs
=     public class FormLibrary : DisplayIPartBase
=     {
-         public RadTabStrip FormGroupsTabStrip { get; }

+         public RadGrid RadGrid1;

-         public RadGrid RadGrid1 { get; }

-         public IWebLocator GroupNameInput { get => GetLocatorById("tbGroupName", "input"); }

-         public IWebLocator AddGroupButton { get => GetLocatorById("AddGroupButton", "input"); }
=         public IWebLocator FormNameInput { get => GetLocatorDoubleContains("tbFormName", "input"); }
-         public IWebLocator FormGroupCombobox { get => GetLocatorDoubleContains("ComboFormGroup", "input"); }
=             base(name)
=         {
-             FormGroupsTabStrip = CreateTabStrip();
=             base("FormLibrary")
=         {
-             FormGroupsTabStrip = CreateTabStrip();
=             RadGrid1 = new RadGrid("FormLibrary");
-         }

- 

-         private static RadTabStrip CreateTabStrip()

-         {

-             var tabStrip = new RadTabStrip("FormGroups");

-             tabStrip.AddTab("General");

-             tabStrip.AddTab("+");

- 

-             return tabStrip;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Common\FormBuilder\Controls\FormsConfigEdit.cs
=     {
=         public static SmartControl ConfigureFormSelector { get => SmartControl.ComboBox("FormName"); }
-         public static SmartControl NewContactRecordCheckbox { get => SmartControl.CheckBoxSet("FormCreateContact"); }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Common\PanelEditor\PanelEditorConfigEdit.cs
=         public static SmartControl AllowDelete { get => SmartControl.CheckBoxSet("allowDelete"); }
=         public static SmartControl AllowEdit { get => SmartControl.CheckBoxSet("allowEdit"); }
-         public static IWebLocator DescriptionTextArea => LocatorByXPath($"PartDescription_TextArea", "textarea", "id");  


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\ContactManagement\ContactAccountCreator.cs
=         public IWebLocator LogOnLink { get => GetLocatorById("LogOnLink"); }
=         //OpenAuthorizationProviders control missing
-         public IWebLocator CreateAccountTypeIndividual { get => GetLocatorById("CreateAccountType_0");  }

+         public IWebLocator CreateAccountType { get => GetLocatorById("CreateAccountType"); }

-         public IWebLocator CreateAccountTypeOrganization { get => GetLocatorById("CreateAccountType_1"); }
=         public IWebLocator CountryLabel { get => GetLocatorById("LabelCountry"); }
=         public IWebLocator CountrySelect { get => GetLocatorDoubleContains("SelectCountry", "select"); }
-         public IWebLocator InvalidCharacterValidatorWarning => LocatorByXPath("PasswordRegExpValidator");

-         public IWebLocator InvalidCharacterConfirmValidatorWarning => LocatorByXPath("ConfirmPasswordRegExpValidator");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\ContactManagement\PotentialDuplicateListDisplay.cs
=         public IWebLocator ResolveButton => GetLocatorById("ResolveButton");
=         public IWebLocator NotDuplicatesButton => GetLocatorById("NotDuplicatesButton");
-         public IWebLocator RunTaskNowButton => LocatorByXPath("RunTaskNowButton");

-         public IWebLocator CheckBoxScheduleTask => LocatorByXPath("CheckBoxScheduleTask");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\ContactManagement\ContactAddressEditor\ContactAddressEditor.cs
= //Adding another layer to the namespace due to conflicts with ContactMiniProfile
= using Asi.Selenium.Web.Controls.Telerik;
- using Boa.Constrictor.Selenium;

+ 
=         {
=             var tabs = new RadTabStrip("ContactAddress");
-             tabs.AddTab("Address");

+             tabs.AddTab("Address", new RadTab(0, "Address"));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\ContactManagement\ContactMiniProfile\ContactMiniProfile.cs
=         public ContactStatus ContactStatus { get; private set; }
=         public ProceedContactErasureDialog ProceedContactErasureDialog { get; private set; }
-         public IWebLocator EditButton => GetLocatorById("EditButtonPlaceHolder", "div", postXPath: "//a");

+         public IWebLocator EditButton => GetLocatorByIdWithoutName("ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_EditButtonPlaceHolder", "div", "id", postXPath: "/a");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\ContactManagement\ContactMiniProfile\ContactName.cs
=         public IWebLocator ChosenContainer { get => LocatorByXPath("chosen-container chosen-container-multi", "div", "class"); }
=         public IWebLocator Designation { get => LocatorByXPath("chosen-search-input", "input", "class"); }
-         public IWebLocator AddDesignation { get => LocatorByXPath("create-option active-result", "li", "class"); }

- 

+         public IWebLocator AddDesignation { get => GetLocatorByIdWithoutName("ctl00_TemplateBody_contactNameDisplay1_DesignationMultiSelect_ListBox_chosen", "li", "id", postXPath: "/div/ul/li"); 

+         }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\EventFunctionPricing.cs
=         public IWebLocator TextPriceStandardEarly => LocatorByXPath("TextPriceStandardEarly");
=         public IWebLocator TextPriceStandardRegularLabel => LocatorByXPath("TextPriceStandardRegularLabel");
-         public IWebLocator TextPriceStandardRegular => LocatorByXPath("TextPriceStandardRegular", "input");

+         public IWebLocator TextPriceStandardRegular => LocatorByXPath("TextPriceStandardRegular");
=         public IWebLocator TextPriceDiscountLateLabel => LocatorByXPath("TextPriceDiscountLateLabel");
=         public IWebLocator LabelOtherPrice => LocatorByXPath("LabelOtherPrice");
-         public IWebLocator PricingGroupLink(int row) => PricingGroupRepeater.Row(row, "OtherPriceLink");

-         public IWebLocator PricingGroupTooltip => LocatorByXPath("RadAjaxPanel1");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\EventPricingGroup.cs
=         public IWebLocator GroupTypeDropDownList => GetLocatorById("GroupTypeDropDownList", "select");
=         public IWebLocator DisplayNameTextBox => GetLocatorById("DisplayNameTextBox");
-         public IWebLocator PreviewPanel => LocatorByXPath("PreviewDiv", "div");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\EventProgramDisplay.cs
=     {
=         public EventProgramDisplay(string name) : base(name) => Construct();
-         public EventProgramDisplay() : base("New EventProgramDisplay Common") => Construct();

+         public EventProgramDisplay() : base("New EventProgramDisplay") => Construct();
=         public IWebLocator RemoveProgram(string name) => ListFunctions.CellWithText(name, "//ancestor::td//a[contains(text(),'Remove')]"); 
=         public IWebLocator EventOptions(string option) => LocatorByXPath(option, "input", "value");
-         public IWebLocator FirstProgramName => ListFunctions.Cell(1, 1, postXPath: "//ancestor::td//a[contains(@id, 'DisplayLink')]");
=         public IWebLocator RegisterFromWaitlistHiddenButton => GetLocatorById("RegisterFromWaitlistHiddenButton");
=         public IWebLocator HiddenUndoPendingCheckoutFromWaitlistButton => GetLocatorById("HiddenUndoPendingCheckoutFromWaitlistButton");
-         public IWebLocator AddNewProgramItemLink => GetLocatorById("TitleBar", postXPath: "/div/div/a");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\EventResources.cs
=             SetupTime = new BusinessCalendar2("SetupTime");
=             PostTime = new BusinessCalendar2("PostTime");
-             SpaceRequirements = new RadGrid("RadGrid1");

-             ResourcesRadGrid = new RadGrid("RadGrid2");

-             Speakers = new RadGrid("RadGrid3");

-             SupportStaff = new RadGrid("RadGrid4");

+             RadGrid1 = new RadGrid("RadGrid1");

+             RadGrid2 = new RadGrid("RadGrid2");

+             RadGrid3 = new RadGrid("RadGrid3");

+             RadGrid4 = new RadGrid("RadGrid4");
=         public BusinessCalendar2 SetupTime;
=         public BusinessCalendar2 PostTime;
-         public RadGrid SpaceRequirements;

-         public RadGrid ResourcesRadGrid;

-         public RadGrid Speakers;

-         public RadGrid SupportStaff;

+         public RadGrid RadGrid1;

+         public RadGrid RadGrid2;

+         public RadGrid RadGrid3;

+         public RadGrid RadGrid4;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\FunctionDisplay.cs
=         public IWebLocator WaitlistButton => GetLocatorById("Waitlist", attribute:"value");
=         public IWebLocator RegisterButton => GetLocatorById("Register", attribute:"value");
-         public IWebLocator EditButton => LocatorByXPath("Edit", "a", "title");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Events\FunctionEdit.cs
=             Tabs.AddTab("Pricing");
=             Tabs.AddTab("Accounting");
-             Tabs.AddTab("Questions");

-             Tabs.AddTab("Registration Options");

-             Tabs.AddTab("Plan");
=         public IWebLocator FunctionImageSelector => GetLocatorById("FunctionImageSelector");
=         public IWebLocator HtmlAdditionalInfo => GetLocatorById("HtmlAdditionalInfo");
-         public IWebLocator AddNewRegistrationOptionLink => LocatorByTextXPath("Add new registration option", "a");
=         public IWebLocator ConfirmEditSaveButton => LocatorByXPath("ConfirmEditSaveButton");
=         #endregion
-         public IWebLocator OtherPriceLinks => GetLocatorById("OtherPriceLink", "a");

-             


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Fundraising\TributeNotificationCreator.cs
=     public class TributeNotificationCreator : DisplayIPartBase
=     {
-         public TributeNotificationCreator(string name) : base(name)

+         public TributeNotificationCreator(string name) : base(name) => Construct();

+         public TributeNotificationCreator() : base("New TributeNotificationCreatorCommon") => Construct();

+ 

+         public void Construct()
=             ResultsGrid1 = new Lister("ResultsGrid1");
=         }
- 

+         public Lister ResultsGrid1;

-         public Lister ResultsGrid1 { get; }
= 
=         #region Non Labels
-         public IWebLocator PrintNotificationsRadioButton => GetLocatorById("PrintNotificationsRadioButton");

-         public IWebLocator EmailNotificationsRadioButton => GetLocatorById("EmailNotificationsRadioButton");

-         public IWebLocator GenerateNotificationsButton => GetLocatorById("GenerateNotificationsButton");

-         public IWebLocator CommunicationDropDown => GetLocatorById("CommunicationSelector", "select");

+         public IWebLocator PrintNotificationsRadioButton => LocatorByXPath("PrintNotificationsRadioButton");

+         public IWebLocator EmailNotificationsRadioButton => LocatorByXPath("EmailNotificationsRadioButton");

+         public IWebLocator GenerateNotificationsButton => LocatorByXPath("GenerateNotificationsButton");

+         public IWebLocator CommunicationDropDown => LocatorByXPath("CommunicationSelector", "select");
= 
=         #region Labels
-         public IWebLocator EmailNotificationsLabel => GetLocatorById("EmailNotificationsLabel");

-         public IWebLocator CommunicationLabel => GetLocatorById("CommunicationLabel");

-         public IWebLocator SendHeader => GetLocatorById("SendHeader");

-         public IWebLocator SourceMessage => GetLocatorById("SourceMessage");

+         public IWebLocator EmailNotificationsLabel => LocatorByXPath("EmailNotificationsLabel");

+         public IWebLocator CommunicationLabel => LocatorByXPath("CommunicationLabel");

+         public IWebLocator SendHeader => LocatorByXPath("SendHeader");

+         public IWebLocator SourceMessage => LocatorByXPath("SourceMessage");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Fundraising\GiftEntry\AngularContent\GiftEntryApp\AppSingleGift.cs
=             ShowSoftCreditDetails = new AngularLink(ParentXPath, "Show soft credit details");
=             SoftCreditGrid = new SoftCreditGrid(ParentXPath);
- 

-             SplitGiftLink = new AngularLink(ParentXPath, "Split gift items");

-             SplitGiftGrid = new SplitGiftGrid(ParentXPath);
=         public AngularLink ShowSoftCreditDetails { get; set; }
=         public SoftCreditGrid SoftCreditGrid { get; set; }
- 

-         public SplitGiftGrid SplitGiftGrid { get; set; }

-         public AngularLink SplitGiftLink { get; set; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\iParts\Fundraising\GiftEntry\AngularContent\GiftEntryApp\AsiGiftEntry.cs
=             AppGiftEntryForm = new AppGiftEntryForm();
=             UserMessage = new AsiMessage(ParentXPath);
-             ReceiptMessage = new ReceiptMessage(ParentXPath);
=         public AngularFormField BatchDate { get; set; }
=         public AngularRadio ShowUsers { get; set; }
-         public ReceiptMessage ReceiptMessage { get; set; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\PageBase.cs
=         public static IWebLocator ContentPanel => LocatorByXPath("ContentPanel", "div"); 
=         public static IWebLocator ThemeStyleSheet => LocatorByXPath("Head1", "head", postXPath:"//link[contains(@href, '/App_Themes/')]");
-         public static IWebLocator InfoMessage => LocatorByXPath("UserMessageText",postXPath:"//p");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Commerce\AddProductPage.cs
= namespace Asi.Selenium.Web.Pages.Commerce
= {
-     public class AddProductPage : PageBase

+     public class AddProductPage: PageBase
=             BaseUrl = new ImisUrl("iCore/Store/Manage/Add_Item.aspx");
=             ItemCreator = new ItemCreator();
-             AddItemDialog = new AddItemDialog();
= 
=         public ItemCreator ItemCreator { get; set; }
-         public AddItemDialog AddItemDialog { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Commerce\FindProductsPage.cs
=         }
=         public Search ProductSearch { get; set; }
-         public new IWebLocator PageTitle => LocatorByTextXPath("Find products","h2");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Commerce\ItemPage.cs
=     public class ItemPage : PageBase
=     {
-         public ItemPage(string productCode = "", string category = "")

+         public ItemPage(string productKey = "", string category = "") 
=         {
-             BaseUrl = new ImisUrl("ItemDetail");

+             BaseUrl = new ImisUrl("ItemDetail"+"?iProductCode="+productKey+"&Category="+category);

-             WithBaseUrlParameters(productCode, category);
=             SimilarProducts = new RelatedItems("Similar products");
=         }
- 
=         public CartCheckOutButtonLink CartCheckoutButtonLink { get; set; }
=         public RelatedItems SimilarProducts { get; set; }
- 

-         public ItemPage WithBaseUrlParameters(string productCode = "", string category = "")

-         {

-             BaseUrl

-                 .WithUrlParameter("iProductCode", productCode)

-                 .WithUrlParameter("Category", category);

- 

-             return this;

-         }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Commerce\PaymentDetailsDisplay\PaymentDetails.cs
=         public IWebLocator AdjustPaymentButton => GetLocatorById("AdjustPaymentButton");        
=         public IWebLocator SubmitAdjustmentButton => GetLocatorById("SubmitAdjustmentButton");
-         public IWebLocator PayerLink => GetLocatorById("payerLink");

-         public IWebLocator TotalAmountValueLabel => GetLocatorById("TotalAmountValueLabel");

-         public IWebLocator Status => GetLocatorById("Status", "span");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Community\AddContactPage.cs
=             BaseUrl = new ImisUrl("iCore/Contacts/Create_Contact_Person_or_Org.aspx");
=             ContactAccountCreator = new ContactAccountCreator("Add contact");
-             PrimaryOrgSelector = new PrimaryOrganizationSelector("primaryOrgSelector");
=         }
=         public ContactAccountCreator ContactAccountCreator { get; set; }
-         public PrimaryOrganizationSelector PrimaryOrgSelector { get; set; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Community\ManageDuplicatesPage.cs
=         public ManageDuplicatesPage()
=         {
-             BaseUrl = new ImisUrl("iCore/Contacts/Manage_Duplicates.aspx");

+             BaseUrl = new ImisUrl("Core/Contacts/Manage_Duplicates.aspx");
=             PotentialDuplicateListDisplay = new PotentialDuplicateListDisplay();
-             MiniProfile = new ContactMiniProfile("MiniProfile");
= 
=         public PotentialDuplicateListDisplay PotentialDuplicateListDisplay { get; set; }
-         public ContactMiniProfile MiniProfile;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Contacts\AccountPageStaff.cs
=             ContactProperties = new SummaryDisplay("ContactProperties");
=             MiniProfile = new ContactMiniProfile();
-             AlertDisplay = new AlertDisplay("AlertDisplay");
=         public SummaryDisplay ContactProperties { get; set; }
=         public ContactMiniProfile MiniProfile;
-         public AlertDisplay AlertDisplay { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Contacts\MembershipTab.cs
=         }
= 
-         public IWebLocator MembershipTabButton => LocatorByXPath("Membership", "span");
=        // public AutomaticPaymentEnrollments AutomaticRenewal { get; set; }
=         public GroupListEditor ChaptersAndSections { get; set; }
-         public IWebLocator AdjustMembershipButton => LocatorByXPath("AdjustMembershipButton","button");

-         public IWebLocator AdjustFeesLink => LocatorByXPath("AdjustFeesLink", "a");

-         public IWebLocator CancelItemsLink => LocatorByXPath("CancelItemsLink", "a");

- 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Donor\DonateNowPage.cs
=         public ContactAccountCreator MakeDonationContact;
=         public GiftAidDeclaration GiftAidDeclaration;
- 

-         public IWebLocator GiftAidConfirmationMessage = LocatorByXPath("GiftAidConfirmationMessage", "div", "id");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Donor\DonorThankYouPage.cs
=         }
=         public ConfirmationDisplay ThankYouMessage;
-         public IWebLocator PayCentralValidationMessage = LocatorByXPath("PayCentralUserMessages", "span");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Events\EventDashboardPage.cs
=             EventEdit = new EventEdit();
=             FunctionEdit = new FunctionEdit();
-             EventProgramDisplay = new EventProgramDisplay("EventProgramDisplay");
=         public EventEdit EventEdit { get; set; }
=         public FunctionEdit FunctionEdit { get; set; }
-         public EventProgramDisplay EventProgramDisplay { get; set; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Events\EventRegistrationDetailPage.cs
=             EventRegistrationDetailAlerts = new EventRegistrationDetailAlerts("Alerts_AlertContainer");
=             RegistrationBillingInformation = new SummaryDisplay("Billinginformation");
-             InvoicesGrid = new Lister("Invoices_ResultsGrid");
=         public BigButtonPanel EventRegistrationDetailActionButtons { get; set; }
=         public EventRegistrationDetailAlerts EventRegistrationDetailAlerts { get; set; }
-         public Lister InvoicesGrid { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Finance\PayCentral\PayCentralLivePage.cs
=         public PayCentralLivePage()
=         {
-             BaseUrl = new ImisUrl("/iCore/Finance/PayCentralLive.aspx");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Fundraising\FindGiftsPage.cs
=             query.Parameters.Add("Invoice number", new QueryTextParameter());
=             query.Parameters.Add("Donor name contains", new QueryTextParameter());
-             query.Parameters.Add("Donor ID", new QueryTextParameter());
=             query.Parameters.Add("Gift amount greater than or equal to", new QueryTextParameter());
-             query.Parameters.Add("Gift date between", new QueryDateParameter());

+             query.Parameters.Add("Gift date between start", new QueryDateParameter());

+             query.Parameters.Add("Gift date between end", new QueryDateParameter());
= 
=         public IWebLocator ViewDetails(int row) => SelectAQuery.Cell(row, 9, true);
-         public IWebLocator ViewPledgeDetails(int row) => SelectAQuery.Cell(row, 10, true);

+         public IWebLocator ViewPledgeDetails(int row) => SelectAQuery.Cell(row, 11, true);


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Fundraising\GiftRequestsPage.cs
=         {
=             BaseUrl = new ImisUrl("iCore/Fundraising/Gift_Requests.aspx");
-             GiftRequest = new GiftRequest("GiftRequestCommon");

+             GiftRequest = new GiftRequest("GiftRequest");

-             GiftRequestAddEditDialog = new GiftRequestAddEditDialog();
=         }
= 
-         public GiftRequest GiftRequest { get; }

+         public GiftRequest GiftRequest { get; set; }

-         public GiftRequestAddEditDialog GiftRequestAddEditDialog { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Fundraising\ReverseOpenPledgePage.cs
=             //TODO find out if we want to call this from the iPart itself *Brainstorming*
=             BaseUrl = new ImisUrl("iParts/Commerce/OpenInvoiceReversals/PledgeReversals.aspx");
-             PledgeReversals = new PledgeReversal("ReversePledge");

+             PledgeReversals = new PledgeReversals("");
=         }
- 

+         public PledgeReversals PledgeReversals { get; set; }

-         public PledgeReversal PledgeReversals { get; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Fundraising\TributeNotification\FindIssuedNotificationsPage.cs
=         public FindIssuedNotificationsPage()
=         {
-             BaseUrl = new ImisUrl("iCore/Fundraising/Find_issued_notifications.aspx"); // Calling the Base URL

-             TributeNotificationCreator = new TributeNotificationCreator("TributeNotificationCreatorCommon"); // creating instance for IPart file

-             TributeNotificationCreator.ResultsGrid1.Queries.Add("Issued notifications with email", BuildAllIssueNotificationsWithEmailQuery());

+             BaseUrl = new ImisUrl("iCore/Fundraising/Tribute_Notifications.aspx"); // Calling the Base URL

+             TributeNotificationCreator = new TributeNotificationCreator(); // creating instance for IPart file

+             TributeNotificationCreator.ResultsGrid1.Queries.Add("Issued notifications", BuildAllIssueNotificationslQuery());
=         }
= 
-         public TributeNotificationCreator TributeNotificationCreator { get; }

+         public TributeNotificationCreator TributeNotificationCreator;
=     
-         private static ListerSheet BuildAllIssueNotificationsWithEmailQuery()

+         private static ListerSheet BuildAllIssueNotificationslQuery()
=         {
=             var query = new ListerSheet();
-             query.Parameters.Add("Gift date between", new QueryDateParameter());
=             query.Parameters.Add("Honoree name contains", new QueryTextParameter());
=             query.Parameters.Add("Notify contact name contains", new QueryTextParameter());
-             query.Parameters.Add("Notification sent between", new QueryDateParameter());

+             //TODO: add data range for Gift date between         

+             //TODO: add data range for Notification sent between        


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Fundraising\TributeNotification\IssueNotificationsPage.cs
=         {
=             BaseUrl = new ImisUrl("iCore/Fundraising/Tribute_Notifications.aspx"); // Calling the Base URL
-             TributeNotificationCreator = new TributeNotificationCreator("TributeNotificationCreatorCommon"); // creating instance for IPart file

-             TributeNotificationCreator.ResultsGrid1.Queries.Add("Notifications with email", BuildAllNotificationWithEmailQuery());

+             TributeNotificationCreator = new TributeNotificationCreator(); // creating instance for IPart file

+             TributeNotificationCreator.ResultsGrid1.Queries.Add("Main", BuildAllMainQuery());
=         }
= 
-         public TributeNotificationCreator TributeNotificationCreator { get; }

+         public TributeNotificationCreator TributeNotificationCreator;
=        
-         private static ListerSheet BuildAllNotificationWithEmailQuery()

+         private static ListerSheet BuildAllMainQuery()
=         {
=             var query = new ListerSheet();
-             query.Parameters.Add("Gift date between", new QueryDateParameter());
=             query.Parameters.Add("Honoree name contains", new QueryTextParameter());
=             query.Parameters.Add("Notify contact name contains", new QueryTextParameter());
+             //TODO: add data range for Gift date between         


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Membership\BillingCycleDetailPage.cs
= 
=         public static IWebLocator AccountingMethodDropDown => LocatorByXPath("BillingTypeCashAccrualDropDownList","select");
-         public static IWebLocator BillingTimeDropDown => LocatorByXPath("BillingTypeAnnualAnniversaryDropDownList", "select");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Membership\JoinNowPage.cs
=         public QueryMenu QueryMenu { get; set; }
= 
-         public ImisUrl GetUrl(string productCode)

+         public ImisUrl Url(string productCode)
=         {
-             return BaseUrl.WithUrlParameter("iProductCode", productCode);

+             BaseUrl.AddParameter("iProductCode", productCode);

+             return BaseUrl;


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Membership\BillingProduct\BillingProductsPage.cs
=         {
=             BaseUrl.AddParameter("ID", id);
-             if (!tab.IsNullOrEmpty())

+             if (!(tab is {Length:>0}))


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\RiSE\PanelDesigner\PanelDesignerPage.cs
=         public IWebLocator OpenSourcePropertiesButton(string sourceName) => LocatorForXpath($"//li//div[span[text()='{sourceName}']]//span[@class='rtPlus']");
=         public IWebLocator RadMenuDeleteButton => LocatorByTextXPath("Delete","span");
-         public IWebLocator RadMenuViewButton => LocatorByTextXPath("View", "span");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\RiSE\ProcessAutomation\TasksPage.cs
=         public TasksPage()
=         {
-             Task = new Task();

+             Task = new iParts.Common.Tasks.Task();
=         }
= 
-         public Task Task { get; set; }

+         public iParts.Common.Tasks.Task Task { get; set; }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\RiSE\SiteBuilder\ManageWebSitesPage.cs

+ #if USE_PLAYWRIGHT

+ 

+ #else

+ #endif

+ 
=         }
= 
-         public IWebLocator StatusPanel => LocatorByXPath("collapse", attribute: "data-toggle");

+         // jkh changed to locate by id

+         public IWebLocator StatusPanel => L("status toggle", By.XPath(@"//*[@id='ctl00_TemplateBody_WebsiteEditControl_StatusPanel_Head']/div/a"));

+         //LocatorByXPath("collapse", attribute: "data-toggle");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Settings\OrganizationSettingsPage.cs
=         public IWebLocator OrgDefault => LocatorByXPath("OrgDefault", "input","value");
=         public IWebLocator DefaultCultureDropDown => LocatorByXPath("DefaultCultureDropDown", "select");
-         public IWebLocator DefaultCultureTextBox => LocatorByXPath("DefaultCultureTextBox", "input");

+         public IWebLocator DefaultCultureTextBox => LocatorByXPath("DefaultCultureTextBox");
=         public IWebLocator DatePreferenceTextBox => LocatorByXPath("DatePreferenceTextBox");
-         public IWebLocator DisplayOrganizationDefault => LocatorByXPath("DisplayCultureRadioButtonList_1");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Settings\Finance\FinanceGeneralSettingsPage.cs
=         public static IWebLocator PremiumOrderTypeDropDownList => LocatorByXPath("PremiumOrderTypeDropDownList", "select");
=         public static IWebLocator DefaultReceiptPreferenceDropDownList => LocatorByXPath("DefaultReceiptPreferenceDropDownList", "select");
-         public static IWebLocator BatchModeSelectorDropDownList => LocatorByXPath("BatchModeDd", "select");
=         public IWebLocator DefaultCurrencyCodeTextBox { get => LocatorByXPath("DefaultCurrencyCodeTextBox", "input"); }
=         public static IWebLocator DefaultCurrencyCodeTextBoxRequiredValidator { get => LocatorByXPath("DefaultCurrencyCodeTextBoxRequiredValidator", "span"); }
-         public IWebLocator PrepaymentsAndOverpaymentsCheckBox = LocatorByXPath("PrepaymentsAndOverpaymentsCheckBox");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\Pages\Shop\Cart.cs
=             SubmitOrderButtonLink = new SubmitOrderButtonLink();
=             OpenCreditDisplay = new OpenCreditDisplay("OpenCreditDisplayCommon");
-             PromotionManagerDisplay = new PromotionManager("PromotionManagerCommon");

+             PromotionManagerDisplay = new PromotionManager();


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\PanelDefinition\MembershipPanel.cs
=         public IWebLocator MemberStatus => LocatorByXPath("MemberStatus");
=         public IWebLocator Chapter => LocatorByXPath("Chapter");
-         public IWebLocator JoinDate => LocatorByXPath("JoinDate");

-         public IWebLocator PaidThrough => LocatorByXPath("PaidThrough");

-         public IWebLocator RenewedThru => LocatorByXPath("RENEWED_THRU");

+         public BusinessCalendar2 JoinDate => new BusinessCalendar2("JoinDate");

+         public BusinessCalendar2 PaidThrough => new BusinessCalendar2("PaidThrough");

+         public BusinessCalendar2 RENEWED_THRU => new BusinessCalendar2("RENEWED_THRU");


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\NavigationTestMethods.cs
=             user.AttemptsTo(Waiting.ForPageReload());
=             var windowHandles = _driver.WindowHandles;
-             user.AttemptsTo(SwitchWindow.To(windowHandles[1]));

-             user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);

+             user.AttemptsTo(Waiting.ForRecaptcha());

+             //user.AttemptsTo(SwitchWindow.To(windowHandles[1]));

+             //user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Authentication\SignInTestMethods.cs
=         {
=             var user = User("SignInDesignatedUser");
-             user.AttemptsTo(Waiting.ForPageReload());
=             user.AttemptsTo(SignIn.WithUserRole(userType).AndOnBehalfUser(firstName, lastName).InImis(site));
-             TurnOffPageStatistics();

+             TurnOffPageStatisticsForVat();
=         }    
=         
+         public void TurnOffPageStatisticsForVat()

+         {

+             var user = User("TurnOffPageStatistics");

+             // if page turn statistics is on try to turn it off

+             try

+             {

+                 //if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))

+                   //  user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));

+             }

+             catch (NoSuchElementException)

+             {

+                 // if page turn stats does not exist or is already off do nothing

+             }

+             catch (StaleElementReferenceException)

+             {

+                 // if page turn stats does not exist or is already off do nothing

+             }

+         }
=             try
=             {
-                 if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))

-                     user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));

+              //   if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))

+              //     user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));
=             {
=                 // if page turn stats does not exist or is already off do nothing
-             }
=             }
- 

+             catch (StaleElementReferenceException)

-         public void SignInToLicenseServer()
=             {
-             var user = User("SignInToLicenseServer");

-             user.AttemptsTo(SignIn.ToLicenseServer());

+                 // if page turn stats does not exist or is already off do nothing

+             }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Commerce\CartTestMethods.cs
=         public Cart Cart { get; set; }
= 
-         public void Checkout(CartData cartData, bool shouldSubmitCart = true)

+         public void Checkout(CartData cartData)
=         {
-             var user = LoggedInUser();

- 

+             var user = User("Checkout");

+             user.AttemptsTo(CheckOut.WithDefaultPayment(cartData));

-             if (cartData.PaymentMethodType.IsNullOrEmpty())

-                 if (cartData.PaymentMethod.IsNullOrEmpty())

-                     throw new NullReferenceException("The table did not specify a PaymentMethod or PaymentMethodType");

-                 else

-                     cartData.PaymentMethodType = cartData.PaymentMethod.Replace(" ", "");            

- 

-             user.AttemptsTo(CheckOut.WithPaymentMethodType(cartData));
=             foreach (CartData cList in cartList)
=             {
-                 user.AsksFor(Appearance.Of(Cart.ShoppingCart.ItemGrid.CellAnyElementWithText(cList.CartItem))).Should().BeTrue();

+                 user.AsksFor(Appearance.Of(Cart.ShoppingCart.ItemGrid.CellInputWithText(cList.CartItem))).Should().BeTrue();


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Commerce\ProductTestMethods.cs
=     public class ProductTestMethods : TestMethodBase
=     {
-         public ProductTestMethods(IWebDriver driver, IAsiWebContext context, ProductContext productContext) : base(driver, context)

+         public ProductTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)
=             AccountPage = new AccountPage();
=             FindProductsPage = new FindProductsPage();
+             ProductDisplayPage = new ProductDisplayPage();
=             Cart = new Cart();
=             OrderConfirmation = new OrderConfirmation();
-             CartTestMethods = new CartTestMethods(driver, context);

-             ProductContext = productContext;

+             OrderConfirmation = new OrderConfirmation();

+             CartTestMethods = new CartTestMethods(driver,context);
= 
=         public AccountPage AccountPage { get; set; }
+         public AddProductPage AddProductPage { get; set; }
=         public FindProductsPage FindProductsPage { get; set; }
+         public ProductDisplayPage ProductDisplayPage { get; set; }
=         public OrderConfirmation OrderConfirmation { get; set; }
=         public CartTestMethods CartTestMethods { get; set; }
-         public ProductContext ProductContext { get; set; }
=         {
=             var user = LoggedInUser();
-             user.AttemptsTo(CreateProduct.SimpleItem(createProductData, ProductContext));

+             user.AttemptsTo(CreateProduct.SimpleItem(createProductData));

-         }

- 

-         public void CreateProductWithItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(CreateProduct.CollectionOfItems(createProductData, productItemsData, ProductContext));

-         }

- 

-         public void VerifyProductWasAdded()

-         {

-             var user = LoggedInUser();

-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;

- 

-             user.AsksFor(Text.Of(productDisplay.ProductTitle)).Should().Be(ProductContext.Name);

-             user.AsksFor(Text.Of(productDisplay.ProductDescription)).Should().Be(ProductContext.Description);

-             if (ProductContext.ContainsInventory)

-                 user.AsksFor(Text.Of(productDisplay.InventoryLabel)).Should().Be("This item is not currently available.");

-         }

- 

-         public void VerifyProductIsAvailable()

-         {

-             var user = LoggedInUser();

-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;

- 

-             user.AttemptsTo(Browse.InImis(ItemPage.WithBaseUrlParameters(ProductContext.Code).BaseUrl));

-             user.WaitsUntil(Text.Of(productDisplay.InventoryLabel), IsNotEqualTo.Value("This item is not currently available."));
=                 user.AttemptsTo(Waiting.InSeconds(1));
=                 user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText(cartData.Product)));
-                 var simpleProductDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;

+                 user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));

-                 user.AttemptsTo(SendKeys.To(simpleProductDisplay.QuantityTextBox, cartData.Quantity.ToString()));

-                 user.AttemptsTo(Click.On(simpleProductDisplay.AddToCart));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Community\ContactTestMethods.cs
=             AccountPage = new AccountPage();
=             AccountPageStaff = new AccountPageStaff();
-             AdjustMembershipFeesPage = new AdjustMembershipFeesPage();
=             PersonalInformationProfilePanel = new PersonalInformationProfilePanel();
=             SignInTestMethods = new SignInTestMethods(driver, context);
-             FindContactsPage = new FindContactsPage();
=         }
= 
-         public FindContactsPage FindContactsPage { get; set; }
=         public AccountPage AccountPage { get; set; }
=         public AccountPageStaff AccountPageStaff { get; set; }
-         public AdjustMembershipFeesPage AdjustMembershipFeesPage { get; set; }
=             }
=             user.AttemptsTo(ClickCommandButton.Save());
-             if (!contactData.ExpectError)

-             {
=             user.WaitsUntil(Appearance.Of(AccountPageStaff.ContactProperties.QueryType("ID")), IsEqualTo.True());
=             _context.UpsertData("ID", user.AskingFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID"))));
+ 
=         }
-         }
=             user.AttemptsTo(SendKeys.To(AccountPage.ContactProfile.ProceedContactErasureDialog.TextBoxContactId, _context.GetData<string>("ID")).ThenHitEnter());
=             user.AttemptsTo(Waiting.InSeconds(1));
-             user.WaitsUntil(Appearance.Of(AccountPage.ContactProfile.ProceedContactErasureDialog.ButtonRequestContactErasure),IsEqualTo.True());

+             user.AsksFor(Appearance.Of(AccountPage.ContactProfile.ProceedContactErasureDialog.ButtonRequestContactErasure)).Should().BeTrue();
=             var user = LoggedInUser();
=             //TODO this will need to be converted into an interaction with more verification fields
-             user.WaitsUntil(Text.Of(AccountPage.ContactProfile.ContactName.FullName), ContainsSubstring.Text(contactData.FirstName));

-             user.WaitsUntil(Text.Of(AccountPage.ContactProfile.ContactName.FullName),ContainsSubstring.Text(contactData.LastName));

+             user.AskingFor(Text.Of(AccountPage.ContactProfile.ContactName.FullName)).Should().Contain(contactData.FirstName);

+             user.AskingFor(Text.Of(AccountPage.ContactProfile.ContactName.FullName)).Should().Contain(contactData.LastName);
=             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.LastName, contactData.LastName));
=             string randNumber = TestHelper.GenerateRandomString(5);
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Email, randNumber + (contactData.Email ?? "test@imisdemo.com")));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Email, randNumber + contactData.Email));
=             user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.Phone, contactData.Phone));
=             user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.MobilePhone, contactData.MobilePhone));
-             user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.CountrySelect, contactData.Country ?? "Zambia"));

-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Address1, contactData.Address1 ?? "123 Some Street"));

-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.City, contactData.City ?? "Austin"));

+             user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.CountrySelect, contactData.Country));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Address1, contactData.Address1));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.City, contactData.City));
=             user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.SelectSubEntityCode, contactData.State));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.PostalCode, contactData.PostalCode ?? "11111"));

-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Password, contactData.Password ?? "demo123"));

-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.ConfirmPassword, contactData.Password ?? "demo123"));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.PostalCode, contactData.PostalCode));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Password, contactData.Password));

+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.ConfirmPassword, contactData.Password));
=         }
= 
-         public void VerifyTheInvalidCharacterWarning()

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterValidatorWarning), IsEqualTo.True());

-             user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterConfirmValidatorWarning), IsEqualTo.True());

- 

-         }

- 
=                 user.AttemptsTo(Click.On(ContactGeneralSettingsPage.CheckBox(04).Control));
=             user.AttemptsTo(ClickCommandButton.Save());
-         }

-         public void PressAdjustMembershipButton()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));

-             NavigateToTab("Membership");

-             user.AttemptsTo(Click.On(AccountPageStaff.MembershipTab.AdjustMembershipButton));
=         }
-         public void VerifyAdjustMembershipButtonHasOptions(string firstOption, string secondOption)

-         {

-             var user = LoggedInUser();

- 

-             var adjustFeesLink = AccountPageStaff.MembershipTab.AdjustFeesLink;

-             var cancelItemsLink = AccountPageStaff.MembershipTab.CancelItemsLink;

- 
= 
-             user.WaitsUntil(Existence.Of(adjustFeesLink),IsEqualTo.True());

-             user.AsksFor(Text.Of(adjustFeesLink)).Should().Be(firstOption);

-             user.WaitsUntil(Existence.Of(cancelItemsLink),IsEqualTo.True());

-             user.AsksFor(Text.Of(cancelItemsLink)).Should().Be(secondOption);

-         }

-         public void CancelFirstItem()

-         {

-             var user = LoggedInUser();

-             NavigateToMidtermChanges(AccountPageStaff.MembershipTab.CancelItemsLink);

-             var secondMembershipItemCancellationLink = AdjustMembershipFeesPage.SubscriptionsGrid.LinkInTable("Cancel");

- 

-             user.AttemptsTo(Click.On(secondMembershipItemCancellationLink));

-             user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));

-         }

-         public void AdjustFirstFee(int desiredAmount)

-         {

-             var user = LoggedInUser();

-             NavigateToMidtermChanges(AccountPageStaff.MembershipTab.AdjustFeesLink);

-             var firstMembershipItemAdjustmentAmount = AdjustMembershipFeesPage.SubscriptionsGrid.CellInputWithText("0.00",exactMatch: true);

- 

-             user.AttemptsTo(SendKeys.To(firstMembershipItemAdjustmentAmount, desiredAmount.ToString()));

-             user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));

-         }

-         public void NavigateToMidtermChanges(IWebLocator adjustmentLinkLocator)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));

-             PressAdjustMembershipButton();

-             user.AttemptsTo(Click.On(adjustmentLinkLocator));

-         }

- 

-         public void VerifyUserMessage(string userMessage)

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Text.Of(AdjustMembershipFeesPage.InfoMessage), ContainsSubstring.Text(userMessage));

-         }

- 

-         public void VerifyContactExists(string lastName, string firstName)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));

-             user.AttemptsTo(ClickCommandButton.Submit());

-             user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 2))).Trim().Should().Contain($"{firstName} {lastName}");

-         }

- 

-         public void FindContact(string firstName, string lastName)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Waiting.InSeconds(3));

-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));

-             user.AttemptsTo(ClickCommandButton.Submit());

-             user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));

-         }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Events\CreateNewEventTestMethods.cs
=     public class CreateNewEventTestMethods : TestMethodBase
=     {
+ 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Finance\FinanceTestMethods.cs
=     public class FinanceTestMethods : TestMethodBase
=     {
-         public const string BillDateKey = "BillDate";

-         private const string _creditValueKey = "creditValue";

-         private const string _totalRefundKey = "totalRefund";

-         private const string _availableCreditAlertText = "Available credit:";

-         private const string _overriddenDateKey = "overriddenDate";

- 
=             CartPage = new Cart();
=             FindProductsPage = new FindProductsPage();
-             ItemPage = new ItemPage();

+             ProductDisplayPage = new ProductDisplayPage();
=             AccountPageStaff = new AccountPageStaff();
=             AccountArea = new AccountArea("AccountArea");
-             PaymentDetails = new PaymentDetails("TemplateBody");

-             BatchesPage = new BatchesPage();

-             BatchDetailPage = new BatchDetailPage();

-             PayCentralLivePage = new PayCentralLivePage();

-             FinanceGeneralSettingsPage = new FinanceGeneralSettingsPage();

-             OrderConfirmation = new OrderConfirmation();
=         private Cart CartPage { get; set; }
=         private FindProductsPage FindProductsPage { get; set; }
-         private ItemPage ItemPage { get; }

+         private ProductDisplayPage ProductDisplayPage { get; }

-         private PaymentDetails PaymentDetails { get; }

-         private BatchesPage BatchesPage { get; }

-         private BatchDetailPage BatchDetailPage { get; }

-         private PayCentralLivePage PayCentralLivePage { get; set; }

-         private FinanceGeneralSettingsPage FinanceGeneralSettingsPage { get; }

-         private OrderConfirmation OrderConfirmation { get; }
=             FinanceSettingsTestMethods.VerificationOfCountryCurrency(gateway);
=             ContactsSettingsTestMethod.VerifyDefaultCountry(gateway);
-         }

- 

-         /// <summary>

-         /// Save available credit value to context

-         /// </summary>

-         public void SaveAvailableCreditValue()

-         {

-             var user = User("AdjustPaymentUser");

- 

-             GotoAccountArea(user);

-             _context.AddData(_creditValueKey, GetAvailableCreditValue(user));

-         }

- 

-         /// <summary>

-         /// Adjust payment based on what the user provides

-         /// </summary>

-         /// <param name="adjustmentType">Must be Unapply, Reverse. For Refund use RefundPayment method</param>

-         public void AdjustPayment(string adjustmentType)

-         {

-             var user = User("AdjustPaymentUser");

- 

-             FindPaymentAndStartAdjustment(user, adjustmentType);

-             if (adjustmentType == "Unapply")

-             {

-                 var totalAmount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.TotalAmountValueLabel), IsNotEqualTo.Value("")));

-                 var creditValue = _context.GetData<double>(_creditValueKey);

-                 _context.UpsertData(_creditValueKey, creditValue + totalAmount);

-             }

- 

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));

- 

-             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Payment successfully"), IsEqualTo.True());

-         }

- 

-         /// <summary>

-         /// Refund payment based on what the user provides

-         /// </summary>

-         /// <param name="paymentMethod"></param>

-         /// <param name="refundDataSet"></param>

-         public void RefundPayment(string paymentMethod, IEnumerable<RefundData> refundDataSet)

-         {

-             var user = User("AdjustPaymentUser");

- 

-             FindPaymentAndStartAdjustment(user, "Refund");

-             user.AttemptsTo(Select.ByValue(PaymentDetails.RefundDisplay.PaymentMethod, paymentMethod));

- 

-             foreach (var refundData in refundDataSet)

-             {

-                 var amount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.RefundDisplay.GetAmountTextbox(refundData.Description)),

-                     IsNotEqualTo.Value("")));

- 

-                 var amountToRefund = (refundData.PercentageFromAmountToRefund / 100) * amount;

- 

-                 user.AttemptsTo(SendKeys.To(PaymentDetails.RefundDisplay.GetAmountToRefundLabel(refundData.Description),

-                     amountToRefund.ToString("F2")));

-             }

- 

-             // update the total refund after the last value has been entered

-             user.AttemptsTo(Click.On(PaymentDetails.TotalAmountValueLabel));

- 

-             var totalRefund = double.Parse(user.AsksFor(Text.Of(PaymentDetails.TotalAmountValueLabel)));

-             _context.AddData(_totalRefundKey, totalRefund);

- 

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));

-         }

- 

-         /// <summary>

-         /// Verify available credit on account page

-         /// </summary>

-         public void VerifyThatCreditIsOpen()

-         {

-             var user = User("AdjustPaymentUser");

- 

-             user.AttemptsTo(Click.On(PaymentDetails.PayerLink));

-             GetAvailableCreditValue(user).Should().Be(_context.GetData<double>(_creditValueKey));
= 
=         /// <summary>
-         /// Verify that payment get status reversed

-         /// </summary>

-         public void VerifyThatPaymentIsReversed()

-         {

-             var user = User("AdjustPaymentUser");

- 

-             user.WaitsUntil(Text.Of(PaymentDetails.Status), IsEqualTo.Value("Reversed"));

-         }

- 

-         /// <summary>

-         /// Verify that payment is refunded

-         /// </summary>

-         public void VerifyThatPaymentIsRefund()

-         {

-             var user = User("AdjustPaymentUser");

-             var totalRefund = _context.GetData<double>(_totalRefundKey);

- 

-             user.WaitsUntil(UserMessageState.HasAny().WithMessage($"Refund successfully recorded in iMIS for {totalRefund:F2}"),

-                 IsEqualTo.True());

-         }

- 

-         /// <summary>
=                 // validate results in grid 
=                 // compare bill date from context
-                 var billDate = _context.GetData<string>(BillDateKey);

-                 user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(billDate);

+                 var Date1 = _context.GetData<string>("BillDate");

+                 user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(Date1);
=             // validate results in grid 
=             // compare bill date from context
-             var billDate = _context.GetData<string>(BillDateKey);

-             user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(billDate);

+             var Date1 = _context.GetData<string>("BillDate");

+             user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(Date1);
=         {
=             var user = User("StaffSite User");
-             user.AttemptsTo(Waiting.InSeconds(1));

+ 
=             user.AttemptsTo(SetWhenProvided.DropDown(CartPage.PaymentDetails.PaymentMethodDropDown, cartData.PaymentMethod));
=             user.AsksFor(Text.Of(CartPage.PaymentDetails.PaymentMethodDropDown)).Should().Contain(cartData.PaymentMethod);
-             // fill in different payment method types

-             switch (cartData.PaymentMethodType) {

-                 case "Direct debit":

-                     user.AttemptsTo(SwitchFrame.To("iFrame"));

-                     user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.RoutingNumber), IsEqualTo.True());

-                     user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.RoutingNumber, cartData.RoutingNumber));

-                     user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.AccountNumber, cartData.AccountNumber));

-                     break;
= 
-                 default:
=             user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.CCNumber), IsEqualTo.True());
=             user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCNumber, cartData.CardNumber));
+ 
=             user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCExpiration, cartData.CardExpiry));
=             user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCSecurityCode, cartData.CardCVC));
-                     // check if postal code exists before adding a value to it

-                     if (user.AsksFor(Existence.Of(CartPage.PaymentDetails.CCPostalCode)))
=             user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCPostalCode, cartData.PostalCode));
-                     break;

+ 

-             };

-             user.AttemptsTo(SwitchFrame.ToDefaultFrame());

-             // verify term dates from context if recurring payment

-             if (user.AsksFor(Text.Of(CartPage.ShoppingCart.ItemGrid.Cell(1, 2))).Contains("Regular Membership Fees"))

-             {

-                 //verify Regular Membership Fees with term date range

-                 var termStartDate = _context.GetData<string>("TermStartDate");

-                 var termEndDate = _context.GetData<string>("TermEndDate");

-                 user.WaitsUntil(Text.Of(CartPage.ShoppingCart.ItemGrid.Cell(1, 2)), ContainsSubstring.Text($"Regular Membership Fees ({termStartDate} - {termEndDate})"));

-             }

-             //save payment method for use later

-             _context.UpsertData("PaymentMethod", cartData.PaymentMethod);
=             //Submit Payment
=             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
-             user.AttemptsTo(Waiting.InSeconds(2));
=             user.AttemptsTo(Click.On(CartPage.SubmitOrderButtonLink.SubmitCartOrderButton));
-             if (cartData.PaymentMethodType == "Direct debit")

-                     user.WaitsUntil(UserMessageState.HasAny().WithMessage("Unable to take Bank Draft Payment"), IsEqualTo.False());
=             user.WaitsUntil(Text.Of(FindProductsPage.PageTitle), ContainsSubstring.Text("Find products"));
=             user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText("Building a Strong Team")));
-             user.AttemptsTo(Click.On(ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));

-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));

+             user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));

+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
=                 user.AttemptsTo(SendKeys.To(billToNameContains.Textbox, bList.BillToName).ThenHitEnter());
=                 // wait until grid results appear
+                 if (bList.Date == "Today") user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 2)), ContainsSubstring.Text(DateTime.Now.ToShortDateString()));
=                 user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 3)), ContainsSubstring.Text(bList.BillToName));
=                 // validate results in grid 
-                 user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(_context.GetData<string>(BillDateKey));

+                 if (bList.Date == "Today") user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(DateTime.Now.ToShortDateString());

+                 else user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(bList.Date);
=             user.AttemptsTo(AcceptImisAlert.Ok());
=             // wait till download processing dialog ok button is enabled
-             user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60);

+             bool finishedProcessing = false;

+             do

+             {

+                 if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;

+             } while (finishedProcessing == false);
=             // validate processed refund from data stored in context
=             var Amount = _context.GetData<string>("Amount");
-             user.WaitsUntil(Text.Of(CreditInvoicePage.PastExportsGrid.Cell(1, 3)), IsEqualTo.Value(amount));

+             user.AsksFor(Text.Of(CreditInvoicePage.PastExportsGrid.Cell(1, 3))).Should().Be(Amount);
=             user.AttemptsTo(Click.On(CreditInvoicePage.PastExportsGrid.Cell(1, 5)));
=             // wait till download processing dialog ok button is enabled
-             user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60);

+             bool finishedProcessing = false;

+             do

+             {

+                 if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;

+             } while (finishedProcessing == false);
=         {
=             var user = User("AddNewPaymentOptionUser");
-             GotoAccountArea(user);

+             // goto account area

+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));

+             user.AttemptsTo(Click.On(AccountArea.PartyName));

+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
=             var user = User("AmendExpirationDateUser");
=             AddNewPaymentOption();
-             GotoAccountArea(user);

+             // goto account area

+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));

+             user.AttemptsTo(Click.On(AccountArea.PartyName));

+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
=         {
=             var user = User("VerifyContactsAutomaticPaymentsCreditExpiryDateUser");
- 

-             GotoAccountArea(user);

+             // goto account area

+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));

+             user.AttemptsTo(Click.On(AccountArea.PartyName));

+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
=             user.AsksFor(Appearance.Of(CartPage.ThreeDsPaymentModal.PayCentralOKButton)).Should().BeTrue();
=             user.AttemptsTo(SwitchFrame.ToParentFrame());
-         }

- 

-         /// <summary>

-         /// Post the first batch from grid

-         /// </summary>

-         public void PostTheFirstBatch()

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(BatchesPage.BaseUrl));

- 

-             user.AttemptsTo(Click.On(BatchesPage.BatchList.SelectAQuery.Cell(1, 2, link: true)));

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.SetReadyOrOpenButton));

- 

-             user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Ready for review"));

- 

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.PostBatchButton));

-             user.AttemptsTo(AcceptAlert.ThatMustExist());

- 

-             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Batch submitted for posting."), IsEqualTo.True());

-         }

- 

-         /// <summary>

-         /// Verify batch is posted

-         /// </summary>

-         public void VerifyThatTheBatchIsPosted()

-         {

-             var user = LoggedInUser();

- 

-             // Refresh page to update status

-             user.AttemptsTo(Refresh.Browser());

-             user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Closed"));

-         }

- 

-         /// <summary>

-         /// Override date from account area

-         /// </summary>

-         /// <param name="date"></param>

-         public void OverrideDate(string date)

-         {

-             var user = LoggedInUser();

-             _context.AddData(_overriddenDateKey, date);

- 

-             user.AttemptsTo(Click.On(AccountArea.BatchToggle));

-             user.AttemptsTo(Check.On(AccountArea.BatchSelector.OverrideDateCheckBox));

-             user.AttemptsTo(SendKeys.To(AccountArea.BatchSelector.OverrideDateCalendar.TextBox, date).ThenHitEnter());

-         }

- 

-         /// <summary>

-         /// Turn off Override transaction date checkbox

-         /// </summary>

-         public void TurnOffOverrideTransactionDate()

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Click.On(AccountArea.BatchToggle));

-             user.AttemptsTo(Check.Off(AccountArea.BatchSelector.OverrideDateCheckBox));

-         }

- 

-         /// <summary>

-         /// Verify date is overridden

-         /// </summary>

-         public void VerifyTransactionDateIsOverridden()

-         {

-             var user = LoggedInUser();

-             var overriddenDate = _context.GetData<string>(_overriddenDateKey);

- 

-             user.AttemptsTo(Browse.InImis(BatchesPage.BaseUrl));

- 

-             var queryDateParameter = (QueryDateParameter)BatchesPage.BatchList.SelectAQuery.GetParameter("Search all batches", "Batch date between");

-             user.AttemptsTo(SendKeys.To(queryDateParameter.CalendarFrom, overriddenDate));

-             user.AttemptsTo(SendKeys.To(queryDateParameter.CalendarTo, overriddenDate));

-             user.AttemptsTo(ClickCommandButton.Submit());

- 

-             user.WaitsUntil(Text.Of(BatchesPage.BatchList.SelectAQuery.Cell(1, 4)), IsEqualTo.Value(overriddenDate));
=         }
- 

-         /// <summary>

-         /// CheckOn checkbox - allow staff users to enter prepayments and overpayments

-         /// </summary>

-         public void AllowStaffUsersToEnterPrepaymentsAndOverpayments()

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(FinanceGeneralSettingsPage.BaseUrl));

-             user.AttemptsTo(Check.On(FinanceGeneralSettingsPage.PrepaymentsAndOverpaymentsCheckBox));

-         }

- 

-         /// <summary>

-         /// Verify available credit is increased

-         /// </summary>

-         public void VerifyAvailableCreditIsIncreased()

-         {

-             var user = LoggedInUser();

- 

-             var prepaymentValue = double.Parse(user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.Prepayment),

-                 IsNotEqualTo.Value("")));

- 

-             user.AttemptsTo(Browse.InImis(AccountPageStaff.BaseUrl));

- 

-             var expectedCreditValue = Math.Round(prepaymentValue + _context.GetData<double>(_creditValueKey), 2);

-             GetAvailableCreditValue(user).Should().Be(expectedCreditValue);

-         }

- 

-         private void GotoAccountArea(ImisUser user)

-         {

-             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));

-             user.AttemptsTo(Click.On(AccountArea.PartyName));

-             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));

-         }

- 

-         private void FindPaymentAndStartAdjustment(IActor user, string adjustmentType)

-         {

-             var payerName = _context.GetData<string>("FullName");

- 

-             user.AttemptsTo(FindPayment.ByPayerName(payerName).WithStatus("Paid"));

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.AdjustPaymentButton));

-             user.AttemptsTo(Select.ByText(PaymentDetails.RefundDisplay.AdjustmentType, $"{adjustmentType} the payment"));

-         }

- 

-         private double GetAvailableCreditValue(IActor user)

-         {

-             var alert = AccountPageStaff.AlertDisplay.AlertContainer(_availableCreditAlertText);

-             try

-             {

-                 user.WaitsUntil(Appearance.Of(alert), IsEqualTo.True(), timeout: 5);

-             }

-             catch (WaitingException)

-             {

-                 return 0; // user doesn't have available credit

-             }

- 

-             return double.Parse(user.AsksFor(Text.Of(alert))

-                 .Replace(_availableCreditAlertText, "")

-                 .Trim());

-         }

- 

-         /// <summary>

-         /// Verify Pay Central Live payment exists from context last name and total amount

-         /// </summary>

-         public void VerifyPaymentPayCentralLive()

-         {

-             var user = LoggedInUser();

-             // get data to verify from context

-             var lastName = _context.GetData<string>("LastName");

-             var totalAmount = _context.GetData<string>("TotalAmount");

-             // navigate to Pay Central Live page

-             user.AttemptsTo(Browse.InImis(PayCentralLivePage.BaseUrl));

-             // find the payment via last name from context

-             user.WaitsUntil(Existence.Of(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox), IsEqualTo.True());

-             user.AttemptsTo(SendKeys.To(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox, lastName));

-             user.AttemptsTo(Click.On(PayCentralLivePage.DataVaultLiveDisplay.SearchButton));

-             // verify Pay Central Live payment from context data exists. Date is assumed to be today

-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 2)), ContainsSubstring.Text(lastName));

-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 4)), ContainsSubstring.Text(DateTime.Now.ToShortDateString()));

-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 5)), ContainsSubstring.Text(totalAmount));

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Forms\FormTestMethods.cs
=         public FormsDisplay FormsDisplay { get; set; }
=         public ContentGallery ContentGallery { get; set; }
-         public ContactData NewestContact { get; set; }
=             FormApprovalReviewPage = new FormApprovalReviewPage("ciFormApprovalReview");
=             FormApprovalDetail = new FormApprovalDetail();
-             NewestContact = new ContactData();
=                 //slightly different for top level
=                 IWebLocator currentExpander = String.IsNullOrEmpty(currentMenuItemXPath) ?
-                     FormDesignerPage.FormManagerDragAndDrop.FormsElementTopLevelMenuItemExpander(nestedMenu) :

+                     FormDesignerPage.FormManagerDragAndDrop.FormsElementTopLevelMenuItemExpander(nestedMenu):
=             user.AttemptsTo(Hover.Over(fieldItem));
=             user.AttemptsTo(Drag.AndDrop(fieldItem, FormDesignerPage.FormManagerDragAndDrop.DropAreaPosition("1")));
+         }

+ 

+         /// <summary>

+         /// Create a new form

+         /// </summary>

+         /// <param name="formName"></param>

+         public void CreateForm(string formName, bool requireApproval = false)

+         {

+             var user = LoggedInUser();

+             

+             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.RadGrid1.AddNew));

+             user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.FormNameInput, formName));

+             if (requireApproval)

+             {

+                 user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.FormApprovalCheckBox));
=             }
+             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.AddFormButton));

+         }
=         /// <param name="formName"></param>
=         /// <param name="elements"></param>
-         /// <param name="requireApproval"></param>

+         public void NavigateAndCreateForm(string formName, Table elements, bool requireApproval = false)

-         /// <param name="groupName">Create form in provided group, or General by default. Create group if not exists.</param>

-         public void NavigateAndCreateForm(string formName, Table elements, bool requireApproval = false, string groupName = null)
=             user.AttemptsTo(Browse.InStaffSite(FormsLibraryPage.BaseUrl));
= 
-             if (!string.IsNullOrEmpty(groupName))

-             {

-                 var groupTab = FormsLibraryPage.FormLibrary.FormGroupsTabStrip.GetDynamicTab(groupName);

-                 if (!user.AsksFor(Existence.Of(groupTab)))

-                 {

-                     user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.FormGroupsTabStrip.GetTabByName("+")));

-                     user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.GroupNameInput, groupName));

-                     user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.AddGroupButton));

-                 }

- 

-                 user.AttemptsTo(Click.On(groupTab));

-             }

- 
=             // create form
-             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.RadGrid1.AddNew));

+             CreateForm(formName, requireApproval);

-             user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.FormNameInput, formName));

-             if (!string.IsNullOrEmpty(groupName))

-                 user.AsksFor(ValueAttribute.Of(FormsLibraryPage.FormLibrary.FormGroupCombobox)).Should().Be(groupName);

- 

-             if (requireApproval)

-                 user.AttemptsTo(Check.On(FormsLibraryPage.FormLibrary.FormApprovalCheckBox));

- 

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.AddFormButton));
=             foreach (var row in elements.Rows)
=             {
-                 row.TryGetValue("Category", out var category);

-                 row.TryGetValue("Field", out var field);

+                 string category, field;

+                 row.TryGetValue("Category", out category);

+                 row.TryGetValue("Field", out field);
=             }
= 
-             if (option.StartsWith("ddl") || option.StartsWith("dd"))

+             if (option.StartsWith("ddl"))
=         /// </summary>
=         /// <param name="formName"></param>
-         public void AddFormContent(string formName, bool createContact = false)

+         public void AddFormContent(string formName)
=             user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());
=             user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));
+             //user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));
=             user.AttemptsTo(Click.On(FormsConfigEdit.ConfigureFormSelector.Control));
=             user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsConfigEdit.ConfigureFormSelector.ComboBoxControl.DropDownValueContains(formName)));
-             if (createContact)

-                 user.AttemptsTo(Click.On(FormsConfigEdit.NewContactRecordCheckbox.Control));
=             user.AttemptsTo(SwitchFrame.ToParentFrame());
= 
+             // TODO!! jkh This cannot save and close because it is not give the publishing name, maybe other reasons?
=             // Save and Publish
+ 
=         }
= 
-         /// <summary>

-         /// Verify form elements

-         /// </summary>

-         /// <param name="table"></param>

-         public void VerifyFormHasElements(Table table)

-         {

-             var user = LoggedInUser();

- 

-             foreach (var row in table.Rows)

-             {

-                 if (row.TryGetValue("Field", out var field))

-                     user.AsksFor(Existence.Of(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(field))).Should().BeTrue();

-             }

-         }

- 
=         /// <param name="fieldType"></param>
=         /// <param name="fields"></param>
-         public void SetFieldValues(string fieldType, Table fields, string randomizedString = null)

+         public void SetFieldValues(string fieldType, Table fields)
=                 row.TryGetValue("Field", out field);
=                 row.TryGetValue("Value", out value);
-                 if (value.Contains("Random") && randomizedString != null)

-                 {

-                     value = value.Replace("Random", randomizedString);

-                 }
=                     SetTextInputValue(field, value);
=                 }
-                 //clunky but sometimes we need to keep track of these

-                 if (field.ToLowerInvariant().Contains("email")) NewestContact.Email = value;

-                 if (field.ToLowerInvariant().Contains("lastname")) NewestContact.LastName = value;

-                 if (field.ToLowerInvariant().Contains("firstname")) NewestContact.FirstName = value;
=             var user = LoggedInUser();
=             user.AttemptsTo(Browse.InStaffSite(new ImisUrl(pageName + ".aspx")));
-         }

- 

-         public void NavigateToMBRRContent(string pageName)

-         {

-             // Navigate to page

-             var user = User("Unauthenticated MBRR User");

-             user.AttemptsTo(Browse.InMemberSite(new ImisUrl(pageName + ".aspx")));
=             user.AsksFor(Existence.Of(FormsDisplay.FormRuntimeErrorMessage)).Should().BeFalse();
=         }
- 

-         public void VerifyValuesWithElements(Table table)

-         {

-             var user = LoggedInUser();

-             foreach (var row in table.Rows) {

-                 string given, expected;

-                 string field = "AStaticTestSource_Curr";

-                 given = row["Given"];

-                 expected = row["Expected"];

-                 user.AttemptsTo(SendKeys.To(FormsDisplay.TextInputField(field), given));

- 

-                 user.AttemptsTo(Click.On(FormsDisplay.TextBoxLabelField(field))); //we need to get out of the box so the waits until works

-                 user.WaitsUntil(HtmlAttribute.Of(FormsDisplay.ClientStateTextInputField(field), "value"), ContainsSubstring.Text(expected));
= 
-                 user.AttemptsTo(Click.On(FormsDisplay.SubmitButton));

-             }

-         }

- 

-         public void VerifyElementLabelLocation(string inputType, string section, string location) 

-         {

-             var user = LoggedInUser();

-             if (inputType.Equals("checkbox"))

-                 user.AsksFor(Existence.Of(FormsDisplay.LabelLocation(section, location))).Should().BeTrue();

-         }
=                 user.AsksFor(Text.Of(FormsDisplay.GetLocatorByFieldType(fieldType, fieldId))).Should().Be(fieldValue);
=             }
-         }

- 

-         public void VerifyCurrentUrl(string url)

-         {

-             _driver.Url.Should().Contain(url.ToString());


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Fundraising\DonorTestMethods.cs
=         public ReviewPaymentsPage ReviewPaymentsPage { get; set; }
=         private AccountPageStaff AccountPageStaff { get; set; }
-         private ThreeDSPaymentModal ThreeDSPaymentModal { get; set; }
=             ReviewPaymentsPage = new ReviewPaymentsPage();
=             AccountPageStaff = new AccountPageStaff();
-             ThreeDSPaymentModal = new ThreeDSPaymentModal();
=             user.AttemptsTo(Refresh.Browser());
=             user.AsksFor(Text.Of(AccountPageStaff.GivingTab.EnrollmentGrid.Cell(1, 4))).Should().Be(amount);
-         }

- 

-         public void VerifyThankYouPage()

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Existence.Of(DonorThankYouPage.ThankYouMessage.DisplayMessage), IsEqualTo.True());

-         }

-         public void VerifyDeclinedByTheBank()

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Text.Of(DonorThankYouPage.PayCentralValidationMessage), ContainsSubstring.Text("Payment declined by the bank"));

-         }

-         

-         public void ClickCompleteAuthenticationButton()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(SwitchFrame.ToStripe3dsChallengeFrame());

-             user.AttemptsTo(SwitchFrame.ToStripeACSFrame());

-             user.AttemptsTo(Click.On(ThreeDSPaymentModal.CompleteAuthenticationButton));

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

-         }

-         public void ClickFailAuthenticationButton()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(SwitchFrame.ToStripe3dsChallengeFrame());

-             user.AttemptsTo(SwitchFrame.ToStripeACSFrame());

-             user.AttemptsTo(Click.On(ThreeDSPaymentModal.FailAuthenticationButton));

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Fundraising\EnterGiftsTestMethods.cs
=         public AdjustmentLogsPage AdjustmentLogsPage { get; set; }
=         public GiftInformationPage GiftInformationPage { get; set; }
-         public AccountPageStaff AccountPageStaff { get; set; }
=             InvoicesPage = new InvoicesPage();
=             GiftInformationPage = new GiftInformationPage();
-             AccountPageStaff = new AccountPageStaff();
=         {
=             var user = LoggedInUser();
-             user.WaitsUntil(Appearance.Of(GiftAdjustmentPanelContent.AppSingleGift.SaveButton),IsEqualTo.True());

-             user.AttemptsTo(Click.On(GiftAdjustmentPanelContent.AppSingleGift.SaveButton));

-             user.AttemptsTo(Waiting.InSeconds(1));
=             user.AttemptsTo(Click.On(GiftAdjustmentPanelContent.AppSingleGift.SaveButton));
-             user.AttemptsTo(Waiting.InSeconds(2));
=                 user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.ListAsAnonymous.GetLocator, data.ListAsAnonymous));
= 
+             user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.DoNotReceipt.GetLocator, data.DoNotReceipt));

+ 
= 
=             user.AttemptsTo(SetWhenProvided.TextBox(GiftAdjustmentPanelContent.AppSingleGift.AdjustmentDate.Locator, ConvertDateKeyword(data.GiftDate)));
-             user.AttemptsTo(Waiting.InSeconds(2));

+             
=             user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultGiftItem.Locator, giftData.DefaultGiftItem));
=             user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultSourceCode.Locator, giftData.DefaultSourceCode));
-             user.WaitsUntil(Appearance.Of(GiftEntryPanelContent.DonationType.Locator), IsEqualTo.True());

+ 
=             user.AttemptsTo(Waiting.InSeconds(1));
=             PersistedGiftInfo = GetGiftInfo(true);
-         }

- 

-         public void CreateSplitGift(GiftData giftData, string type)

-         {

-             var user = User("View SplitGiftItem Entry User");

- 

-             user.AttemptsTo(Browse.InImis(GiftEntryPage.BaseUrl));

-             user.AttemptsTo(Click.On(GiftEntryAppMain.CreateBatchButton.GetLocator));

- 

-             user.AttemptsTo(Select.ByText(GiftEntryPanelContent.DonationType.Locator, type));

- 

-             user.AttemptsTo(Waiting.InSeconds(1));

-             ExpandSplitGifts(user);

-             EnterGiftTypeInfo(user, "Split Gift", giftData);

-         }

- 

-         public void ExpandSplitGifts(IActor user)

-         {

-             //click the expand link

-             user.AttemptsTo(Click.On(GiftEntryPanelContent.SplitGiftLink.GetLocator));

-         }

- 

-         public void EnterSplitGiftItems(List<SplitGiftData> giftItems)

-         {

-             var user = User("View SplitGiftItem Entry User");

-             int currentrow = 0;

-             foreach (var giftItem in giftItems)

-             {

-                 var sb = GiftEntryPanelContent.SplitGiftGrid.GiftID(++currentrow).SearchBox;

-                 user.AttemptsTo(Click.On(sb));

-                 user.AttemptsTo(SendKeys.To(sb, giftItem.GiftItem));

-                 user.AttemptsTo(Click.On(GiftEntryPanelContent.SplitGiftGrid.GiftID(currentrow).SelectGridRowByIndex(1)));

-                 user.AttemptsTo(Click.On(GiftEntryPanelContent.SplitGiftGrid.Amount(currentrow)));

-                 user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SplitGiftGrid.Amount(currentrow), giftItem.Amount));

-                 user.AttemptsTo(Waiting.ForPageReload());
=         }
= 
-             //set the persisted split gift list

-             //finish up

-             user.AttemptsTo(Click.On(GiftEntryPanelContent.SaveButton));

-             //Need to wait for changes to take place

-             user.AttemptsTo(Waiting.InSeconds(3));

-             user.AttemptsTo(Click.On(GiftEntryAppMain.ProcessBatchButton.GetLocator));

-         }

- 

-         public void VerifySplitGiftPaymentAmount(string amount)

-         {

-             var user = User("View SplitGiftItem Details User");

- 

-             var paymentGrid = new AngularRadGrid("ciPayments");

-             user.AsksFor(Text.Of(paymentGrid.Cell(1, 3))).Should().Be(amount);

-         }

- 

-         public void VerifySplitGiftInvoiceAmount(int amount)

-         {

-             var user = User("View SplitGiftItem Invoice Details User");

- 

-             //verify the total invoice amount

-         }

- 

-         public void VerifySplitGiftItems(List<SplitGiftData> giftItems, string giftType = "Gift")

-         {

-             var user = User("View SplitGiftItem Details User");

-             if (giftType != "Gift")

-             {

-                 user.WaitsUntil(Appearance.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.True());

-                 user.AttemptsTo(Click.On(FindGiftsPage.ViewPledgeDetails(1)));

-                 user.AttemptsTo(Waiting.ForPageReload());

-             }

- 

-             //verify the GiftItems table data, 2nd (item code) and 3rd (amount) columns in each row.

-             var giftItemGrid = new AngularRadGrid("ciGiftitems");

-             int rowIndex = 0;

-             foreach (var giftItem in giftItems)

-             {

-                 user.AsksFor(Text.Of(giftItemGrid.Cell(++rowIndex, 2))).Should().Be(giftItem.GiftItem);

-                 user.AsksFor(Text.Of(giftItemGrid.Cell(rowIndex, 3))).Should().Be(giftItem.Amount);

-             }

-         }

- 

-         public void VerifySplitGiftInvoiceItems(List<SplitGiftData> giftItems)

-         {

-             var user = User("View SplitGiftItem Invoice Details User");

-             user.AttemptsTo(Click.On(FindGiftsPage.SelectAQuery.FirstCellLink));

-             user.AttemptsTo(Waiting.InSeconds(2));

-             var rowIndex = 0;

-             foreach (var giftItem in giftItems)

-             {

-                 user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceLinesGrid.Cell(++rowIndex, 1))).Should().Be(giftItem.GiftItem);

-                 user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceLinesGrid.Cell(rowIndex, 3))).Should().Be(giftItem.Amount);

-             }

-         }

- 

-         public void VerifySplitGiftsInvoiceNumber(List<SplitGiftData> giftItems)

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(FindGiftsPage.SelectAQuery.GetRowCount(), IsEqualTo.Value(giftItems.Count));

-             var invoiceNumber = user.AsksFor(Text.Of(FindGiftsPage.SelectAQuery.FirstCell));

- 

-             invoiceNumber.Should().NotBeNull();

-             if (giftItems.Count > 1)

-             {

-                 var rowIndex = 0;

-                 foreach (var giftItem in giftItems)

-                 {

-                     user.AsksFor(Text.Of(FindGiftsPage.SelectAQuery.Cell(++rowIndex, 1, true))).Should().Be(invoiceNumber);

-                 }

-             }

-         }

- 
=                 user.AttemptsTo(SendKeys.To(GiftEntryPage.FirstName, giftData.FirstName));
=                 user.AttemptsTo(SendKeys.To(GiftEntryPage.LastName, giftData.LastName));
-                 user.AttemptsTo(Waiting.InSeconds(2));

+                 Waiting.ForPageReload();
=                 user.AttemptsTo(Click.On(GiftEntryPage.NewContactSave));
-                 user.AttemptsTo(Waiting.InSeconds(2));

+                 Waiting.ForPageReload();
=                 _context.UpsertData("FirstName", giftData.FirstName);
=                 _context.UpsertData("LastName", giftData.LastName);
+                 Waiting.ForPageReload();
=             if (giftData.ListAsAnonymous)
=                 user.AttemptsTo(SetWhenProvided.CheckBox(ListAs.ListAsAnonymousCheckBox, giftData.ListAsAnonymous));
-             if (giftType != "Split Gift")

+             if (giftData.Amount.Contains("Random"))

-             {

-                 if (!String.IsNullOrEmpty(giftData.Amount) && giftData.Amount.Contains("Random"))
=             else
=                 user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.Amount.Locator, giftData.Amount).UsingClearMethod());
-             }
=             {
=                 case "Gift":
-                     SetFinderSelection(user, GiftEntryPanelContent.GiftItem, giftData.GiftItem);
=                     user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));
=                     break;
-                 case "Split Gift":

-                     EnterMainGiftData(user, giftData);

-                     break;
=                 case "Pledge":
-                     SetFinderSelection(user, GiftEntryPanelContent.GiftItem, giftData.GiftItem);
=                     break;
=                 case "Installment Pledge":
-                     SetFinderSelection(user, GiftEntryPanelContent.GiftItem, giftData.GiftItem);
=         public void EnterMainGiftData(IActor user, GiftData giftData)
=         {
+             SetFinderSelection(user, GiftEntryPanelContent.GiftItem, giftData.GiftItem);
=                 EnterTributeData(user, giftData);
=             user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.Details.Locator, giftData.Details));
-             if (user.AsksFor(Existence.Of(GiftEntryPage.AddGiftAid)))

-             {
=             user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPage.AddGiftAid, giftData.GiftAid));
-             }

-             if (user.AsksFor(Existence.Of(GiftEntryPage.GiftAidDeclarationSelection)))

-             {
=             user.AttemptsTo(SetWhenProvided.DropDown(GiftEntryPage.GiftAidDeclarationSelection, giftData.GiftAidDeclaration));
-             }
=         {
=             var user = LoggedInUser();
-             var messageElement = GiftEntryPage.GiftEntryApp.UserMessage.GetLocator(message);

-             user.AttemptsTo(Wait.Until(Appearance.Of(messageElement), IsEqualTo.True()));

+             var test = GiftEntryPage.GiftEntryApp.UserMessage.GetLocator(message);

+             user.AttemptsTo(Wait.Until(Appearance.Of(test), IsEqualTo.True()));

-         }

- 

-         public void VerifyGiftAppReceiptMessage(string message)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));//need to make sure focus isn't on date for message to appear

-             var messageElement = GiftEntryPage.GiftEntryApp.ReceiptMessage.GetLocator(message);

-             user.AttemptsTo(Wait.Until(Appearance.Of(messageElement), IsEqualTo.True()));
=             var user = User("Find Gift To Adjust User");
=             user.AttemptsTo(Click.On(FindInvoiceModal.FindGiftsButton.GetLocator));
-             user.WaitsUntil(Appearance.Of(FindInvoiceModal.DonorIdFinder.SearchBox), IsEqualTo.True());
=             else
=                 user.AttemptsTo(SendKeys.To(FindInvoiceModal.DonorIdFinder.SearchBox, $"{giftSearchData.FirstName} {giftSearchData.LastName}"));
+             user.AttemptsTo(Click.On(FindInvoiceModal.DonorIdFinder.SelectRowByIndex(1)));

+             user.AttemptsTo(Select.ByText(FindInvoiceModal.GiftType.GetLocator, giftSearchData.Type));
=             user.AttemptsTo(Click.On(FindInvoiceModal.FindButton.GetLocator));
-             //user.AttemptsTo(Click.On(FindInvoiceModal.DonorIdFinder.SelectRowByIndex(1)));

-             //user.AttemptsTo(Select.ByText(FindInvoiceModal.GiftType.GetLocator, giftSearchData.Type));

-             //user.AttemptsTo(Click.On(FindInvoiceModal.FindButton.GetLocator));
=             user.AttemptsTo(Select.ByText(PaymentDetails.RefundDisplay.AdjustmentType, "Reverse the payment"));
=             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));
-         }

- 

-         public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)

-         {

-             var user = LoggedInUser();

- 

-             user.WaitsUntil(FindGiftsPage.SelectAQuery.GetRowCount(), IsEqualTo.Value(1));

-             user.WaitsUntil(Text.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.Value(id));

-         }

- 

-         public void VerifySplitGiftAccountItems(List<SplitGiftData> giftItems)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Wait.Until(Existence.Of(AccountPageStaff.Tab("Giving")), IsEqualTo.True()));

-             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Giving")));

-             user.AttemptsTo(ScrollToElement.At(AccountPageStaff.GivingTab.GivingHistoryDisplay.ResultsGrid.Grid));

-             foreach(var gift in giftItems)

-             {

-                 var cellWithAmount = AccountPageStaff.GivingTab.GivingHistoryDisplay.ResultsGrid.TextInTable(gift.Amount);

-                 var cellWithGiftItem = AccountPageStaff.GivingTab.GivingHistoryDisplay.ResultsGrid.TextInTable(gift.GiftItem);

-                 user.AsksFor(Existence.Of(cellWithAmount)).Should().Be(true);

-                 user.AsksFor(Existence.Of(cellWithGiftItem)).Should().Be(true);

-             }

-         }

- 

-         public void VerifySplitGiftsInvoiceAmount(string amount)

-         {

-             var user = LoggedInUser();

-             user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.OriginalInvoiceTotal)).Should().Be(amount);


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Fundraising\GiftAidTestMethod.cs
=             var user = LoggedInUser();
=             user.AttemptsTo(Donate.GiftAid(contactData, cartData, 50).OnGiftAidPage().SkipPayment());
-             user.AttemptsTo(Waiting.ForPageReload());

+ 
=             //Submit Gift Aid data
-             user.AttemptsTo(Check.On(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox));

-             // Checking for an existing Declaration - Confirmation message if one exists 

+             if (!user.AsksFor(SelectedState.Of(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox)))

+                 user.AttemptsTo(Click.On(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox));

-             if (!user.AsksFor(Appearance.Of(DonateNowPage.GiftAidConfirmationMessage)))

-             {

-                 user.WaitsUntil(Existence.Of(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.MethodOfDeclaration), IsEqualTo.True());
=             user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.ConfirmationDate.TextBox, giftData.ConfirmationLetterSent));
=             user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.DeclarationNotes, giftData.DeclarationNotes));
-             }

+ 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\RiSE\RiseTestMethods.cs
=         public PanelEditor StandaloneEditor { get; set; }
=         public DuplicateMergePage DuplicateMergePage { get; set; }
-         public CommunitiesDashboardPage CommunitiesDashboardPage { get; set; }

-         public AccountArea AccountArea { get; set; }

-         public BigButtonPanelEdit BigButtonPanelEdit { get; set; }

-         public PublishServersListPage PublishServersListPage { get; set; }
=             StandaloneEditor = new PanelEditor("");
=             DuplicateMergePage = new DuplicateMergePage();
-             CommunitiesDashboardPage = new CommunitiesDashboardPage();

-             AccountArea = new AccountArea("AccountArea");

-             BigButtonPanelEdit = new BigButtonPanelEdit();

-             PublishServersListPage = new PublishServersListPage();
=             user.AttemptsTo(Waiting.ForPageReload());
=             user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));
-             user.AttemptsTo(Waiting.InSeconds(1));

+             user.AttemptsTo(Waiting.InSeconds(2));
=             user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));
=             user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.ContentTitle, ContentName));
+             // jkh?? field is required but not filled, save fails

+            user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.PublishFileName, ContentName));
=         }
= 
-         public void CreateMemberWebsiteContent(string ContentName)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));

-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("@")));

-             user.AttemptsTo(Waiting.ForPageReload());

-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Quick Start Sites")));

-             user.AttemptsTo(Waiting.ForPageReload());

-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Member Responsive")));

-             user.AttemptsTo(Waiting.ForPageReload());

-             user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));

-             user.AttemptsTo(Waiting.InSeconds(1));

-             user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.WebsiteContentItem), IsEqualTo.True());

-             user.AttemptsTo(Click.On(ObjectBrowserComponents.WebsiteContentItem));

-             user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));

-             user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.ContentTitle, ContentName));

-         }

- 
= 
=             user.AttemptsTo(Browse.InStaffSite(PanelDesignerPage.BaseUrl));
- 

-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName,exactMatch: true)))) 

-             {

-                 _context.UpsertData(panel.Name, panel);

-                 SourceAndPanelCleanup(panel.Name);

-             }
= 
=             StartAddPropertyDialogue();
-             if (!prop.PreDefinedValuesType.IsNullOrEmpty())

+             if (!string.IsNullOrEmpty(prop.PreDefinedValuesType))
= 
=                 //Set property type
-                 if (prop.Type.IsNullOrEmpty())

+                 if (string.IsNullOrEmpty(prop.Type))
= 
=                 //Set Display as Single/Multi line
-                 if (prop.Type.Equals("Text",StringComparison.OrdinalIgnoreCase) && prop.PreDefinedValuesType.IsNullOrEmpty())

+                 if (prop.Type.Equals("Text",StringComparison.OrdinalIgnoreCase) && string.IsNullOrEmpty(prop.PreDefinedValuesType))
=         {
=             var user = LoggedInUser();
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);

+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
=         {
=             var user = LoggedInUser();
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);

+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
=             var coords = new[] { 0, 0 };
=             for (int i = 0; i < 150; i++)
-                 if (user.AsksFor(Existence.Of(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(coords[0], coords[1]))))

+                 if (user.AsksFor(

+                         Existence.Of(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(coords[0], coords[1]))))

+                 {

+                     user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method
=                     DeleteCellOnGrid(coords);
+                 }
=             var user = LoggedInUser();
=             user.AttemptsTo(Click.On(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(rowAndColumn[0], rowAndColumn[1])));
-             user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method
=             while (coords[0] < 50 && !foundNonDeletedProp)
=                 foundNonDeletedProp = CheckForExistenceAndIterateCoord(true, FindHiddenCell, coords);
-             foundNonDeletedProp.Should().BeFalse($"because cell detected in Panel Designer grid at row {coords[0]} cell {coords[1]}.");

+ 

+             Assert.IsFalse(foundNonDeletedProp, $"Cell detected in Panel Designer grid at row {coords[0]} cell {coords[1]}.");
=             var spanFound = user.AsksFor(Existence.Of(pathToSpan));
=             if (shouldFindSpan)
-                 spanFound.Should().BeTrue($"because {span} was not found on page");

+                 Assert.IsTrue(spanFound, $"{span} was not found on page");
=             else
-                 spanFound.Should().BeFalse($"because {span} was found on page");

+                 Assert.IsFalse(spanFound, $"{span} was found on page");
= 
=             //Get browser tab opened
-             var windowHandles = _driver.WindowHandles;

-             var windowTitle = _driver.SwitchTo().Window(windowHandles[1]).Title;

+             // var windowHandles = _driver.WindowHandles;

+             // var windowTitle = _driver.SwitchTo().Window(windowHandles[1]).Title;
= 
-             //Verify that correctly loaded browser tab title has correct Content Name

-             windowTitle.Should().Contain(ContentName);

+             // //Verify that correctly loaded browser tab title has correct Content Name

+             // windowTitle.Should().Contain(ContentName);
= 
=             user.AttemptsTo(Browse.InStaffSite(PanelDefinitionListPage.BaseUrl));            
- 

-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))

-                 user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));

- 

-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName)))) 

-             {
=             DeletePanel(panelName);
=         }
-         }
= 
=             user.AttemptsTo(Select.ByText(PanelEditorConfigEdit.ConfigurePanelSelector.Control, panelName));
-             user.AttemptsTo(SetWhenProvided.TextBox(PanelEditorConfigEdit.DescriptionTextArea, "Panel description text with <b>markup</b>"));
=         {
=             var user = LoggedInUser();
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);

+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
=                 user.AttemptsTo(Browse.InStaffSite(new ImisUrl(pageName)));
=         }
- 

-         public void EditPanelSource(string attributeName, string propertyName, string panelName)

-         {

-             var panel = (PanelData)_context.DataStorage[panelName];

-             EditPanelDefinition(panel);

-             EditSourceProperty(attributeName, propertyName, panel.Source);
=     }
- 

-         private void EditSourceProperty(string attributeName, string propertyName, string sourceName)

-         {

-             var user = LoggedInUser();

- 

-             var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);

-             var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;

- 

-             OpenSourceProperties(sourceName);

- 

-             user.AttemptsTo(Click.On(pathToPropertyElement));

-             user.AttemptsTo(RightClick.On(pathToPropertyElement));

-             user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());

-             user.AttemptsTo(Waiting.InSeconds(1));

-             user.AttemptsTo(Click.On(pathToPropertyViewButton));

- 

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

- 

-             user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());

-             user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);

- 

-             if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))

-                 user.AttemptsTo(Check.On(PanelDesignerPage.LogAllChangesCheckBox));

- 

-             user.AttemptsTo(ClickCommandButton.Ok());

- 

-         }

- 

-         public void VerifyPropertyAttributeValue(string attributeName, string propertyName) 

-         {

-             var user = LoggedInUser();
= 
-             var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);

-             var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;

- 

-             user.AttemptsTo(SwitchFrame.ToParentFrame());

- 

-             user.AttemptsTo(Click.On(pathToPropertyElement));

-             user.AttemptsTo(RightClick.On(pathToPropertyElement));

-             user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());

-             user.AttemptsTo(Waiting.InSeconds(1));

-             user.AttemptsTo(Click.On(pathToPropertyViewButton));

- 

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

- 

-             user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());

-             user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);

- 

-             if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))

-                 user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.LogAllChangesCheckBox, "checked"));

- 

-         }

- 

-         public void VerifyPageConfigureProperties()

-         {

-             var user = LoggedInUser();

- 

-             user.AsksFor(Appearance.Of(StandaloneEditor.PanelDescription)).Should().BeTrue();

-             user.AsksFor(Text.Of(StandaloneEditor.PanelDescription)).Should().Contain("Panel description text with markup");

-         }

- 

-         public void NavigateToTheContentItemToEdit(Table table)

-         {

- 

-             var basePage = ((string[])table.Rows[0].Values)[0];

- 

-             var user = LoggedInUser();

- 

-             if (basePage.Equals("CommunitiesDashboardPage")) 

-             {

-                 user.AttemptsTo(Browse.InStaffSite(CommunitiesDashboardPage.BaseUrl));

-             }

-             

-             if (user.AsksFor(Existence.Of(AccountArea.STEToggleOff)) == true)

-                 user.AttemptsTo(Click.On(AccountArea.STEToggleOff));

- 

-             var contentItemName = ((string[])table.Rows[0].Values)[1];

-             if (contentItemName.Equals("BigButtonPanelEdit"))

-             {

- 

-                 user.AttemptsTo(Click.On(PageUtilities.ConfigureButton("Big Button Panel")));

-                 user.AttemptsTo(SwitchFrame.ToGenericWindow());

- 

-                 user.AttemptsTo(Waiting.InSeconds(1));

-                 user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.AddButton));

-                 user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));

- 

-                 for (int i = 1; i <= 15; i++)

-                 {     

-                     user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));

-                     user.AttemptsTo(Waiting.InSeconds(1));

-                     user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item {i}"));

-                     user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTargetTextBox, $"http://{TestHelper.GenerateRandomString(10)}.org"));

-                     user.AttemptsTo(Click.On(BigButtonPanelEdit.InsertButton));

- 

-                     if (i < 15)

-                     {                       

-                         user.AttemptsTo(Waiting.InSeconds(1));

-                         user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));

-                         user.AttemptsTo(Waiting.InSeconds(1));

-                     }

-                 }

-             }

-         }

- 

-         public void VerifyContentItemCorrect()

-         {

-             var user = LoggedInUser();

- 

-             //This control is tall when the grid is populated and has postbacks

-             //and the page has to scroll back to the bottom each time so the wait times are needed.

- 

-             user.AttemptsTo(Waiting.InSeconds(2));

-             user.AttemptsTo(Click.On(BigButtonPanelEdit.EditButton));

- 

-             user.AttemptsTo(Waiting.InSeconds(2));

-             user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));

-             user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item Modified Test"));

-             user.AttemptsTo(Click.On(BigButtonPanelEdit.UpdateButton));

- 

-             user.AttemptsTo(Waiting.InSeconds(2));

-             user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.FirstPageButton));

-             user.AsksFor(Appearance.Of(PageBase.UIText("Item 1"))).Should().BeTrue();

- 

-             user.AttemptsTo(Waiting.InSeconds(2));

-             user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.ResultsGrid.LastPageButton));

-             user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.LastPageButton));

- 

-             user.AttemptsTo(Waiting.InSeconds(2));

-             user.AsksFor(Appearance.Of(PageBase.UIText("Item Modified Test"))).Should().BeTrue();

-         }

- 

-         public void NavigateToThePublishingServersPage() 

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InStaffSite(PublishServersListPage.BaseUrl));

-             user.WaitsUntil(Appearance.Of(PublishServersListPage.PublishingServersGrid.Grid), IsEqualTo.True());

-             user.WaitsUntil(Existence.Of(PageBase.PageTitle), IsEqualTo.True());

-         }

- 

-         public void VerifyPublishingServersGridLoads() 

-         {

-             var user = LoggedInUser();

-             user.AsksFor(Text.Of(PageBase.PageTitle)).Should().Be("Publishing servers");

-             user.AsksFor(Existence.Of(PublishServersListPage.AddServerLink));

-             user.AsksFor(Existence.Of(PublishServersListPage.PublishingServersGrid.CellLinkWithText("Gold publish server", exactMatch: true)));

-         }

-     }


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Settings\LicenseManagementTestMethods.cs
=     public class LicenseManagementTestMethods : TestMethodBase
=     {
-         private LicenseServerPage LicenseServerPage { get; set; }

-         private UpsertLicenseModal UpsertLicenseModal { get; set; }

-         private UpsertLicenseIssuedModal UpsertLicenseIssuedModal { get; set; }
=         public LicenseManagementTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)
=         {
-             LicenseServerPage = new LicenseServerPage();

-             UpsertLicenseModal = new UpsertLicenseModal();

-             UpsertLicenseIssuedModal = new UpsertLicenseIssuedModal();
=             var user = User("LicenseManager");
=             user.AttemptsTo(ManageLicense.CheckLicensedProductName(productName));
-         }

- 

-         public void VerifyLicenseServerPageTitle()

-         {

-             var user = User("LicenseManager");

-             user.AsksFor(Title.OfPage()).Should().Be("Index - Asi License Server");

-         }

- 

-         public void CreateNewLicense(string licenseProduct, string licenseType)

-         {

-             var user = User("LicenseManager");          

-             var clientName = licenseProduct + " " + TestHelper.GenerateRandomString(3);

-             //Storing the randomly generated value to the data storage and use it  the test method later 

-             _context.DataStorage.Add("ClientName",clientName);

-             _context.DataStorage.Add("LicenseProduct", licenseProduct);

- 

-             user.AttemptsTo(Click.On(LicenseServerPage.AddClientButton));

-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientName, clientName));

-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientID, TestHelper.GenerateRandomNumber(10,1000).ToString()));

-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.SerialNumber, TestHelper.GenerateRandomNumber(10000,1000000).ToString()));

-             user.AttemptsTo(Select.ByText(UpsertLicenseModal.Region,"United States"));

-             if (licenseProduct == "iMIS EMS")

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseProduct));

-             else if(licenseProduct == "iMIS 100")                

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.ProfessionalProduct));

-             else

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseOnPremiseProduct));

-             //Select License Type

-             if (licenseType == "Production")

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.ProductionLicense));

-             else if( licenseType == "Test")

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.TestLicense));

-             else

-                 user.AttemptsTo(Click.On(UpsertLicenseModal.DemoLicense));

-             user.AttemptsTo(Click.On(UpsertLicenseModal.SaveAndCloseButton));

- 

-         }

- 

-         public void VerifyLicenseCreation(string licenseProduct, string licenseType)

-         {

-             var user = LoggedInUser();

-             var clientName = _context.DataStorage["ClientName"].ToString();

-             user.AsksFor(Text.Of(LicenseServerPage.LicenseNameLocator(clientName))).Should().Be(clientName);

-             user.AsksFor(Text.Of(LicenseServerPage.LicenseProductLocator)).Should().Be(licenseProduct);

-             user.AsksFor(Text.Of(LicenseServerPage.LicenseUseLocator)).Should().Be(licenseType);

-         }

- 

-         public void DeleteLicense()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(LicenseServerPage.EditButton));

-             user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteButton));

-             user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteConfirmationButton));

- 

-         }

- 

-         public void VerifyLicenseDeletion()

-         {

-             var user = LoggedInUser();

-             var clientName = _context.DataStorage["ClientName"].ToString();

-             user.WaitsUntil(Appearance.Of(LicenseServerPage.SuccessfulDeleteAlert(clientName)), IsEqualTo.True());

-         }

- 

-         public void AddLicenseFeatures()

-         {

-             var user = LoggedInUser();

-             var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();

- 

-             user.AttemptsTo(Click.On(UpsertLicenseModal.AddNewLicenseButton));

-             UpdateLicenseEffectiveDate();

-             foreach (var feature in UpsertLicenseIssuedModal.LegacyAndCommonFeatures(licenseProduct))

-             {

-                 user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());

-                 user.AttemptsTo(Click.On(feature));

-             }

-             user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.SelectAllPackage));

-             user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.AddAndCloseButton));

-         }

- 

-         public void VerifyActiveLicenseCreation()

-         {

-             var user = LoggedInUser();

-             var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();

- 

-             user.WaitsUntil(Existence.Of(UpsertLicenseModal.ActiveLicense), IsEqualTo.True());

-             user.WaitsUntil(Existence.Of(UpsertLicenseModal.LicensedFeatures), IsEqualTo.True());

-             foreach (var feature in UpsertLicenseModal.SelectAllFeatures(licenseProduct))

-             {

-                 user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());

-             }

- 

-         }

- 

-         public void UpdateLicenseExpiryDate()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(UpsertLicenseModal.AddNewLicenseButton));

-             user.WaitsUntil(Appearance.Of(UpsertLicenseIssuedModal.ExpirationDate), IsEqualTo.True());

- 

-             var expiryDate = user.AsksFor(ValueAttribute.Of(UpsertLicenseIssuedModal.ExpirationDate));

-             var newExpirationDate =DateOnly.Parse(expiryDate).AddDays(40);

-             _context.DataStorage.Add("NewExpirationDate", newExpirationDate);

-             

-             user.AttemptsTo(SetWhenProvided.TextBox(UpsertLicenseIssuedModal.ExpirationDate, newExpirationDate.ToString()));

-             user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.AddAndCloseButton));

-         }

- 

-         public void VerifyUpdatedLicenseExpiryDate()

-         {

-             var user = LoggedInUser();

-             var expirationDate = _context.DataStorage["NewExpirationDate"].ToString();

-             user.WaitsUntil(Appearance.Of(UpsertLicenseModal.LicenseExpiryDateLocator), IsEqualTo.True());

-             user.AsksFor(Text.Of(UpsertLicenseModal.LicenseExpiryDateLocator)).Should().Contain(expirationDate);

-         }

- 

-         public void GetLicenseClientKeyAndAccessCode() 

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(UpsertLicenseModal.ShowLicenseKeyButton));

-             user.WaitsUntil(Existence.Of(UpsertLicenseModal.ClientLicenseKey), IsEqualTo.True());

-             user.AttemptsTo(Waiting.InSeconds(1));

-             var clientLicenseKey = user.AsksFor(Text.Of(UpsertLicenseModal.ClientLicenseKey));

-             _context.DataStorage.Add("licenseKey", clientLicenseKey);

-             user.AttemptsTo(Waiting.InSeconds(1));

-         }

- 

-         public void Signout()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(UpsertLicenseModal.SignOutButton));

-             user.AttemptsTo(Waiting.InSeconds(1));

-         }

-         public void UpdateLicenseEffectiveDate()

-         {

-             var user = LoggedInUser();

-             

-             user.WaitsUntil(Appearance.Of(UpsertLicenseIssuedModal.EffectiveDate), IsEqualTo.True());

- 

-             var effectiveDate = user.AsksFor(ValueAttribute.Of(UpsertLicenseIssuedModal.EffectiveDate));

-             var newEffectiveDate = DateOnly.Parse(effectiveDate).AddDays(-1);

- 

-             user.AttemptsTo(SetWhenProvided.TextBox(UpsertLicenseIssuedModal.EffectiveDate, newEffectiveDate.ToString()));

- 

-         }

- 

-         public void VerifyLicensedAppliedToIMIS()

-         {

-             var user = LoggedInUser();

-             var licenseName = _context.DataStorage["ClientName"].ToString();

-             user.AttemptsTo(ManageLicense.CheckLicenseName(licenseName));


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Settings\SettingsTestMethods.cs
=         private AboutiMIS AboutiMIS { get; set; }
=         public SystemOptionsConfigPage SystemOptionsConfigPage { get; set; }
+ 
=     }
= }
+ 

+ 


<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web\TestMethods\Settings\Finance\FinanceSettingsTestMethods.cs
=     public class FinanceSettingsTestMethods : TestMethodBase
=     {
-         public const string CurrentCultureKey = "currentCulture";

- 
=             FinancialEntitiesPage = new FinancialEntitiesPage();
=             FinanceGeneralSettingsPage = new FinanceGeneralSettingsPage();
-             OrganizationSettingsPage = new OrganizationSettingsPage();

-             Driver = driver;
=         public FinancialEntitiesPage FinancialEntitiesPage { get; set; }
=         public FinanceGeneralSettingsPage FinanceGeneralSettingsPage { get; set; }
-         private OrganizationSettingsPage OrganizationSettingsPage { get; }

-         private IWebDriver Driver { get; }

- 
=                     user.AttemptsTo(SelectDefaultCountryCurrency.ToOther());
=                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, ""));
-                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, Keys.Tab));

+                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, Keys.Enter));

-                     user.WaitsUntil(Text.Of(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBoxRequiredValidator), ContainsSubstring.Text("currency"));
=             VerificationOfCountryCurrency(organizationDefaultCultureData.Country);
=             VerifyOrganizationDefaultCulture(organizationDefaultCultureData);
-         }

- 

-         public void SelectBatchMode(string BatchModeSelection)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));

-             user.AttemptsTo(SetWhenProvided.DropDown(FinanceGeneralSettingsPage.BatchModeSelectorDropDownList, BatchModeSelection));

-             user.AttemptsTo(ClickCommandButton.Save());

-         }

- 

-         /// <summary>

-         /// Saves Language Culture Name value to the context from the organization setting page

-         /// </summary>

-         public void SaveOrganizationDefaultCulture()

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InStaffSite(OrganizationSettingsPage.BaseUrl));

- 

-             if (!user.AsksFor(SelectedState.Of(OrganizationSettingsPage.DisplayOrganizationDefault)))

-             {

-                 var browserLanguage = Driver.ExecuteJavaScript<string>("return window.navigator.language");

-                 _context.AddData(CurrentCultureKey, browserLanguage);

- 

-                 return;

-             }

- 

-             var currentCulture = user.AsksFor(ValueAttribute.Of(OrganizationSettingsPage.DefaultCultureDropDown));

-             if (currentCulture == "Other")

-                 currentCulture = user.WaitsUntil(ValueAttribute.Of(OrganizationSettingsPage.DefaultCultureTextBox), IsNotEqualTo.Value(""));

- 

-             _context.AddData(CurrentCultureKey, currentCulture);

- \Asi.Selenium.Shared.V10\AssemblyInfo.cs
- \Asi.Selenium.Shared.V10\Startup.cs
- \Asi.Selenium.Shared.V10\Features\Taxation.feature.cs
- \Asi.Selenium.Shared.V10\Features\Commerce\Products.feature.cs
- \Asi.Selenium.Shared.V10\Features\Community\Contact.feature.cs
- \Asi.Selenium.Shared.V10\Features\Events\EventRegistration.feature.cs
- \Asi.Selenium.Shared.V10\Features\Events\EventsAnonymousUser.feature.cs
- \Asi.Selenium.Shared.V10\Features\Events\EventTemplates.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\ContactEmailAddressSync.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\ContactFormTests.feature
- \Asi.Selenium.Shared.V10\Features\Forms\ContactFormTests.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\FormDesigner.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\FormPanelSource.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\FormsDefectCoverage.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\MemberField.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\MultiLayouts.feature.cs
- \Asi.Selenium.Shared.V10\Features\Forms\StateProvince.feature.cs
- \Asi.Selenium.Shared.V10\Features\Fundraising\Donation.feature.cs
- \Asi.Selenium.Shared.V10\Features\Fundraising\GiftAid.feature.cs
- \Asi.Selenium.Shared.V10\Features\Fundraising\Receipting.feature.cs
- \Asi.Selenium.Shared.V10\Features\IntroVideo\video.feature
- \Asi.Selenium.Shared.V10\Features\IntroVideo\video.feature.cs
- \Asi.Selenium.Shared.V10\Features\Membership\PartyApi.feature.cs
- \Asi.Selenium.Shared.V10\Features\Rise\PanelDesignerDuplicateMerge.feature.cs
- \Asi.Selenium.Shared.V10\Features\Rise\Rise.feature.cs
- \Asi.Selenium.Shared.V10\Features\Rise\Scoring.feature.cs
- \Asi.Selenium.Shared.V10\Features\Settings\AboutiMIS.feature.cs
- \Asi.Selenium.Shared.V10\Features\Settings\SystemConfig.feature.cs
- \Asi.Selenium.Shared.V10\obj\Debug\net7.0\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs
- \Asi.Selenium.Shared.V10\obj\Debug\net7.0\Asi.Selenium.Shared.V10.AssemblyInfo.cs
- \Asi.Selenium.Shared.V10\obj\Debug\net7.0\MSTest.AssemblyHooks.cs
- \Asi.Selenium.Shared.V10\Steps\Forms\CreatedFormInteractionStepDef.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\login.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\member\member_buy_membership_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\member\member_conference_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\member\member_home_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\member\member_navigate_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\community_dashboard_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\find_contacts_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\make_a_refund_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\member_Morgan_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\staffhome_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\staff_addcontacts_page.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\pages\staff\staff_fundraising.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Steps\asi_steps.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\add_contacts_task.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\creditcard_task.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\edit_profile.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\find_member_make_refund_task.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\member_login_task.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\shop.cs
- \Asi.Selenium.Shared.V10\Steps\IntroVideo\Tasks\staff_login_task.cs
- \Asi.Selenium.V10\Features\Advertising\Advertising.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\AdAdjustments.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\InventoryManagement.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\IssueDates.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\MediaAsset.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\RateCards.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaAsset\RateCardsDetails.feature.cs
- \Asi.Selenium.V10\Features\Advertising\MediaOrder\MediaOrder.feature.cs
- \Asi.Selenium.V10\Features\Commerce\CanadaTaxation.feature
- \Asi.Selenium.V10\Features\Commerce\CanadaTaxation.feature.cs
- \Asi.Selenium.V10\Features\Commerce\GstIncTaxation.feature.cs
- \Asi.Selenium.V10\Features\Commerce\InventoryReceipts.feature.cs
- \Asi.Selenium.V10\Features\Commerce\Orders.feature
- \Asi.Selenium.V10\Features\Commerce\Orders.feature.cs
- \Asi.Selenium.V10\Features\Commerce\PricingGroup.feature
- \Asi.Selenium.V10\Features\Commerce\PricingGroup.feature.cs
- \Asi.Selenium.V10\Features\Commerce\Products.feature.cs
- \Asi.Selenium.V10\Features\Commerce\VatincTaxation.feature.cs
- \Asi.Selenium.V10\Features\Community\Committee.feature.cs
- \Asi.Selenium.V10\Features\Community\Community.feature.cs
- \Asi.Selenium.V10\Features\Community\Contact.feature.cs
- \Asi.Selenium.V10\Features\Community\ManageDuplicates.feature
- \Asi.Selenium.V10\Features\Community\ManageDuplicates.feature.cs
- \Asi.Selenium.V10\Features\Community\Search.feature.cs
- \Asi.Selenium.V10\Features\Events\CopyExisitingEvents.feature.cs
- \Asi.Selenium.V10\Features\Events\EventRegistration.feature.cs
- \Asi.Selenium.V10\Features\Events\EventsStaffUser.feature.cs
- \Asi.Selenium.V10\Features\Events\EventTemplates.feature.cs
- \Asi.Selenium.V10\Features\Events\ViewEventRegistration.feature.cs
- \Asi.Selenium.V10\Features\Finance\Finance.Feature.cs
- \Asi.Selenium.V10\Features\Finance\PayCentralSDKFinance.feature.cs
- \Asi.Selenium.V10\Features\Finance\UKPayCentralSDKFinance.feature.cs
- \Asi.Selenium.V10\Features\Forms\FormApproval.feature.cs
- \Asi.Selenium.V10\Features\Forms\Forms.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustedReceiptsTests.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustedReceiptsTests.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftItem.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftItem.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsDifferentDate.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsDifferentDate.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsLevel3User.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsLevel3User.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsSameDate.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustGiftsSameDate.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgeAmounts.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgeAmounts.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesDifferentDate.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesDifferentDate.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesLevel3User.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesLevel3User.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesSameDate.feature
- \Asi.Selenium.V10\Features\Fundraising\AdjustPledgesSameDate.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\DonateNow.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\Donor.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\DonorUK.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\EnterGifts.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\Fundraising.feature
- \Asi.Selenium.V10\Features\Fundraising\Fundraising.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\GiftAdjustmentBatch.feature
- \Asi.Selenium.V10\Features\Fundraising\GiftAdjustmentBatch.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\GiftAid.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\SplitGifts.feature
- \Asi.Selenium.V10\Features\Fundraising\SplitGifts.feature.cs
- \Asi.Selenium.V10\Features\Fundraising\Staff\Staff.feature.cs
- \Asi.Selenium.V10\Features\Marketing\CommunicationTemplate.feature.cs
- \Asi.Selenium.V10\Features\Membership\Billing.feature.cs
- \Asi.Selenium.V10\Features\Membership\BillingProducts.feature.cs
- \Asi.Selenium.V10\Features\Membership\Chapters.feature.cs
- \Asi.Selenium.V10\Features\Membership\Membership.feature
- \Asi.Selenium.V10\Features\Membership\Membership.feature.cs
- \Asi.Selenium.V10\Features\Membership\Renewals.feature.cs
- \Asi.Selenium.V10\Features\Membership\Subscriptions.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\AustraliaPaymentGateways.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\CanadaPaymentGateways.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\GoCardless.feature
- \Asi.Selenium.V10\Features\PaymentGateways\GoCardless.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\NewZealandPaymentGateways.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\Stripe.feature
- \Asi.Selenium.V10\Features\PaymentGateways\Stripe.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\UnitedKingdomPaymentGateways.feature.cs
- \Asi.Selenium.V10\Features\PaymentGateways\UnitedStatesPaymentGateways.feature.cs
- \Asi.Selenium.V10\Features\RiSE\ContactErasure.feature.cs
- \Asi.Selenium.V10\Features\SiteNavigation\AnnConfTopNav.feature.cs
- \Asi.Selenium.V10\Features\SiteNavigation\DonorTopNav.feature.cs
- \Asi.Selenium.V10\Features\SiteNavigation\MbrrTopNav.feature.cs
- \Asi.Selenium.V10\Features\SiteNavigation\StaffSideNav.feature.cs
- \Asi.Selenium.V10\Features\Staff\ContactSecurity.feature.cs
- \Asi.Selenium.V10\Features\Staff\LicenseManagement.feature.cs
- \Asi.Selenium.V10\Features\Staff\ManualBatch.feature
- \Asi.Selenium.V10\Features\Staff\ManualBatch.feature.cs
- \Asi.Selenium.V10\Features\Staff\OpenIdConnect.feature.cs
- \Asi.Selenium.V10\Features\Staff\Staff.feature.cs
- \Asi.Selenium.V10\obj\Debug\net7.0\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs
- \Asi.Selenium.V10\obj\Debug\net7.0\Asi.Selenium.V10.AssemblyInfo.cs
- \Asi.Selenium.V10\obj\Debug\net7.0\MSTest.AssemblyHooks.cs
- \Asi.Selenium.V10\Steps\Commerce\OrdersStepDef.cs
- \Asi.Selenium.V10\Steps\Commerce\PricingGroupStepDef.cs
- \Asi.Selenium.V10\Steps\Community\ManageDuplicatesStepDef.cs
- \Asi.Selenium.V10\Steps\Fundraising\FundraisingStepDef.cs
- \Asi.Selenium.V10\Steps\Membership\MembershipStepDef.cs
- \Asi.Selenium.V10\Steps\Settings\SettingsStepDef.cs
- \Asi.Selenium.Web.V10\obj\Debug\net7.0\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs
- \Asi.Selenium.Web.V10\obj\Debug\net7.0\Asi.Selenium.Web.V10.AssemblyInfo.cs
- \Asi.Selenium.Web.V10\obj\Debug\net7.0\MSTest.AssemblyHooks.cs
- \Asi.Selenium.Web.V10\Pages\Commerce\OrderDetailsPage.cs
- \Asi.Selenium.Web.V10\Pages\Commerce\PricingGroupDetailsPage.cs
- \Asi.Selenium.Web.V10\Pages\Commerce\PricingGroupPage.cs
- \Asi.Selenium.Web.V10\Pages\Community\CreateAccountNoSignInPage.cs
- \Asi.Selenium.Web.V10\Pages\Events\EventPricingGroupDialogPage.cs
- \Asi.Selenium.Web.V10\TestMethods\Commerce\OrdersTestMethods.cs
- \Asi.Selenium.Web.V10\TestMethods\Commerce\PricingGroupTestMethods.cs
- \Asi.Selenium.Web.V10\TestMethods\Community\ManageDuplicatesTestMethods.cs
- \Asi.Selenium.Web.V10\TestMethods\Membership\MemberResponsiveTestMethods.cs
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustGiftItem.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustGiftsDifferentDate.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustGiftsLevel3User.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustGiftsSameDate.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustPledgeAmounts.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustPledgesDifferentDate.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustPledgesLevel3User.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\AdjustPledgesSameDate.feature
+ \Asi.Selenium.Shared.V10\Features\Fundraising\GiftAdjustmentBatch.feature
+ \Asi.Selenium.Shared.V10\Steps\Forms\StateProvinceStepDef.cs
+ \Asi.Selenium.V10\Features\Membership\SpecFlowFeature1.feature
+ \Asi.Selenium.Web.V10\Pages\Finance\PayCentral\FindPaymentsPage.cs
+ \Asi.Selenium.Web.V10\Pages\Fundraising\IssueReceiptsPage.cs
+ \Asi.Selenium.Web.V10\TestMethods\Fundraising\ReceiptingTestMethods.cs

<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Taxation.feature

- @QuickSweep @Settings @Setup
= Feature: Taxation
= 
- @SetupTaxation

+ 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Commerce\Products.feature

- @Commerce @Product @Donor


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Community\Contact.feature

- @QuickSweep @Community @Contact
= 	When I configure profile panel editor property to read only
= 	Then I verify profile panel value cannot be modified
- 

- Scenario: Verify you cannot create accounts with bad passwords

- 	Given I am on the Staff site as designated user Staff

- 	When I add contact

- 		| Key          | Value             |

- 		| FirstName    | New               |

- 		| LastName     | Account           |

- 		| Organization | OrgBorg           |

- 		| Email        | test@imisdemo.com |

- 		| Password     | 123asdad<Dasd     |

- 		| ExpectError  | True              |

- 	Then I verify the Invalid Character Warning

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Events\EventRegistration.feature

- @QuickSweep @Events @EventRegistration
= 
= 	##Fails in V100 since Exhibit Hall Hours - Day 1 Add Button is not visibile
+ @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Events\EventsAnonymousUser.feature

- @QuickSweep @Events


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Events\EventTemplates.feature

- @QuickSweep @Events @AddEvent

+ @Events
= Feature: Event Templates
+ 
= 
+ @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\ContactEmailAddressSync.feature

- @Rise @Forms
= 	Verify address syncing works with CsContact.Email
= 
- @Integration @SMR68726

+ @VerifyCsContactEmailIsSynced
= 	And I logout on the current page
= 	When I view the contact Soria, Al as designated user System Administrator
+ 	#When I view the contact Soria, Al


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\FormDesigner.feature

- @QuickSweep @Rise @Forms
= Rise Forms Designer
= 
- @Integration

+ @NewExistingFormSaveAs
= 	Then I verify validation message is visible
= 
- @QuickSweep

+ @NewUniqueFormSaveAs
= 	Then I verify validation message is hidden
= 
- @Integration

+ @NewFormAdvanced
= 	Then I navigate to the page created
= 	And I verify page does not contain and runtime message
- 

- @QuickSweep

- Scenario: Forms CRUD

- 	Given I am on the Staff site as designated user System Administrator

- 	When I add new form named TestForm on Test group with elements

- 		| Category       | Field               |

- 		| Contact fields | CsContact.BirthDate |

- 		| Contact fields | CsContact.FirstName |

- 		| Contact fields | CsContact.Informal  |

- 		| Actions        | Submit button       |

- 		| Actions        | Cancel button       |

- 	Then I verify form has elements

- 		| Field               |

- 		| CsContact.BirthDate |

- 		| CsContact.FirstName |

- 		| CsContact.Informal  |

- 		| Submit.yes          |

- 		| Cancel.no           |

- 

- @Integration @SMR86258

- Scenario: Create numeric form content with panel designer source to compare to panel

-     Given I am on the Staff site as designated user System Administrator

-     And I create a Contact type Single-Instance specific panel named AStaticTest

-     And I add specific Currency property named Curr to the AStaticTest

-     And I add new form named NumericTestForm with elements

-     | Category                          | Field                  |

-     | Single instance.AStaticTestSource | AStaticTestSource.Curr |

-     | Actions                           | Submit button          |

-     When I add new form to content and publish

-     And I navigate to the page created

-     Then I verify client state text input field and submit rows

-     | Given    | Expected    |

-     | 12334.01 | 12,334.0100 |

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\FormPanelSource.feature

- @Rise @Forms @PanelEditor
=     When I add specific Text property named Country to the AStaticTest
= 
- @QuickSweep

+ @FormWithPanelDesignerSource


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\FormsDefectCoverage.feature

- @QuickSweep @Rise @Forms
= 		| TestPropertyA | sourcetable          | TESTSMR82578TABLE     | 0   | 0   |
= 
- @QuickSweep @SMR82578

+ @SMR82578


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\MemberField.feature

- @Rise @Forms
=           Given I am on the Staff site as designated user System Administrator
= 
- @Integration

+ @VerifyMemberFieldReadOnly
= 	Then I verify the checkbox input Read only for element CsContact.MemberType is disabled
= 
- @QuickSweep

+ @ConfigureDesignationAllowOther
=     And I publish content TestDesignationAllowOther with the member form
=     Then I navigate to the member page
- 	And I verify the select field for element CsContact.Designation contains Other value

+ # todo!!: this is not working, the select field does not have the other option.

+ #	And I verify the select field for element CsContact.Designation contains "" value
= 
- @QuickSweep

+ @ConfigureSuffixRequired
= 	And I verify the select field for element CsContact.Suffix is required
= 
- @QuickSweep

+ @TestContentPublishLocation
= 	Then I open website content record
= 	And I verify content record publish location url loads
- 

- @Integration

- Scenario: Configure checkbox label location

- 	Given I create a new member form TestCheckBoxLabelLocation with elements

- 		| Category       | Field						|

- 		| Contact fields | CsContact.ExcludeDirectory	|		

- 	When I edit the options for element CsContact.ExcludeDirectory

- 		| Option			| Value          |

- 		| ddLabelLocation   | Right |

- 	And I publish content TestCheckBoxLabelLocation with the member form

- 	Then I navigate to the member page

- 	And I verify the checkbox label in form section R1C1W12 is Right aligned


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\MultiLayouts.feature

- @Forms
= 	Given I am on the Staff site as designated user System Administrator
= 
- @QuickSweep

+ @MultiLayout


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Forms\StateProvince.feature

- @Forms
= 	Add a StateProvince element to a form and test.
= 
- @Integration

+ @AddStateProvinceElement
= 		| Address.StateProvince |
= 
- @Integration

+ @StateProvinceElementWithStates
= 		| Address_StateProvince  |
= 
- @Integration

+ @StateProvinceElementWithoutStates


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Fundraising\Donation.feature

- @QuickSweep @Fundraising @ImportDonation
= Feature: Donation Importer
= 
+ @Donation
= 	Then I verify the upload is not allowed
= 
+ @Donation @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Fundraising\GiftAid.feature

- @QuickSweep @Fundraising @GiftAid

+ @QuickSweep
= 	Given I am on the Staff site as designated user System Administrator
= 	When I activate Manage Gift Aid
+ 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Fundraising\Receipting.feature

- @Quicksweep @Fundraising
= Feature: Receipting
= 
- @QuickSweep

+ @IssueReceipts


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Membership\PartyApi.feature

- @QuickSweep @Rest

+ @Rest
= 
= Feature to test api calls
- @PartyApiFeature

+ 
= 	Then I verify I received a party with Id 21095
= 
- @PartyApiFeature
= 	Then I verify I received a party with Id 21095
= 
- @PartyApiFeature
= 	Then I verify I received a list of parties
= 
- @PartyApiFeature


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Rise\PanelDesignerDuplicateMerge.feature

- @Rise @PanelDesigner
=     When I add specific Text property named TestProperty1 to the StandaloneDupeMergeTest grid
= 
- @Integration

+ @PanelDesignerDuplicateMerge
=     Given I add new panel named StandaloneDupeMergeTest to content and publish
=     Then I navigate to the content page created named StandaloneDupeMergeTest
-      And I verify panel description exists
=     Then I verify the StandaloneDupeMergeTest panel was deleted
=      And I purge the content record StandaloneDupeMergeTest
- 

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Rise\Rise.feature
= #TODO Need to create a custom tag that doesn't conflict with others
- @Rise

+ Feature: RiSE Test Suite

- Feature: RiSETestSuite
= 	Then I verify expiring has Completed on Process Automation Log page
= 
- @Ignore

+ @Ignored
= 	Then I verify reserved property names were not added
= 
- @QuickSweep

+ @PanelDesignerCreate
= 	| Standalone | Multi-Instance  | MIStandalonePanelTest |
= 
- @PanelDesigner
= 	Then I verify the AllPropsSIContactPanel panel was created
= 
- @PanelDesigner
= 	Then I verify the AllPropsMIContactPanel panel was created
= 
- @QuickSweep

+ @PanelDesignerDelete
= 	| Standalone | Multi-Instance  | DeleteMIStandalonePanelTest |
= 
- @QuickSweep
= 	| Standalone | Multi-Instance  | DeleteMIStandaloneSourceTest |
= 
- @QuickSweep
= 	| Contact   | Multi-Instance  | DelAllPropsMISourceTest |
= 
- @Integration
= 	| Contact   | Single-Instance | DelAllPropsSIGridTest |
= 	| Contact   | Multi-Instance  | DelAllPropsMIGridTest |
- 

- @QuickSweep

- Scenario: Add and edit a datasource property attribute in Panel Designer

-     Given I am on the Staff site as designated user System Administrator

-     And I create a Contact type Single-Instance specific panel named APropertyTest

-     And I add specific Text property named TestProperty1 to the APropertyTest source

- 	When I edit the attribute LogAllChanges for property TestProperty1 for the panel named APropertyTest		

- 	Then I verify the attribute LogAllChanges changes for property TestProperty1

- 

- 

- Scenario: I navigate directly to the ContentItemEdit control

-     Given I am on the Staff site as designated user System Administrator

- 	When I navigate to a page to configure a content item

- 		| BasePage					| ContentItemName    |

- 		| CommunitiesDashboardPage	| BigButtonPanelEdit |

- 	Then I verify the correct BigButtonPanelEdit item was modified

- 

- @Maintenance

- Scenario: Verify publishing servers page loads correctly

-     Given I am on the Staff site as designated user System Administrator

- 	When I navigate to the publishing servers page

- 	Then I verify publishing servers grid loads


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Rise\Scoring.feature

- @Rise @Scoring


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Settings\AboutiMIS.feature

- @Settings @AboutiMIS
= 		Given I am on the Staff site as designated user System Administrator
= 
- 

+ @AboutiMIS


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Features\Settings\SystemConfig.feature

- @Settings
= 		Given I am on the Staff site as designated user System Administrator
= 
- @Integration

+ @EmailSettings


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\LicenseManagementStepDef.cs
=         [When(@"I update the license to (.*)")]
=         [Then(@"I update the license to (.*)")]
-         public void WhenIUpdateTheLicenseTo(string licenseKey)

+         public void WhenIUpdateTheLicenseToDemo(string licenseKey)
=         {
=             LicenseManagementTestMethods.CheckLicensedProductName(productName);
-         }

- 

-         [Then(@"I verify that iMIS is Licensed To current license")]

-         public void VerifyIMISIsLicensedToCurrentLicense()

-         {

-             LicenseManagementTestMethods.VerifyLicensedAppliedToIMIS();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\RiseStepDef.cs
=         }
= 
-         [Then(@"I verify CCO Url Parameter Fullname is not overwritten")]

+         [Then(@"I verify CCO Url Parameter Name is not overwritten")]
=         {
=             RiseTestMethods.NavigateToDuplicateMergePage(partyId, panelSourceName);
-         }

-      

-         [When($@"I edit the attribute {StepRegex.SingleWord} for property {StepRegex.SingleWord} for the panel named {StepRegex.SingleWord}")]

-         public void WhenIEditTheDatasourceProperty(string attributeName, string propertyName, string panelName)

-         {

-             RiseTestMethods.EditPanelSource(attributeName, propertyName, panelName);

-         }

- 

-         [Then($@"I verify the attribute {StepRegex.SingleWord} changes for property {StepRegex.SingleWord}")]

-         public void ThenIVerifyPropertyAttributeValue(string attributeName, string propertyName)

-         {

-             RiseTestMethods.VerifyPropertyAttributeValue(attributeName, propertyName);

-         }

- 

-         [Then(@"I verify panel description exists")]

-         public void ThenIVerifyPanelDisplayPropertyExists()

-         {

-             RiseTestMethods.VerifyPageConfigureProperties();

-         }

- 

- 

-         [When(@"I navigate to a page to configure a content item")]

-         public void WhenINavigateToAPageToModifyContentItemEdit(Table table)

-         {                        

-             RiseTestMethods.NavigateToTheContentItemToEdit(table);

-         }

- 

-         [Then(@"I verify the correct BigButtonPanelEdit item was modified")]

-         public void ThenIVerifyTheCorrectItemWasModified()

-         {

-             RiseTestMethods.VerifyContentItemCorrect();
=         }
= 
-         [When(@"I navigate to the publishing servers page")]

-         public void NavigateToThePublishingServersPage()

-         {

-             RiseTestMethods.NavigateToThePublishingServersPage();

-         }

- 

-         [Then(@"I verify publishing servers grid loads")]

-         public void VerifyPublishingServersGridLoads()

-         {

-             RiseTestMethods.VerifyPublishingServersGridLoads();

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\StepRegex.cs
=     public static class StepRegex
=     {
-         //Ensure all regex are encapsulated in "()"
=         public const string OneOrMoreWord = "([\\s\\a-zA-Z&]+)";
= 
-         public const string WordContainsClub = "([\\s\\a-zA-Z&]+[Club])";

- 
=         public const string AnyDigit = "(\\d*)";
=         public const string AnyDecimal = "(\\d*\\.\\d*)";
-         public const string ArrayOfDigits = "((?:\\d+,\\s)*\\d+)";
= 
=         public const string WithFileExt = "(\\w+\\.+[a-z]{0,4})";
-         public const string UrlComponent = "([\\w_?-?\\.?\\/?\\??\\=?%?]*)";

+         public const string UrlComponent = "(\\w_?-?\\.?\\/?\\??\\=?%?)*";
=         public const string Authenticated = $"{CaseInsensitive}authenticated";
=         public const string UnAuthenticated = $"{CaseInsensitive}unauthenticated";
- 

-         public const string TrueOrFalse = $"({True}|{False})";

-         public const string True = $"{CaseInsensitive}true";

-         public const string False = $"{CaseInsensitive}false";


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\TaxationStepDef.cs
=         }
= 
-         [Given(@"I set financial entity if not already set")]


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Authentication\LoginStepDef.cs
= 
=         [Given(@"I log onto the (.*) site as user (.*)")]
-         [When(@"I log onto the (.*) site as user (.*)")]

+         public void GivenILogOnToTheSiteAsUserName(string site, string userName)

-         public void ILogOnToTheSiteAsUserName(string site, string userName)
=         public void WhenILogoutOnTheCurrentPage()
=         {
-             Authentication.LogOut(false, false);

+             Authentication.LogOut(false);
=         [Given($@"I log onto the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]
=         [When($@"I log onto the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]
-         public void IAmOnSiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)

+         public void GivenIAmOnSiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)
=             var site = string.IsNullOrEmpty(tempsite) ? "Staff" : tempsite;
=             WhenILogoutOnTheCurrentPage();
+             TestHelper.WaitForPageReload();
=             SignInTestMethods.SignInDesignatedUserAndOBO(user, site, firstname, lastname);
=         }
- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Commerce\CartStepDef.cs
=         public CartTestMethods CartTestMethods { get; set; }
= 
-         [Given(@"I checkout items in the cart")]
=         }
= 
-         /// <summary>

-         /// This step goes through all of checkout, but does not submit the cart.

-         /// </summary>

-         /// <param name="data"></param>

-         [Given(@"I start checking out items in the cart")]

-         [When(@"I start checking out items in the cart")]

-         public void IStartCheckingOutItemsInTheCart(Table data)

-         {

-             CartTestMethods.Checkout(data.AsiCreateInstance<CartData>(), shouldSubmitCart: false);

-         }

- 
=         }
=         
-         [Given(@"I empty the cart")]


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Commerce\ItemStepDef.cs
=         public ItemTestMethods ItemTestMethods { get; set; }
= 
-         [Given(@"I add the current item to the cart")]


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Commerce\ProductStepDef.cs
=     public class ProductStepDef
=     {
-         private const string CreateProductDataKey = "createProductData";

+         public ProductStepDef(IWebDriver driver, IAsiWebContext context)

- 

-         public ProductStepDef(IWebDriver driver, IAsiWebContext context, ProductContext productContext)
=         {
-             ProductTestMethods = new ProductTestMethods(driver, context, productContext);

+             ProductTestMethods = new ProductTestMethods(driver, context);

-             Context = context;
=         }
= 
-         public ProductTestMethods ProductTestMethods { get; }

+         public ProductTestMethods ProductTestMethods { get; set; }

-         public IAsiWebContext Context { get; }
= 
-         [Given(@"I create a simple product")]

+         [When(@"I create a product")]

-         [When(@"I create a simple product")]
=         {
=             ProductTestMethods.VerifyCompanyOrderedProduct(data.AsiCreateInstance<CartData>());
-         }

- 

-         [Then(@"I verify the product was added")]

-         public void VerifyTheProductWasAdded()

-         {

-             ProductTestMethods.VerifyProductWasAdded();
=         }
= 
-         [Then(@"I verify the product is available")]

-         public void VerifyProductIsAvailable()

-         {

-             ProductTestMethods.VerifyProductIsAvailable();

-         }

- 

-         [When(@"I have product data")]

-         public void HaveProductData(Table data)

-         {

-             var createProductData = data.AsiCreateInstance<CreateProductData>();

-             Context.AddData(CreateProductDataKey, createProductData);

-         }

- 

-         [When(@"I create a product with collection of items")]

-         public void CreateAProductWithCollectionOfItems(Table data)

-         {

-             var createProductData = Context.GetData<CreateProductData>(CreateProductDataKey);

-             var productItemsData = data.CreateSet<ProductItemData>();

-             ProductTestMethods.CreateProductWithItems(createProductData, productItemsData);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Community\ContactStepDef.cs
= 
=         [When(@"I create a new contact")]
-         [Given(@"I create a new contact")]
=         {
=             ContactTestMethod.VerifyProfilePanelValueCannotBeModified();
-         }

- 

-         [Then(@"I verify the Invalid Character Warning")]

-         public void ThenIVerifyTheInvalidCharacterWarning()

-         {

-             ContactTestMethod.VerifyTheInvalidCharacterWarning();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Events\RegisterForAnEventStepDef.cs
=         }
= 
-         private RegisterForAnEventTestMethods RegisterForAnEventTestMethods { get; }

+         private RegisterForAnEventTestMethods RegisterForAnEventTestMethods { get; set; }
= 
-         [Given(@"I register myself for an event")]
=         [When(@"I register myself for an event")]
-         public void WhenIRegisterMyselfForAnEvent(Table data)

+         public void WhenIRegisterSomeoneElseForAnEvent(Table data)
= 
=         [Then(@"I verify myself is registered")]
-         public void ThenIVerifyMyselfWasRegistered(Table data)

+         public void ThenIVerifySomeoneElseWasRegistered(Table data)


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Forms\ContactEmailAddressSyncSteps.cs
=     public class ContactEmailAddressSyncSteps
=     {
-         ContactEmailAddressSyncSteps(IWebDriver driver, IAsiWebContext context)

+         public ContactEmailAddressSyncSteps(IWebDriver driver, IAsiWebContext context)


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Forms\FormDesignerStepDef.cs
=         public void WhenICreateANewFormWithElements(string name, Table table)
=         {
-             WhenICreateANewFormWithElements(name, null, table);

-         }

-         [When($@"I add new form named {StepRegex.SingleWord} on {StepRegex.SingleWord} group with elements")]

-         public void WhenICreateANewFormWithElements(string name, string groupName, Table table)

-         {
=             FormName = TestHelper.GenerateRandomName(name);
-             if (!string.IsNullOrEmpty(groupName))

+             FormTestMethods.NavigateAndCreateForm(FormName, table);

-                 groupName = TestHelper.GenerateRandomName(groupName);

- 

-             FormTestMethods.NavigateAndCreateForm(FormName, table, groupName: groupName);
=         }
= 
-         [Then($@"I add new form to content and publish")]
=         {
=             FormTestMethods.VerifyValidationMessage(displayState);
-         }

- 

-         [Then("I verify form has elements")]

-         public void ThenIVerifyFormHasElements(Table table)

-         {

-             FormTestMethods.VerifyFormHasElements(table);
=         }
= 
-         [When(@"I navigate to the page created")]
=         {
=             FormTestMethods.VerifyFormSubmitterLinkLoadsProfile();
-         }

- 

-         [Then(@"I verify client state text input field and submit rows")]

-         public void VerifyClientStateTextInputFieldAndSubmitRows(Table table)

-         {

-             FormTestMethods.CheckForRuntimeMessage();

-             FormTestMethods.VerifyValuesWithElements(table);

-             FormTestMethods.CheckForRuntimeMessage();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Forms\MemberFieldStepDef.cs
=         }
= 
-         [Then(@"I verify the (.*) label in form section (.*) is (Left|Right) aligned")]

-         public void VerifyTheElementLabelLocation(string inputType, string section, string location)

-         {

-             FormTestMethods.VerifyElementLabelLocation(inputType, section, location);

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Fundraising\EnterGiftsStepDef.cs
=         public SignInTestMethods SignInTestMethods { get; set; }
=         public Asi.Selenium.Core.Utilities.Authentication Authentication { get; set; }
-         public ReceiptingTestMethods ReceiptingTestMethods { get; set; }
=         //because for some of these we need to persist and verify the original gift data
=         private GiftData PersistedGiftInfo { get; set; }
-         public string ReceiptNumber { get; set; }
=             Authentication = new Asi.Selenium.Core.Utilities.Authentication(driver, context);
=             ContactTestMethods = new ContactTestMethods(driver, context);
-             ReceiptingTestMethods = new ReceiptingTestMethods(driver, context);
=         }
= 
-         [When(@"I create a Split (\b(?:Gift|Pledge)\b)")]

-         public void WhenICreateASplitGift(string type, Table data)

-         {

-             var giftData = data.CreateInstance<GiftData>();

-             giftData.FirstName += TestHelper.GenerateRandomString(5);

-             giftData.LastName += TestHelper.GenerateRandomString(5);

-             EnterGiftsTestMethods.CreateSplitGift(giftData, type);

-             if (PersistedGiftInfo == null)

-                 PersistedGiftInfo = new GiftData();

-             PersistedGiftInfo.FirstName = giftData.FirstName;

-             PersistedGiftInfo.LastName = giftData.LastName;

-         }

- 

-         public List<SplitGiftData> PersistedSplitGiftItems { get; set; }

- 

-         [When(@"I enter split gift items")]

-         public void WhenIEnterSplitGiftItems(Table data)

-         {

-             PersistedSplitGiftItems = new List<SplitGiftData>();

-             foreach (var row in data.Rows)

-             {

-                 string giftItem, amount;

-                 row.TryGetValue("GiftItem", out giftItem);

-                 row.TryGetValue("Amount", out amount);

-                 PersistedSplitGiftItems.Add(new SplitGiftData()

-                 {

-                     GiftItem = giftItem,

-                     Amount = amount

-                 });

-             }

-             EnterGiftsTestMethods.EnterSplitGiftItems(PersistedSplitGiftItems);

-         }

- 

-         [Then(@"I verify the Split Gift Items")]

-         public void ThenIVerifyTheSplitGiftItems()

-         {

-             //make sure we click the gift to open the details first

-             EnterGiftsTestMethods.VerifySplitGiftItems(PersistedSplitGiftItems);

-         }

- 

-         [Then(@"I verify the Pledge Split Gift Items")]

-         public void ThenIVerifyThePledgeSplitGiftItems()

-         {

-             //make sure we click the gift to open the details first

-             EnterGiftsTestMethods.VerifySplitGiftItems(PersistedSplitGiftItems, "Pledge");

-         }

- 

-         [Then(@"I verify the invoice number for the gift items is the same")]

-         public void ThenIVerifyTheInvoiceNumberForTheGiftItemsIsTheSame()

-         {

-             EnterGiftsTestMethods.VerifySplitGiftsInvoiceNumber(PersistedSplitGiftItems);

-         }

- 

-         [Then(@"I verify the total split gift payment is (.*)")]

-         public void ThenIVerifyTheTotalSplitGiftPaymentIs(string p0)

-         {

-             EnterGiftsTestMethods.VerifySplitGiftPaymentAmount(p0);

-         }

- 

-         [Then(@"I verify the gift items are listed on the invoice")]

-         public void ThenIVerifyTheGiftItemsAreListedOnTheInvoice()

-         {

-             EnterGiftsTestMethods.VerifySplitGiftInvoiceItems(PersistedSplitGiftItems);

-         }

- 

-         [Then(@"I verify the split gifts invoice total is (.*)")]

-         public void ThenIVerifyTheSplitGiftsInvoiceTotalIs(string amount)

-         {

-             EnterGiftsTestMethods.VerifySplitGiftsInvoiceAmount(amount);

-         }

- 
=         public void GivenASystemAdministratorEntersAGift(string giftType, Table data)
=         {
-             GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(giftType, data);

-             Authentication.LogOut(false);

-         }

- 

-         [Given(@"a System Administrator enters a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b) and remains logged in")]

-         public void GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(string giftType, Table data)

-         {
=             PersistedGiftInfo.FirstName = giftData.FirstName;
=             PersistedGiftInfo.LastName = giftData.LastName;
+             Authentication.LogOut(false);
=         }
+ 
=             if (giftData.LastName == null) giftData.LastName = giftData.FirstName;
= 
-             EnterGiftsTestMethods.EnterGift("Pledge", giftData, new CartData()); //cart data isn't applicable to pledges here

+             EnterGiftsTestMethods.EnterGift("Pledge", giftData, new CartData()); //cart data isn't applicable to pledges
=         }
= 
-         [Given(@"user (.*) adjusts the (\b(?:Pledge|Gift|Gift With Multiple Soft Credits)\b) for (.*)")]

+         [Given(@"user (.*) adjusts the (\b(?:Pledge|Gift|Pledge With Multiple Soft Credits|Gift With Multiple Soft Credits)\b) for (.*)")]
=         public void ThenIVerifyTheGiftAdjustmentLogs(Table table)
=         {
+             //var logData = table.AsiCreateInstance<AdjustmentLogData>();
=         public void ThenIVerifyTheAdjustedSoftCreditValues(Table data)
=         {
+            // var adjustmentData = data.AsiCreateInstance<List<SoftCreditData>>();
=         }
= 
-         [Given(@"I issue receipts for the gift")]

-         public void GivenIPayForTheGiftAndIssueReceipts()

-         {

-             string donorName = $"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.FirstName}";

-             string giftItem=null;

-             if(PersistedGiftInfo.GiftItem == "BLDG")

-             {

-                 giftItem = "Building";

- 

-             }

-             ReceiptingTestMethods.FindReceiptsToIssue(donorName, giftItem);

-             ReceiptingTestMethods.IssueReceipts();

-             ReceiptingTestMethods.FindIssuedReceipts(donorName, null, null);

-             ReceiptNumber = ReceiptingTestMethods.GetReceiptNumber();

-             Authentication.LogOut();

-         }

- 

-         [Then(@"I verify user sees the receipt will be voided message")]

-         public void ThenIVerifyUserSeesTheReceiptWillBeVoidedMessage()

-         {

-             EnterGiftsTestMethods.VerifyGiftAppReceiptMessage($"Receipt(s) {ReceiptNumber} will be voided");

-         }

- 

-         [Then(@"I verify the receipt is voided")]

-         public void ThenIVerifyTheReceiptIsVoided()

-         {

-             ReceiptingTestMethods.FindIssuedReceipts($"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.LastName}", ReceiptNumber, "Void");

-             ReceiptingTestMethods.VerifyReceiptNumber(ReceiptNumber);

-         }

- 

-         [Then(@$"I verify the single gift with invoice number {StepRegex.SingleWord} has been found")]

-         public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)

-         {

-             EnterGiftsTestMethods.VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(id);

-         }

- 

-         [Then(@"I verify the gift items are listed on the account")]

-         public void ThenIVerifyTheGiftItemsAreListedOnTheAccount(Table data)

-         {

-             var verifySplitGifts = new List<SplitGiftData>();

-             foreach (var row in data.Rows)

-             {

-                 string description, amount;

-                 row.TryGetValue("Description", out description);

-                 row.TryGetValue("Amount", out amount);

-                 verifySplitGifts.Add(new SplitGiftData()

-                 {

-                     GiftItem = description,

-                     Amount = amount

-                 });

-             }

-             ContactTestMethods.FindContact(PersistedGiftInfo.FirstName, PersistedGiftInfo.LastName);

-             EnterGiftsTestMethods.VerifySplitGiftAccountItems(verifySplitGifts);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Fundraising\ReceiptingStepDef.cs
=     public class ReceiptingStepDef
=     {
-         private ReceiptingTestMethods ReceiptingTestMethods { get; }

+         private ReceiptingTestMethods ReceiptingTestMethods { get; set; }

-         private IAsiWebContext Context { get; }
=         {
=             ReceiptingTestMethods = new ReceiptingTestMethods(driver, context);
-             Context = context;
=         {
=             ReceiptingTestMethods.VerifyTheCorrectPageLocationIsLoaded();
-         }

- 

-         [When(@$"I issue gift receipts for {StepRegex.OneOrMoreWord}")]

-         public void IssueGiftReceiptsFor(string donorName)

-         {

-             ReceiptingTestMethods.FindReceiptsToIssue(donorName);

-             ReceiptingTestMethods.IssueReceipts();

-         }

- 

-         [Then(@"I verify that receipts are issued")]

-         public void VerifyThatReceiptsAreIssued()

-         {

-             ReceiptingTestMethods.FindIssuedReceipts(Context.GetData<string>(ReceiptingTestMethods.DonorNameKey), null,

-                 "Issued/NotSent");


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Settings\SettingsStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Shared.V10\Steps\Site\NavigationStepDef.cs
=         }
= 
-         [Given(@"I navigate to top menu (.*)")]


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\AdAdjustments.feature

- @AdAdjustments @Advertising

+ @AdAdjustments


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\InventoryManagement.feature

- @InventoryManagement @Advertising

+ @InventoryManagement


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\IssueDates.feature

- @IssueDates @Advertising

+ @IssueDates


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\MediaAsset.feature

- @MediaAsset @Advertising

+ @MediaAsset


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\RateCards.feature

- @RateCards @Advertising

+ @RateCards


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaAsset\RateCardsDetails.feature

- @RateCardDetails @Advertising

+ @RateCardDetails
= 	When I insert media asset ACRP Online and navigate to rate cards details screen
= 	Then I verify clear all icon in rate card details input box
- 

- Scenario: Verify Not able to update Rate card details matrix after deleting ad size(s) or Frequency 

- 	Given I am on the Staff site as designated user Staff

- 	When I update Rate card details matrix after deleting ad size(s) or Frequency for ACRP Online, ACRP23d and 4 Color 

- 	    | Ad size    | Frequency |

- 	    | Full Page  | 1         |

- 	    | Back Cover | 3         | 

- 	Then I verify message Select ad color, ad size and frequency in order to create rate card details matrix


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Advertising\MediaOrder\MediaOrder.feature

- @MediaOrder @Advertising

+ @MediaOrder


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Commerce\GstIncTaxation.feature

- @Australia @GSTInc @Commerce @QuickSweep
= These will need to be manually reverted. The tests do not automatically restore settings.
= 
- Background:

+ Scenario: Taxable sales product includes a GST amount in the Cart
= 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart
- 	And I set financial entity if not already set

+ 	When I set financial entity if not already set
= 		| DefaultCulture | true             |
= 	And I empty the cart
- 

+ 	And I create a product

- Scenario: Taxable sales product includes a GST amount in the Cart

- 	Given I create a simple product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| IsTaxable     | True  |
= 		| InventoryItem | False |
- 	When I add the current item to the cart

- 	Then I verify the cart contains GstInc tax for the previously created item

+ 	And I add the current item to the cart

+ 	Then I verify the cart contains GstInc tax for item @DataStorage.ItemCode
= 
= Scenario: Taxable sales product includes a GST amount on the order confirmation
- 	Given I create a simple product

+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart

+ 	When I set financial entity if not already set

+ 		| Key            | Value            |

+ 		| Code           | GSTIN            |

+ 		| Country        | Australia        |

+ 		| CultureType    | EnglishAustralia |

+ 		| DefaultCulture | true             |

+ 	And I empty the cart

+ 	And I create a product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| InventoryItem | False |
= 	And I add the current item to the cart
- 	When I checkout items in the cart

+ 	And I checkout items in the cart
= 
= Scenario: Non Taxable sales product does not include a GST amount in the Cart
- 	Given I create a simple product

+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart

+ 	When I set financial entity if not already set

+ 		| Key            | Value            |

+ 		| Code           | GSTIN            |

+ 		| Country        | Australia        |

+ 		| CultureType    | EnglishAustralia |

+ 		| DefaultCulture | true             |

+ 	And I empty the cart

+ 	And I create a product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| IsTaxable     | False |
= 		| InventoryItem | False |
- 	When I add the current item to the cart

- 	Then I verify the cart does not contain GstInc tax for the previously created item

+ 	And I add the current item to the cart

+ 	Then I verify the cart does not contain GstInc tax for item @DataStorage.ItemCode
= 	
= Scenario: Non Taxable sales product does not include a GST amount on the order confirmation
- 	Given I create a simple product

+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart

+ 	When I set financial entity if not already set

+ 		| Key            | Value            |

+ 		| Code           | GSTIN            |

+ 		| Country        | Australia        |

+ 		| CultureType    | EnglishAustralia |

+ 		| DefaultCulture | true             |

+ 	And I empty the cart

+ 	And I create a product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| InventoryItem | False |
= 	And I add the current item to the cart
- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

+ 	And I checkout items in the cart

+ 		| Key           	| Value               |

+ 		| PaymentMethod 	| MainCheckingAccount |

+ 		| PaymentMethodType | Check 			  |
= 	Then I verify the order confirmation does not contain GstInc tax
- 

- Scenario: Taxable event with taxable program item includes a GST amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | True   |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains GstInc tax for the previously created item

- 

- Scenario: Taxable event with taxable program item includes a GST amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | True   |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains GstInc tax

- 

- Scenario: Taxable event with non taxable program item includes a GST amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | True   |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains GstInc tax for the previously created item

- 

- Scenario: Taxable event with non taxable program item includes a GST amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | True   |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains GstInc tax

- 

- Scenario: Non taxable event with taxable program item includes a GST amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains GstInc tax for the previously created item

- 

- Scenario: Non taxable event with taxable program item includes a GST amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains GstInc tax

- 

- Scenario: Non taxable event with non taxable program item does not include a GST amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart does not contain GstInc tax for the previously created item

- 

- Scenario: Non taxable event with non taxable program item does not include a GST amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation does not contain GstInc tax

- 

- @NotReRunnable

- Scenario: Taxable join billing includes GST amount in the Cart

- 	Given I logout on the current page

- 	And I am on the Staff site as System Administrator on behalf user Lindsay,Aaron

- 	When I join now as RegularMembershipFees on Staff site

- 		| Key       | Value           |

- 		| Chapter   | East Chapter    |

- 		| ItemNames | Finance Section |

- 	Then I verify the cart contains GstInc tax for item Regular_Membership_Fees

- 

- @NotReRunnable

- Scenario: Taxable join billing includes GST amount on the order confirmation

- 	Given I logout on the current page

- 	And I am on the Staff site as System Administrator on behalf user Joy,Baker

- 	And I join now as RegularMembershipFees on Staff site

- 		| Key       | Value           |

- 		| Chapter   | East Chapter    |

- 		| ItemNames | Finance Section |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation for join billing contains GstInc tax


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Commerce\InventoryReceipts.feature

- @Commerce @Inventory @QuickSweep
= 	Given I am on the Staff site as designated user System Administrator
= 	And I save P41 inventory details before update
- 	When I process inventory Receipt with positive quantity

- 	Then I verify inventory Receipt is applied

+ 	When I process inventory Receipt for Business Management Series: Communication Skills (P41) with positive quantity

+ 	Then I verify inventory Receipt for Business Management Series: Communication Skills (P41) is applied
= 	Given I am on the Staff site as designated user System Administrator
= 	And I save P41 inventory details before update
- 	When I process inventory Adjustment with positive quantity

- 	Then I verify inventory Adjustment is applied

+ 	When I process inventory Adjustment for Business Management Series: Communication Skills (P41) with positive quantity

+ 	Then I verify inventory Adjustment for Business Management Series: Communication Skills (P41) is applied
= 	Given I am on the Staff site as designated user System Administrator
= 	And I save P41 inventory details before update
- 	When I process inventory Adjustment with negative quantity

- 	Then I verify inventory Adjustment is applied

+ 	When I process inventory Adjustment for Business Management Series: Communication Skills (P41) with negative quantity

+ 	Then I verify inventory Adjustment for Business Management Series: Communication Skills (P41) is applied


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Commerce\Products.feature

- @Commerce @OrderProduct @QuickSweep
= Background:
= 	Given I set system up with a gateway
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| Key           | Value                 |
= 		| PaymentMethod | Main Checking Account |
+ 		| PaymentMethodType | MainCheckingAccount |
= 		| Key     | Value                    |
= 		| Product | Networking Your Business |
- 
= 		| Key     | Value                    |
= 		| Product | Networking Your Business |
- 

- @SkipSetGatewayStep

- Scenario: Verify a simple product can be added

- 	Given I am on the Staff site as designated user Staff

- 	When I create a simple product

- 		| Key           | Value                |

- 		| Class         | Clothing Apparel     |

- 		| Name          | My FFF Super Product |

- 		| Description   | Super product        |

- 		| StandardPrice | 10.00                |

- 		| DiscountPrice | 10.00                |

- 		| Beginning     | 01/01/2020 12:00 AM  |

- 	Then I verify the product was added
= 
- @SkipSetGatewayStep

- Scenario: Verify a product has become available after inventory receipt processing

- 	Given I am on the Staff site as designated user Staff

- 	When I create a simple product

- 		| Key           | Value                |

- 		| Class         | Gifts                |

- 		| Name          | My WWW Super Product |

- 		| Description   | Super product        |

- 		| StandardPrice | 30.00                |

- 		| DiscountPrice | 20.00                |

- 		| Beginning     | 1/1/2020 12:00 AM    |

- 	And I process inventory Receipt with positive quantity

- 	Then I verify the product is available

- 

- @SkipSetGatewayStep

- Scenario: Verify paying with PayPal express

- 	Given I am on the Mbrr site as designated user Public user

- 	When I order product

- 		| Key       | Value                  |

- 		| Product   | Building a Strong Team |

- 		| ClearCart | true                   |

- 	And I checkout items in the cart

- 		| Key           | Value  |

- 		| PaymentMethod | PayPal |

- 	Then I verify the product was ordered

- 		| Key     | Value                  |

- 		| Product | Building a Strong Team |

- 

- @SkipSetGatewayStep

- Scenario: Verify a collection of items product can be added

- 	Given I am on the Staff site as designated user Staff

- 	When I have product data

- 		| Key             | Value         |

- 		| Class           | Gifts         |

- 		| Name            | MUG Gifts     |

- 		| Description     | my mug gifts  |

- 		| PriceIsTotal    | True          |

- 	And I create a product with collection of items

- 		| Title      | Code   | Quantity |

- 		| Modern Mug |        | 1        |

- 		|            | FRMUG1 | 2        |

- 	Then I verify the product was added


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Commerce\VatincTaxation.feature

- @UnitedKingdom @VAT @Commerce @QuickSweep
= These will need to be manually reverted. The tests do not automatically restore settings.
= 
- Background:

+ Scenario: Taxable sales product includes a VAT amount in the Cart
= 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant
- 	And I set financial entity if not already set

- 		| Key            | Value                |

- 		| Code           | VAT                  |

- 		| Country        | United Kingdom       |

+ 	When I set financial entity if not already set

+ 		| Key            | Value				|

+ 		| Code           | VAT					|

+ 		| Country        | United Kingdom		|
= 		| CultureType    | EnglishUnitedKingdom |
- 		| DefaultCulture | true                 |

+ 		| DefaultCulture | true					|
= 	And I empty the cart
+ 	And I create a product

+ 		| Key           | Value |

+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |

+ 		| IsTaxable     | True  |

+ 		| TaxCode       | VAT_15|

+ 		| InventoryItem | False |

+ 	And I add the current item to the cart

+ 	Then I verify the cart contains VatInc tax for item @DataStorage.ItemCode
= 
- Scenario: Taxable sales product includes a VAT amount in the Cart

- 	Given I create a simple product

- 		| Key           | Value  |

- 		| IsTaxable     | True   |

- 		| TaxCode       | VAT_15 |

- 		| InventoryItem | False  |

- 	When I add the current item to the cart

- 	Then I verify the cart contains VatInc tax for the previously created item

- 
= Scenario: Taxable sales product includes a VAT amount on the order confirmation
- 	Given I create a simple product

- 		| Key           | Value  |

- 		| IsTaxable     | True   |

- 		| TaxCode       | VAT_15 |

- 		| InventoryItem | False  |

+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant

+ 	When I set financial entity if not already set

+ 		| Key            | Value                |

+ 		| Code           | VAT					|

+ 		| Country        | United Kingdom		|

+ 		| CultureType    | EnglishUnitedKingdom |

+ 		| DefaultCulture | true					|

+ 	And I empty the cart

+ 	And I create a product

+ 		| Key           | Value |

+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |

+ 		| IsTaxable     | True  |

+ 		| TaxCode       | VAT_15|

+ 		| InventoryItem | False |
= 	And I add the current item to the cart
- 	When I checkout items in the cart

+ 	And I checkout items in the cart
= 
= Scenario: Non Taxable sales product does not include a VAT amount in the Cart
- 	Given I create a simple product

+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant

+ 	When I set financial entity if not already set

+ 		| Key            | Value                |

+ 		| Code           | VAT					|

+ 		| Country        | United Kingdom		|

+ 		| CultureType    | EnglishUnitedKingdom |

+ 		| DefaultCulture | true					|

+ 	And I empty the cart

+ 	And I create a product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| IsTaxable     | False |
= 		| InventoryItem | False |
- 	When I add the current item to the cart

- 	Then I verify the cart does not contain VatInc tax for the previously created item

+ 	And I add the current item to the cart

+ 	Then I verify the cart does not contain VatInc tax for item @DataStorage.ItemCode
= 	
= Scenario: Non Taxable sales product does not include a VAT amount on the order confirmation
- 	Given I create a simple product

+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant

+ 	When I set financial entity if not already set

+ 		| Key            | Value                |

+ 		| Code           | VAT					|

+ 		| Country        | United Kingdom		|

+ 		| CultureType    | EnglishUnitedKingdom |

+ 		| DefaultCulture | true					|

+ 	And I empty the cart

+ 	And I create a product
= 		| Key           | Value |
+ 		| Class         | Sales |

+ 		| StandardPrice | 10    |

+ 		| DiscountPrice | 10    |
= 		| InventoryItem | False |
= 	And I add the current item to the cart
- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation does not contain VatInc tax

+ 	And I checkout items in the cart

+ 		| Key           	| Value               |

+ 		| PaymentMethod 	| MainCheckingAccount |

+ 		| PaymentMethodType | Check				  |

- 

- Scenario: Taxable event with taxable program item includes a VAT amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value                  |

- 		| Status                                | Active                 |

- 		| RegistrationOptionDefaultRegularPrice | 100                    |

- 		| VatExceptionRule                      | Belgium VAT Exceptions |

- 		| IsRegistrationOptionTaxable           | True                   |

- 		| RegistrationOptionTaxCode             | VAT_15                 |

- 		| ProgramItemDefaultRegularPrice        | 50                     |

- 		| IsProgramItemTaxable                  | True                   |

- 		| ProgramItemTaxCode                    | VAT_15                 |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains VatInc tax for the previously created item

- 

- Scenario: Taxable event with taxable program item includes a VAT amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value                  |

- 		| Status                                | Active                 |

- 		| RegistrationOptionDefaultRegularPrice | 100                    |

- 		| VatExceptionRule                      | Belgium VAT Exceptions |

- 		| IsRegistrationOptionTaxable           | True                   |

- 		| RegistrationOptionTaxCode             | VAT_15                 |

- 		| ProgramItemDefaultRegularPrice        | 50                     |

- 		| IsProgramItemTaxable                  | True                   |

- 		| ProgramItemTaxCode                    | VAT_15                 |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains VatInc tax

- 

- Scenario: Taxable event with non taxable program item includes a VAT amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value                  |

- 		| Status                                | Active                 |

- 		| RegistrationOptionDefaultRegularPrice | 100                    |

- 		| VatExceptionRule                      | Belgium VAT Exceptions |

- 		| IsRegistrationOptionTaxable           | True                   |

- 		| RegistrationOptionTaxCode             | VAT_15                 |

- 		| ProgramItemDefaultRegularPrice        | 50                     |

- 		| IsProgramItemTaxable                  | False                  |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains VatInc tax for the previously created item

- 

- Scenario: Taxable event with non taxable program item includes a VAT amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value                  |

- 		| Status                                | Active                 |

- 		| RegistrationOptionDefaultRegularPrice | 100                    |

- 		| VatExceptionRule                      | Belgium VAT Exceptions |

- 		| IsRegistrationOptionTaxable           | True                   |

- 		| RegistrationOptionTaxCode             | VAT_15                 |

- 		| ProgramItemDefaultRegularPrice        | 50                     |

- 		| IsProgramItemTaxable                  | False                  |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains VatInc tax

- 

- Scenario: Non taxable event with taxable program item includes a VAT amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 		| ProgramItemTaxCode                    | VAT_15 |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart contains VatInc tax for the previously created item

- 

- Scenario: Non taxable event with taxable program item includes a VAT amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | True   |

- 		| ProgramItemTaxCode                    | VAT_15 |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |

- 	Then I verify the order confirmation contains VatInc tax

- 

- Scenario: Non taxable event with non taxable program item does not include a VAT amount in the Cart

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	When I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	Then I verify the cart does not contain VatInc tax for the previously created item

- 

- Scenario: Non taxable event with non taxable program item does not include a VAT amount on the order confirmation

- 	Given I create an event

- 		| Key                                   | Value  |

- 		| Status                                | Active |

- 		| RegistrationOptionDefaultRegularPrice | 100    |

- 		| IsRegistrationOptionTaxable           | False  |

- 		| ProgramItemDefaultRegularPrice        | 50     |

- 		| IsProgramItemTaxable                  | False  |

- 	And I register myself for an event

- 		| Key             | Value |

- 		| AddFirstProgram | True  |

- 	When I checkout items in the cart

- 		| Key           | Value               |

- 		| PaymentMethod | MainCheckingAccount |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Community\Committee.feature

- @Community @Committees @QuickSweep

+ @Committees


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Community\Community.feature

- @Community @Communities @QuickSweep

+ @Community


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Community\Contact.feature

- @Community @Contacts @QuickSweep
= A short summary of the feature
= 
- @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Community\Search.feature

- @SearchIndex @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Events\CopyExisitingEvents.feature

- @Events @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Events\EventRegistration.feature

- @Events @EventRegistration @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Events\EventsStaffUser.feature

- @Events @QuickSweep
= 	Given I am on the Staff site as designated user Staff
= 
- @QuickSweep
= 		| EventName | Active Test Event |
= 
- @QuickSweep
= 		| EventName | Template: Testing Event |
= 
- @QuickSweep

+ 
= 	| Conference |
= 
- Scenario Outline: Verify the cancel button is greyed out after deleting an event

- 	Given I create an event

- 		| Key       | Value             |

- 		| EventName | SearchingForEvent |

- 		| Status    | Active            |

- 	When I cancel the event

- 	Then I delete the event but dont exit

- 	Then I verify the cancel button is greyed out
= 	And I delete the event
= 	Then I verify the event is deleted
+ 
= 
- @QuickSweep

- Scenario: Verify digits are rounded properly on resource quantity

- 	Given I create an event using event template Webinar

- 		| Key       | Value         |

- 		| EventName | Testing Event |

- 		| Status    | Active        |

- 	When I add a resource with a quantity <NumberGiven>

- 	Then I verify the resource is <NumberExpected>

- Examples:

- 	| NumberGiven | NumberExpected |

- 	| 15.2345     | 15.2345        |

- 	| 15.2300     | 15.23          |

- 	| 15.0000     | 15             |

- 	| 15.24       | 15.24          |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Events\ViewEventRegistration.feature

- @Events
= 		| PaymentMethodType | Check |
= 
+ @ViewSelfRegisteredRegistration


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Finance\PayCentralSDKFinance.feature
= 	Given I am on the Staff site as designated user System Administrator
= 
- @Payments @QuickSweep

+ @PayCentralSDK
= Scenario: Checkout with a Credit Card payment that does not initiate a 3DS challenge
= 	Given I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| Product | Building a Strong Team |
= 
- @Payments @QuickSweep

+ @PayCentralSDK
= 		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |
= 		| PaymentMethodType | Direct debit                     |
- 		| GLAccount         | 1-1060: Debit                    |

+ 		| GLAccount         | 1-1020: VISA                     |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Finance\UKPayCentralSDKFinance.feature

- @PaymentGateways @UnitedKingdom

+ @PaymentGateways
= 	
= 	
- @Payments @QuickSweep

+ @PayCentralSDK
= Scenario: Checkout with a Credit Card Payment that does initiate a 3DS challenge
= 	Given I setup a gateway suite
- 		| Key               | Value                                |

- 		| GatewayType       | ImisPay                              |

- 		| AccountCode       | IP_CC_UK                             |

- 		| Region            | United Kingdom & Europe              |

- 		| AccountName       | IMIS Pay CC UK                       |

- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

- 		| AppKey            | wfENkB9cKTSftNoG                     |

- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |

+ 		| Key         | Value                                |

+ 		| GatewayType | ImisPay                              |

+ 		| AccountCode | IP_CC_UK                             |

+ 		| Region      | United Kingdom & Europe              |

+ 		| AccountName | IMIS Pay CC UK                       |

+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

+ 		| AppKey      | wfENkB9cKTSftNoG                     |

+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |

- 		| PaymentMethodType | Credit card                          |

- 		| GLAccount         | 1-1020: VISA                         |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Forms\FormApproval.feature

- @Forms @FormApproval @QuickSweep
=     Test of Forms requiring approval
= 
- @QuickSweep @BUG69432

+ @VerifySubmitterInfoIsPersisted
=     Then I verify the submitter name is Al Soria
= 
- @Revisit @SMR81426

+ @VerifySubmitterProfileLoads


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Forms\Forms.feature
= various information from their userbase.
= 
- @Integration


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\DonateNow.feature

- @Donor @Fundraising

+ @Donor
= Feature: DonateNow Test Suite v10
= 
+ @WebsiteTheme
= 	And I Edit DonationCreator
= 	Then I see the theme for the editor is the same as the Donor Site
- 

- Scenario: Verify stripe frictionless payments are successful for UK

- 	Given I am on the Staff site as designated user System Administrator

- 	And I setup a gateway suite

- 		| Key               | Value                    |

- 		| GatewayType       | Stripe                   |

- 		| AccountCode       | ST_CC_UK                 |

- 		| AccountName       | Stripe CC UK             |

- 		| Email             | Somebody@advsol.com      |

- 		| Password          | ASIqaperson123           |

- 		| MFACode           | 6gjvmlpsdmh5lwwei675v3p3 |

- 		| PaymentMethodType | Credit card              |

- 		| GLAccount         | 1-1020: VISA             |

- 	And I setup autopay

- 		| Key                             | Value |

- 		| RecurringDonation               | true  |

- 		| RenewingMemberships             | true  |

- 		| AllowDonorsChangeAmount         | true  |

- 		| AllowDonorsSelectCollectionDate | true  |

- 	And I log on the Donor site as designated user Donor user

- 	When I submit a Give Now nonrecurring donation

- 		| Key               | Value            |

- 		| IsPayCentralSdkOn | true             |

- 		| PaymentMethod     | Stripe CC UK     |

- 		| CardNumber        | 4242424242424242 |

- 		| CardCVC           | 123              |

- 		| PostalCode        | 55555            |

- 	Then I see the donation thank you page

- 		

- Scenario: Verify stripe 3ds challenge flow payments are successful for UK

- 	Given I am on the Staff site as designated user System Administrator

- 	And I setup a gateway suite

- 		| Key               | Value                    |

- 		| GatewayType       | Stripe                   |

- 		| AccountCode       | ST_CC_UK                 |

- 		| AccountName       | Stripe CC UK             |

- 		| Email             | Somebody@advsol.com      |

- 		| Password          | ASIqaperson123           |

- 		| MFACode           | 6gjvmlpsdmh5lwwei675v3p3 |

- 		| PaymentMethodType | Credit card              |

- 		| GLAccount         | 1-1020: VISA             |

- 	And I setup autopay

- 		| Key                             | Value |

- 		| RecurringDonation               | true  |

- 		| RenewingMemberships             | true  |

- 		| AllowDonorsChangeAmount         | true  |

- 		| AllowDonorsSelectCollectionDate | true  |

- 	And I log on the Donor site as designated user Donor user

- 	When I submit a Give Now nonrecurring donation

- 		| Key               | Value            |

- 		| IsPayCentralSdkOn | true             |

- 		| PaymentMethod     | Stripe CC UK     |

- 		| CardNumber        | 4000002500003155 |

- 		| CardCVC           | 123              |

- 		| PostalCode        | 55555            |

- 	And I click on Complete Authentication button

- 	Then I see the donation thank you page

- 

- 

- 	Scenario: Verify stripe 3ds challenge flow payments are declined for UK

- 	Given I am on the Staff site as designated user System Administrator

- 	And I setup a gateway suite

- 		| Key               | Value                    |

- 		| GatewayType       | Stripe                   |

- 		| AccountCode       | ST_CC_UK                 |

- 		| AccountName       | Stripe CC UK             |

- 		| Email             | Somebody@advsol.com      |

- 		| Password          | ASIqaperson123           |

- 		| MFACode           | 6gjvmlpsdmh5lwwei675v3p3 |

- 		| PaymentMethodType | Credit card              |

- 		| GLAccount         | 1-1020: VISA             |

- 	And I setup autopay

- 		| Key                             | Value |

- 		| RecurringDonation               | true  |

- 		| RenewingMemberships             | true  |

- 		| AllowDonorsChangeAmount         | true  |

- 		| AllowDonorsSelectCollectionDate | true  |

- 	And I log on the Donor site as designated user Donor user

- 	When I submit a Give Now nonrecurring donation

- 		| Key               | Value            |

- 		| IsPayCentralSdkOn | true             |

- 		| PaymentMethod     | Stripe CC UK     |

- 		| CardNumber        | 4000002500003155 |

- 		| CardCVC           | 123              |

- 		| PostalCode        | 55555            |

- 	And I click on Fail Authentication button

- 	Then I see the payment declined by the bank message


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\Donor.feature

- @Donor @QuickSweep @Fundraising

+ @Donor
= 
= 
+ @ConfigureAllowPublicUsersToCancelEnrollments


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\DonorUK.feature

- @UnitedKingdom @Donor @Fundraising
= Background: 
= 	Given I set system up with a gateway
- 		| Key               | Value                   |

- 		| GatewayType       | Iats                    |

- 		| AccountCode       | IA_CC_UK                |

- 		| Region            | United Kingdom & Europe |

- 		| Password          | rapidtest7              |

- 		| AgentCode         | UIAW88                  |

- 		| AccountName       | IATS CC UK              |

+ 		| Key         | Value                   |

+ 		| GatewayType | Iats                    |

+ 		| AccountCode | IA_CC_UK                |

+ 		| Region      | United Kingdom & Europe |

+ 		| Password    | rapidtest7              |

+ 		| AgentCode   | UIAW88                  |

+ 		| AccountName | IATS CC UK              |

- 		| PaymentMethodType | Credit card             |

- 		| GLAccount         | 1-1020: VISA            |
= 		| Key           | Value     |
= 		| SkipCardValidation | true |
- 	Then I verify credit card validation message is Card number is required.

+ 	Then I verify credit card validation message is Invalid card number.


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\EnterGifts.feature

- @Fundraising @EnterGifts @QuickSweep
= Background:
= 	Given I set system up with a gateway
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 
- @QuickSweep
= 	Then I verify user has the following message displayed: Batch successfully submitted for posting.
= 
- @Integration

+ @AdjustPledgeAmountsLowerPartiallyPaidAmountWithCard
= 	And I verify the credit memo is for the amount -60.00
= 
- @Integration

+ @AdjustPledgeAmountsHigherPartiallyPaidAmountWithCard
= 	And I verify the debit memo is for the amount 10.00
= 
- @QuickSweep
= 	And I verify an open pledge
= 
- @QuickSweep
= 	And I verify an open pledge
= 
- @QuickSweep
= 	And I verify the adjust gift default values
= 
- @Integration
= 		| TODAY     | Tribute      | True          | False          |
= 		| TODAY     | DoNotReceipt | True          | False          |
+ 

+ 
= 
- @QuickSweep

+ 

- Scenario: Verify Find Gift

- 	Given I am on the Staff site as designated user Staff

- 	When I find the gift

- 		| Key        | Value          |

- 		| Type       | Gift           |

- 		| FirstName  | Ms. Melissa F. |

- 		| LastName   | Hodges         |

- 		| Amount     | 50             |

- 		| SourceCode | MAIL           |

- 	Then I verify the single gift with invoice number R8042 has been found


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\GiftAid.feature

- @QuickSweep @Fundraising @GiftAid @UnitiedKingdom

+ @QuickSweep
= 	Given I am on the Staff site as designated user System Administrator
= 	And I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Fundraising\Staff\Staff.feature

- @Fundraising @QuickSweep
= Scenario: Verify a user can't card attack paycentral
= 	Given I set system up with a gateway
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

- 		| GLAccount         | 1-1020: VISA                     |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Membership\Billing.feature

- @Membership @Billing 

+ @BillingFinance
= Feature: Billing
= 
- @QuickSweep @Renewals

+ @BillingFinanceQuickSweep
= 		| Donald           | Duck            | Regular Membership Fees | Cash             | 220.00 | Today | 1      |
= 
- @QuickSweep

+ @BillingFinanceQuickSweep
= 	Then I verify billing cycle called Part-Time Professional Account Method is Cash
= 
- @QuickSweep @Renewals

+ @BillingFinanceQuickSweep
= 	Then I verify a Cash renewals billing run called Regular Cash Mass Run with a billing cycle of Regular Membership Fees
= 	
- @QuickSweep

+ @ThumbsDownBug
= 		| Marilou Abbott | -75.00        | 0.00             | Student Member Join | 75.00            |
= 
- @QuickSweep

+ @ThumbsDownBug
= 
= @NotReRunnable
- @QuickSweep @Renewals

+ @BillingFinanceQuickSweep
= 	Then I verify a Accrual renewals billing run called Associate accural renewal run with a billing cycle of Associate Membership Fees
= 
- @QuickSweep

+ @BillingFinanceQuickSweep
= 	Then I Verify accounts page Join Now button works
= 
- @Join @QuickSweep 

+ @BillingFinanceQuickSweep
= 
= @NotReRunnable
- @QuickSweep

+ @BillingFinanceQuickSweep
= 
= @NotReRunnable
- @Renewals @QuickSweep 

+ @BillingFinanceQuickSweep
= 		| Accrual List Bill | Professional Membership | AddAYear      |
= 
- @QuickSweep @Join

+ @BillingFinanceQuickSweep
= 
= @NotReRunnable
- @QuickSweep

- Scenario: Verify a public user can apply a payment for a cash base renewal

+ @BillingFinanceQuickSweep

+ Scenario: Verify a public user can apply a payment for a cash bash renewal
= 		| CardCVC                | 123              |
= 		| CheckOrderConfirmation | true             |
- 		| PostalCode             | 78722            |
= 
= 
- @@Billing @QuickSweep

+ @BillingFinanceQuickSweep
= 	Then I verify user has Any message displayed as Item successfully saved
= 
- @QuickSweep

+ @BillingFinanceQuickSweep
= 		| 12          | 1.00000    | B       |
= 
- @QuickSweep

+ @BillingFinanceQuickSweep
= 		| Mickey           | Mouse           | CommunityPartnerMembership |
= 	Then I verify contacts joined product is Community Partner monthly with term span of 1
- 

- @Join @QuickSweep

- Scenario: Verify join no payment promotion

- 	Given I am on the Staff site as designated user Staff

- 	And I add a new contact

- 		| Key       | Value                    |

- 		| FirstName | Test                     |

- 		| LastName  | Contact                  |

- 		| Email     | demo123@imisfakemail.com |

- 	When I join now as StudentMemberJoin

- 	And I checkout items in the cart

- 		| Key           | Value           |

- 		| PaymentMethod | Without payment |

- 		| PromoCode     | DVETERAN        |

- 	Then I verify order was submitted without payment

- 

- @@BillingFinance @QuickSweep

- Scenario: Verify Accrual dues invoice cancellation no payment

- 	Given I am on the Staff site as designated user Staff

- 	When I cancel renewal for user with id 20804

- 	And I checkout items in the cart

- 		| Key           | Value           |

- 		| PaymentMethod | Without payment |

- 	Then I verify order was submitted without payment

- 

- @QuickSweep

- Scenario: Verify Cash dues invoice cancellation no payment

- 	Given I am on the Staff site as designated user Staff

- 	When I cancel renewal for user with id 21566

- 	And I checkout items in the cart

- 		| Key           | Value           |

- 		| PaymentMethod | Without payment |

- 	Then I verify order was submitted without payment

- 

- @Join @QuickSweep

- Scenario: Verify Join No Payment Complimentary

- 	Given I am on the Staff site as designated user Staff

- 	And I add a new contact

- 		| Key       | Value                    |

- 		| FirstName | Test                     |

- 		| LastName  | Contact                  |

- 		| Email     | demo123@imisfakemail.com |

- 	When I join now as RetiredMembers

- 	And I checkout items in the cart

- 		| Key           | Value           |

- 		| PaymentMethod | Without payment |

- 	Then I verify order was submitted without payment

- 

- @Join @QuickSweep

- Scenario: Verify a public user can join for a non-dues product

- 	Given I am on the Mbrr site

- 	And I create a new contact

- 		| Key        | Value             |

- 		| FirstName  | Bob               |

- 		| LastName   | Smith             |

- 		| Country    | Zambia            |

- 		| Address1   | 123 Some Street   |

- 		| City       | Austin            |

- 		| PostalCode | 11111             |

- 		| Email      | test@imisdemo.com |

- 		| Password   | demo123           |

- 	When I join now as NonMemberSubscriptions on Mbrr site

- 		| Key       | Value   |

- 		| ItemNames | Journal |

- 	And I checkout items in the cart

- 		| Key                 | Value |

- 		| PurchaseOrderNumber | 123   |

- 	Then I verify a non-dues product is ordered

- 

- @QuickSweep @Join

- Scenario: Verify standard prorating works

- 	Given I am on the Staff site as designated user System Administrator

- 	And I change billing time to Annual for billing cycle Regular Membership Fees

- 	And I add a new contact

- 		| Key       | Value                    |

- 		| FirstName | Test                     |

- 		| LastName  | Contact                  |

- 		| Email     | demo123@imisfakemail.com |

- 	When I join now as RegularMembershipFees

- 	Then I verify Voluntary Contributions product price is 20.00

- 	And I verify the membership expires at the end of the fiscal year

- 

- @QuickSweep @Join

- Scenario: Verify standard prorating works on Member site

- 	Given I am on the Staff site as designated user System Administrator

- 	And I change billing time to Annual for billing cycle Regular Membership Fees

- 	And I am on the Mbrr site

- 	And I logout on the current page

- 	And I create a new contact

- 		| Key       | Value   |

- 		| FirstName | Test    |

- 		| LastName  | Contact |

- 	When I join now as RegularMembershipFees on Mbrr site

- 		| Key       | Value            |

- 		| ItemNames | PAC Contribution |

- 		| AmountTo  | 120.00           |

- 	Then I verify Voluntary Contributions product price is 120.00

- 	And I verify the membership expires at the end of the fiscal year


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Membership\BillingProducts.feature

- @BillingProducts
= Feature: BillingProducts
- 
= 
+ @BillingProductsTypeFilter
= 	Then I should only get results with VOL type
= 
+ @BillingProductsTypeFilter-Bug83542
= 	Then I should see "Billing products" in the header
= 
+ @BillingProductsTypeFilter-Bug83542


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Membership\Chapters.feature

- @Chapters
= 
= 
+ @BillingProductsTypeFilter-Bug83542
= 	Then I should see "Chapters" in the header
= 
+ @BillingProductsTypeFilter-Bug83542
= 	Then I should see "Add new chapter" to add a new item to the list
= 
+ @BillingProductsTypeFilter-Bug83542
= 	Then I should be redirected to a chapter dashboard
= 
- @QuickSweep

+ @BillingGSTProductChapterList


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Membership\Renewals.feature

- @Renewals @QuickSweep
= Feature: Renewals
+ 

+ 
= 	When I reverse first open invoice
= 	Then I verify open invoice is reversed
- 

- Scenario: Verify renew in advance

- 	Given I am on the Staff site as designated user System Administrator

- 	When I renew membership for user with id 23220

- 	And I checkout items in the cart

- 		| Key           | Value                 |

- 		| PaymentMethod | Main Checking Account |

- 		| CheckNumber   | 1234                  |

- 	Then I verify membership for user with id 23220 was renewed


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Membership\Subscriptions.feature

- @Subscriptions @QuickSweep

+ @Subscriptions
= Testing the ability to add an un-billed subscription to users with the Subscription Adder
= 
+ @SubscriptionAdderMembership
= 		| Regular Member Fees | 0.00   | 0.00    | A      |
= 
+ @SubscriptionAdderSubscription


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\PaymentGateways\AustraliaPaymentGateways.feature

- @PaymentGateways @Australia

+ @PaymentGateways
= Scenario: Adding IMIS Pay CC AU
= 	When I setup a gateway suite
- 		| Key               | Value                                |

- 		| GatewayType       | ImisPay                              |

- 		| AccountCode       | IP_CC_AU                             |

- 		| Region            | Australia                            |

- 		| AccountName       | IMIS Pay CC AU                       |

- 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |

+ 		| Key         | Value                                |

+ 		| GatewayType | ImisPay                              |

+ 		| AccountCode | IP_CC_AU                             |

+ 		| Region      | Australia                            |

+ 		| AccountName | IMIS Pay CC AU                       |

+ 		| DigitalKey  | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |

- 		| PaymentMethodType | Credit card                          |

- 		| GLAccount         | 1-1020: VISA                         |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                                |

- 		| GatewayType       | ImisPay                              |

- 		| AccountCode       | IP_CC_AU                             |

- 		| Region            | Australia                            |

- 		| AccountName       | IMIS Pay CC AU                       |

- 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |

+ 		| Key         | Value                                |

+ 		| GatewayType | ImisPay                              |

+ 		| AccountCode | IP_CC_AU                             |

+ 		| Region      | Australia                            |

+ 		| AccountName | IMIS Pay CC AU                       |

+ 		| DigitalKey  | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |

- 		| PaymentMethodType | Credit card                          |

- 		| GLAccount         | 1-1020: VISA                         |
= 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
= 		| PaymentMethodType | Direct debit                         |
- 		| GLAccount         | 1-1060: Debit                        |
= 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
= 		| PaymentMethodType | Direct debit                         |
- 		| GLAccount         | 1-1060: Debit                        |
= Scenario: Adding Secure Pay CC AU
= 	When I setup a gateway suite
- 		| Key               | Value            |

- 		| GatewayType       | SecurePay        |

- 		| AccountCode       | SP_CC_AU         |

- 		| Password          | abc123           |

- 		| Environment       | Sandbox          |

- 		| AccountName       | Secure Pay CC AU |

- 		| MerchantId        | ABC0001          |

+ 		| Key         | Value            |

+ 		| GatewayType | SecurePay        |

+ 		| AccountCode | SP_CC_AU         |

+ 		| Password    | abc123           |

+ 		| Environment | Sandbox          |

+ 		| AccountName | Secure Pay CC AU |

+ 		| MerchantId  | ABC0001          |

- 		| PaymentMethodType | Credit card      |

- 		| GLAccount         | 1-1020: VISA     |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value            |

- 		| GatewayType       | SecurePay        |

- 		| AccountCode       | SP_CC_AU         |

- 		| Password          | abc123           |

- 		| Environment       | Sandbox          |

- 		| AccountName       | Secure Pay CC AU |

- 		| MerchantId        | ABC0001          |

+ 		| Key         | Value            |

+ 		| GatewayType | SecurePay        |

+ 		| AccountCode | SP_CC_AU         |

+ 		| Password    | abc123           |

+ 		| Environment | Sandbox          |

+ 		| AccountName | Secure Pay CC AU |

+ 		| MerchantId  | ABC0001          |

- 		| PaymentMethodType | Credit card      |

- 		| GLAccount         | 1-1020: VISA     |
= Scenario: Adding Secure Pay DD AU
= 	When I setup a gateway suite
- 		| Key               | Value            |

- 		| GatewayType       | SecurePay        |

- 		| AccountCode       | SP_DD_AU         |

- 		| Password          | abc123           |

- 		| Environment       | Sandbox          |

- 		| AccountName       | Secure Pay DD AU |

- 		| MerchantId        | ABC0001          |

+ 		| Key				| Value            |

+ 		| GatewayType		| SecurePay        |

+ 		| AccountCode		| SP_DD_AU         |

+ 		| Password			| abc123           |

+ 		| Environment		| Sandbox          |

+ 		| AccountName		| Secure Pay DD AU |

+ 		| MerchantId		| ABC0001          |
= 		| PaymentMethodType | Direct debit     |
- 		| GLAccount         | 1-1060: Debit    |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value            |

- 		| GatewayType       | SecurePay        |

- 		| AccountCode       | SP_DD_AU         |

- 		| Password          | abc123           |

- 		| Environment       | Sandbox          |

- 		| AccountName       | Secure Pay DD AU |

- 		| MerchantId        | ABC0001          |

+ 		| Key				| Value            |

+ 		| GatewayType		| SecurePay        |

+ 		| AccountCode		| SP_DD_AU         |

+ 		| Password			| abc123           |

+ 		| Environment		| Sandbox          |

+ 		| AccountName		| Secure Pay DD AU |

+ 		| MerchantId		| ABC0001          |
= 		| PaymentMethodType | Direct debit     |
- 		| GLAccount         | 1-1060: Debit    |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\PaymentGateways\CanadaPaymentGateways.feature

- @PaymentGateways @Canada

+ @PaymentGateways
= Scenario: Adding IMIS Pay CC CA
= 	When I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_CA                         |

- 		| Region            | Canada                           |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033566                         |

- 		| AccountName       | IMIS Pay CC CA                   |

- 		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_CA                         |

+ 		| Region           | Canada                           |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033566                         |

+ 		| AccountName      | IMIS Pay CC CA                   |

+ 		| AuthorizationKey | rq5FjxL2nva2uubghavs3s2MfMdZktan |

- 		| PaymentMethodType | Credit card                      |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_CA                         |

- 		| Region            | Canada                           |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033566                         |

- 		| AccountName       | IMIS Pay CC CA                   |

- 		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_CA                         |

+ 		| Region           | Canada                           |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033566                         |

+ 		| AccountName      | IMIS Pay CC CA                   |

+ 		| AuthorizationKey | rq5FjxL2nva2uubghavs3s2MfMdZktan |

- 		| PaymentMethodType | Credit card                      |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| AccountName      | IMIS Pay DD CA                   |
= 		| AuthorizationKey | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |
- 		| PaymentMethodType | Direct debit                    |

- 		| GLAccount         | 1-1060: Debit                   |
= 		| AccountName      | IMIS Pay DD CA                   |
= 		| AuthorizationKey | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |
- 		| PaymentMethodType | Direct debit                    |

- 		| GLAccount         | 1-1060: Debit                   |
= Scenario: Adding IATS DD CA
= 	When I setup a gateway suite
- 		| Key               | Value                |

- 		| GatewayType       | Iats                 |

- 		| AccountCode       | IA_CC_CA             |

- 		| Region            | United States/Canada |

- 		| AccountName       | IATS CC CA           |

- 		| Password          | Test88               |

- 		| AgentCode         | Test88               |

+ 		| Key         | Value                |

+ 		| GatewayType | Iats                 |

+ 		| AccountCode | IA_CC_CA             |

+ 		| Region      | United States/Canada |

+ 		| AccountName | IATS CC CA           |

+ 		| Password    | Test88               |

+ 		| AgentCode   | Test88               |

- 		| PaymentMethodType | Credit card          |

- 		| GLAccount         | 1-1020: VISA         |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                |

- 		| GatewayType       | Iats                 |

- 		| AccountCode       | IA_CC_CA             |

- 		| Region            | United States/Canada |

- 		| AccountName       | IATS CC CA           |

- 		| Password          | Test88               |

- 		| AgentCode         | Test88               |

+ 		| Key         | Value                |

+ 		| GatewayType | Iats                 |

+ 		| AccountCode | IA_CC_CA             |

+ 		| Region      | United States/Canada |

+ 		| AccountName | IATS CC CA           |

+ 		| Password    | Test88               |

+ 		| AgentCode   | Test88               |

- 		| PaymentMethodType | Credit card          |

- 		| GLAccount         | 1-1020: VISA         |
= Scenario: Adding Bambora CC CA
= 	When I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPassThrough                  |

- 		| AccountCode       | BB_CC_CA                         |

- 		| Environment       | Sandbox                          |

- 		| AccountName       | Bambora CC CA                    |

- 		| SpreedlyType      | Bambora NA                       |

- 		| MerchantId        | 300212633                        |

- 		| UserName          | johnasi                          |

- 		| Password          | FullAccess777!                   |

- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |

+ 		| Key          | Value                            |

+ 		| GatewayType  | ImisPassThrough                  |

+ 		| AccountCode  | BB_CC_CA                         |

+ 		| Environment  | Sandbox                          |

+ 		| AccountName  | Bambora CC CA                    |

+ 		| SpreedlyGatewayType | Bambora NA                       |

+ 		| MerchantId   | 300212633                        |

+ 		| UserName     | johnasi                          |

+ 		| Password     | FullAccess777!                   |

+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |

- 		| PaymentMethodType | Credit card                      |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPassThrough                  |

- 		| AccountCode       | BB_CC_CA                         |

- 		| Environment       | Sandbox                          |

- 		| AccountName       | Bambora CC CA                    |

- 		| SpreedlyType      | Bambora NA                       |

- 		| MerchantId        | 300212633                        |

- 		| UserName          | johnasi                          |

- 		| Password          | FullAccess777!                   |

- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |

+ 		| Key          | Value                            |

+ 		| GatewayType  | ImisPassThrough                  |

+ 		| AccountCode  | BB_CC_CA                         |

+ 		| Environment  | Sandbox                          |

+ 		| AccountName  | Bambora CC CA                    |

+ 		| SpreedlyType | Bambora NA                       |

+ 		| MerchantId   | 300212633                        |

+ 		| UserName     | johnasi                          |

+ 		| Password     | FullAccess777!                   |

+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |

- 		| PaymentMethodType | Credit card                      |

- 		| GLAccount         | 1-1020: VISA                     |
= Scenario: Adding Elavon CC CA
= 	When I setup a gateway suite
- 		| Key               | Value                                                            |

- 		| GatewayType       | ImisPassThrough                                                  |

- 		| AccountCode       | EL_CC_CA                                                         |

- 		| Environment       | Sandbox                                                          |

- 		| AccountName       | Elavon CC CA                                                     |

- 		| SpreedlyType      | Elavon                                                           |

- 		| MerchantId        | 0022874                                                          |

- 		| UserName          | apiuser                                                          |

- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |

+ 		| Key          | Value                                                            |

+ 		| GatewayType  | ImisPassThrough                                                  |

+ 		| AccountCode  | EL_CC_CA                                                         |

+ 		| Environment  | Sandbox                                                          |

+ 		| AccountName  | Elavon CC CA                                                     |

+ 		| SpreedlyType | Elavon                                                           |

+ 		| MerchantId   | 0023010                                                          |

+ 		| UserName     | apiuser                                                          |

+ 		| Pin          | FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS |

- 		| PaymentMethodType | Credit card                                                      |

- 		| GLAccount         | 1-1020: VISA                                                     |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                                                            |

- 		| GatewayType       | ImisPassThrough                                                  |

- 		| AccountCode       | EL_CC_CA                                                         |

- 		| Environment       | Sandbox                                                          |

- 		| AccountName       | Elavon CC CA                                                     |

- 		| SpreedlyType      | Elavon                                                           |

- 		| MerchantId        | 0022874                                                          |

- 		| UserName          | apiuser                                                          |

- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |

+ 		| Key          | Value                                                            |

+ 		| GatewayType  | ImisPassThrough                                                  |

+ 		| AccountCode  | EL_CC_CA                                                         |

+ 		| Environment  | Sandbox                                                          |

+ 		| AccountName  | Elavon CC CA                                                     |

+ 		| SpreedlyType | Elavon                                                           |

+ 		| MerchantId   | 0023010                                                          |

+ 		| UserName     | apiuser                                                          |

+ 		| Pin          | FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS |

- 		| PaymentMethodType | Credit card                                                      |

- 		| GLAccount         | 1-1020: VISA                                                     |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\PaymentGateways\NewZealandPaymentGateways.feature

- @PaymentGateways @NewZeland

+ @PaymentGateways
= 		| PaymentMethodName | IMIS Pay CC New Zealand              |
= 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
= 		| PaymentMethodName | IMIS Pay CC New Zealand              |
= 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
= 		| PaymentMethodName | IMIS Pay DD New Zealand              |
= 		| PaymentMethodType | Direct debit                         |
- 		| GLAccount         | 1-1060: Debit                        |
= 		| PaymentMethodName | IMIS Pay DD New Zealand              |
= 		| PaymentMethodType | Direct debit                         |
- 		| GLAccount         | 1-1060: Debit                        |
= 		| RenewingMemberships | true  |
= 
- Scenario: Adding Secure Pay NZ CC

+ Scenario: Adding Secure Pay NZ
= 	When I setup a gateway suite
- 		| Key               | Value                     |

- 		| GatewayType       | SecurePay                 |

- 		| AccountCode       | SP_NZ                     |

- 		| Password          | abc123                    |

- 		| Environment       | Sandbox                   |

- 		| AccountName       | Secure Pay NZ             |

- 		| MerchantId        | ABC0001                   |

+ 		| Key         | Value         |

+ 		| GatewayType | SecurePay     |

+ 		| AccountCode | SP_NZ         |

+ 		| Password    | abc123        |

+ 		| Environment | Sandbox       |

+ 		| AccountName | Secure Pay NZ |

+ 		| MerchantId  | ABC0001       |

- 		| PaymentMethodCode | SP_CC_NZ                  |

- 		| PaymentMethodName | Secure Pay CC New Zealand |

- 		| PaymentMethodType | Credit card               |

- 		| GLAccount         | 1-1020: VISA              |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                     |

- 		| GatewayType       | SecurePay                 |

- 		| AccountCode       | SP_NZ                     |

- 		| Password          | abc123                    |

- 		| Environment       | Sandbox                   |

- 		| AccountName       | Secure Pay NZ             |

- 		| MerchantId        | ABC0001                   |

+ 		| Key         | Value         |

+ 		| GatewayType | SecurePay     |

+ 		| AccountCode | SP_NZ         |

+ 		| Password    | abc123        |

+ 		| Environment | Sandbox       |

+ 		| AccountName | Secure Pay NZ |

+ 		| MerchantId  | ABC0001       |

- 		| PaymentMethodCode | SP_CC_NZ                  |

- 		| PaymentMethodName | Secure Pay CC New Zealand |

- 		| PaymentMethodType | Credit card               |

- 		| GLAccount         | 1-1020: VISA              |

- 	And I verify autopay

- 		| Key                 | Value |

- 		| RecurringDonation   | true  |

- 		| RenewingMemberships | true  |

- 

- Scenario: Adding Secure Pay NZ DD

- 	When I setup a gateway suite

- 		| Key               | Value                     |

- 		| GatewayType       | SecurePay                 |

- 		| AccountCode       | SP_NZ                     |

- 		| Password          | abc123                    |

- 		| Environment       | Sandbox                   |

- 		| AccountName       | Secure Pay NZ             |

- 		| MerchantId        | ABC0001                   |

- 		| PaymentMethodCode | SP_DD_NZ                  |

- 		| PaymentMethodName | Secure Pay DD New Zealand |

- 		| PaymentMethodType | Direct debit              |

- 		| GLAccount         | 1-1060: Debit             |

- 	And I setup autopay

- 		| Key                 | Value |

- 		| RecurringDonation   | true  |

- 		| RenewingMemberships | true  |

- 	Then I verify a gateway suite

- 		| Key               | Value                     |

- 		| GatewayType       | SecurePay                 |

- 		| AccountCode       | SP_NZ                     |

- 		| Password          | abc123                    |

- 		| Environment       | Sandbox                   |

- 		| AccountName       | Secure Pay NZ             |

- 		| MerchantId        | ABC0001                   |

- 		| PaymentMethodCode | SP_DD_NZ                  |

- 		| PaymentMethodName | Secure Pay DD New Zealand |

- 		| PaymentMethodType | Direct debit              |

- 		| GLAccount         | 1-1060: Debit             |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\PaymentGateways\UnitedKingdomPaymentGateways.feature

- @PaymentGateways @UnitedKingdom

+ @PaymentGateways
= Scenario: Adding IATS CC UK
= 	When I setup a gateway suite
- 		| Key               | Value                   |

- 		| GatewayType       | Iats                    |

- 		| AccountCode       | IA_CC_UK                |

- 		| AccountName       | IATS CC UK              |

- 		| Region            | United Kingdom & Europe |

- 		| Password          | rapidtest7              |

- 		| AgentCode         | UIAW88                  |

+ 		| Key         | Value                   |

+ 		| GatewayType | Iats                    |

+ 		| AccountCode | IA_CC_UK                |

+ 		| Region      | United Kingdom & Europe |

+ 		| Password    | rapidtest7              |

+ 		| AgentCode   | UIAW88                  |

+ 		| AccountName | IATS CC UK              |

- 		| PaymentMethodType | Credit card             |

- 		| GLAccount         | 1-1020: VISA            |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                   |

- 		| GatewayType       | Iats                    |

- 		| AccountCode       | IA_CC_UK                |

- 		| AccountName       | IATS CC UK              |

- 		| Region            | United Kingdom & Europe |

- 		| Password          | rapidtest7              |

- 		| AgentCode         | UIAW88                  |

+ 		| Key         | Value                   |

+ 		| GatewayType | Iats                    |

+ 		| AccountCode | IA_CC_UK                |

+ 		| Region      | United Kingdom & Europe |

+ 		| Password    | rapidtest7              |

+ 		| AgentCode   | UIAW88                  |

+ 		| AccountName | IATS CC UK              |

- 		| PaymentMethodType | Credit card             |

- 		| GLAccount         | 1-1020: VISA            |
= Scenario: Adding IMIS Pay CC UK
= 	When I setup a gateway suite
- 		| Key               | Value                                |

- 		| GatewayType       | ImisPay                              |

- 		| AccountCode       | IP_CC_UK                             |

- 		| Region            | United Kingdom & Europe              |

- 		| AccountName       | IMIS Pay CC UK                       |

- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

- 		| AppKey            | wfENkB9cKTSftNoG                     |

- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |

+ 		| Key         | Value                                |

+ 		| GatewayType | ImisPay                              |

+ 		| AccountCode | IP_CC_UK                             |

+ 		| Region      | United Kingdom & Europe              |

+ 		| AccountName | IMIS Pay CC UK                       |

+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

+ 		| AppKey      | wfENkB9cKTSftNoG                     |

+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |

- 		| PaymentMethodType | Credit card                          |

- 		| GLAccount         | 1-1020: VISA                         |
= 		| RenewingMemberships | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                                |

- 		| GatewayType       | ImisPay                              |

- 		| AccountCode       | IP_CC_UK                             |

- 		| Region            | United Kingdom & Europe              |

- 		| AccountName       | IMIS Pay CC UK                       |

- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

- 		| AppKey            | wfENkB9cKTSftNoG                     |

- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |

+ 		| Key         | Value                                |

+ 		| GatewayType | ImisPay                              |

+ 		| AccountCode | IP_CC_UK                             |

+ 		| Region      | United Kingdom & Europe              |

+ 		| AccountName | IMIS Pay CC UK                       |

+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |

+ 		| AppKey      | wfENkB9cKTSftNoG                     |

+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |

+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |

- 		| PaymentMethodType | Credit card                          |

- 		| GLAccount         | 1-1020: VISA                         |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\PaymentGateways\UnitedStatesPaymentGateways.feature
= Scenario: Adding IMIS Pay CC US
= 	When I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |		

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
=         | AllowDonorsSelectCollectionDate | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |		

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount         | 1-1020: VISA                    |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |
= 		| PaymentMethodType | Direct debit                     |
- 		| GLAccount         | 1-1060: Debit                    |

+ 		| GLAccount         | 1-1020: VISA                     |
= 		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |
= 		| PaymentMethodType | Direct debit                     |
- 		| GLAccount         | 1-1060: Debit                    |

+ 		| GLAccount         | 1-1020: VISA                     |
= 		| Password          | Test88               |
= 		| AgentCode         | Test88               |
- 		| GLAccount         | 1-1060: Debit        |
= 		| PaymentMethodType | Direct debit         |
+ 		| GLAccount         | 1-1020: VISA         |
= 		| AgentCode         | Test88               |
= 		| PaymentMethodType | Direct debit         |
- 		| GLAccount         | 1-1060: Debit        |

+ 		| GLAccount         | 1-1020: VISA         |
= Scenario: Adding Pay Flow CC US
= 	When I setup a gateway suite
- 		| Key               | Value          |

- 		| GatewayType       | PayFlowPro     |

- 		| AccountCode       | PF_CC_US       |

- 		| Region            | United States  |

- 		| AccountName       | Pay Flow CC US |

- 		| Password          | qaperson1      |

- 		| UserName          | asicctest      |

- 		| Partner           | Verisign       |

- 		| Vendor            | asicctest      |

- 		| Environment       | Sandbox        |

- 		| PaymentMethodType | Credit card    |

+ 		| Key         | Value          |

+ 		| GatewayType | PayFlowPro     |

+ 		| AccountCode | PF_CC_US       |

+ 		| Region      | United States  |

+ 		| AccountName | Pay Flow CC US |

+ 		| Password    | qaperson1      |

+ 		| UserName    | asicctest      |

+ 		| Partner     | Verisign       |

+ 		| Vendor      | asicctest      |

+ 		| Environment | Sandbox        |

+ 		| GLAccount   | 1-1020: VISA   |

- 		| GLAccount         | 1-1020: VISA   |
=         | AllowDonorsSelectCollectionDate | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value          |

- 		| GatewayType       | PayFlowPro     |

- 		| AccountCode       | PF_CC_US       |

- 		| Region            | United States  |

- 		| AccountName       | Pay Flow CC US |

- 		| Password          | qaperson1      |

- 		| UserName          | asicctest      |

- 		| Partner           | Verisign       |

- 		| Vendor            | asicctest      |

- 		| Environment       | Sandbox        |

- 		| PaymentMethodType | Credit card    |

+ 		| Key         | Value          |

+ 		| GatewayType | PayFlowPro     |

+ 		| AccountCode | PF_CC_US       |

+ 		| Region      | United States  |

+ 		| AccountName | Pay Flow CC US |

+ 		| Password    | qaperson1      |

+ 		| UserName    | asicctest      |

+ 		| Partner     | Verisign       |

+ 		| Vendor      | asicctest      |

+ 		| Environment | Sandbox        |

+ 		| GLAccount   | 1-1020: VISA   |

- 		| GLAccount         | 1-1020: VISA   |
= 		| Environment       | Sandbox        |
= 		| PaymentMethodType | Direct debit   |
- 		| GLAccount         | 1-1060: Debit  |

+ 		| GLAccount         | 1-1020: VISA   |
= 		| Environment       | Sandbox        |
= 		| PaymentMethodType | Direct debit   |
- 		| GLAccount         | 1-1060: Debit  |

+ 		| GLAccount         | 1-1020: VISA   |
= Scenario: Adding Vantiv
= 	When I setup a gateway suite
- 		| Key               | Value        |

- 		| GatewayType       | Vantiv       |

- 		| AccountCode       | VANTIV_US    |

- 		| AccountName       | Vantiv       |

- 		| MerchantId        | 1213807      |

- 		| PaymentMethodType | Credit card  |

+ 		| Key         | Value        |

+ 		| GatewayType | Vantiv       |

+ 		| AccountCode | VANTIV_US    |

+ 		| AccountName | Vantiv       |

+ 		| MerchantId  | 1213807      |

+ 		| GLAccount   | 1-1020: VISA |

- 		| GLAccount         | 1-1020: VISA |
=         | AllowDonorsSelectCollectionDate | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value        |

- 		| GatewayType       | Vantiv       |

- 		| AccountCode       | VANTIV_US    |

- 		| AccountName       | Vantiv       |

- 		| MerchantId        | 1213807      |

- 		| PaymentMethodType | Credit card  |

+ 		| Key         | Value        |

+ 		| GatewayType | Vantiv       |

+ 		| AccountCode | VANTIV_US    |

+ 		| AccountName | Vantiv       |

+ 		| MerchantId  | 1213807      |

+ 		| GLAccount   | 1-1020: VISA |

- 		| GLAccount         | 1-1020: VISA |
= Scenario: Adding Bambora CC US
= 	When I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPassThrough                  |

- 		| AccountCode       | BB_CC_US                         |

- 		| Environment       | Sandbox                          |

- 		| AccountName       | Bambora CC US                    |

- 		| SpreedlyType      | Bambora NA                       |

- 		| MerchantId        | 300212633                        |

- 		| UserName          | johnasi                          |

- 		| Password          | FullAccess777!                   |

- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key          | Value                            |

+ 		| GatewayType  | ImisPassThrough                  |

+ 		| AccountCode  | BB_CC_US                         |

+ 		| Environment  | Sandbox                          |

+ 		| AccountName  | Bambora CC US                    |

+ 		| SpreedlyType | Bambora NA                       |

+ 		| MerchantId   | 300212633                        |

+ 		| UserName     | johnasi                          |

+ 		| Password     | FullAccess777!                   |

+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |

+ 		| GLAccount    | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
=         | AllowDonorsSelectCollectionDate | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPassThrough                  |

- 		| AccountCode       | BB_CC_US                         |

- 		| Environment       | Sandbox                          |

- 		| AccountName       | Bambora CC US                    |

- 		| SpreedlyType      | Bambora NA                       |

- 		| MerchantId        | 300212633                        |

- 		| UserName          | johnasi                          |

- 		| Password          | FullAccess777!                   |

- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key          | Value                            |

+ 		| GatewayType  | ImisPassThrough                  |

+ 		| AccountCode  | BB_CC_US                         |

+ 		| Environment  | Sandbox                          |

+ 		| AccountName  | Bambora CC US                    |

+ 		| SpreedlyType | Bambora NA                       |

+ 		| MerchantId   | 300212633                        |

+ 		| UserName     | johnasi                          |

+ 		| Password     | FullAccess777!                   |

+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |

+ 		| GLAccount    | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= Scenario: Adding Elavon CC US
= 	When I setup a gateway suite
- 		| Key               | Value                                                            |

- 		| GatewayType       | ImisPassThrough                                                  |

- 		| AccountCode       | EL_CC_US                                                         |

- 		| Environment       | Sandbox                                                          |

- 		| AccountName       | Elavon CC US                                                     |

- 		| SpreedlyType      | Elavon                                                           |

- 		| MerchantId        | 0022874                                                          |

- 		| UserName          | apiuser                                                          |

- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |

- 		| PaymentMethodType | Credit card                                                      |

+ 		| Key          | Value                                                            |

+ 		| GatewayType  | ImisPassThrough                                                  |

+ 		| AccountCode  | EL_CC_US                                                         |

+ 		| Environment  | Sandbox                                                          |

+ 		| AccountName  | Elavon CC US                                                     |

+ 		| SpreedlyType | Elavon                                                           |

+ 		| MerchantId   | 0022579                                                          |

+ 		| UserName     | apiuser                                                          |

+ 		| Pin          | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |

+ 		| GLAccount    | 1-1020: VISA                                                     |

- 		| GLAccount         | 1-1020: VISA                                                     |
=         | AllowDonorsSelectCollectionDate | true  |
= 	Then I verify a gateway suite
- 		| Key               | Value                                                            |

- 		| GatewayType       | ImisPassThrough                                                  |

- 		| AccountCode       | EL_CC_US                                                         |

- 		| Environment       | Sandbox                                                          |

- 		| AccountName       | Elavon CC US                                                     |

- 		| SpreedlyType      | Elavon                                                           |

- 		| MerchantId        | 0022874                                                          |

- 		| UserName          | apiuser                                                          |

- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |

- 		| PaymentMethodType | Credit card                                                      |

+ 		| Key          | Value                                                            |

+ 		| GatewayType  | ImisPassThrough                                                  |

+ 		| AccountCode  | EL_CC_US                                                         |

+ 		| Environment  | Sandbox                                                          |

+ 		| AccountName  | Elavon CC US                                                     |

+ 		| SpreedlyType | Elavon                                                           |

+ 		| MerchantId   | 0022579                                                          |

+ 		| UserName     | apiuser                                                          |

+ 		| Pin          | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |

+ 		| GLAccount    | 1-1020: VISA                                                     |

- 		| GLAccount         | 1-1020: VISA                                                     |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\RiSE\ContactErasure.feature

- @ContactErasure @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\SiteNavigation\StaffSideNav.feature
= 	| Form Builder                | Migrate forms            | Form-Migration.aspx                                                              |
= 	| Panel Designer              |                          | PanelDefinitionList.aspx                                                         |
- 	| Process automation          |                          | Process_automation.aspx                                                           |

+ 	| Process automation          |                          | Process_automatio.aspx                                                           |


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Staff\ContactSecurity.feature

- @ContactSecurity
= Background:
= 	Given I set system up with a gateway
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 
- @Events @QuickSweep


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Staff\LicenseManagement.feature
= Feature: LicenseManagement
= 	
- @LicenseDemo @QuickSweep

+ Background:

+ 	Given I am on the Staff site as designated user System Administrator

+ 

+ @LicenseDemo
= Scenario: Resync the Demo license
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I check that iMIS is Licensed To iMIS Enterprise Demonstration
= 
- @Ignore

+ @Ignored
= @LicenseDev
= Scenario: Update the license to dev
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I check that iMIS is Licensed To iMIS Enterprise Development
= 
- @Ignore

+ @Ignored
= @LicenseDev
= Scenario: Resync the Dev license
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I check that iMIS is Licensed To iMIS Enterprise Development
= 
- @LicenseDemo @QuickSweep

+ @LicenseDemo
= Scenario: Update the license to demo
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I check that iMIS is Licensed To iMIS Enterprise Demonstration
= 
- @LicenseOpenId @QuickSweep

+ @LicenseOpenId
= Scenario: Update the license to openid
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I check that iMIS is Licensed To OpenID Test v10
= 
- @LicenseDemo @QuickSweep

+ @LicenseDemo
= Scenario: Verify only licensed products are available to the user in IMIS
- 	Given I am on the Staff site as designated user System Administrator
= 	Then I verify Membership displays under Licensed features
= 
- @LicenseDemo @QuickSweep

+ @LicenseDemo
= Scenario: Verify a product can be purchased with ImisPay after applying a demo license
- 	Given I am on the Staff site as designated user System Administrator
= 	And I update the license to demo
= 	And I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| Product | Building a Strong Team |
= 
- @LicenseDemo @QuickSweep

+ @LicenseDemo
= Scenario: Verify a product can be purchased with ImisPay after resyncing demo license
- 	Given I am on the Staff site as designated user System Administrator
= 	And I setup a gateway suite
- 		| Key               | Value                            |

- 		| GatewayType       | ImisPay                          |

- 		| AccountCode       | IP_CC_US                         |

- 		| Region            | United States                    |

- 		| XWebId            | 800000022538                     |

- 		| TerminalId        | 80033565                         |

- 		| AccountName       | IMIS Pay CC US                   |

- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

- 		| PaymentMethodType | Credit card                      |

+ 		| Key              | Value                            |

+ 		| GatewayType      | ImisPay                          |

+ 		| AccountCode      | IP_CC_US                         |

+ 		| Region           | United States                    |

+ 		| XWebId           | 800000022538                     |

+ 		| TerminalId       | 80033565                         |

+ 		| AccountName      | IMIS Pay CC US                   |

+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |

+ 		| GLAccount        | 1-1020: VISA                     |

- 		| GLAccount         | 1-1020: VISA                     |
= 		| Key     | Value                  |
= 		| Product | Building a Strong Team |
- 

- Scenario: Verify user is able to apply new license to iMIS

- 	Given I log on the License Server site as user License Administrator

- 	And I create a new iMIS EMS Product Test License with all features

- 	And I am on the Staff site as designated user System Administrator

- 	When I update the license to current 

- 	Then I verify that iMIS is Licensed To current license 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Staff\OpenIdConnect.feature

- @OpenIdConnect @QuickSweep
= 		And I check that iMIS is Licensed To OpenID Test v10
= 
- @QuickSweep

+ @OpenId


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Features\Staff\Staff.feature
= Feature: Staff
= 
- @Contacts

+ @StaffSignedOut
= 	Then I am on the Gateways tab
= 
- @Contacts

+ @AccountPage
= 	Then I verify User ID 23151 email is not updated with carlykêwalski-demo@mailinator.com
= 
- @Contacts

+ @AccountPage
= 	Then I verify User ID 23151 email is updated with Testing@mailinator.com
= 
- @Contacts

+ @StaffAccountPagePayments
= 	Then I verify that the payments grid contains a print receipt option
= 
- @Contacts

+ @AccountPageProfileDesignation


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\StepArgTransformations.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Advertising\MediaAsset\RateCardsDetailsStepDef.cs
=         }
=         #endregion
- 

-         [When(@"I update Rate card details matrix after deleting ad size\(s\) or Frequency for (.*), (.*) and (.*)")]

-         public void WhenIUpdateRateCardDetailsMatrixAfterDeletingAdSizeSOrFrequencyForACRPOnlineACRPdAndColor(string mediaAsset,string rateCard,string adColor, Table table)

-         {

-             RateCardDetailsTestMethod.UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(mediaAsset, rateCard, adColor, table);

-         }

- 

-         [Then(@"I verify message (.*)")]

-         public void ThenIVerifyMessage(string message)

-         {

-             RateCardDetailsTestMethod.VerifyMessage(message);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Commerce\CartStepDef.cs
=     public sealed class CartStepDef
=     {
+         private readonly IWebDriver _driver;
=         public CartStepDef(IWebDriver driver, IAsiWebContext context)
=         {
+             _driver = driver;
=             _context = context;
=             CartTestMethods = new CartTestMethods(driver, context);
+             CartTestMethodsV10 = new CartTestMethodsV10(driver, context);
= 
=         public CartTestMethods CartTestMethods { get; set; }
+         public CartTestMethodsV10 CartTestMethodsV10 { get; set; }
= 
-         [Then(@$"I verify the cart contains GstInc tax for item {StepRegex.OneOrMoreWord}")]

-         public void VerifyCartContainsGstIncTaxForItem(string itemCode)

+         [Then(@"I verify the cart contains GstInc tax for item (.*)")]

+         public void VerifyCartContainsGstIncTaxForItem(string itemId)
=         {
-             CartTestMethods.VerifyCartContainsGstIncTaxForItems(new[] { itemCode });

+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];

+             CartTestMethodsV10.VerifyCartContainsGstIncTaxForItems(new List<string>() { itemId });
=         }
= 
-         [Then(@"I verify the cart contains GstInc tax for the previously created item")]

-         public void VerifyCartContainsGstIncTaxForPrevCreatedItem()

+         [Then(@"I verify the cart does not contain GstInc tax for item (.*)")]

+         public void VerifyCartDoesNotContainGstIncTaxForItem(string itemId)
=         {
-             CartTestMethods.VerifyCartContainsGstIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });

+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];

+             CartTestMethodsV10.VerifyCartDoesNotContainGstIncTaxForItems(new List<string>() { itemId });
=         }
- 

-         [Then(@"I verify the cart does not contain GstInc tax for the previously created item")]

+         [Then(@"I verify the cart contains VatInc tax for item (.*)")]

+         public void VerifyCartContainsVatIncTaxForItem(string itemId)

-         public void VerifyCartDoesNotContainGstIncTaxForPrevCreatedItem()
=         {
-             CartTestMethods.VerifyCartDoesNotContainGstIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });

+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];

+             CartTestMethodsV10.VerifyCartContainsVatIncTaxForItems(new List<string>() { itemId });
=         }
= 
-         [Then(@"I verify the cart contains VatInc tax for the previously created item")]

-         public void VerifyCartContainsVatIncTaxForPrevCreatedItem()

+         [Then(@"I verify the cart does not contain VatInc tax for item (.*)")]

+         public void VerifyCartDoesNotContainVatIncTaxForItem(string itemId)
=         {
-             CartTestMethods.VerifyCartContainsVatIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });

-         }

+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];

+             CartTestMethodsV10.VerifyCartDoesNotContainVatIncTaxForItems(new List<string>() { itemId });

- 

-         [Then(@"I verify the cart does not contain VatInc tax for the previously created item")]

-         public void VerifyCartDoesNotContainVatIncTaxForItem()

-         {

-             CartTestMethods.VerifyCartDoesNotContainVatIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });
=         }
= 
-         [Then(@"I verify the cart contains Canada tax")]

-         public void VerifyCartContainsCanadaTax()

-         {

-             CartTestMethods.VerifyCartContainsCanadaTax();

-         }

- 

-         [Then(@"I verify the cart does not contain Canada tax")]

-         public void VerifyCartDoesNotContainCanadaTax()

-         {

-             CartTestMethods.VerifyCartDoesNotContainCanadaTax();

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Commerce\InventoryReceiptsStepDef.cs
=     public class InventoryReceiptsStepDef
=     {
-         public InventoryReceiptsStepDef(IWebDriver driver, IAsiWebContext context, ProductContext productContext)

+         public InventoryReceiptsStepDef(IWebDriver driver, IAsiWebContext context, SpecFlowContext scenarioContext)
=         {
-             InventoryReceiptsTestMethods = new InventoryReceiptsTestMethods(driver, context, productContext);

+             InventoryReceiptsTestMethods = new InventoryReceiptsTestMethods(driver, context, scenarioContext);
= 
=         [Given($"I save {StepRegex.SingleWord} inventory details before update")]
-         public void SaveProductDetailsBeforeUpdate(string productCode)

+         public void SaveInventoryDetailsBeforeUpdate(string productCode)
=         {
-             InventoryReceiptsTestMethods.SaveProductDetailsBeforeUpdate(productCode);

+             InventoryReceiptsTestMethods.SaveInventoryDetailsBeforeUpdate(productCode);
=         }
= 
-         [When("I process inventory (Receipt|Adjustment) with (positive|negative) quantity")]

-         public void ProcessInventoryReceipt(string type, string quantityDirection)

+         [When("I process inventory (Receipt|Adjustment) for (.*) with (positive|negative) quantity")]

+         public void SelectInventoryReceiptsFromCommerce(string type, string productName, string quantityDirection)
=         {
-             InventoryReceiptsTestMethods.ProcessInventoryReceipt(type, quantityDirection == "positive");

+             InventoryReceiptsTestMethods.SelectInventoryReceiptsFromCommerce(type, productName, quantityDirection == "positive");
=         }
= 
-         [Then("I verify inventory (Receipt|Adjustment) is applied")]

-         public void VerifyInventoryDetailsAreUpdated(string type)

+         [Then("I verify inventory (Receipt|Adjustment) for (.*) is applied")]

+         public void VerifyInventoryDetailsAreUpdated(string type, string productName)
=         {
-             InventoryReceiptsTestMethods.VerifyInventoryDetailsAreUpdated(type);

+             InventoryReceiptsTestMethods.VerifyInventoryDetailsAreUpdated(type, productName);


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Commerce\OrderConfirmationStepDef.cs
=         }
= 
-         [Then(@"I verify the order confirmation for join billing contains GstInc tax")]

-         public void VerifyOrderConfirmationForJoinBillingContainsGstIncTaxForAtLeastOneItem()

-         {

-             OrderConfirmationTestMethodsV10.VerifyJoinBillingIncludeGstInc();

-         }

- 
=         }
= 
-         [Then(@"I verify the order confirmation contains Canada tax")]

-         public void VerifyOrderConfirmationContainsCanadaTax()

-         {

-             OrderConfirmationTestMethodsV10.VerifyOrderConfirmationContainsCanadaTax();

-         }

- 

-         [Then(@"I verify the order confirmation does not contain Canada tax")]

-         public void VerifyOrderConfirmationDoesNotContainCanadaTax()

-         {

-             OrderConfirmationTestMethodsV10.VerifyOrderConfirmationDoesNotContainCanadaTax();

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Community\CommitteeStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Community\ContactStepDef.cs
=             ContactTestMethod.VerifyLoggedInUserContact(contactData.LastName, contactData.FirstName);
=         }
- 

-         [Given(@"I add a new contact")]

-         [When(@"I add a new contact")]

-         public void WhenIAddNewContact(Table data)

-         {

-             ContactTestMethod.AddNewContact(data.CreateInstance<ContactData>());

-         }

- 

-         [Given(@"I add a new random contact")]

-         [When(@"I add a new random contact")]

-         public void WhenIAddNewRandomContact()

-         {

-             ContactTestMethod.AddNewRandomContact();

-         }

- 

-         [Given(@"I add a new duplicate contact from context")]

-         [When(@"I add a new duplicate contact from context")]

-         public void WhenIAddANewDuplicateContactFromContext()

-         {

-             ContactTestMethod.AddANewDuplicateContactFromContext();

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Continuum\ReportWriterStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Events\EventStepDef.cs
=             EventTestMethods.VerifyCancelEvent();
=         }
- 

-         [Then(@"I delete the event but dont exit")]

-         public void ThenIDeleteTheEventButDontExit()

-         {

-             EventTestMethods.DeleteTheEventButDontExit();

-         }

- 

-         [Then(@"I verify the cancel button is greyed out")]

-         public void ThenIVerifyTheCancelButtonIsGreyedOut()

-         {

-             EventTestMethods.VerifyTheCancelButtonIsGreyedOut();

-         }

- 

-         [When(@"I add a resource with a quantity (.*)")]

-         public void WhenIAddAResourceWithAQuantity(decimal quantity)

-         {

-             EventTestMethods.AddAResourceWithQuantity(quantity);

-         }

- 

- 

-         [Then(@"I verify the resource is (.*)")]

-         public void ThenIVerifyTheResourceIs(decimal expectedQuantity)

-         {

-             EventTestMethods.VerifyTheResourceIs(expectedQuantity);

-         }

- 

-         [Given(@"I add a pricing group to an event function")]

-         [When(@"I add a pricing group to an event function")]

-         public void IAddEventPricingGroup(Table data)

-         {

-             EventTestMethods.AddEventPricingGroup(data);

-         }

- 

-         [When(@$"I select existing event {StepRegex.SingleWord} and function {StepRegex.SingleWord} pricing group")]

-         public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey)

-         {

-             EventTestMethods.SelectExistingEventFunctionPricingGroup(eventKey, functionKey);

-         }

- 

-         [Then(@"I verify existing pricing group")]

-         public void SelectExistingPricingGroups()

-         {

-             EventTestMethods.SelectExistingPricingGroups();

-         }

- 

-         [When(@$"I select existing event {StepRegex.SingleWord} and function {StepRegex.SingleWord}")]

-         public void SelectExistingEventFunction(string eventKey, string functionKey)

-         {

-             EventTestMethods.SelectExistingEventFunction(eventKey, functionKey);

-         }

- 

-         [Then(@"I verify event function pricing group tooltip")]

-         public void VerifyEventFunctionPricingGroupTooltip()

-         {

-             EventTestMethods.VerifyEventFunctionPricingGroupTooltip();

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Finance\FinanceStepDef.cs
=             FinanceTestMethods = new FinanceTestMethods(driver, context);
=             FinanceSettingsTestMethods = new FinanceSettingsTestMethods(driver, context);
-             Context = context;
=         FinanceTestMethods FinanceTestMethods { get; set; }
=         FinanceSettingsTestMethods FinanceSettingsTestMethods { get; set; }
-         IAsiWebContext Context { get; }
=         {
=             FinanceTestMethods.VerifyThreeDSChallengeWindowIsDisplayed();
-         }

- 

-         [Given(@"I save available credit value before update")]

-         public void SaveAvailableCreditValueBeforeUpdate()

-         {

-             FinanceTestMethods.SaveAvailableCreditValue();

-         }

- 

-         [When($@"I adjust payment with (Unapply|Reverse) adjustment type")]

-         public void AdjustPaymentWithAdjustmentType(string adjustmentType)

-         {

-             FinanceTestMethods.AdjustPayment(adjustmentType);

-         }

- 

-         [When(@$"I adjust payment with Refund adjustment type and (DUMMYVISA|CASH2|CASH|PAYPAL) payment method")]

-         public void AdjustPaymentWithRefundAdjustmentType(string paymentMethod, Table data)

-         {

-             var refundDataSet = data.CreateSet<RefundData>();

-             FinanceTestMethods.RefundPayment(paymentMethod, refundDataSet);

-         }

- 

-         [Then(@"I verify that the credit is open")]

-         public void VerifyThatTheCreditIsOpen()

-         {

-             FinanceTestMethods.VerifyThatCreditIsOpen();

-         }

- 

-         [Then(@"I verify that payment is reversed")]

-         public void VerifyThatPaymentIsReversed()

-         {

-             FinanceTestMethods.VerifyThatPaymentIsReversed();

-         }

- 

-         [Then(@"I verify that payment is refund")]

-         public void VerifyThatPaymentIsRefund()

-         {

-             FinanceTestMethods.VerifyThatPaymentIsRefund();

-         }

- 

-         [When(@"I post the first batch")]

-         public void PostTheFirstBatch()

-         {

-             FinanceTestMethods.PostTheFirstBatch();
=         }
= 
-         [Then(@"I verify that the batch is posted")]

-         public void VerifyThatTheBatchIsPosted()

-         {

-             FinanceTestMethods.VerifyThatTheBatchIsPosted();

-         }

- 

-         [Given(@"I save organization default culture")]

-         public void SaveOrganizationDefaultCulture()

-         {

-             FinanceSettingsTestMethods.SaveOrganizationDefaultCulture();

-         }

- 

-         [When(@$"I override date to {StepRegex.AnyDigit} month (back|forward)")]

-         public void OverrideDateTo(int quantity, string direction)

-         {

-             var overriddenDate = direction == "back"

-                 ? DateTime.Now.AddMonths(-quantity)

-                 : DateTime.Now.AddMonths(quantity);

- 

-             var currentCulture = Context.GetData<string>(FinanceSettingsTestMethods.CurrentCultureKey);

-             FinanceTestMethods.OverrideDate(overriddenDate.ToString("d", new CultureInfo(currentCulture)));

-         }

- 

-         [When(@"I turn off override transaction date")]

-         public void TurnOffOverrideTransactionDate()

-         {

-             FinanceTestMethods.TurnOffOverrideTransactionDate();

-         }

- 

-         [Then(@"I verify transaction date is overridden")]

-         public void VerifyTransactionDateIsOverridden()

-         {

-             FinanceTestMethods.VerifyTransactionDateIsOverridden();

-         }

- 

-         [Given(@"I allow staff users to enter prepayments and overpayments")]

-         public void AllowStaffUsersToEnterPrepaymentsAndOverpayments()

-         {

-             FinanceTestMethods.AllowStaffUsersToEnterPrepaymentsAndOverpayments();

-         }

- 

-         [Then(@"I verify available credit is increased")]

-         public void VerifyAvailableCreditIsIncreased()

-         {

-             FinanceTestMethods.VerifyAvailableCreditIsIncreased();

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Forms\FormsStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Fundraising\DonorStepDef.cs
=         public void ThenIVerifyRecurringDonationExists(bool recurring, Table data)
=         {
-             DonorTestMethods.DonationExists(data.CreateInstance<CartData>(), recurring);

+             DonorTestMethods.DonationExists(data.CreateInstance<CartData>(),recurring);
=         {
=             DonorTestMethods.ProcessRecurringPayment(data.CreateInstance<CartData>(), data.CreateInstance<ContactData>());
-         }

- 

-         [When(@"I click on Complete Authentication button")]

-         public void WhenIClickOnCompleteAuthenticationButton()

-         {

-             DonorTestMethods.ClickCompleteAuthenticationButton();

-         }

-         [When(@"I click on Fail Authentication button")]

-         public void WhenIClickOnFailAuthenticationButton()

-         {

-             DonorTestMethods.ClickFailAuthenticationButton();
=         {
=             DonorTestMethods.VerifyAmendedDonation(amount);
-         }

- 

-         [Then(@"I see the donation thank you page")]

-         public void ThenISeeTheDonationThankYouPage()

-         {

-             DonorTestMethods.VerifyThankYouPage();

-         }

-         [Then(@"I see the payment declined by the bank message")]

-         public void ThenISeeTheDeclinedByTheBankMessage()

-         {

-             DonorTestMethods.VerifyDeclinedByTheBank();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Marketing\MarketingStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Membership\BillingFinanceStepDef.cs
=         public void WhenIGenerateARenewalsBillingRun(Table table)
=         {
-             var renewalData = table.CreateInstance<RenewalData>();

+             BillingFinanceTestMethods.GenerateARenewalsBillingRun(table);

-             BillingFinanceTestMethods.GenerateARenewalsBillingRun(renewalData);
=         }
= 
-         [Given(@"I pay for Join Now product")]
=         [When(@"I pay for Join Now product")]
-         public void IClickJoinNowProduct(Table table)

+         public void WhenIClickJoinNowProduct(Table table)
=         }
=         
-         [Given(@"I submit a billing order for a new contact")]
=         [When(@"I submit a billing order for a new contact")]
-         public void ISubmitABillingOrderForANewContact(Table billingTable)

+         public void WhenISubmitABillingOrderForANewContact(Table billingTable)
=         
=         [When(@"I Join Now and pay for a product for a new contact")]
-         public void JoinNowAndPayForAProductForANewContact(Table data)

+         public void ThenIJoinNowAndPayForAProductForANewContact(Table joinNowData)
=         {
-             var joinNowData = data.CreateInstance<JoinNowData>();

+             BillingFinanceTestMethods.JoinNowAndPayForAProductForANewContact(joinNowData);

-             BillingFinanceTestMethods.JoinNowAndPayForANewContact(joinNowData);
= 
=         [When(@"I Generate Renewal and Pay for Modified Chapter on behalf of")]
-         public void GenerateRenewalAndPayForModifiedChapterOnBehalfOf(Table billingTable)

+         public void WhenIGenerateRenewalAndPayForModifiedChapterOnBehalfOf(Table billingTable)
=         {
-             var billingLookUpTable = billingTable.CreateInstance<BillingLookUpTable>();

+             BillingFinanceTestMethods.GenerateRenewalAndPayForModifiedChapterOnBehalfOf(billingTable);

-             BillingFinanceTestMethods.GenerateRenewalAndPayForModifiedChapter(billingLookUpTable);
= 
=         [Then(@"I verify contacts membership details")]
-         public void VerifyContactsMembershipDetails(Table billingTable)

+         public void ThenIVerifyContactsMembershipDetails(Table billingTable)
=         {
-             var bList = billingTable.CreateInstance<BillingLookUpTable>();

+             BillingFinanceTestMethods.VerifyContactsMembershipDetails(billingTable);

-             BillingFinanceTestMethods.VerifyContactsMembershipDetails(bList);
=         {
=             BillingFinanceTestMethods.VerifyContactsJoinedProductTermSpanOf(productName, termSpan);
-         }

- 

-         [When($"I join now as {StepRegex.SingleWord}")]

-         public void JoinNowAs(string memberType)

-         {

-             BillingFinanceTestMethods.JoinNowAs(memberType);

-         }

- 

-         [When($"I cancel renewal for user with id {StepRegex.AnyDigit}")]

-         public void CancelRenewalForUser(int id)

-         {

-             BillingFinanceTestMethods.CancelRenewalForUser(id);
=         }
= 
-         [Then("I verify order was submitted without payment")]

-         public void VerifyOrderWasSubmittedWithoutPayment()

-         {

-             BillingFinanceTestMethods.VerifyOrderWasSubmittedWithoutPayment();

-         }

- 

-         [Given(@$"I join now as {StepRegex.SingleWord} on (Mbrr|Staff) site")]

-         [When(@$"I join now as {StepRegex.SingleWord} on (Mbrr|Staff) site")]

-         public void JoinNowAsOnSite(string memberType, string site, Table data)

-         {

-             var joinNowData = data.CreateInstance<JoinNowData>();

-             BillingFinanceTestMethods.JoinNowAs(memberType, site, joinNowData);

-         }

- 

-         [Then(@"I verify a non-dues product is ordered")]

-         public void VerifyANonDuesProductIsOrdered()

-         {

-             BillingFinanceTestMethods.VerifyANonDuesProductIsOrdered();

-         }

- 

-         [Given(@$"I change billing time to (Default|Annual|Anniversary) for billing cycle {StepRegex.OneOrMoreWord}")]

-         public void ChangeBillingTimeAnnualForBillingCycleRegular(string billingTime, string billingCycle)

-         {

-             BillingFinanceTestMethods.ChangeBillingTimeForBillingCycle(billingTime, billingCycle);

-         }

- 

-         [Then(@"I verify the membership expires at the end of the fiscal year")]

-         public void VerifyTheMembershipExpiresAtTheEndOfTheFiscalYear()

-         {

-             BillingFinanceTestMethods.VerifyTheMembershipPeriod();

-         }

- 

-         [Then(@$"I verify {StepRegex.OneOrMoreWord} product price is {StepRegex.AnyDecimal}")]

-         public void VerifyProductPriceIs(string productName, string price)

-         {

-             BillingFinanceTestMethods.VerifyProductPriceIs(productName, price);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Membership\BillingProducts.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Membership\MemberResponsiveStepDef.cs
=             _context = context;
=             AccountPage = new AccountPage();
-             MemberResponsiveTestMethods = new MemberResponsiveTestMethods(driver, context); ;

-             Authentication = new Authentication(driver, context); ;

-             SignInTestMethods = new SignInTestMethods(driver, context); ;

-             FinanceTestMethods = new FinanceTestMethods(driver, context); ;

-             NavigationTestMethods = new NavigationTestMethods(driver, context); ;
= 
=         private AccountPage AccountPage { get; set; }
-         private MemberResponsiveTestMethods MemberResponsiveTestMethods { get; set; }

-         private Authentication Authentication { get; set; }

-         private SignInTestMethods SignInTestMethods { get; set; }

-         private FinanceTestMethods FinanceTestMethods { get; set; }

-         private NavigationTestMethods NavigationTestMethods { get; set; }
=             var selecteTab = user.AsksFor(Text.Of(AccountPage.SelectedTab));
=             selecteTab.Should().Be(tabName);
-         }

- 

-         [Given(@"I select (.*) membership on MBRR")]

-         [When(@"I select (.*) membership on MBRR")]

-         public void GivenISelectMembershipOnMBRR(string memberType)

-         {

-             SignInTestMethods.OnTheSite("MBRR");

-             NavigationTestMethods.NavigateTo("Membership");

-             MemberResponsiveTestMethods.SelectMembershipOnMBRR(memberType);
=         }
- 

-         [Given(@"I add a new random MBRR contact and join (.*)")]

-         [When(@"I add a new random MBRR contact and join (.*)")]

-         public void WhenIAddNewRandomMBRRContact(string joinType)

-         {

-             MemberResponsiveTestMethods.AddNewRandomMBRRContactAndJoin(joinType);

-         }

- 

-         [Then(@"I verify successfully joined as a member (.*)")]

-         public void ThenIVerifySuccessfullyJoinedAsAMember(string joinType)

-         {

-             MemberResponsiveTestMethods.VerifySuccessfullyJoinedAsAMember(joinType);

-             var paymentMethod = _context.GetData<string>("PaymentMethod");

-             // check Pay Central Live for last transaction if relevant

-             if (!paymentMethod.Contains("Pay Flow DD US"))

-             {

-                 Authentication.LogOut();

-                 SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");

-                 FinanceTestMethods.VerifyPaymentPayCentralLive();

-             }

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Membership\RenewalsStepDefs.cs
=         public void IVerifyICanModifyACashDuesListBilling()
=         {
-             RenewalsTestMethods.VerifyICanModifyACashDuesListBilling();

+             RenewalsTestMethods.IVerifyICanModifyACashDuesListBilling();
=         {
=             RenewalsTestMethods.VerifyOpenInvoiceIsReversed();
-         }

- 

-         [When($"I renew membership for user with id {StepRegex.AnyDigit}")]

-         public void RenewUserMembership(int userId)

-         {

-             RenewalsTestMethods.RenewUserMembership(userId);

-         }

- 

-         [Then($"I verify membership for user with id {StepRegex.AnyDigit} was renewed")]

-         public void VerifyUserMembershipWasRenewed(int userId)

-         {

-             RenewalsTestMethods.VerifyUserMembershipWasRenewed(userId);


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Membership\SubscriptionsStepDef.cs
= {
=     [Binding]
-     internal class SubscriptionsStepDef

+     public class SubscriptionsStepDef


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\PaymentGateways\GatewaySetupStepDef.cs
=     public class GatewaySetupStepDef
=     {
-         public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context, ScenarioContext scenarioContext)

+         public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context)
=             SignInTestMethods = new SignInTestMethods(driver, context);
=             Authentication = new Authentication(driver, context);
-             ScenarioContext = scenarioContext;
=         SignInTestMethods SignInTestMethods { get; set; }
=         Authentication Authentication { get; set; }
-         ScenarioContext ScenarioContext { get; }
=         public void GivenISetSystemUpWithAGateway(Table data)
=         {
-             if (ScenarioContext.ScenarioInfo.Tags.Contains("SkipSetGatewayStep"))

-                 return;

- 
=                 RecurringDonation = true,
=                 RenewingMemberships = true,
-                 DefaultToRecurring = false,

-                 DefaultAutoRenew = false

+                 DefaultToRecurring = true,

+                 DefaultAutoRenew = true
=             Authentication.LogOut();
=         }
- 

-         [Given(@"I fill out the following in a new gateway")]

-         public void GivenIFillOutTheFollowingInANewGateway(Table data)

-         {

-             GatewayTestMethods.EnsurePayCentralIsReady();

-             GatewayTestMethods.FillOutNewGateway(data.CreateInstance<GatewayData>());

-         }

- 

-         [When(@"I save and close the gateway dialogue")]

-         public void WhenISaveAndCloseTheGatewayDialogue()

-         {

-             GatewayTestMethods.AttemptToSaveAndCloseGateway();

-         }

- 

-         [Then(@"I should recieve a validation error")]

-         public void ThenIShouldRecieveAValidationError()

-         {

-             GatewayTestMethods.VerifyLinkValidationError();

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Staff\ContactSecurityStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Staff\OpenIdStepDef.cs


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.V10\Steps\Staff\StaffStepDef.cs
=         }
= 
-         [When("I click on Account Area Batch Toggle icon")]

+     }

-         public void IClickOnAccountAreaBatchToggleIcon()

-         {

-             MiscNavigationTestMethods.ClickOnAccountAreaBatchToggleIcon();
= }
= 
-         [Then("I verify manual batch dropdown doesn't exist")]

-         public void ThenIVerifyElementContainsSelectTransactionDate()

-         {

-             MiscNavigationTestMethods.VerifyExistanceOfBatchSelectVisibilityPanelDiv();

-         }

-     }

- }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\Advertising\Settings\MediaAsset\AdjustRateCardDetails.cs

+ #nullable enable

+ using Asi.Selenium.Web.Controls.Telerik;

+ using Asi.Selenium.Core.DataClasses;

+ using Asi.Selenium.Core.DataClasses.Advertising;

+ using Asi.Selenium.Core.Interfaces;

+ using Asi.Selenium.Web.iParts.Advertising.Settings.Component.MediaAsset;

+ using Asi.Selenium.Web.V10.Pages.Advertising.MediaAsset;

+ using Asi.Selenium.Core.WebDriver;

+ using Boa.Constrictor.Screenplay;

+ 

+ using FluentAssertions;

+ 

+ using System.Collections.Generic;

+ using System.Linq;

+ using TechTalk.SpecFlow;

+ using TechTalk.SpecFlow.Assist;

+ using Asi.Selenium.Web.Interactions.Tasks;

+ 
=             user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());
=             user.AttemptsTo(Click.On(RateCardDetailsSetting.DeleteRateCardDetailsMatrixLink));
-             var deletePopUp = user.AskingFor(Text.Of(RateCardDetailsSetting.DeletePopUpDialog));

+             var deletePopUp = user.AskingFor(Text.Of(RateCardDetailsSetting.DeletePopUp));
=             deletePopUp.Should().Contain("Do you want to delete");
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.DeletePopUpDeleteOption));

+             user.AttemptsTo(Click.On(RateCardDetailsSetting.DeletePopUpYesOption));
=             for (int i = 1; i <= count; i++)
=                 user.AttemptsTo(SendKeys.To(RateCardDetailsSetting.GetRateCardDetailsMatrixRateCellXPath(i.ToString()), (i + 50).ToString()));
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.Save));

+             user.AttemptsTo(Click.On(RateCardDetailsSetting.EditRateInRateCardDetailsMatrix));
=                 }
=             }
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateMatrix));

-             user.AttemptsTo(Click.On(RateCardDetailsSetting.Save));

+             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateRateCardDetailsMatrix));

+             if (user.AsksFor(AlertPresence.InBrowser()) == true)

+             {

+                 user.AttemptsTo(AcceptAlert.ThatMustExist());

+                 user.AttemptsTo(Click.On(RateCardDetailsSetting.EditRateInRateCardDetailsMatrix));

+                 user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());

+             }

+             else

+             {

+                 user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix, true));

+                 user.AttemptsTo(Click.On(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix));

+                 user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());

+             }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\Advertising\Settings\MediaOrder\AdjustStep4ProductionDetails.cs
=         #region Properties
= 
-         private ProductionDetailAction Action;

-         private MediaOrderData Data;

-         private List<string> IssueDateList;

-         private Table Table;

+         private ProductionDetailAction? Action;

+         private MediaOrderData? Data;

+         private List<string>? IssueDateList;

+         private Table? Table;


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\Community\AddContact.cs
=             Contact = contact;
=             AddContactPage = new AddContactPage();
-             CreateAccountNoSignIn = new CreateAccountNoSignInPage();

-             AccountPageStaff = new AccountPageStaff();
=         private AddContactType ContactType { get; set; }
=         private AddContactPage AddContactPage { get; set; }
-         private CreateAccountNoSignInPage CreateAccountNoSignIn { get; set; }

-         private AccountPageStaff AccountPageStaff { get; }
= 
=         /// <summary>
-         /// Constructs the Task object for a Organization

+         /// Constructs the Task object with Associate Membership fees.
= 
=         /// <summary>
-         /// Constructs the Task object for an Individual

+         /// Constructs the Task object with Regular Membership fees.
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
+             // navigate straight to Add Contacts page

+             user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));
=             if (ContactType == AddContactType.Organization)
=             {
-                 // navigate to Add Contacts page

+                 user.AsksFor(Appearance.Of(AddContactPage.AddContact.OrganizationName));

-                 user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));

-                 user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.OrganizationName), IsEqualTo.True());
=                 // select orgainization type from radio box
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.CreateAccountTypeOrganization, Keys.Space));

-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.OrganizationName, Organization + Keys.Enter));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.CreateAccountTypeOrganization, Keys.Space));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.OrganizationName, Organization + Keys.Enter));
=             }
-             else if (Contact.ContactType == "MBRR")

-             {

-                 user.WaitsUntil(Existence.Of(CreateAccountNoSignIn.ContactAccountCreator.Prefix), IsEqualTo.True());

-                 string preFix = Contact.PrefixString;

-                 user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.Prefix, preFix));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.FirstName, Contact.FirstName));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MiddleName, Contact.MiddleName));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.LastName, Contact.LastName));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.OrganizationName, Contact.Organization));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Email, Contact.Email));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Phone, Contact.Phone));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MobilePhone, Contact.MobilePhone));

-                 user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.CountrySelect, Contact.Country));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Address1, Contact.Address1));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address2, Contact.Address2));

-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address3, Contact.Address3));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.City, Contact.City));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.SelectSubEntityCode, Contact.State));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.PostalCode, Contact.PostalCode));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Password, Contact.Password));

-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.ConfirmPassword, Contact.Password));

-                 // save the record 

-                 user.AttemptsTo(ClickCommandButton.Save());

-                 // save to context for use later

-                 context.UpsertData("FirstName", Contact.FirstName);

-                 context.UpsertData("MiddleName", Contact.MiddleName);

-                 context.UpsertData("LastName", Contact.LastName);

-                 context.UpsertData("Username", Contact.Email);

-                 context.UpsertData("Email", Contact.Email);

-             }
=             else
=             {
-                 // navigate to Add Contacts page

-                 user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));

-                 user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.FirstName), IsEqualTo.True());

-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.FirstName, Contact.FirstName));

-                 user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.MiddleName, Contact.MiddleName));

-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.LastName, Contact.LastName));

+                 user.AsksFor(Appearance.Of(AddContactPage.AddContact.FirstName));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.FirstName, Contact.FirstName));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.MiddleName, Contact.MiddleName));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.LastName, Contact.LastName));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.PrimaryOrgSelector.PrimaryOrganization.TextBox, Contact.Organization));

+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.Email, Contact.Email));

-                 user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.PrimaryOrgSelector.PrimaryOrganization.TextBox, Contact.Organization));

-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.Email, Contact.Email));
=                 if (Contact.Password != null)
=                 {
-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.CreateAnAccountCheckBox, Keys.Space));

-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.Password, Contact.Password));

-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.ConfirmPassword, Contact.Password));

+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.CreateAnAccountCheckBox, Keys.Space));

+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.Password, Contact.Password));

+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.ConfirmPassword, Contact.Password));
=                 user.AttemptsTo(ClickCommandButton.Save());
=                 // save to context for use later
-                 context.SelectedPartyId = user.WaitsUntil(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID")), IsNotEqualTo.Value(""));
=                 context.UpsertData("FirstName", Contact.FirstName);
-                 context.UpsertData("MiddleName", Contact.MiddleName);
=                 context.UpsertData("LastName", Contact.LastName);
=                 context.UpsertData("Username", Contact.Email);
-                 context.UpsertData("Email", Contact.Email);


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\Membership\Renewals\GenerateRenewals.cs

- namespace Asi.Selenium.Web.V10.Interactions.Membership.Renewals

+ namespace Asi.Selenium.Web.V10.Interactions.Membership
=     public class GenerateRenewals : AsiAbstractWebTask
=     {
-         #region Fields

- 

-         public const string EffectiveDateKey = "EffectiveDate";

-         public const string BillingRunNameKey = "BillingRunName";

- 

-         #endregion

-         
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));
=             // get last run on date
-             var oldBillDate = DateTime.Parse(user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4)), IsNotEqualTo.Value("")));

+             string oldBillDate =  user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).ToString();
=             // navigate to Generate Renewals page
-             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Run Billing")));

+             user.AttemptsTo(Browse.InImis(GenerateRenewalsPage.BaseUrl));
=             SelectBillingCycle(user, GenerateRenewalsPage.RunDetailsPage.BillingCycleDropDown);
=             // verify rebill checkbox disabled for certain types
-             if (BillingCycleType == RenewalsBillingCyclesType.AssociateMembershipFees)

+             if (BillingCycleType.ToString() == "AssociateMembershipFees") user.AsksFor(EnabledState.Of(GenerateRenewalsPage.RunDetailsPage.RebillCheckBox)).Should().Be(false);

-                 user.AsksFor(EnabledState.Of(GenerateRenewalsPage.RunDetailsPage.RebillCheckBox)).Should().Be(false);

- 
=             // add a year to bill date to allow multiple renewal runs without database reset
-             var billDate = new DateTime(oldBillDate.AddYears(1).Year, oldBillDate.Month, 1).AddDays(-1).ToShortDateString();

-             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.BillDate.TextBox, billDate).ThenHitEnter());

- 

+             DateTime bDate = DateTime.Parse(oldBillDate);

+             DateTime bDateNew = new DateTime(bDate.AddYears(1).Year, bDate.Month, 1).AddDays(-1);

+             string billDate = bDateNew.ToShortDateString();

+             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.BillDate.TextBox, billDate+Keys.Enter).UsingClearMethod());
=             string effectiveDate = user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox));
=             // add an extra year if asked for
-             if (EffectiveDateAddAYear)

+             if (EffectiveDateAddAYear == true)
=                 DateTime eDateNew = new DateTime(eDate.AddYears(1).Year, eDate.Month, 1).AddDays(-1);
=                 effectiveDate = eDateNew.ToShortDateString();
-                 user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox,

+                 user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox, effectiveDate));

-                     effectiveDate));
=             }
- 
=             // save start and end date to context for later if needed            
-             context.UpsertData(EffectiveDateKey, effectiveDate);

-             context.UpsertData(FinanceTestMethods.BillDateKey, billDate);

+             context.UpsertData("EffectiveDate", effectiveDate);

+             context.UpsertData("BillDate", billDate);

- 
=             // generate the run
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.RunDetailsPage.GenerateBillsButton));

+             user.AttemptsTo(Click.On(GenerateRenewalsPage.RunDetailsPage.GenerateBillsButton));
=             // verify completed message
-             user.WaitsUntil(UserMessageState.HasAny().WithMessage("billing cycle has been submitted for processing."), IsEqualTo.True());

- 

+             Assert.IsTrue(user.AsksFor(UserMessageState.HasAny().WithMessage(" billing cycle has been submitted for processing.")));

+             if (BillingCycleType.ToString() == "AssociateMembershipFees") Assert.IsTrue(user.AsksFor(UserMessageState.HasAny().WithMessage("Once complete, the batch will need to be posted.")));

-             if (BillingCycleType == RenewalsBillingCyclesType.AssociateMembershipFees)

-                 user.WaitsUntil(UserMessageState.HasAny().WithMessage("Once complete, the batch will need to be posted."), IsEqualTo.True());

- 

-             context.AddData(BillingRunNameKey, BillingRunName);
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));
=             // verify data of first item in table as it is the newest
-             user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell), ContainsSubstring.Text(BillingRunName));

-             user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3)), ContainsSubstring.Text(AccountingMethod));

-             var billDate = context.GetData<string>(FinanceTestMethods.BillDateKey);

-             user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4)), ContainsSubstring.Text(billDate));

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain(BillingRunName);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(AccountingMethod);

+             var Date1 = context.GetData<string>("BillDate");

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(Date1);
=             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(AccountingMethod);
=             // check if any done
-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 5))).Should().NotBe("0");

+             Assert.AreNotEqual(user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 5))), "0");
=             user.AsksFor(Text.Of(BillingRunDetailsPage.BillingLogName)).Should().Contain(BillingRunName);
=             user.AsksFor(Text.Of(BillingRunDetailsPage.AccountingMethod)).Should().Contain(AccountingMethod);
-             var bDate = context.GetData<string>(FinanceTestMethods.BillDateKey);

+             var bDate = context.GetData<string>("BillDate");
=         {
=             // check if not already run
-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).Should().NotBe("Completed");

+             Assert.AreNotEqual(user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))), "Completed");
=             user.AttemptsTo(SwitchFrame.To("GenericWindow"));
=             user.AsksFor(Text.Of(BatchDetailPage.BatchTemplateTitle)).Should().Contain(BatchNum);
-             var bDate = context.GetData<string>(FinanceTestMethods.BillDateKey);

+             var bDate = context.GetData<string>("BillDate");
=             user.AttemptsTo(Click.On(BatchDetailPage.PostBatchButton));
=             user.AttemptsTo(AcceptAlert.ThatMustExist());
-             user.AsksFor(UserMessageState.HasAny().WithMessage("Batch submitted for posting.")).Should().BeTrue();

+             Assert.IsTrue(user.AsksFor(UserMessageState.HasAny().WithMessage("Batch submitted for posting.")));
=             user.AsksFor(Text.Of(BillingRunDetailsPage.BillingLogName)).Should().Contain(BillingRunName);
=             user.AsksFor(Text.Of(BillingRunDetailsPage.AccountingMethod)).Should().Contain(AccountingMethod);
-             bDate = context.GetData<string>(FinanceTestMethods.BillDateKey);

+             bDate = context.GetData<string>("BillDate");
=             user.AttemptsTo(Click.On(BillingIssueNotificationDetailPage.GenerateNotificiationsButton));
=             // verify message
-             user.AsksFor(UserMessageState.HasAny().WithMessage("Emails have been submitted for processing.")).Should().BeTrue();

+             Assert.IsTrue(user.AsksFor(UserMessageState.HasAny().WithMessage("Emails have been submitted for processing.")));


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\PayCentral\SetupAutoPay.cs
=             }
=             user.AttemptsTo(ClickCommandButton.Save());
-             user.WaitsUntil(UserMessageContents.First(),IsEqualTo.Value("Settings successfully updated."));

+             var userMessage = user.AsksFor(UserMessageContents.First());

+             if (userMessage.Equals("Settings successfully updated.")) return;

+             else

+                 throw new Exception("Autopay settings were not saved.");
=             if (AutoPayData.RecurringDonation)
=             {
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring),IsEqualTo.Value(AutoPayData.DefaultToRecurring));

-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount), IsEqualTo.Value(AutoPayData.AllowDonorsChangeAmount));

-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate),IsEqualTo.Value(AutoPayData.AllowDonorsSelectCollectionDate));

+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring)).Should().Be(AutoPayData.DefaultToRecurring);

+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount)).Should().Be(AutoPayData.AllowDonorsChangeAmount);

+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate)).Should().Be(AutoPayData.AllowDonorsSelectCollectionDate);
=             }
-             user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships),IsEqualTo.Value(AutoPayData.RenewingMemberships));

+             user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships)).Should().Be(AutoPayData.RenewingMemberships);
=             if (AutoPayData.RenewingMemberships)
=             {
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew),IsEqualTo.Value(AutoPayData.DefaultAutoRenew));

-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew), IsEqualTo.Value(AutoPayData.RequiredAutoRenew));

+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew)).Should().Be(AutoPayData.DefaultAutoRenew);

+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew)).Should().Be(AutoPayData.RequiredAutoRenew);


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\PayCentral\SetupGateway.cs
=             else
=                 GatewayType = gatewayType;
+     
=         private GatewaysPage GatewaysPage { get; set; }
=         private PayCentralPage PayCentralPage { get; set; }
-         private bool ShouldSaveGateway { get; set; } = true;
=         public static SetupGateway PayPal(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.PayPal, gatewayData);
=         public static SetupGateway ImisPassThrough(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.ImisPassThrough, gatewayData);
-         public static SetupGateway GoCardless(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.GoCardless, gatewayData);

- 

-         public SetupGateway AndDontSaveGateway()

-         {

-             ShouldSaveGateway = false;

-             return this;

-         }
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
-             context.UpsertData("GatewayData", GatewayData);
=             PerformGatewayDataEntry(user);
= 
-             //switch (based on settings) to stop

-             if (ShouldSaveGateway)

-             {
=             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName)), IsEqualTo.True());
=             user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();
-             }
=                 case GatewayTypeEnum.ImisPassThrough:
=                     SetImisPassThrough(user);
-                     break;

-                 case GatewayTypeEnum.GoCardless:

-                     SetGoCardless(user);
=                     break;
-                 case GatewayTypeEnum.Stripe:

-                     SetStripe(user);

-                     break;
=             }   
=         }
- 

-         public void SetGoCardless(IActor user)

-         {

-             //Fill out fields

-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessDialog.AccountName,GatewayData.AccountName));

-             user.AttemptsTo(SetWhenProvided.DropDown(GoCardlessDialog.Environment, GatewayData.Environment));

- 

-             if (!GatewayData.CompleteOnboarding)

-                 return;
= 
-             // Onboarding and OAuth completion

-             user.AttemptsTo(Click.On(GoCardlessDialog.GoCardlessOauthLink));

-             TestHelper.WaitForPageReload();

-             var goCardlessHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];

-             user.AttemptsTo(SwitchWindow.To(goCardlessHandle));

-             user.AttemptsTo(Click.On(GoCardlessOAuth.SigninLink));

-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.EmailInput,GatewayData.Email));

-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.PasswordInput, GatewayData.Password));

-             user.AttemptsTo(ScrollToElement.At(GoCardlessOAuth.ConnectAccountButton));

-             user.AttemptsTo(Click.On(GoCardlessOAuth.ToSCheckBox));

-             user.AttemptsTo(Click.On(GoCardlessOAuth.ConnectAccountButton));

-             TestHelper.WaitForPageReload();

-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];

-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));

-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());

-         }

- 

-         public void SetStripe(IActor user)

-         {

-             //Fill out fields

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeDialog.AccountName, GatewayData.AccountName));

- 

-             if (!GatewayData.CompleteOnboarding)

-                 return;

- 

-             // Onboarding completion

-             user.AttemptsTo(Click.On(StripeDialog.StripeConnectLink));

-             for (int i = 0; i < 30; i++)

-             {

-                 int tabCount = user.Using<TestImis>().WebDriver.WindowHandles.Count;

-                 if (tabCount > 1)

-                     break;

-                 user.AttemptsTo(Waiting.InSeconds(1));

-             }

-             var stripeHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];

-             user.AttemptsTo(SwitchWindow.To(stripeHandle));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.EmailInputBox, GatewayData.Email));

-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.PasswordInputBox, GatewayData.Password));

-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));

-             string codeToEnter = MultiFactorAuthentication.Generate2FACode(GatewayData.MFACode);

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.VerificationCodeInputBox, codeToEnter));

- 

-             //After entering the code, we should be redirected to the next page which allows you to continue.

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ContinueButton), IsEqualTo.True());

-             // Incase there are any saved credentials, we need to skip the first page which asks to use existing info

-             bool promptedToUseSavedInfo = user.AsksFor(Appearance.Of(StripeOnboarding.Span("Use your saved information")));

-             if (promptedToUseSavedInfo)

-                 user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton)); //Continue through onboarding wizard to get to starting page and create new business

- 

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Let’s start with some basics")), IsEqualTo.True());

-             //Let’s start with some basics

-             // We are just going to continue with a UK business location and Individual type of business, and fill out all data with dummy data.

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

- 

-             //Personal Details

-             // Name

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Verify your personal details")), IsEqualTo.True());

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("First name"), "Timmy"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Last name"), "Tester"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("you@example.com"), GatewayData.Email ?? "Somebody@advsol.com"));

-             // Date of birth

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("MM"), "05"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("DD"), "05"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("YYYY"), "1960"));

-             // Home address

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Address line 1"), "798 New Road"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Town or City"), "London"));

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Postal code"), "W49 3IX"));

- 

-             // Phone number

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("121 234 5678"), "121 234 5678"));

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

-             //Professional Details

-             // Industry

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Professional details")), IsEqualTo.True());

-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Please select your industry…")));

-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Software")));

-             // Website

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("www.example.com"), "www.imis.com"));

-             // Product description

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.ProductDescriptionBox, "We test websites"));

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

-             //Add your bank to receive payouts

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add your bank to receive payouts")), IsEqualTo.True());

-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Use test account")));

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

-             //Add public details for customers

-             // Shortened Descriptor

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add public details for customers")), IsEqualTo.True());

-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Business"), "iMIS"));

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

-             //Setting climate contribution

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ClimateContributionLabel),IsEqualTo.True());

-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));

- 

-             //Agreeing and submitting all data

-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Review and finish up")),IsEqualTo.True());

-             user.AttemptsTo(Click.On(StripeOnboarding.AgreeAndSubmitButon));

-             user.WaitsUntil(Appearance.Of(ImisRedirectPage.returnSpan), IsEqualTo.True());

- 

-             // Return to iMIS

-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];

-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));

-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());

-         }

- 
=             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Gateways")));
=             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.Grid), IsEqualTo.True());
-             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName)),IsEqualTo.True());

-             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());

+             user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();

+             user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))).Should().BeTrue();
=             PayPal,
=             [Display(Name = "iMIS Pass-through Gateway")]
-             ImisPassThrough,

+             ImisPassThrough

-             [Display(Name = "GoCardless")]

-             GoCardless,

-             [Display(Name = "Stripe")]

-             Stripe


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\PayCentral\SetupPaymentMethod.cs
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
+             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));

+             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());
=             var code = string.IsNullOrEmpty(GatewayData.PaymentMethodCode) ? GatewayData.AccountCode : GatewayData.PaymentMethodCode;
=             var name = string.IsNullOrEmpty(GatewayData.PaymentMethodName) ? GatewayData.AccountName : GatewayData.PaymentMethodName;
- 
= 
-             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));

-             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());
=             user.AttemptsTo(SwitchFrame.ToGenericWindow());
= 
-             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));

-             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name));

+             //TODO: Cleanup this automatic assignment from feature files and define the gl account there

+             if (GatewayData.AccountName.Contains("DD") 

+                 || (!string.IsNullOrEmpty(GatewayData.PaymentMethodType) && GatewayData.PaymentMethodType.Equals("Direct debit")))

+             {

+                 user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1060: Debit"));

+             }

+             else

+             {

+                 user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1020: VISA"));

+             }

+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Account.TextBox, GatewayData.GLAccount));

+             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.ExpandArrow));
= 
=             user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.Type, GatewayData.PaymentMethodType));
- 

-             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.ExpandArrow));

-             user.AttemptsTo(Waiting.ForPageReload());

-             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.DropDownValue(GatewayData.GLAccount)));

- 
= 
=             user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.GatewayAccount, GatewayData.AccountName));
-             user.AttemptsTo(Waiting.ForPageReload());

- 

-             user.AttemptsTo(ClickCommandButton.Save());

-             user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("Successfully saved"));

+             //driver.WaitInSeconds(2);//GET RID OF IT

+             user.WaitsUntil(Existence.Of(PaymentMethodDialog.Code), IsEqualTo.True());

+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));

+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name));

+             user.AttemptsTo(ClickCommandButton.Save().AndExpectMessage());

+             var userMessage = user.AsksFor(UserMessageContents.First());

+             if (userMessage.Equals("Successfully saved")) return;

+             else

+                 throw new Exception("Payment Method was not saved.");
=             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));
=             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());
- 

- 
=             if(string.IsNullOrEmpty(GatewayData.PaymentMethodName))
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.AccountName)), IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();
=             else
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.PaymentMethodName)), IsEqualTo.True());

- 

-             if (string.IsNullOrEmpty(GatewayData.PaymentMethodCode))

+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.PaymentMethodName))).Should().BeTrue();

+             if(string.IsNullOrEmpty(GatewayData.PaymentMethodCode))

+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))).Should().BeTrue();

-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());
=             else
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode)),IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode))).Should().BeTrue();

- 

-             if (string.IsNullOrEmpty(GatewayData.GLAccount))

-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());

-             else

-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode)), IsEqualTo.True());
=         }
- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Interactions\PayCentral\SetupPaymentMethodSet.cs
= 
=             if (string.IsNullOrEmpty(GatewayData.PaymentMethodName))
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountName)), IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountName))).Should().BeTrue();
=             else
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodName)), IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodName))).Should().BeTrue();
=             if (string.IsNullOrEmpty(GatewayData.PaymentMethodCode))
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountCode)),IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountCode))).Should().BeTrue();
=             else
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodCode)),IsEqualTo.True());

+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodCode))).Should().BeTrue();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Pages\Commerce\FindOrderPage.cs
=         {
=             var query = new ListerSheet("");
-             query.Parameters.Add("Order number equals", new QueryTextParameter());

-             query.Parameters.Add("Order type", new QueryComboBoxParameter());
=             query.Parameters.Add("Order date between", new QueryDateParameter());
-             query.Parameters.Add("First name starts with", new QueryTextParameter());

-             query.Parameters.Add("Last name starts with", new QueryTextParameter());


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Pages\Commerce\InventoryReceiptsDialogPage.cs
=         public IWebLocator TypeLabel => LocatorByXPath("TypeLabel");
=         public IWebLocator TypeSelector => LocatorByXPath("TransactionTypeDropDownList");
-         public IWebLocator ConfirmSubmitButton => LocatorByXPath("rwPopupButton", attribute: "class", postXPath: "//span[text()='OK']");

- 

+         // public IWebLocator ConfirmSubmitButton => LocatorByXPath("rwPopupButton", attribute: "class", postXPath: "//span[text()='OK']");

+         public IWebLocator ConfirmSubmitButton => WebLocator.L("Ok button", By.CssSelector("button.rwOkBtn")); // dg


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Pages\Community\AddContactPage.cs
= namespace Asi.Selenium.Web.V10.Pages.Community
= {
-     public class AddContactPage : PageBase

+     class AddContactPage : PageBase
=         public AddContactPage()
=         {
-             ContactAccountCreator = new ContactAccountCreator("Addcontact");

+             AddContact = new ContactAccountCreator("Addcontact");
=         }
= 
-         public ContactAccountCreator ContactAccountCreator { get; set; }

+         public ContactAccountCreator AddContact { get; set; }
=         public PrimaryOrganizationSelector PrimaryOrgSelector { get; set; }
+         

+         public static IWebLocator CreateAccountTypeIndividual => LocatorByXPath("CreateAccountType_0");

+         public static IWebLocator CreateAccountTypeOrganization => LocatorByXPath("CreateAccountType_1");

+ 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\Pages\Forms\AssocMemberJoinPage.cs
=         {
=             BaseUrl = new ImisUrl("iCore/Membership/Associate-Member-Join.aspx");
-             GeneralProductDisplay = new GeneralProductDisplay();
=         }
- 

-         public GeneralProductDisplay GeneralProductDisplay { get; set; }

- 
=         public static IWebLocator TermsAndConditionBox => LocatorByXPath("AcceptTAndC", "input");
=         public static IWebLocator NextButton => LocatorByXPath("btnNext", "input");
-         public static IWebLocator FinishButton => LocatorByXPath("btnNext_2", "input");

- 

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Advertising\Settings\MediaAsset\RateCardDetailsTestMethod.cs
=         }
=         #endregion
- 

-         #region remove ad size and frequency from rate cards details

-         public void UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(string mediaAsset, string rateCard, string adColor, Table table)

-         {

-             var user = User(mediaAsset);

-             CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);

-             CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);

-             user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, adColor));

-             user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());

-             user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AdColorSelect, true));

-             List<RateCardDetailList> rateCardDetailList;

-             rateCardDetailList = table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();

-             foreach (RateCardDetailList rateCardDetail in rateCardDetailList)

-             {

-                 if (!string.IsNullOrEmpty(rateCardDetail.AdSize))

-                     user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.AdSize)));

-                 if (!string.IsNullOrEmpty(rateCardDetail.Frequency))

-                     user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.Frequency)));

-             }

-             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateMatrix));

-         }

- 

-         public void VerifyMessage(string message)

-         {

-             var user = User("");

-             user.AskingFor(Text.Of(RateCardDetailsSetting.ContentPanel)).Should().Contain(message);

-         }

-         #endregion


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Commerce\CartTestMethods.cs
=         public Cart Cart { get; set; }
= 
-         public void VerifyCartContainsGstIncTaxForItems(IEnumerable<string> itemIds)

+         public void VerifyCartContainsGstIncTaxForItems(List<string> itemIds)
=         }
= 
-         public void VerifyCartDoesNotContainGstIncTaxForItems(IEnumerable<string> itemIds)

+         public void VerifyCartDoesNotContainGstIncTaxForItems(List<string> itemIds)
=         }
= 
-         private void TestGstInclusionForItems(IEnumerable<string> itemIds, bool shouldIncludeGst)

+         private void TestGstInclusionForItems(List<string> itemIds, bool shouldIncludeGst)
= 
=             var gstRegex = new Regex("^.*\\(includes.*GST\\).*$");
- 

+             user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());
=                 for (int row = 1; row <= rows; row++)
=                 {
-                     var itemHref = user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"));

-                     if (itemHref.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ||

+                     if (user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))

+                             ?.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ?? false)

-                         itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCase))
=             }
=         }
- 

+         public void VerifyCartContainsVatIncTaxForItems(List<string> itemIds)

-         public void VerifyCartContainsVatIncTaxForItems(IEnumerable<string> itemIds)
=         }
= 
-         public void VerifyCartDoesNotContainVatIncTaxForItems(IEnumerable<string> itemIds)

+         public void VerifyCartDoesNotContainVatIncTaxForItems(List<string> itemIds)
=         }
= 
-         private void TestVatInclusionForItems(IEnumerable<string> itemIds, bool shouldIncludeVat)

+         private void TestVatInclusionForItems(List<string> itemIds, bool shouldIncludeVat)
=             var gstRegex = new Regex("^.*\\(includes.*VAT\\).*$");
= 
+             user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());
=                 for (int row = 1; row <= rows; row++)
=                 {
-                     var itemHref = user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"));

-                     if (itemHref.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ||

+                     if (user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))

+                             ?.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ?? false)

-                         itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCase))
=                 found.Should().Be(true, "Expected to find a row in the cart for item with code {0}", itemId);
=             }
-         }

- 

-         public void VerifyCartContainsCanadaTax()

-         {

-             TestCanadaTaxInclusion(true);
=         }
= 
-         public void VerifyCartDoesNotContainCanadaTax()

-         {

-             TestCanadaTaxInclusion(false);

-         }

- 

-         private void TestCanadaTaxInclusion(bool shouldIncludeTax)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(Cart.BaseUrl));

-             user.AsksFor(Appearance.Of(Cart.CartCharges.PstTaxAmount)).Should().Be(shouldIncludeTax);

-             user.AsksFor(Appearance.Of(Cart.CartCharges.GstTaxAmount)).Should().Be(shouldIncludeTax);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Commerce\InventoryReceiptsTestMethods.cs
=     public class InventoryReceiptsTestMethods : TestMethodBase
=     {
-         public InventoryReceiptsTestMethods(IWebDriver driver, IAsiWebContext context, ProductContext productContext) : base(driver, context)

+         public InventoryReceiptsTestMethods(IWebDriver driver, IAsiWebContext context, SpecFlowContext scenarioContext) : base(driver, context)
=         {
-             ItemPage = new ItemPage();

+             ProductDisplayPage = new ProductDisplayPage();
=             InventoryReceiptsDialogPage = new InventoryReceiptsDialogPage();
=             InventoryReceiptsPage = new InventoryReceiptsPage();
-             ProductContext = productContext;

+             ScenarioContext = scenarioContext;
=         }
+ 

+         private const string _onHandKey = "onHand";

+         private const string _lastCostKey = "lastCost";

+         private const string _unitCostKey = "unitCost";

+         private const string _quantityKey = "quanitty";
= 
-         private ItemPage ItemPage { get; }

+         private ProductDisplayPage ProductDisplayPage { get; }
=         private InventoryReceiptsDialogPage InventoryReceiptsDialogPage { get; }
=         private InventoryReceiptsPage InventoryReceiptsPage { get; }
-         private ProductContext ProductContext { get; }

+         private SpecFlowContext ScenarioContext { get; }
= 
-         public void SaveProductDetailsBeforeUpdate(string productCode)

+         public void SaveInventoryDetailsBeforeUpdate(string productCode)
=         {
=             var user = User("InventoryReceiptsUser");
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;

-             user.AttemptsTo(Browse.InImis(ItemPage.WithBaseUrlParameters(productCode).BaseUrl));

-             user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));

-             user.WaitsUntil(Text.Of(productDisplay.OnHandValueLabel), IsNotEqualTo.Value(""));

-             user.WaitsUntil(Text.Of(productDisplay.LastCostValueLabel), IsNotEqualTo.Value(""));

+ 

+             user.AttemptsTo(Browse.InImis(ProductDisplayPage.GetBaseUrl(productCode)));

+             user.AttemptsTo(Click.On(ProductDisplayPage.InventoryDetailsSwitch));

+             user.WaitsUntil(Text.Of(ProductDisplayPage.OnHandValue), IsNotEqualTo.Value(""));

+             user.WaitsUntil(Text.Of(ProductDisplayPage.LastCostValue), IsNotEqualTo.Value(""));
= 
-             ProductContext.Code = productCode;

-             ProductContext.InventoryOnHand = int.Parse(user.AsksFor(Text.Of(productDisplay.OnHandValueLabel)));

+             ScenarioContext.Set(int.Parse(user.AsksFor(Text.Of(ProductDisplayPage.OnHandValue))), _onHandKey);

+             ScenarioContext.Set(user.AsksFor(Text.Of(ProductDisplayPage.LastCostValue)), _lastCostKey);

-             ProductContext.LastCost = user.AsksFor(Text.Of(productDisplay.LastCostValueLabel));

-             ProductContext.Name = user.AsksFor(Text.Of(productDisplay.ProductTitle));
=         }
= 
-         public void ProcessInventoryReceipt(string type, bool isPositiveQuantity)

+         public void SelectInventoryReceiptsFromCommerce(string type, string productName, bool isPositiveQuantity)
= 
=             user.AttemptsTo(Browse.InImis(InventoryReceiptsDialogPage.BaseUrl));
-             user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 4, tableSection: "tfoot", postXPath: "/span")),

+             user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 4, tableSection: "tfoot", postXPath: "/span")), IsNotEqualTo.Value(""));

-                 IsNotEqualTo.Value(""));
= 
=             user.AttemptsTo(Select.ByValue(InventoryReceiptsDialogPage.TypeSelector, type));
-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, tableSection: "tfoot", postXPath: "//input"),

-                 ProductContext.NameForSearch));

+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, tableSection: "tfoot", postXPath: "//input"), productName));

+             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.GetSelectorOptionWithText(productName)));

+             user.WaitsUntil(ValueAttribute.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input")),

+                 IsEqualTo.Value(ScenarioContext.Get<string>(_lastCostKey)));
= 
-             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.GetSelectorOptionWithText(ProductContext.NameForSearch)));

+             var unitCost = TestHelper.GenerateRandomNumber(1, 10);

+             var quantity = isPositiveQuantity

+                 ? TestHelper.GenerateRandomNumber(1, 10)

+                 : -TestHelper.GenerateRandomNumber(1, 10);
= 
-             // Wait some time because after program is selected,

-             // unit cost input is set with product last cost twice and it isn't possible to wait for second setup with WaitsUntil().

+             ScenarioContext.Set(unitCost, _unitCostKey);

+             ScenarioContext.Set(quantity, _quantityKey);

-             user.AttemptsTo(Waiting.InSeconds(1));
= 
-             ProductContext.UnitCost = TestHelper.GenerateRandomNumber(1, 10);

-             ProductContext.Quantity = isPositiveQuantity ? TestHelper.GenerateRandomNumber(1, 10) : -TestHelper.GenerateRandomNumber(1, 10);

- 

+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input"), unitCost.ToString()));

+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3, tableSection: "tfoot", postXPath: "//input"), quantity.ToString()));

+             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 5, tableSection: "tfoot", postXPath: "//input[contains(@id, 'Insert')]")));

-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input"),

-                 ProductContext.UnitCost.ToString()));

- 

-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3, tableSection: "tfoot", postXPath: "//input"),

-                 ProductContext.Quantity.ToString()));
= 
-             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 5, tableSection: "tfoot", postXPath: "//input[contains(@id, 'Insert')]")));
=             user.AttemptsTo(ClickCommandButton.Save());
=             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ConfirmSubmitButton));
-             user.AsksFor(UserMessageState.HasAny().WithMessage("Inventory successfully updated.")).Should().BeTrue();

+             // dg we need to retry this, 

+             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Inventory successfully updated."), IsEqualTo.True());
=         }
= 
-         public void VerifyInventoryDetailsAreUpdated(string type)

+         public void VerifyInventoryDetailsAreUpdated(string type, string productName)
=         {
=             var user = User("InventoryReceiptsUser");
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
= 
+             var expectedUnitCost = ScenarioContext.Get<int>(_unitCostKey);

+             var expectedQuantity = ScenarioContext.Get<int>(_quantityKey);

+ 
= 
=             user.AsksFor(Text.Of(InventoryReceiptsDialogPage.TypeLabel)).Should().Be(type);
-             user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1))).Should().Be(ProductContext.NameForSearch);

-             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2)))).Should().Be(ProductContext.UnitCost);

-             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3)))).Should().Be(ProductContext.Quantity);

+             user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1))).Should().Be(productName);

+             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2)))).Should().Be(expectedUnitCost);

+             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3)))).Should().Be(expectedQuantity);
= 
=             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, link: true)));
-             user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));

-             user.WaitsUntil(Text.Of(productDisplay.OnHandValueLabel), IsNotEqualTo.Value(""));

-             user.WaitsUntil(Text.Of(productDisplay.LastCostValueLabel), IsNotEqualTo.Value(""));

+             user.AttemptsTo(Click.On(ProductDisplayPage.InventoryDetailsSwitch));

+             user.WaitsUntil(Text.Of(ProductDisplayPage.OnHandValue), IsNotEqualTo.Value(""));

+             user.WaitsUntil(Text.Of(ProductDisplayPage.LastCostValue), IsNotEqualTo.Value(""));
= 
-             double.Parse(user.AsksFor(Text.Of(productDisplay.OnHandValueLabel))).Should().Be(ProductContext.InventoryOnHand + ProductContext.Quantity);

+             double.Parse(user.AsksFor(Text.Of(ProductDisplayPage.OnHandValue))).Should().Be(ScenarioContext.Get<int>(_onHandKey) + expectedQuantity);
=             if (type == "Receipt")
-                 double.Parse(user.AsksFor(Text.Of(productDisplay.LastCostValueLabel))).Should().Be(ProductContext.UnitCost);

+                 double.Parse(user.AsksFor(Text.Of(ProductDisplayPage.LastCostValue))).Should().Be(expectedUnitCost);


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Commerce\OrderConfirmationTestMethods.cs
=         {
=             OrderConfirmation = new OrderConfirmation();
-             OrderDetailsPage = new OrderDetailsPage();

-             InvoicesPage = new InvoicesPage();

-             EventRegistrationDetailPage = new EventRegistrationDetailPage();
=         }
= 
-         private OrderConfirmation OrderConfirmation { get; }

+         public OrderConfirmation OrderConfirmation { get; set; }

-         private OrderDetailsPage OrderDetailsPage { get; }

-         private InvoicesPage InvoicesPage { get; }

-         private EventRegistrationDetailPage EventRegistrationDetailPage { get; }
=         public void VerifyAtLeastOneItemIncludeGstInc()
=         {
-             TestTaxInclusionForAtLeastOneItem(true, "GST");

+             TestGstInclusionForAtLeastOneItem(true);

-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkBaseGstTax: true);
=         public void VerifyAtLeastOneItemsDoNotIncludeGstInc()
=         {
-             TestTaxInclusionForAtLeastOneItem(false, "GST");

+             TestGstInclusionForAtLeastOneItem(false);

-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkBaseGstTax: true);
=         }
= 
-         public void VerifyJoinBillingIncludeGstInc()

+         private void TestGstInclusionForAtLeastOneItem(bool shouldIncludeGst)

+         {

+ 

+             var user = User("VerifyGstInc");

+ 

+             var itemGrid = OrderConfirmation.OrderConfirmationDisplay.ItemGrid;

+             user.WaitsUntil(Existence.Of(itemGrid.Grid), IsEqualTo.True());

+ 

+             var gstRegex = new Regex("^.*\\(includes.*GST\\).*$");

+ 

+             var rows = user.AskingFor(itemGrid.GetRowCount());

+             for (int row = 1; row <= rows; row++)
=             {
-             TestTaxInclusionForAtLeastOneItem(true, "GST");

-             TestGstInclusionOnInvoice();

+                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell));

+                 var match = gstRegex.IsMatch(description);

+                 if (match == shouldIncludeGst)

+                     return;     // found a match
=             }
+ 

+             // if we get here we didnt find a match

+             if (shouldIncludeGst)

+                 throw new Exception("Expected at least one row in the order confirmation to include a GST amount in the description");

+             else

+                 throw new Exception("Expected at least one row in the order confirmation to NOT include a GST amount in the description");
= 
+         }
=         public void VerifyAtLeastOneItemIncludeVatInc()
=         {
-             TestTaxInclusionForAtLeastOneItem(true, "VAT");

+             TestVatInclusionForAtLeastOneItem(true);

-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true);
=         public void VerifyAtLeastOneItemsDoNotIncludeVatInc()
=         {
-             TestTaxInclusionForAtLeastOneItem(false, "VAT");

+             TestVatInclusionForAtLeastOneItem(false);

-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true);
=         }
= 
-         public void VerifyOrderConfirmationContainsCanadaTax()

+         private void TestVatInclusionForAtLeastOneItem(bool shouldIncludeVat)
=         {
-             TestCanadaTaxInclusion(true);

-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true, checkBaseGstTax: true);

-         }
= 
-         public void VerifyOrderConfirmationDoesNotContainCanadaTax()

+             var user = User("VerifyVatInc");

-         {

-             TestCanadaTaxInclusion(false);

-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true, checkBaseGstTax: true);

-         }

- 

-         private void TestTaxInclusionForAtLeastOneItem(bool shouldIncludeTax, string tax)

-         {

-             var user = LoggedInUser();
= 
=             var itemGrid = OrderConfirmation.OrderConfirmationDisplay.ItemGrid;
-             user.AskingFor(Existence.Of(itemGrid.Grid)).Should().BeTrue();

+             user.WaitsUntil(Appearance.Of(itemGrid.Grid), IsEqualTo.True());
= 
-             var regex = new Regex($"^.*\\(includes.*{tax}\\).*$");

+             var gstRegex = new Regex("^.*\\(includes.*VAT\\).*$");
=             for (int row = 1; row <= rows; row++)
=             {
-                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell)).Replace(Environment.NewLine, " ");

-                 var match = regex.IsMatch(description);

-                 if (match == shouldIncludeTax)

+                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell));

+                 var match = gstRegex.IsMatch(description);

+                 if (match == shouldIncludeVat)
= 
=             // if we get here we didnt find a match
-             throw new Exception(shouldIncludeTax

-                 ? $"Expected at least one row in the order confirmation to include a {tax} amount in the description"

+             if (shouldIncludeVat)

+                 throw new Exception("Expected at least one row in the order confirmation to include a VAT amount in the description");

-                 : $"Expected at least one row in the order confirmation to NOT include a {tax} amount in the description");

-         }

- 

-         private void TestTaxInclusionOnOrderDetailsAndInvoice(bool shouldIncludeTax, bool checkTax = false, bool checkBaseGstTax = false)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Click.On(OrderConfirmation.OrderConfirmationDisplay.OrderNumber));

-             var isOrderDetailsPage = user.AsksFor(Existence.Of(OrderDetailsPage.BillingDetails.InvoiceLink));

- 

-             if (isOrderDetailsPage && checkTax)

-                 user.AsksFor(Existence.Of(OrderDetailsPage.Total.Tax)).Should().Be(shouldIncludeTax);

- 

-             if (isOrderDetailsPage && checkBaseGstTax)

-                 user.AsksFor(Existence.Of(OrderDetailsPage.Total.TaxBaseGst)).Should().Be(shouldIncludeTax);

- 

-             user.AttemptsTo(Click.On(isOrderDetailsPage

-                 ? OrderDetailsPage.BillingDetails.InvoiceLink

-                 : EventRegistrationDetailPage.InvoicesGrid.FirstCellLink));

- 

-             var taxValue = double.Parse(user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.Tax), IsNotEqualTo.Value("")));

-             if (shouldIncludeTax)

-                 taxValue.Should().NotBe(0);
=             else
-                 taxValue.Should().Be(0);

+                 throw new Exception("Expected at least one row in the order confirmation to NOT include a VAT amount in the description");

- 

-             user.AsksFor(Existence.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TaxGrid.Grid)).Should().Be(shouldIncludeTax);

-         }

- 

-         private void TestGstInclusionOnInvoice()

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));

-             var billToNameQuery = (QueryTextParameter)InvoicesPage.SelectAQuery.GetParameter("All invoices", "Bill to name contains");

-             user.AttemptsTo(SendKeys.To(billToNameQuery.Textbox, _context.OnBehalfName));

-             user.AttemptsTo(ClickCommandButton.Submit());
= 
-             user.WaitsUntil(Text.Of(InvoicesPage.SelectAQuery.Cell(1, 3)), IsEqualTo.Value(_context.OnBehalfName));

-             user.AttemptsTo(Click.On(InvoicesPage.SelectAQuery.FirstCellLink));

- 

-             user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceLinesGrid.Cell(3, 2)), IsEqualTo.Value("Finance Section - GST"));

-             user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceLinesGrid.Cell(7, 2)), IsEqualTo.Value("Regular Member Fees - GST"));
=         }
- 

-         private void TestCanadaTaxInclusion(bool shouldIncludeTax)

-         {

-             var user = LoggedInUser();
= 
-             user.AsksFor(Existence.Of(OrderConfirmation.OrderConfirmationDisplay.PstTaxAmount)).Should().Be(shouldIncludeTax);

-             user.AsksFor(Existence.Of(OrderConfirmation.OrderConfirmationDisplay.GstTaxAmount)).Should().Be(shouldIncludeTax);

-         }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Community\ContactTestMethods.cs
=         }
= 
-         public void FindContactByEmail(string email)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));

-             user.AttemptsTo(ClickCommandButton.Submit());

-             user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));

-         }

- 

-         public void VerifyContactExistsByEmail(string email)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));

-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));

-             user.AttemptsTo(ClickCommandButton.Submit());

-             user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 8))).Trim().Should().Be(email);

-         }

- 
=             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Giving")));
=             user.AttemptsTo(Click.On(AccountPageStaff.GivingTab.OpenInvoiceListDisplay.OpenInvoicesGrid.Cell(1,2)));
-         }

- 

-         public void AddNewContact(ContactData contactData)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(AddContact.AddIndividual(contactData));
=         }
- 

-         /// <summary>

-         /// Add a new contact with a random name

-         /// </summary>

-         public void AddNewRandomContact()

-         {

-             var user = LoggedInUser();

-             // create a new contact

-             var contact = new ContactData()

-             {

-                 FirstName = $"{TestHelper.GenerateRandomString(5)}First",

-                 MiddleName = $"{TestHelper.GenerateRandomString(5)}Middle",

-                 LastName = $"{TestHelper.GenerateRandomString(5)}Last",

-             };

-             contact.Email = $"{contact.LastName}@netfake.com";

-             user.AttemptsTo(AddContact.AddIndividual(contact));

-         }

- 

-         /// <summary>

-         /// Add a new duplicate contact from exisiting contact name saved in the context

-         /// </summary>

-         public void AddANewDuplicateContactFromContext()

-         {

-             var user = LoggedInUser();

-             // create a new dupe contact from context

-             var contact = new ContactData()

-             {

-                 FirstName = _context.GetData<string>("FirstName"),

-                 MiddleName = _context.GetData<string>("MiddleName"),

-                 LastName = _context.GetData<string>("LastName"),

-                 Email = _context.GetData<string>("Email"),

-             };

-             user.AttemptsTo(AddContact.AddIndividual(contact));

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Community\SearchTestMethods.cs
=             var user = LoggedInUser();
=             user.AttemptsTo(Click.On(FindContactsPage.Search.SearchResults.FirstCellSpan));
-             user.WaitsUntil(Appearance.Of(PageBase.UIText(searchData.Item, "span", false)),IsEqualTo.True());

+             user.AsksFor(Appearance.Of(PageBase.UIText(searchData.Item, "span", false))).Should().BeTrue();


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Events\EventTestMethods.cs
=         {
=             EventDashboardPage = new EventDashboardPage();
-             EventStaffFunctionDisplayPage = new EventStaffFunctionDisplayPage();

-             EventStaffFunctionDialog = new EventStaffFunctionDialog();

-             EventPricingGroupDialogPage = new EventPricingGroupDialogPage();

-             EventPricingGroup = new EventPricingGroup("");

-             EventFunctionPricing = new EventFunctionPricing("Pricing");
= 
=         public EventDashboardPage EventDashboardPage;
-         public EventStaffFunctionDisplayPage EventStaffFunctionDisplayPage;

-         public EventStaffFunctionDialog EventStaffFunctionDialog;

-         public EventPricingGroupDialogPage EventPricingGroupDialogPage;

-         public EventPricingGroup EventPricingGroup;

-         public EventFunctionPricing EventFunctionPricing;

- 
=         }
= 
-         /// Verifies the title of the event

+         /// Verfies the title of the event
=         {
=             var user = User("VerifyCancelEvent");
-             user.AsksFor(UserMessageState.HasWarnings().WithMessage("Event has a status of Cancelled")).Should().BeTrue();

+             user.WaitsUntil(UserMessageState.HasWarnings().WithMessage("Event has a status of Cancelled"),IsEqualTo.True());

+             //.Should().BeTrue();
=             user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.ConfirmCancelButton));
=             //Clicking Event "Save and Exit" button 
+             // so this is not happening - why?
=             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
=         }
-         public void AddAResourceWithQuantity(decimal decimalQuantity)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(EventDashboardPage.EventProgramDisplay.ListFunctions.CellLinkWithText("Video Access")));

-             user.AttemptsTo(Click.On(EventStaffFunctionDisplayPage.FunctionDisplay.EditButton));

-             var resourcesRadGrid = EventStaffFunctionDialog.EventResources.ResourcesRadGrid;

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

-             user.AttemptsTo(Click.On(EventStaffFunctionDialog.FunctionEdit.Tabs.GetTab("Plan")));

-             user.AttemptsTo(Click.On(resourcesRadGrid.AddNew));

-             var quantityBox = resourcesRadGrid.Cell(3, 2, postXPath: "/input", tableSection: "thead"); ;

-             user.AttemptsTo(SendKeys.To(quantityBox, decimalQuantity.ToString()).UsingClearMethod());

-             user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));

-             var ButtonExists = user.AsksFor(Existence.Of(resourcesRadGrid.SaveNewButton));

-             if (ButtonExists) //only works in debug without second attempt :)

-                 user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));

-             user.AttemptsTo(ClickCommandButton.SaveAndClose());

- 

-         }

- 

-         public void VerifyTheResourceIs(decimal decimalQuantity)

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Existence.Of(EventStaffFunctionDisplayPage.ResourcesRadGrid.Cell(decimalQuantity.ToString(),exactMatch: true)), IsEqualTo.True());

- 

-         }

-         public void DeleteTheEventButDontExit()

-         {

- 

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(EventDashboardPage.EventDisplay.EditButton));

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

-             user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.DeleteEvent));

-             user.AttemptsTo(Hover.Over(EventDashboardPage.EventEdit.ConfirmDeleteButton));

-             user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.ConfirmDeleteButton));

-             user.WaitsUntil(UserMessageState.HasWarnings().WithMessage("Event delete submitted for processing."), IsEqualTo.True());

-         }

- 

-         public void VerifyTheCancelButtonIsGreyedOut()

-         {

-             var user = LoggedInUser();

-             var cancelButton = ClickCommandButton.ButtonLocator(ClickCommandButton.CommandButtonBarButtons.CloseButton);

-             user.WaitsUntil(EnabledState.Of(cancelButton),IsEqualTo.False());

-         }

- 

-         public void AddEventPricingGroup(Table table)

-         {

-             var user = LoggedInUser();

- 

-             foreach (var row in table.Rows)

-             {

-                 row.TryGetValue("EventKey", out string eventKey);

-                 row.TryGetValue("FunctionKey", out string functionKey);

-                 row.TryGetValue("GroupType", out string groupType);

-                 row.TryGetValue("Group", out string group);

-                 row.TryGetValue("Role", out string role);

- 

-                 var functionEditShortcut = new ImisUrl("FunctionEdit");

-                 functionEditShortcut.AddParameter("EventKey", eventKey);

-                 functionEditShortcut.AddParameter("FunctionKey", functionKey);

-                 user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));

- 

-                 user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, functionKey)));

- 

-                 user.WaitsUntil(Existence.Of(EventPricingGroup.DisplayNameTextBox), IsEqualTo.True());

- 

-                 string randNumber = TestHelper.GenerateRandomString(4);

- 

-                 if (!string.IsNullOrEmpty(groupType) && string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))

-                 {

-                     string name = $"A-{randNumber}(GroupType Only:{groupType})";

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));

- 

-                     user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));

-                 }

-                 else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))

-                 {

-                     string name = $"B-{randNumber}(Group Only:{group})";

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));

- 

-                     SelectGroup(user, group);

-                 }

-                 else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))

-                 {

-                     string name = $"C-{randNumber}(Group:{group}) w/Role";

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));

- 

-                     SelectGroup(user, group);

-                     SelectRole(user, role);

-                 }

-                 else if (!string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))

-                 {

-                     string name = $"D-{randNumber}(GroupType:{groupType} w/Group:{group}) w/Role";

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));

- 

-                     user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));

- 

-                     SelectGroup(user, group);

-                     SelectRole(user, role);

-                 }

- 

-                 user.AttemptsTo(ClickCommandButton.Ok());

- 

-             }

-         }

- 

-         private void SelectGroup(ImisUser user, string group)

-         {

-             if (group.Contains(","))

-             {

-                 var g = group.Split(",");

-                 foreach (var i in g)

-                 {

-                     user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, i.ToString()));

-                     user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));

-                 }

-             }

-             else

-             {

-                 user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));

-                 user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, group));

-                 user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));

-             }

-         }

- 

-         private void SelectRole(ImisUser user, string role)

-         {

-             if (role.Contains(","))

-             {

-                 var r = role.Split(",");

-                 foreach (var i in r)

-                 {

-                     user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));

-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, i.ToString()));

-                     user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));

-                 }

-             }

-             else

-             {

-                 user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));

-                 user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, role));

-                 user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));

-             }

-         }

- 

-         public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey) 

-         {

-             var user = LoggedInUser();

- 

-             string eventFunctionKey = $"{eventKey}/{functionKey}";

-             var functionEditShortcut = new ImisUrl("FunctionEdit");

-             functionEditShortcut.AddParameter("EventKey", eventKey);

-             functionEditShortcut.AddParameter("FunctionKey", eventFunctionKey);

-             user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));

-             user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, eventFunctionKey)));     

-         }

- 

-         public void SelectExistingPricingGroups()

-         {

-             var user = LoggedInUser();

-        

-             user.WaitsUntil(Existence.Of(EventPricingGroup.UseExistingRadioButton), IsEqualTo.True());

-             user.AttemptsTo(Click.On(EventPricingGroup.UseExistingRadioButton));

- 

-             user.WaitsUntil(Appearance.Of(EventPricingGroup.ExistingPriceSheetsDropDownList), IsEqualTo.True());

-             user.AttemptsTo(Click.On(EventPricingGroup.ExistingPriceSheetsDropDownList));

- 

-             var priceSheetsDropDownList = user.AskingFor(SelectOptionsAvailable.For(EventPricingGroup.ExistingPriceSheetsDropDownList));

- 

-             for (int i = 1; i < priceSheetsDropDownList.Count; i++)

-             {

-                 user.AttemptsTo(Select.ByIndex(EventPricingGroup.ExistingPriceSheetsDropDownList, i));

- 

-                 string selectedItem = user.AsksFor(SelectedOptionText.Of(EventPricingGroup.ExistingPriceSheetsDropDownList));

- 

-                 if (selectedItem.Contains("(GroupType Only:Committee)"))

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Committee groups"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (selectedItem.Contains("(GroupType Only:Member Type)")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Member Type groups"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (selectedItem.Contains("(GroupType Only:Chapter)")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Chapter groups"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (selectedItem.Contains("(Group Only:Harris County Chapter)")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Harris County Chapter group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (selectedItem.Contains("(Group Only:Professional Member)")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Professional Member group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (selectedItem.Contains("(Group:Membership Committee) w/Role")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Membership Committee group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("President role"));

-                 }

-                 else if (selectedItem.Contains("(Group:Awards Committee,East Chapter) w/Role")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("East Chapter group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Awards Committee group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Secretary role"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Compliance Officer role"));

-                 }

-                 else if (selectedItem.Contains("GroupType:Committee w/Group:Governmental")) 

-                 {

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Governmental Affairs Committee group"));

-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Committee Administrator role"));

-                 }

-             }

-         }

- 

-         public void SelectExistingEventFunction(string eventKey, string functionKey)

-         {

-             var user = LoggedInUser();

- 

-             string eventFunctionKey = $"{eventKey}/{functionKey}";

-             var functionEditShortcut = new ImisUrl("FunctionEdit");

-             functionEditShortcut.AddParameter("EventKey", eventKey);

-             functionEditShortcut.AddParameter("FunctionKey", eventFunctionKey);

-             user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));

-         }

- 

-         public void VerifyEventFunctionPricingGroupTooltip() 

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Click.On(EventStaffFunctionDialog.FunctionEdit.Tabs.GetTab("Pricing")));

- 

-             int? tooltipLinkCount = user.AskingFor(Count.Of(EventStaffFunctionDialog.FunctionEditShortcut.OtherPriceLinks));

-             for (int i = 0; i < tooltipLinkCount; i++) 

-             {                

-                 user.AttemptsTo(Click.On(EventFunctionPricing.PricingGroupLink(i)));

-                 //Have to wait for tooltip loading spinner

-                 user.AttemptsTo(Waiting.InSeconds(1));

- 

-                 string tooltipText = user.AsksFor(Text.Of(EventFunctionPricing.PricingGroupTooltip));

-                 if (tooltipText.Contains("(Group Only:Harris County Chapter)"))

-                 {

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("Harris County Chapter group"));

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("All roles"));

-                 }

-                 else if (tooltipText.Contains("(Group:Awards Committee,East Chapter) w/Role"))

-                 {

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("East Chapter group"));

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("All roles"));

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("Awards Committee group"));

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("Secretary role"));

-                     user.WaitsUntil(Text.Of(EventFunctionPricing.PricingGroupTooltip), ContainsSubstring.Text("Compliance Officer role"));

-                 }

-             }

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Membership\BillingFinanceTestMethods.cs
=             ProratingScheduleCreatorDialog = new ProratingScheduleCreatorDialog();
=             AddContactPage = new AddContactPage();
-             AssocMemberJoinPage = new AssocMemberJoinPage();

+             ProductDisplayPage = new ProductDisplayPage();

- 

-             ItemPage = new ItemPage();
=         private ProratingScheduleCreatorDialog ProratingScheduleCreatorDialog { get; set; }
=         private AddContactPage AddContactPage { get; set; }
-         private ItemPage ItemPage { get; set; }

+         private ProductDisplayPage ProductDisplayPage { get; }

-         public AssocMemberJoinPage AssocMemberJoinPage { get; set; }

- 
=         /// Generate a Renewals Billing Run
=         /// </summary>
-         /// <param name="renewalData"></param>

-         public void GenerateARenewalsBillingRun(RenewalData renewalData)

+         /// <param name="billingCycle"></param>

+         /// <param name="accountingMethod"></param>

+         public void GenerateARenewalsBillingRun(Table table)
=             var user = User("GenerateRenewalsUser");
=             
+             var renewalData = table.CreateInstance<RenewalData>();
=             var product = table.CreateInstance<OrderConfirmationData>();
=             SelectMembership(product.Product);
-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));

+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
=             user.AttemptsTo(Browse.InImis(FindProductsPage.BaseUrl));
=             user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText(product.Product)));
-             user.AttemptsTo(Click.On(ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));

-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));

+             user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));

+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
=             user.AttemptsTo(Hover.Over(AccountPageStaff.MembershipTab.PanelEditor.EditButton));
=             // edit membership details - need to click it multiple times to ensure that the click registers otherwise it sometimes fails
-             for (int x = 0; x < 8; x++)

+             for (int x=0;x<8; x++)
=             foreach (BillingLookUpTable bList in billingLookupTableList)
=             {
-                 user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for " + bList.ContactFirstName + " " + bList.ContactLastName);

+                 user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for "+bList.ContactFirstName+" "+bList.ContactLastName);
=             VerifyContactsJoinedProductTermSpanOf(bList.ProductName, bList.TermSpan.ToString());
=             // I submit the order with given options
-             ISubmitOrderForProductWithTermSpanAndPaymentOption(bList.ProductName, bList.TermSpan, bList.PayOption, bList.PayNow);

+             ISubmitOrderForProductWithTermSpanAndPaymentOption(bList.ProductName, bList.TermSpan, bList.PayOption);
=         /// <param name="productName"></param>
=         /// <param name="termSpan"></param>
-         /// <param name="payOption"></param>

-         /// <param name="shouldPayNow"></param>

+         /// <param name="payNowOption"></param>

+         public void ISubmitOrderForProductWithTermSpanAndPaymentOption(string productName, int termSpan, string payNowOption)

-         public void ISubmitOrderForProductWithTermSpanAndPaymentOption(string productName, int termSpan, string payOption, bool shouldPayNow = false)
=             var user = User("VerifyBillingCycleUser");
=             
-             EnsureProductIsSelected(user, productName);

- 

+             // check if passed product name is the selected product in the product list

+             bool finishedloop = false;

+             int rowPos = 0;

+             do

+             {

+                 if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)

+                 {

+                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, rowPos))).Should().BeTrue();

+                     finishedloop = true;

+                 }

+                 rowPos++;

+             } while (finishedloop == false);
=             user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));
=             // verify cart message
-             user.WaitsUntil(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel), IsEqualTo.Value("This item has been added to your cart"));

+             user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel)).Should().Be("This item has been added to your cart");
=             // now proceed to checkout
=             user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.RedirectToCartButton));
-             //  Set the Pay Now / Pay Later radio button

-             user.AttemptsTo(shouldPayNow

-                 ? Click.On(Cart.PaymentDetails.PayNowRadioButton)

-                 : Click.On(Cart.PaymentDetails.PayLaterRadioButton));
=             //  submit the order 
+             user.AttemptsTo(Click.On(Cart.PaymentDetails.PayLaterRadioButton));
=             user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));
-             if (!shouldPayNow)

+             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod)).Should().Contain("will be billed for the balance due");

-                 user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod), ContainsSubstring.Text("will be billed for the balance due"));
=         {
=             var user = User("VerifyBillingCycleUser");
- 

-             EnsureProductIsSelected(user, productName);
=             
+             // check if passed product name is the selected product in the product list

+             bool finishedloop = false;

+             int rowPos = 0;

+             do

+             {

+                 if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)

+                 {

+                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, rowPos))).Should().BeTrue();

+                     finishedloop = true;

+                 }

+                 rowPos++;

+             } while (finishedloop == false);
=             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod)).Should().Contain(message);
=         }
- 
=         /// Join now and pay for a product for a new contact
=         /// </summary>
-         /// <param name="joinNowTable"></param>

-         public void JoinNowAndPayForANewContact(JoinNowData joinNowTable)

+         /// <param name="billingTable"></param>

+         public void JoinNowAndPayForAProductForANewContact(Table joinNowData)
=             var user = User("VerifyBillingCycleUser");
=             
+             var joinNowTable = joinNowData.CreateInstance<JoinNowData>();
=             user.AttemptsTo(AddContact.AddIndividual(contact));
=             // save the new contacts ID for the JoinNow interaction to use
-             _context.SelectedPartyId = user.WaitsUntil(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID")), IsNotEqualTo.Value(""));

+             _context.SelectedPartyId = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID")));
=                 if (_context.GetData<bool>("CheckOut")) user.AttemptsTo(CheckOut.WithMainCheckingAccount());
=                 // verify Order Confirmation page title
-                 user.WaitsUntil(Text.Of(PageBase.PageTitle), IsEqualTo.Value("Order confirmation"));

+                 user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");
=                 user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.BalanceDue)).Should().Be("0.00");
=                 // now pay for it and generate a renewal
-                 PayInvoiceOnBehalfOf(joinNowTable);

+                 PayInvoiceOnBehalfOf(joinNowData);
=         /// Pay invoice on behalf of
=         /// </summary>
-         /// <param name="joinNowData"></param>

-         public void PayInvoiceOnBehalfOf(JoinNowData joinNowData)

+         /// <param name="billingTable"></param>

+         public void PayInvoiceOnBehalfOf(Table joinNowData)
=             var user = User("VerifyBillingCycleUser");
=             
+             var bList = joinNowData.CreateInstance<JoinNowData>();
=             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));
=             // verify membership fees grid on account page
-             user.WaitsUntil(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1)), IsEqualTo.Value(joinNowData.ProductCode));

-             user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 2))).Should().Be(joinNowData.UnitAmount);

+             user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1))).Should().Be(bList.ProductCode);

+             user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 2))).Should().Be(bList.UnitAmount);
=             // goto to new contacts transactions tab
=             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Transactions")));
-             // verify transactions grid on account page

-             user.WaitsUntil(Text.Of(AccountPageStaff.MembershipTab.InvoicesGrid.ResultsGrid.Cell(1, 4)), IsEqualTo.Value(joinNowData.UnitAmount));

+             // verify tranactions grid on account page

+             user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.InvoicesGrid.ResultsGrid.Cell(1, 4))).Should().Be(bList.UnitAmount);
=         /// Generate Renewal and Pay for Modified Chapter on behalf of
=         /// </summary>
-         /// <param name="billingLookUpTable"></param>

-         public void GenerateRenewalAndPayForModifiedChapter(BillingLookUpTable billingLookUpTable)

+         /// <param name="billingTable"></param>

+         public void GenerateRenewalAndPayForModifiedChapterOnBehalfOf(Table billingTable)
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));
=             // get last run on date
-             var oldBillDate = DateTime.Parse(user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4)), IsNotEqualTo.Value("")));

+             string oldBillDate = user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).ToString();
=             user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(_context.SelectedPartyId)));
+             var bList = billingTable.CreateInstance<BillingLookUpTable>();
=             user.AttemptsTo(Click.On(AccountPageStaff.ActionsGenerateRenewals));
=             // select billing cycle
-             user.AttemptsTo(Select.ByText(GenerateRenewalsPage.RunDetailsPage.BillingCycleDropDown, billingLookUpTable.ProductName));

-             DateTime billDateNew = new DateTime(oldBillDate.AddYears(1).Year, oldBillDate.Month, 1).AddDays(-1);

-             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.BillDate.TextBox, billDateNew.ToShortDateString()).ThenHitEnter().UsingClearMethod());

+             user.AttemptsTo(Select.ByText(GenerateRenewalsPage.RunDetailsPage.BillingCycleDropDown, bList.ProductName));

+             DateTime bDate = DateTime.Parse(oldBillDate);

+             DateTime bDateNew = new DateTime(bDate.AddYears(1).Year, bDate.Month, 1).AddDays(-1);

+             string billDate = bDateNew.ToShortDateString();

+             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.BillDate.TextBox, billDate + Keys.Enter).UsingClearMethod());
=             // change effective date to a year in the future
-             var effectiveDate = DateTime.Parse(user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox)));

+             var edate = user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox));

+             DateTime edate2 = DateTime.Parse(edate);

+             // now add a year to the date

+             edate = edate2.AddYears(1).ToString();
=             // put new date into Effective date
-             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox, effectiveDate.AddYears(1).ToShortDateString()));

+             user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox, edate.ToString()));
=             user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.RunDetailsPage.GenerateBillsButton));
=             // verify completed message
-             user.WaitsUntil(UserMessageState.HasAny().WithMessage($"The {billingLookUpTable.ProductName} billing cycle has been submitted for processing."), IsEqualTo.True());

+             user.AsksFor(UserMessageState.HasAny().WithMessage("The " + bList.ProductName + " billing cycle has been submitted for processing.")).Should().BeTrue();
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));
=             // wait till batch is completed before continuing
+             bool finishedProcessing = false;

+             do

+             {
=                 user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));
-             user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7)), IsEqualTo.Value("Completed"));

-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain($"Billing run for {billingLookUpTable.ContactFirstName} {billingLookUpTable.ContactLastName}");

-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 2))).Should().Contain(billingLookUpTable.ProductName);

-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(billingLookUpTable.AccountingMethod);

-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(billDateNew.ToShortDateString());

+                 if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Completed") finishedProcessing = true;

+             } while (finishedProcessing == false);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for " + bList.ContactFirstName + " " + bList.ContactLastName);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 2))).Should().Contain(bList.ProductName);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(bList.AccountingMethod);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(billDate);
=             // goto to contacts transactions tab
=             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Transactions")));
-             // verify open transactions grid on account page

-             user.WaitsUntil(Text.Of(AccountPageStaff.TransactionsTab.OpenInvoiceList.OpenInvoicesGrid.Cell(1, 4)), IsEqualTo.Value(billDateNew.ToShortDateString()));

-             user.AsksFor(Text.Of(AccountPageStaff.TransactionsTab.OpenInvoiceList.OpenInvoicesGrid.Cell(1, 7))).Should().Be(billingLookUpTable.Amount);

-             user.AsksFor(Text.Of(AccountPageStaff.TransactionsTab.OpenInvoiceList.OpenInvoicesGrid.Cell(1, 8))).Should().Be(billingLookUpTable.Amount);

+             // verify open tranactions grid on account page

+             user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 4))).Should().Be(billDate);

+             user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 7))).Should().Be(bList.Amount);

+             user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 8))).Should().Be(bList.Amount);
=             do
=             {
-                 user.AttemptsTo(Check.On(AccountPageStaff.TransactionsTab.OpenInvoiceList.OpenInvoicesGrid.Cell(1, 2, postXPath:"//input")));

-             } while (user.AsksFor(EnabledState.Of(AccountPageStaff.TransactionsTab.OpenInvoiceList.CartButton)) == false);

+                 user.AttemptsTo(Check.On(AccountPageStaff.OpenInvoicesGrid.Cell(1, 2, postXPath: "//input")));

+             } while (user.AsksFor(EnabledState.Of(AccountPageStaff.OpenInvoicesCartButton)) == false);
=             // click the Add to Cart button
-             user.AttemptsTo(Click.On(AccountPageStaff.TransactionsTab.OpenInvoiceList.CartButton));

+             user.AttemptsTo(Click.On(AccountPageStaff.OpenInvoicesCartButton));

+             // expand invoice item

+             user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.Cell(1, 1)));
=             // click on invoice number of cart
-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 2)), IsNotEqualTo.Value(""));

+             user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.Cell(1, 2)));

-             user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.Cell(1, 2, link:true)));
=             // select a product
-             user.AttemptsTo(SendKeys.To(JoinNowPage.MOO.DynamicProductDisplay.PickList(0, 0), "South Chapter").ThenHitEnter());

+             user.AttemptsTo(SendKeys.To(JoinNowPage.MOO.DynamicProductDisplay.PickList(0, 0), "South Chapter" + Keys.Enter));
=             // wait until unit amounts have been updated before checking it
-             user.WaitsUntil(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)), IsEqualTo.Value("43.00"));

+             bool finishedUpdating = false;

+             do

+             {

+                 if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) == 43) finishedUpdating = true;

+             } while (finishedUpdating == false);
=             user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));
=             // verify item grid items
-             user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 1)), ContainsSubstring.Text("Adjustments for invoice:"));

+             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 2))).Contains("Adjustments for invoice:");
=         /// Then I verify contacts membership details
=         /// </summary>
-         /// <param name="bList"></param>

-         public void VerifyContactsMembershipDetails(BillingLookUpTable bList)

+         /// <param name="billingTable"></param>

+         public void VerifyContactsMembershipDetails(Table billingTable)
=             var user = User("VerifyBillingCycleUser");
=             
+             var bList = billingTable.CreateInstance<BillingLookUpTable>();
=             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));
=             // verify membership items grid on account page
-             user.WaitsUntil(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1)), IsEqualTo.Value(bList.ItemName1));

+             user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1))).Should().Be(bList.ItemName1);
=                 user.AttemptsTo(Click.On(BillingProductsPage.FindButton));
=                 // wait for table to be updated by hovering - change this once there's a method for checking if table has been updated
-                 for (int x = 1; x < 8; x++)

+                 for (int x=1;x<8;x++)
=             // now join with the passed membership type
=             user.AttemptsTo(JoinNow.WithMembership(bList.ProductCode));
-         }

- 

-         /// <summary>

-         /// Join now as provided member type

-         /// </summary>

-         /// <param name="memberType"></param>

-         /// <param name="site"></param>

-         /// <param name="joinNowData"></param>

-         public void JoinNowAs(string memberType, string site = "Staff", JoinNowData joinNowData = null)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(JoinNow.WithMembership(memberType).WithJoinNowData(joinNowData).InImis(site));

-         }

- 

-         /// <summary>

-         /// Cancel renewal for user

-         /// </summary>

-         /// <param name="id">user id</param>

-         public void CancelRenewalForUser(int id)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(AccountPage.Url(id.ToString())));

-             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));

- 

-             var cancelRenewalButton = AccountPageStaff.MembershipTab.ReviewOrCancel.CancelInvoiceButton;

-             user.WaitsUntil(Appearance.Of(cancelRenewalButton), IsEqualTo.True());

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(cancelRenewalButton));

-         }

- 

-         /// <summary>

-         /// Verify transaction grand total is 0

-         /// </summary>

-         public void VerifyOrderWasSubmittedWithoutPayment()

-         {

-             var user = LoggedInUser();

- 

-             var transactionGrandTotalText = user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount),

-                 IsNotEqualTo.Value(""));

- 

-             double.Parse(transactionGrandTotalText).Should().Be(0);

-         }

- 

-         /// <summary>

-         /// Verify that Non-member Subscriptions is ordered for public users

-         /// </summary>

-         public void VerifyANonDuesProductIsOrdered()

-         {

-             var user = LoggedInUser();

- 

-             user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.FirstCell),

-                 IsEqualTo.Value("Non-Member Subscriptions"));

-         }

- 

-         /// <summary>

-         /// Change billing time for billing cycle

-         /// </summary>

-         /// <param name="billingTime"></param>

-         /// <param name="billingCycle"></param>

-         public void ChangeBillingTimeForBillingCycle(string billingTime, string billingCycle)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(BillingCyclesPage.BaseUrl));

- 

-             user.AttemptsTo(Click.On(BillingCyclesPage.BillingCycleGrid.CellLinkWithText(text: billingCycle)));

-             user.AttemptsTo(Select.ByValue(BillingCycleDetailPage.BillingTimeDropDown, billingTime));

-             user.AttemptsTo(ClickCommandButton.SaveAndClose());

-         }

- 

-         /// <summary>

-         /// Verify product price

-         /// </summary>

-         /// <param name="productName"></param>

-         /// <param name="price"></param>

-         public void VerifyProductPriceIs(string productName, string price)

-         {

-             var user = LoggedInUser();

- 

-             user.AttemptsTo(Browse.InImis(Cart.BaseUrl));

- 

-             user.AttemptsTo(Click.On(Cart.ShoppingCart.ItemGrid.FirstCell));

- 

-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.NestedItemGrid.Cell(productName, postXPath: "//parent::tr//td[3]")),

-                 IsEqualTo.Value(price));

-         }

- 

-         /// <summary>

-         /// Verify the membership period for annual billing time

-         /// </summary>

-         public void VerifyTheMembershipPeriod()

-         {

-             const int december = 12;

-             const int startSecondHalfOfMonth = 15;

- 

-             var user = LoggedInUser();

-             var currentDate = DateTime.Now;

- 

-             var beginDate = currentDate.Day < startSecondHalfOfMonth

-                 ? new DateTime(currentDate.Year, currentDate.Month, 1)

-                 : new DateTime(currentDate.AddMonths(1).Year, currentDate.AddMonths(1).Month, 1);

- 

-             var endDate = new DateTime(beginDate.Year, december, 31);

- 

-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid[1].ItemDescriptionLink),

-                 ContainsSubstring.Text($"({beginDate.ToString("d", CultureInfo.CurrentCulture)} - {endDate.ToString("d", CultureInfo.CurrentCulture)})"));

-         }

- 

-         private void EnsureProductIsSelected(ImisUser user, string productName)

-         {

-             IWebLocator ProductRow(int i) => JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, i);

-             bool ProductRowExists(int i) => user.AsksFor(Existence.Of(ProductRow(i)));

-             bool FoundCorrectProductRow(int i) => user.AsksFor(Text.Of(ProductRow(i))) == productName;

- 

-             user.WaitsUntil(Existence.Of(ProductRow(0)), IsEqualTo.True());

-             TestHelper.WaitForPageReload();

-             for (int i = 0; i < 1000; i++)

-                 if (ProductRowExists(i) && FoundCorrectProductRow(i))

-                 {

-                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, i))).Should().BeTrue();

-                     return;

-                 }

- 

-             throw new NotFoundException($"Did not find {productName} as a selected product within the first 1000 items in the list.");


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Membership\ChaptersTestMethods.cs
=         {
=             var user = LoggedInUser();
-             user.WaitsUntil(Text.Of(BillingProductsPage.PageTitle),IsEqualTo.Value(expectedHeaderText));

+             user.AsksFor(Text.Of(BillingProductsPage.PageTitle)).Should().Be(expectedHeaderText);
=         {
=             var user = LoggedInUser();
-             user.WaitsUntil(Text.Of(BillingProductsPage.ItemGrid.AddToGrid),IsEqualTo.Value(expectedAddText));

+             user.AsksFor(Text.Of(BillingProductsPage.ItemGrid.AddToGrid)).Should().Be(expectedAddText);
=         public void VerifyRedirectedToChapterDashboard()
=         {
-             _driver.Url.Contains("Chapter_dashboard").Should().BeTrue("because URL does not indicate that the page is the specific chapter dashboard.");

+             Assert.IsTrue(_driver.Url.Contains("Chapter_dashboard"),"URL does not indicate that the page is the specific chapter dashboard.");


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Membership\RenewalsTestMethods.cs
=     public class RenewalsTestMethods : TestMethodBase
=     {
-         private const string _paidThruDateKey = "paidThruDate";

- 
=             GenerateRenewalsPage = new GenerateRenewalsPage();
=             BillGenerationBillingLogDrilldownDetailPage = new BillGenerationBillingLogDrilldownDetailPage();
-             AccountPage = new AccountPageStaff();

+             AccountPage = new AccountPage();
=         private GenerateRenewalsPage GenerateRenewalsPage { get; set; }
=         private BillGenerationBillingLogDrilldownDetailPage BillGenerationBillingLogDrilldownDetailPage { get; set; }
-         private AccountPageStaff AccountPage { get; set; }

+         private AccountPage AccountPage { get; set; }
= 
=         /// <summary>
-         /// Verify I can modify a cash dues list billing

+         /// I verify I can modify a cash dues list billing
=         /// </summary>
-         public void VerifyICanModifyACashDuesListBilling()

+         /// <param name="user">The iMIS user.</param>

+         /// <param name="driver">The WebDriver.</param>

+         /// <param name="context">The Context.</param>

+         public void IVerifyICanModifyACashDuesListBilling()
=         {
-             var user = LoggedInUser();

-             

+             var user = User("IssueInvoiceWriteoffUser");

+             DateTime Today = DateTime.Now;
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));
=             // wait till batch is completed before continuing
+             bool finishedProcessing = false;

+             do

+             {

+                 user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));

+                 if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Completed") finishedProcessing = true;

+             } while (finishedProcessing == false);

+             // verify successfully completed message
=             user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));
-             user.WaitsUntil(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7)), IsEqualTo.Value("Completed"));

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).Should().Be("Completed");
=             // verify data of first item in table as it is the newest
-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain(_context.GetData<string>(GenerateRenewals.BillingRunNameKey));

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Cash dues list billing");
=             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain("Cash");
-             var billDate = _context.GetData<string>(FinanceTestMethods.BillDateKey);

-             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(billDate);

+             // save amount for later

+             string bAmount = user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 6)));

+             var eDate = _context.GetData<string>("EffectiveDate");

+             var bDate = _context.GetData<string>("BillDate");

+             user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(bDate);
=             if (user.AsksFor(Appearance.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.ShowAllLink)))
=                 user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.ShowAllLink));
- 

-             var queryTextBox = (QueryTextParameter)BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.GetParameter("Billing", "Bill to name contains");

-             user.AttemptsTo(SendKeys.To(queryTextBox.Textbox, "Versaton New Zealand").ThenHitEnter());

+             user.AttemptsTo(SendKeys.To(((QueryTextParameter)BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.GetParameter("Billing", "Bill to name contains")).Textbox, "Versaton New Zealand"));

+             user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Queries.Get("Billing").Find));

+             user.AttemptsTo(Waiting.InSeconds(2));
=             // verify company name
-             user.WaitsUntil(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 2)), IsEqualTo.Value("Versaton New Zealand"));

+             user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1,2))).Should().Be("Versaton New Zealand");

+             // verify Bill beginning and end dates

+             DateTime thruDate;

+             DateTime eDate1 = DateTime.Parse(eDate);

+             thruDate = new DateTime(eDate1.AddYears(1).Year, eDate1.Month, 1).AddDays(-1);

+             user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 4))).Should().Be(thruDate.ToShortDateString());

+             // verify amount

+             user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 5))).Should().Be(bAmount);
=             // click RenewNow button 
=             user.AsksFor(Appearance.Of(Account_Staff.RenewalButton.PayInvoiceButton));
-             user.AttemptsTo(Click.On(Account_Staff.RenewalButton.PayInvoiceButton));

+             user.AttemptsTo(ClickCommandButton.WithWebLocator(Account_Staff.RenewalButton.PayInvoiceButton));
=             user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(3, 2, postXPath: "//input[@type='checkbox']")));
=             // verify one worked
-             user.WaitsUntil(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(1, 4)), IsEqualTo.Value("Basic Membership Dues - Pay later"));

+             user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(1, 4))).Should().Be("Basic Membership Dues - Pay later");
=             // edit 9th contacts entry in the list
-             user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(6, 6, true)));

+             user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 6, true)));
=             // ItemizedRenewal page appears
+             // store subtotal value

+             var subtotal = user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel));
=             user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(3, 1)));
=             // wait till subtotal changes then verify new subtotal amount
-             user.WaitsUntil(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel), IsEqualTo.Value("110.00"));

+             finishedProcessing = false;

+             do

+             {

+                 if (user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel)) != subtotal) finishedProcessing = true;

+             } while (finishedProcessing == false);

+             user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel)).Should().Be("110.00");
=             user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.MooRepeater.AddToCartButton));
=             // verify ItemizedRenewal page OpenInvoices grid has now changed
-             user.WaitsUntil(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(6, 4)), IsEqualTo.Value("Basic Membership Dues - Updated"));

-             user.WaitsUntil(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(6, 5)), IsEqualTo.Value("110.00"));

+             user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 4))).Should().Be("Basic Membership Dues - Updated");

+             user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 5))).Should().Be("110.00");
=             // now cancel an contacts dues
=             user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 7, true)));
-             user.WaitsUntil(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 4)), IsEqualTo.Value("Basic Membership Dues - Cancelled"));

-             user.WaitsUntil(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 5)), IsEqualTo.Value("0.00"));

+             user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 4))).Should().Be("Basic Membership Dues - Cancelled");

+             user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 5))).Should().Be("0.00");
=             user.AttemptsTo(Click.On(ListBillingPage.CartCheckOutButton.RedirectToCartButton));
=             // cart page appears
-             user.AttemptsTo(Waiting.ForPageReload());
=             // verify the two items in the items grid
-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2)), ContainsSubstring.Text("Adjustments for invoice:"));

-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(2, 2)), ContainsSubstring.Text("Cancellation for invoice:"));

+             user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2))).Should().Contain("Adjustments for invoice:");

+             user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(2, 2))).Should().Contain("Cancellation for invoice:");

+             // verify total amount

+             user.AsksFor(Text.Of(Cart.CartCharges.TransactionGrandTotal)).Should().Be(totalAmount);
=             user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));
=             // verify Order Confirmation page title
-             user.WaitsUntil(Text.Of(PageBase.PageTitle), IsEqualTo.Value("Order confirmation"));

+             user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");
=             // confirm total
-             user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount), IsEqualTo.Value(totalAmount));

+             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be(totalAmount);
=             // verify info on page
=             user.AttemptsTo(SwitchFrame.To("GenericWindow"));
-             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchTemplateTitle)).Should().Contain("Batch " + batchNumber);

+             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchTemplateTitle)).Should().Contain("Batch "+batchNumber);
=             user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.BatchSummary.EditableDescription)).Should().Contain(renewalData.BillingCycle);
=             // compare dates from context
-             var billDate = _context.GetData<string>(FinanceTestMethods.BillDateKey);

-             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchDate)).Should().Contain(billDate);

+             var Date1 = _context.GetData<string>("BillDate");

+             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchDate)).Should().Contain(Date1);
=         }
= 
-         /// <summary>

-         /// Reverse first open invoice

-         /// </summary>
=         }
= 
-         /// <summary>

-         /// Verify open invoice is reversed

-         /// </summary>
=             user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsValue)).Should().Be("0.00");
=             user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be("0.00");
-         }

- 

-         /// <summary>

-         /// Renew membership on user account page

-         /// </summary>

-         public void RenewUserMembership(int userId)

-         {

-             var user = User("RenewMembershipUser");

- 

-             user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));

-             var paidThruDate = DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")));

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(AccountPage.RenewalButton.RenewInAdvanceButton));

-             user.WaitsUntil(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.PickList(0, 0)),

-                 IsEqualTo.Value("East Chapter"));

- 

-             var termStartDate = DateTime.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermStartDate.TextBox)));

-             termStartDate.Should().Be(paidThruDate.AddDays(1));

- 

-             var termLength = int.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermLength)));

-             termLength.Should().BeGreaterThan(0);

- 

-             var termEndDate = DateTime.Parse(user.WaitsUntil(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermEndDate), IsNotEqualTo.Value("")));

-             termEndDate.Should().Be(termStartDate.AddMonths(termLength).AddDays(-1));

- 

-             _context.AddData(_paidThruDateKey, termEndDate);

-             user.AttemptsTo(ClickCommandButton.WithWebLocator(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));

-         }

- 

-         /// <summary>

-         /// Verify user membership was renewed

-         /// </summary>

-         public void VerifyUserMembershipWasRenewed(int userId)

-         {

-             var user = User("VerifyRenewUser");

- 

-             user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));

-             DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")))

-                 .Should().Be(_context.GetData<DateTime>(_paidThruDateKey));


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Settings\MiscNavigationTestMethods.cs
=         public PayCentralPage PayCentralPage { get; }
=         public GatewaysPage GatewaysPage { get; }
-         public AccountArea AccountArea { get; set; }
=             PayCentralPage = new PayCentralPage();
=             GatewaysPage = new GatewaysPage();
-             AccountArea = new AccountArea("AccountArea");
=             user.AsksFor(Existence.Of(PayCentralPage.PayCentralSettings.GetTab("Gateways")));
=             user.AsksFor(Existence.Of(GatewaysPage.AccountsGrid.AddToGrid));
+         }
=     }
- 

-         public void ClickOnAccountAreaBatchToggleIcon()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(Click.On(AccountArea.BatchToggle));
= }
= 
-         public void VerifyExistanceOfBatchSelectVisibilityPanelDiv()

-         {

-             var user = LoggedInUser();

-             user.WaitsUntil(Appearance.Of(AccountArea.OverrideTransactionDateWrapper), IsEqualTo.True());

-             user.AskingFor(Existence.Of(AccountArea.BatchSelectorDropdown));

-         }

-     }

- }


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Settings\Finance\PayCentral\Gateway\GatewayTestMethods.cs
=         public void EnsurePayCentralIsReady()
=         {
-             var user = LoggedInUser();

+             var user = User();
=         public void SetupAutoPayData(AutoPayData autoPayData)
=         {
-             var user = LoggedInUser();

+             var user = User();
=         public void SetupGatewaySuite(GatewayData gatewayData)
=         {
-             var user = LoggedInUser();

+             var user = User();
=         public void VerifyAutoPayData(AutoPayData autoPayData)
=         {
-             var user = LoggedInUser();

+             var user = User();
=         public void VerifyGatewaySuite(GatewayData gatewayData)
=         {
-             var user = LoggedInUser();

+             var user = User();
=             user.Verifies(SetupPaymentMethodSet.AddToGiftEntry(gatewayData));
=             user.Verifies(SetupPaymentMethodSet.AddToPublic(gatewayData));
-         }

- 

-         public void FillOutNewGateway(GatewayData gatewayData)

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData).AndDontSaveGateway());

-         }

- 

-         public void VerifyLinkValidationError()

-         {

-             var user = LoggedInUser();

-             var gatewayData = _context.GetData<GatewayData>("GatewayData");

-             user.Verifies(ValidationForLink.WithGatewayData(gatewayData));

-         }

- 

-         public void AttemptToSaveAndCloseGateway()

-         {

-             var user = LoggedInUser();

-             user.AttemptsTo(SwitchFrame.ToGenericWindow());

-             user.AttemptsTo(ClickCommandButton.Continue());


<> ../asi1/src/Asi.Test/Selenium/V10\Asi.Selenium.Web.V10\TestMethods\Staff\AccountPageTestMethods.cs
=             var user = LoggedInUser();
=             user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(partyID)));
-             user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.EditButton));

+             // user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.EditButton));

+             var xp = By.XPath("//div[@id='ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_EditButtonPlaceHolder']/a");

+             user.AttemptsTo(Click.On(new WebLocator("",xp)));
=             user.AttemptsTo(SwitchFrame.To("GenericWindow"));
+ 
=             string code = TestHelper.GenerateRandomString(5);
=             string description = TestHelper.GenerateRandomName("Description");
-             PartyDesignation = $"({code}){description}";

+             // jkh, it seems to be losing the code here.

+             PartyDesignation = $"{description}";
=             user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.ContactName.AddDesignation));
=             user.AttemptsTo(ClickCommandButton.SaveAndClose());
+             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
=         {
=             var user = LoggedInUser();
-             user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel partial update 

-             user.AsksFor(Text.Of(AccountPageStaff.MiniProfile.ContactName.FullName)).Should().Contain(PartyDesignation);

+             // jkh(remove) user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel partial update 

+             for (var i=0; i<30; i++) {

+                 // jkh this is broken, the names have changed.

+                 //var xp = AccountPageStaff.MiniProfile.ContactName.FullName;

+                 var xp = new WebLocator("fullname", By.XPath("//*[contains(@id,'fullName')]"));

+                 string x = user.AsksFor(Text.Of(xp));

+                 if (x.Contains(PartyDesignation)){

+                     return;

+                 }

+             }

+             throw new Exception($"Text did not contain {PartyDesignation}");

- \DataClasses\Commerce\OrderData.cs
- \DataClasses\Commerce\OrderItemData.cs
- \DataClasses\Commerce\PricingGroupTable.cs
- \DataClasses\Commerce\ProductItemData.cs
- \DataClasses\Finance\RefundData.cs
- \DataClasses\Fundraising\GiftRequestData.cs
- \DataClasses\Fundraising\SplitGiftData.cs
- \Helpers\MultiFactorAuthentication\MultiFactorAuthentication.cs
- \Interfaces\IWebDriverFactory.cs
- \obj\Debug\net7.0\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs
- \obj\Debug\net7.0\SeleniumCore.AssemblyInfo.cs
- \StepContext\Commerce\ProductContext.cs
- \WebDriver\BrowserType.cs
- \WebDriver\ChromeDriverInstaller.cs
- \WebDriver\WebDriverFactory.cs
+ \Helpers\BaseClasses\Core\Admin\AdminBase.cs
+ \Helpers\BaseClasses\Core\Commerce\CommerceBase.cs
+ \Helpers\BaseClasses\Core\Events\EventBase.cs
+ \Helpers\BaseClasses\Core\Finance\FinanceBase.cs
+ \Helpers\BaseClasses\Core\Fundraising\FRBase.cs
+ \Helpers\BaseClasses\Core\Membership\MembershipBase.cs
+ \Helpers\BaseClasses\Core\Navigation\NavigationBase.cs
+ \Helpers\BaseClasses\Core\Navigation\Staff\SideMenuBase.cs
+ \Helpers\BaseClasses\Core\PaymentGateways\PaymentGatewaysBase.cs
+ \Helpers\BaseClasses\StagingArea\DialogBase.cs
+ \Helpers\BaseClasses\StagingArea\MiscBase.cs
+ \Helpers\BaseDriver\Base.cs
+ \Helpers\Extensions\WebDriverExtensions.cs
+ \Helpers\Navigation\Navigation.cs
+ \Interfaces\ICoreNavigation.cs
+ \Interfaces\IWait.cs
+ \PageObjects\Admin\AdminPageObject.cs
+ \PageObjects\Admin\ContentTypeDialog.cs
+ \PageObjects\Admin\LoginPageObject.cs
+ \PageObjects\Admin\ObjectBrowser.cs
+ \PageObjects\Admin\ObjectBrowserComponents.cs
+ \PageObjects\Admin\ObjectBrowserDialog.cs
+ \PageObjects\Admin\SettingsPageObject.cs
+ \PageObjects\Commerce\CartPageObject.cs
+ \PageObjects\Commerce\InvoicePageObject.cs
+ \PageObjects\Commerce\Product.cs
+ \PageObjects\Commerce\ShopPageObject.cs
+ \PageObjects\Community\CmtyPageObject.cs
+ \PageObjects\Events\EventPageObject.cs
+ \PageObjects\Finance\FinancePageObject.cs
+ \PageObjects\Fundraising\FrPageObject.cs
+ \PageObjects\Membership\AccountPageObject.cs
+ \PageObjects\Membership\AddContacts.cs
+ \PageObjects\Membership\ContactsPage.cs
+ \PageObjects\Membership\Donate.cs
+ \PageObjects\Membership\EnterGifts.cs
+ \PageObjects\Membership\FindContacts.cs
+ \PageObjects\Membership\ManageGiftAidClaims.cs
+ \PageObjects\Membership\Members.cs
+ \PageObjects\Membership\MembershipPageObject.cs
+ \PageObjects\Membership\Profile_Actions.cs
+ \PageObjects\Membership\Resolve_Duplicates.cs
+ \PageObjects\Membership\StaffMemPageObject.cs
+ \PageObjects\Membership\TransactionsPageObject.cs
+ \PageObjects\Navigation\AnnualConference\AnnualConferencePageObject.cs
+ \PageObjects\Navigation\Donor\DonorPageObject.cs
+ \PageObjects\Navigation\Donor\GiveNowPageObject.cs
+ \PageObjects\Navigation\Donor\GivingPageObject.cs
+ \PageObjects\Navigation\MemberResponsive\MbrrAccountPageObject.cs
+ \PageObjects\Navigation\MemberResponsive\MBRRCreateAccountPageObject.cs
+ \PageObjects\Navigation\MemberResponsive\MBRRPageObject.cs
+ \PageObjects\Navigation\Staff\NavigationPageObject.cs
+ \PageObjects\Navigation\Staff\SideMenu.cs
+ \PageObjects\Navigation\Staff\SideMenuCommerce.cs
+ \PageObjects\Navigation\Staff\SideMenuCommunity.cs
+ \PageObjects\Navigation\Staff\SideMenuContinuum.cs
+ \PageObjects\Navigation\Staff\SideMenuEvents.cs
+ \PageObjects\Navigation\Staff\SideMenuFinance.cs
+ \PageObjects\Navigation\Staff\SideMenuFundraising.cs
+ \PageObjects\Navigation\Staff\SideMenuMarketing.cs
+ \PageObjects\Navigation\Staff\SideMenuMembership.cs
+ \PageObjects\Navigation\Staff\SideMenuRiSE.cs
+ \PageObjects\Navigation\Staff\SideMenuSettings.cs
+ \PageObjects\Navigation\Staff\StaffPageObject.cs
+ \PageObjects\PaymentGateways\CardBambora.cs
+ \PageObjects\PaymentGateways\CardElavon.cs
+ \PageObjects\PaymentGateways\CardiATS.cs
+ \PageObjects\PaymentGateways\CardIP.cs
+ \PageObjects\PaymentGateways\CardPayFlow.cs
+ \PageObjects\PaymentGateways\CardSecurePay.cs
+ \PageObjects\PaymentGateways\CardVantiv.cs
+ \PageObjects\PaymentGateways\Cash.cs
+ \PageObjects\PaymentGateways\Check.cs
+ \PageObjects\PaymentGateways\Payment.cs
+ \PageObjects\PaymentGateways\PaymentVerification.cs
+ \PageObjects\StagingArea\ImportContactsPageObject.cs
+ \PageObjects\StagingArea\MiscPageObject.cs
+ \PageObjects\StagingArea\MiscPageObject2.cs

<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DisplayStaticBase.cs
=     {
=         /// <summary>
-         /// Generates the predicate to find a function or attribute that contains or exactly matches a value

-         /// <br />

-         /// Predicates are the search terms in the square brackets of the XPath. I.E. a[contains(text(),'This is the text in the element')]

-         /// </summary>

-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>

-         /// <param name="expectedValue">The expected value to be found when searching</param>

-         /// <param name="exactMatch">Boolean to determine whether to check if the attribute or function contains or exactly matches the value</param>

-         /// <returns></returns>

-         public string Predicate(string searchIn, string expectedValue, bool exactMatch = false) => exactMatch ? ExactValuePredicate(searchIn, expectedValue) : ContainsValuePredicate(searchIn, expectedValue);

- 

-         /// <summary>

-         /// Predicate in XPath to detemine if an HTML attribute contains a value

-         /// </summary>

-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>

-         /// <param name="expectedValue">The expected value to be found when searching</param>

-         /// <returns></returns>

-         public string ContainsValuePredicate(string searchIn, string expectedValue)

-         {

-             bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');

-             if (searchWithFunction)

-                 return $"contains({searchIn},'{expectedValue}')";

-             else

-                 return $"contains(@{searchIn},'{expectedValue}')";

-         }

- 

-         /// <summary>

-         /// Predicate in XPath to determine if an HTML attribute is equal to a value

-         /// </summary>

-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>

-         /// <param name="expectedValue">The expected value to be found when searching</param>

-         /// <returns></returns>

-         public string ExactValuePredicate(string searchIn, string expectedValue)

-         {

-             bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');

-             if (searchWithFunction)

-                 return $"{searchIn}='{expectedValue}'";

-             else

-                 return $"@{searchIn}='{expectedValue}'";

-         }

- 

-         /// <summary>
=         public static IWebLocator LocatorDoubleContains(string part1, string part2, string tag = "*", string attribute = "id", string postXPath = "")
=         {
-             return WebLocator.L($"XPath with double contains: //{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}", By.XPath($"//{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}"));

+             return WebLocator.L($"XPath with double {attribute}", By.XPath($"//{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}"));
=         {
=             if (!string.IsNullOrEmpty(index))
-                 return WebLocator.L($"Custom XPath: ({xpath})[{index}]{postXpath}", By.XPath($"({xpath})[{index}]{postXpath}"));

-             return WebLocator.L($"Custom XPath: {xpath}", By.XPath(xpath));

+                 return WebLocator.L($"Custom XPath", By.XPath($"({xpath})[{index}]{postXpath}"));

+             return WebLocator.L($"Custom XPath", By.XPath(xpath));
=            WebLocator.L($"XPath for \"{attributeValue}\"", GetTableByCellValueXPath(attributeValue, cellValue, attribute, linkAttributeValue, linkAttribute, secondCellValue));
= 
-         /// <summary>

-         /// Identify the element by using CSS selector

-         /// </summary>

-         /// <param name="secondElement"></param>

-         /// <param name="attribute"></param>

-         /// <param name="value"></param>

-         /// <param name="firstElement"></param>

-         /// <returns></returns>
=         }
= 
-         /// <summary>

-         /// Create a By of the element using CSS selector

-         /// </summary>

-         /// <param name="secondElement"></param>

-         /// <param name="attribute"></param>

-         /// <param name="value"></param>

-         /// <param name="firstElement"></param>

-         /// <returns></returns>
=         public static IWebLocator LocatorByCSS(string secondElement, string attribute, string value, string firstElement = "") =>
=             WebLocator.L($"CSS for \"{secondElement}\"", ByCSS(secondElement, attribute, value, firstElement));
- 

-         /// <summary>

-         /// Identify the element by using name locator

-         /// </summary>

-         /// <param name="elementName"></param>

-         /// <returns></returns>

-         public static By ByName(string elementName)

-         {

-             return By.Name($"{elementName}");

-         }

- 

-         /// <summary>

-         /// Create a By of the element using Name

-         /// </summary>

-         /// <param name="elementName"></param>

-         /// <returns></returns>

-         public static IWebLocator LocatorByName(string elementName) =>

-             WebLocator.L($"XPath for \"{elementName}\"", ByName(elementName));

- 

-         public IWebLocator PartialLinkText(string linkName) =>

-          WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName));


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\BillingList.cs
=         public int TermSpan { get; set; }
=         public string PayOption{ get; set; }
-         public bool PayNow { get; set; }
=         public string AccountingMethod { get; set; }
=         public string Amount { get; set; }
+         public string Date { get; set; }


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\UserData.cs
=         [JsonPropertyName("username")]
=         public string UserName { get; set; }
-         [JsonPropertyName("password")]

-         public string Password { get; set; }


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Commerce\CartData.cs
=         public string BillTo { get; set; }
=         public string PaymentMethod { get; set; }
-         /// <summary>

-         /// This is an internal enum that dictates how to check out when performing in CheckOut.cs

-         /// <br /><br />

-         /// Not to be confused with CartData.PaymentMethod, which will fill the payment method drop down.

-         /// This should be specified as the same payment method in the gateway

-         /// </summary>
=         public string PurchaseOrderNumber { get; set; } 
=         public string Product { get; set; }
-         public int Quantity { get; set; } = 1;
=         public int NumOfProducts { get; set; } = 1;
=         public bool ClearCart { get; set; }
-         public string PromoCode { get; set; }

-         public bool IsPrepayment { get; set; }


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Commerce\CreateProductData.cs
=     {
=         public string ItemCode { get; set; }
- 
=         public string Name { get; set; }
=         public string Description { get; set; }
-         public bool PriceIsTotal { get; set; }

-         public decimal? StandardPrice { get; set; }

-         public decimal? DiscountPrice { get; set; }

-         public string Status { get; set; }

+         public decimal StandardPrice { get; set; }

+         public decimal DiscountPrice { get; set; }

+         public string Status {get;set; }

+         public string FinancialEntity {get;set; }

-         public string FinancialEntity { get; set; }
=         public string TaxCode { get; set; }
-         public bool IsTaxable { get; set; }

-         public bool IsPstEnabled { get; set; }

-         public bool IsGstHstEnabled { get; set; }

-         public bool IncursShipping { get; set; }

+         public bool? IsTaxable { get; set; }

+         public bool? IncursShipping { get; set; }

+         public bool? IncursHandling { get; set; }

+         public bool? InventoryItem { get; set; }

-         public bool IncursHandling { get; set; }

-         public bool InventoryItem { get; set; }

-         public DateTime? Beginning { get; set; }

-         public DateTime? Ending { get; set; }

-         public bool HasAccountingInformation => !string.IsNullOrEmpty(FinancialEntity) || IsTaxable || IsPstEnabled || IsGstHstEnabled || IncursHandling || IncursShipping || InventoryItem;


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Commerce\GatewayData.cs
=         public string AccountName { get; set; }
=         public string Password { get; set; }
-         /// <summary>

-         /// Multi-Factor Auth key for getting MFA access to third party applications

-         /// </summary>

-         public string MFACode { get; set; }
=         public string DigitalKey { get; set; }
=         public string AccountId { get; set; }
-         /// <summary>

-         /// This is the text set in the Payment Method type drop down.

-         /// <br />

-         /// Not to be confused with PaymentMethodType in CartData.

-         /// </summary>
=         public bool DisplayPaymentAuthoirizationCheckbox { get; set; }
=         public string PaymentAuthorizationTermsAndConditions { get; set; }
-         public string Email { get; set; }

-         public bool CompleteOnboarding { get; set; } = true;


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Events\CreateEventData.cs
=         public string Room { get; set; }
=         public string Tags { get; set; }
-         public string TaxCode { get; set; }

-         public bool TaxByAddress { get; set; }

-         public string VatExceptionRule { get; set; }

-         public double RegistrationOptionDefaultRegularPrice { get; set; }

-         public bool IsRegistrationOptionTaxable { get; set; }

-         public bool IsRegistrationOptionPstEnabled { get; set; }

-         public bool IsRegistrationOptionGstHstEnabled { get; set; }

-         public string RegistrationOptionTaxCode { get; set; }

-         public double ProgramItemDefaultRegularPrice { get; set; }

-         public bool IsProgramItemTaxable { get; set; }

-         public bool IsProgramItemPstEnabled { get; set; }

-         public bool IsProgramItemGstHstEnabled { get; set; }

-         public string ProgramItemTaxCode { get; set; }

- 

-         public bool HasPricingData => !string.IsNullOrEmpty(TaxCode) || TaxByAddress || !string.IsNullOrEmpty(VatExceptionRule) || HasRegistrationOptionData;

-         public bool HasRegistrationOptionData => RegistrationOptionDefaultRegularPrice != 0 || HasRegistrationOptionTax || !string.IsNullOrEmpty(RegistrationOptionTaxCode);

-         public bool HasProgramItemData => ProgramItemDefaultRegularPrice != 0 || HasProgramItemTax || !string.IsNullOrEmpty(ProgramItemTaxCode);

-         public bool HasRegistrationOptionTax => IsRegistrationOptionTaxable || IsRegistrationOptionPstEnabled || IsRegistrationOptionGstHstEnabled;

-         public bool HasProgramItemTax => IsProgramItemTaxable || IsProgramItemPstEnabled || IsProgramItemGstHstEnabled;


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Events\EventData.cs
=         [TableAliases("Program[-]?(\\d)*")]
=         public List<string> Programs { get; set; }
-         public bool AddFirstProgram { get; set; }
=         public string BillTo { get; set; }
=         public string EventCode { get; set; }
+ 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Membership\ContactData.cs
=     {
=         public PrefixEnum Prefix { get; set; }
-         public string PrefixString => PrefixToStringDic[Prefix];

-         public Dictionary<PrefixEnum, string> PrefixToStringDic = new Dictionary<PrefixEnum, string>

-         {

-             {PrefixEnum.None, "(None)"},

-             {PrefixEnum.Dr, "Dr." },

-             {PrefixEnum.Hon, "Hon." },

-             {PrefixEnum.LtCol, "Lt.Col." },

-             {PrefixEnum.Miss, "Miss" },

-             {PrefixEnum.Mr, "Mr." },

-             {PrefixEnum.Mrs, "Mrs." },

-             {PrefixEnum.Ms, "Ms." },

-             {PrefixEnum.Pastor, "Pastor"},

-             {PrefixEnum.Rev, "Rev."},

-         };
=         public string Password { get; set; }
=         public string ConfirmPassword { get; set; }
-         public bool ExpectError { get; set; }

-         public string ContactType { get; set; }

-         public string Gender { get; set; }

-         public string Birthday { get; set; }

-         public string MaritalStatus { get; set; }

- 
=         Sr
=     }
- 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\Membership\JoinNowData.cs
=         public string ProductCode { get; set; }
=         public string ProductName { get; set; }
-         public string ClubName { get; set; }
=         public string UnitAmount { get; set; }
=         public string AdjustedUnitAmount { get; set; }
-         public string[] ItemNames { get; set; }

+         public string ItemName1 { get; set; }

+         public string ItemAmount1 { get; set; }

+         public string ItemName2 { get; set; }

+         public string ItemAmount2 { get; set; }


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\DataClasses\RiSE\PanelPropertyData.cs
=             //Allocate general property fields
=             prop.Name = $"Prop{TestHelper.GenerateRandomString(10)}";
-             prop.Type = specificType.IsNullOrEmpty() ? _allTypes.ElementAt(_random.Next(_allTypes.Count)) : specificType;

+             prop.Type = specificType is {Length:>0} ? _allTypes.ElementAt(_random.Next(_allTypes.Count)) : specificType;
= 
=             //Handle Coordinate System
-             if (!Coords.IsNullOrEmpty())

+             if (!(Coords is {Length:>0}))
=         {
=             //Make decision to set either predefined values or single-line/multi-line textbox as they are mutually exclusive
-             if (!specificPreDefType.IsNullOrEmpty() || TestHelper.CoinFlip())

+             if (!(specificPreDefType is {Length:>0}) || TestHelper.CoinFlip())
=             {
=                 string preDefValType;
-                 if (preDefinedValuesType.IsNullOrEmpty())

+                 if (preDefinedValuesType is {Length:>0})


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\Interfaces\IAsiWebContext.cs
=     {
=         Uri BaseUrl { get; set; }
-         Uri LicenseUrl { get; set; }
=         /// <returns></returns>
=         public T GetData<T>(string key);
- 

-         /// <summary>

-         /// This method is used to populate website, username and password by specifying a role

-         /// </summary>

-         /// <param name="site"></param>

-         /// <param name="UserRole"></param>

-         public void SetContextByRole(string site, string UserRole);

- 

-         /// <summary>

-         ///  This method is used to populate website, username and password by specifying username

-         /// </summary>

-         /// <param name="site"></param>

-         /// <param name="UserName"></param>

-         public void SetContextByName(string site, string UserName);

- 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\Utilities\Authentication.cs
=         /// Logs the user out of any site
=         /// </summary>
-         public void LogOut(bool navigate = true, bool waitForDropDown = true)

+         public void LogOut(bool navigate = true)
=             }
= 
-             if (waitForDropDown)

+             if (user.AsksFor(Appearance.Of(ProfileDropDown)))

-                 user.WaitsUntil(Existence.Of(ProfileDropDown),IsEqualTo.True());
=                 user.AttemptsTo(Click.On(ProfileDropDown));
=             user.AttemptsTo(Click.On(SignOut));
-         }

- 

-         public void VerifyUserIsLoggedIn()

-         {

-             var user = User("LoggedInUser");

-             user.AttemptsTo(Waiting.InSeconds(3));

-             user.AttemptsTo(Click.On(ProfileDropDown));

-             user.AsksFor(Appearance.Of(SignOut)).Should().BeTrue();
=         }
= 
-         public void VerifyLoggedInUserName(string expectedName)

-         {

-             var user = User("LoggedInUser");

-             user.AsksFor(Text.Of(ProfileDropDown)).Should().Contain(expectedName);

-         }


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\Utilities\ExtensionMethods.cs
=         }
= 
-         public static string GetFeatureDescription(this Enum enumValue)

-         {

-             var attr = enumValue.GetAttribute<FeatureAttribute>();

-             var description = attr.Description;

-             return description;

-         }

- 

-         public static LicensePlatformData[] GetFeaturePlatform(this Enum enumValue)

-         {

-             var attr = enumValue.GetAttribute<FeatureAttribute>();

-             var platformData = attr.Platform;

-             return platformData;

-         }

- 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\AsiWebContext.cs
=         {
=             DataStorage = new Dictionary<string, object>();
-             Random = new Random();
=         public int WaitMultiplier { get; set; }
=         public int AdditionalWaitInMiliseconds { get; set; }
-         public Uri LicenseUrl { get; set; }

-         public Random Random { get; set; }
=                 DataStorage.Remove(key);
=             DataStorage.Add(key, value);
-         }

- 

-         /// <summary>

-         ///  This method is used to populate website, username and password by specifying a role.

-         ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for users whose role matches

-         /// </summary>

-         /// <param name="site"></param>

-         /// <param name="UserNameValue"></param>

-         /// <param name="role"></param>

-         public void SetContextByRole(string site, string UserRole)

-         {

-             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");

-             var userSelection = userList.Where(t => t.Role.Equals(UserRole));

-             var user = userSelection.ElementAt(Random.Next(userSelection.Count()));

- 

-             Website = site;

-             UserName = user.UserName;

-             Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";

- 

-         }

- 

-         /// <summary>

-         ///  This method is used to populate website, username and password by specifying a role.

-         ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for user whose name matches

-         /// </summary>

-         /// <param name="site"></param>

-         /// <param name="UserNameValue"></param>

-         /// <param name="name"></param>

-         public void SetContextByName(string site, string UserNameValue)

-         {

-             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");

-             var usersWithName = userList.Where(t => t.UserName.Equals(UserNameValue));

-             var user = new UserData();

-             if (usersWithName.Count() != 0)

-             {

-                 user = usersWithName.ElementAt(0);

-             }

- 

-             Website = site;

-             UserName = !string.IsNullOrEmpty(user.UserName) ? user.UserName : UserNameValue;

-             Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";

- 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Questions\FocusState.cs

- namespace Asi.Selenium.Core.WebDriver.Boa

- {
= /// Question about whether an element is the current focus of the web driver.
= /// </summary>
+ namespace Asi.Selenium.Core.WebDriver.Boa {
=     /// Determines if page focus is on the locator element
=     /// </summary>
-         private bool LocatorInFocus(IWebLocator locator,IWebDriver driver) {

-             var targetElement = driver.FindElement(locator.Query);

+     private bool LocatorInFocus(IWebLocator locator, IWebDriver driver)

+     {

+         // BUGBUG - ??

+         var targetElement = driver.FindElement(By.Id(""));
=     public override bool RequestAs(IActor user, IWebDriver driver, IAsiWebContext context)
=     {
-             return LocatorInFocus(Locator,driver);

+         return LocatorInFocus(Locator, driver);
=     #endregion
= }
+ 
= }
- 


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Questions\UserMessageState.cs
=                     break;
=             }
-             user.AttemptsTo(Waiting.ForPageReload());


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Tasks\Browse.cs
=         public static Browse InImis(ImisUrl url, SitesToBrowse site) => new Browse(site, url);
=         public static Browse InImis(SitesToBrowse site) => new Browse(site, new ImisUrl(""));
-         public static Browse InImis(ImisUrl url, string siteUrl) => new Browse ((SitesToBrowse)Enum.Parse(typeof(SitesToBrowse), siteUrl.Replace(" ", ""), true),url);

+         public static Browse InImis(ImisUrl url, string siteUrl) => new Browse((SitesToBrowse)Enum.Parse(typeof(SitesToBrowse), siteUrl.Replace(" ", ""), true), url);
=             {
=                 case SitesToBrowse.Staff:
-                     return $"{Url}/Staff";

+                     return $"{Url}Staff";
=                 case SitesToBrowse.Mbrr:
-                     return $"{Url}/MBRR";

+                     return $"{Url}MBRR";
=                 case SitesToBrowse.Donor:
-                     return $"{Url}/imisdonor";

+                     return $"{Url}imisdonor";
=                 case SitesToBrowse.AnnualConference:
-                     return $"{Url}/iMISAnnualConference";

+                     return $"{Url}iMISAnnualConference";
=                 case SitesToBrowse.Club:
-                     if(context.IsV10)

+                     if (context.IsV10)
=                         return Url;
-                     return $"{Url}/imisclub";

+                     return $"{Url}imisclub";
=                     if (context.IsV10)
=                         return Url;
-                     return $"{Url}/ClubStaff";

+                     return $"{Url}ClubStaff";


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Tasks\ClickCommandButton.cs
=         public static ClickCommandButton Delete() => new ClickCommandButton(CommandButtonBarButtons.DeleteButton);
=         public static ClickCommandButton Find() => new ClickCommandButton(CommandButtonBarButtons.FindButton);
-         public static ClickCommandButton Close() => new ClickCommandButton(CommandButtonBarButtons.CloseButton);
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
+ 
= 
=             //Hover above the button before clicking
+             // jkh - added here, was missing some buttons. AsksFor does not wait by default.

+             user.WaitsUntil(Appearance.Of(button),IsEqualTo.True());
=             if (user.AsksFor(Appearance.Of(button)))
=             {
+                 // this is an extension to use Playwright rules of not forcing. Some Click.On's fail if we do this universally though.

+                 // todo: bring back the force false
=             CancelButton,
=             DeleteButton,
-             FindButton,

+             FindButton

-             CloseButton


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Tasks\SetWhenProvided.cs

+ /* jkh 3/11/2023

+ We need to change this to mean Set when there is a value to set. This will no doubt break lots of tests since this is a substantial change in semantics. But there is a fundamental race condition currently that must be addressed:

+ 1. SetWhenProvided("fubar","value") 

+ 2. Program looks, there is no fubar, so carries on.

+ 3. fubar shows up, but now it will get no value

+ 4. Test crashes because of missing values

+ 

+ Sprinkling waits through this will not fix the bug since no wait will be "correct".

+ The change in semantics is that if there is a value wh

+ */

+ 
=         public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
-             if (string.IsNullOrEmpty(locatorValue))

+             // jkh: remove the idea of skipping boxes that don't exist.

+             // if (string.IsNullOrEmpty(locatorValue) || !user.AsksFor(Existence.Of(WebLocator)))

+             //     return;

+ 

+             // jkh:  new semantic is to ignore this value if value we are trying to set is ""

+             // we use the value ~~~~ to indicate that we actually want to set "".

+             if (locatorValue=="" || locatorValue==null ){
=                 return;
- 

-             user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True());

+             } 

+             if (locatorValue=="~~~~"){

+                 locatorValue="";

+             }
=             else
=                 user.AttemptsTo(SendKeys.To(WebLocator, locatorValue));
-             user.AttemptsTo(Waiting.InSeconds(1));

+            // jkh: remove waiting

+            //user.AttemptsTo(Waiting.InSeconds(1));
=         {
=             user.AttemptsTo(Select.ByText(WebLocator, locatorValue));
-             user.AttemptsTo(Waiting.InSeconds(1));

+             //user.AttemptsTo(Waiting.InSeconds(1));
=         public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)
=         {
-             if (string.IsNullOrEmpty(locatorValue))

+             if (string.IsNullOrEmpty(locatorValue) || !user.AsksFor(Existence.Of(WebLocator)))
=                 return;
- 

-             user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True());


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Tasks\SwitchFrame.cs
=         private const string GenericWindow = "GenericWindow";
=         private const string GiftEntryFrame = "PayCentralFrame";
-         private const string PayCentralSDKFrameIdWithoutNumbers = "paycentralframe";

+         private const string PayCentralSDKFrame = "paycentralframe0";

-         private const string StripeChallengeFrameID = "PayCentral-3DSecure-ChallengeWindow";

-         private const string StripeACSFrameName = "acsFrame";
=         /// <returns></returns>
=         public static SwitchFrame ToPayCentralFrame() => new SwitchFrame(PayCentralFrame, "id");
-         public static SwitchFrame ToPayCentralSDKFrame() => ToFrameByXpath($"//iFrame[contains(@id,'{PayCentralSDKFrameIdWithoutNumbers}')]");

+         public static SwitchFrame ToPayCentralSDKFrame() => new SwitchFrame(PayCentralSDKFrame, "id");
=         public static SwitchFrame ToGiftEntryFrame() => new SwitchFrame(GiftEntryFrame, "id");
=         public static SwitchFrame ToGenericWindow() => new SwitchFrame(GenericWindow);
-         public static SwitchFrame ToStripe3dsChallengeFrame() => ToFrameByXpath($"//iFrame[contains(@id,'{StripeChallengeFrameID}')]");

-         public static SwitchFrame ToStripeACSFrame() => ToFrameByXpath($"//iFrame[contains(@name, '{StripeACSFrameName}')]");


<> ../asi1/src/Asi.Test/Selenium/SeleniumCore\WebDriver\Boa\Tasks\Waiting.cs
=             {
=                 case WaitingType.MilliSeconds:
-                     TimeModifier(1);

+                     TimeModifier(100);

