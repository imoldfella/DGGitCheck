Hello, World!
- /Asi.Selenium.Web.csproj
- /GlobalUsings.cs
- /Interactions/PayCentral/ValidationForLink.cs
- /Interactions/Finance/FindPayment.cs
- /iParts/Commerce/OrderDetailsTotalSection.cs
- /iParts/Commerce/OrderSelector.cs
- /iParts/Commerce/OrderDetailsBillingDetails.cs
- /iParts/Commerce/ItemCreator/AddItemDialog.cs
- /iParts/Common/DynamicContentCollectionOrganizer.cs
- /iParts/Common/BigButtonPanel/BigButtonPanelEdit.cs
- /iParts/Membership/ClubStaffCheckInOut.cs
- /Pages/Commerce/ProcessOrders/GenerateInvoicesPage.cs
- /Pages/Commerce/ProcessOrders/IssueQuotesPage.cs
- /Pages/Commerce/ProcessOrders/PrintShippingPapersPage.cs
- /Pages/Commerce/ProcessOrders/ShipOrdersPage.cs
- /Pages/Commerce/ProcessOrders/ConvertQuotesPage.cs
- /Pages/Commerce/ProcessOrders/ReleaseBackordersPage.cs
- /Pages/Settings/Finance/PayCentral/Gateway/ImisRedirectPage.cs
- /Pages/Settings/Finance/PayCentral/Gateway/GoCardless/GoCardlessDialog.cs
- /Pages/Settings/Finance/PayCentral/Gateway/GoCardless/GoCardlessOAuth.cs
- /Pages/Settings/Finance/PayCentral/Gateway/Stripe/StripeDialog.cs
- /Pages/Settings/Finance/PayCentral/Gateway/Stripe/StripeOnboarding.cs
- /Pages/Contacts/AdjustMembershipFeesPage.cs
- /Pages/Shop/PayPalCheckOutPage.cs
- /Pages/LicenseServer/LicenseServerPage.cs
- /Pages/LicenseServer/UpsertLicenseIssuedModal.cs
- /Pages/LicenseServer/UpsertLicenseModal.cs
- /Pages/Finance/BatchesPage.cs
- /Pages/Finance/BatchDetailPage.cs
- /Pages/Finance/PayCentral/FindPaymentsPage.cs
- /Pages/Events/EventProgramDetails/EventStaffFunctionDialog.cs
- /Pages/Events/EventProgramDetails/EventStaffFunctionDisplayPage.cs
- /Pages/Community/FindContactsPage.cs
- /Pages/RiSE/Maintenance/PublishServersListPage.cs
- /Pages/MemberResponsive/ContactManagement/MemberResponsiveMembershipPage.cs
+ /Pages/Finance/Batches.cs
+ /Pages/Membership/ProductDisplayPage.cs
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Commerce/CreateProduct.cs)
-         private CreateProduct(CreateProductData createProductData, ProductTypeEnum productType, ProductContext productContext,
+         private CreateProduct(CreateProductData createProductData, ProductTypeEnum productType)
-             IEnumerable<ProductItemData> productItemsData = null)
+             CreateProductData = createProductData;
-             CreateProductData = createProductData;
+ 
-             ProductType = productType;
-             ProductContext = productContext;
-             ProductItemsData = productItemsData;
- 
- 
-         private AddProductPage AddProductPage { get; }
-         private ItemPage ItemPage { get; }
-         private CreateProductData CreateProductData { get; }
+         private ProductTypeEnum ProductType { get; set; }
+         private CreateProductData CreateProductData { get; set; }
+         private AddProductPage AddProductPage { get; set; }
+         private ItemPage ItemPage { get; set; }
-         private ProductTypeEnum ProductType { get; }
-         private ProductContext ProductContext { get; }
-         private IEnumerable<ProductItemData> ProductItemsData { get; }
- 
- 
+         public static CreateProduct SimpleItem(CreateProductData createProductData) => new CreateProduct(createProductData, ProductTypeEnum.SimpleItem);
-         public static CreateProduct SimpleItem(CreateProductData createProductData, ProductContext productContext) =>
-             new CreateProduct(createProductData, ProductTypeEnum.SimpleItem, productContext);
- 
-         public static CreateProduct CollectionOfItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData, ProductContext productContext) =>
-             new CreateProduct(createProductData, ProductTypeEnum.CollectionOfItems, productContext, productItemsData);
- 
-                     EntryProductData(user, context);
+                     CreateProductHelper(user, driver, context);
-                     SaveProductData(user);
-                 case ProductTypeEnum.CollectionOfItems:
-                     user.AttemptsTo(Click.On(AddProductPage.ItemCreator.CollectionRadioButton));
-                     EntryProductData(user, context);
-                     EntryItemsToCollection(user);
-                     SaveProductData(user);
-                     break;
-         /// Entry product data based on what the user provides
+         /// Creates the product based on what the user provides
-         public void EntryProductData(IActor user, IAsiWebContext context)
+         public void CreateProductHelper(IActor user, IWebDriver driver, IAsiWebContext context)
+ 
-             ProductContext.Code = TestHelper.GenerateRandomString(14);
-             ProductContext.Name = string.IsNullOrEmpty(CreateProductData.Name) ? ProductContext.Code : CreateProductData.Name;
-             ProductContext.Class = string.IsNullOrEmpty(CreateProductData.Class) ? "Sales" : CreateProductData.Class;
+             string itemCode = TestHelper.GenerateRandomString(10);
+             string itemName = string.IsNullOrEmpty(CreateProductData.Name) ? itemCode : CreateProductData.Name;
+             string itemClass = string.IsNullOrEmpty(CreateProductData.Class) ? "Sales" : CreateProductData.Class;
-             ProductContext.Description = string.IsNullOrEmpty(CreateProductData.Description) ? "DESC " + ProductContext.Code : CreateProductData.Description;
-             user.AttemptsTo(Select.ByText(itemCreator.ProductClassDropDown, ProductContext.Class));
+             user.AttemptsTo(Select.ByText(itemCreator.ProductClassDropDown, itemClass));
-             user.AttemptsTo(SendKeys.To(itemCreator.TxtItemCode, ProductContext.Code));
-             user.AttemptsTo(SendKeys.To(itemCreator.TxtName, ProductContext.Name));
-             user.AttemptsTo(SendKeys.To(itemCreator.TxtDescription.TextArea, ProductContext.Description));
-             if (CreateProductData.PriceIsTotal)
-             {
-                 user.AttemptsTo(Check.On(itemCreator.PriceIsTotalCheckBox));
-             }
-             else
-             {
-                 user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.TxtStandardPrice, CreateProductData.StandardPrice ?? TestHelper.GenerateRandomNumber(1, 1000)));
-                 // trigger the script that defaults the discount price
-                 user.AttemptsTo(Click.On(itemCreator.TxtDiscountPrice));
-                 user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.TxtDiscountPrice, CreateProductData.DiscountPrice));
-             }
- 
-             user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.PublishStartDate.TextBox, CreateProductData.Beginning?.Date.ToString("dd/MM/yyyy")));
-             user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.PublishStartTime.TextBox, CreateProductData.Beginning?.Date.ToString("hh:mm tt")));
- 
+             user.AttemptsTo(SendKeys.To(itemCreator.TxtItemCode, itemCode).UsingClearMethod());
+             user.AttemptsTo(SendKeys.To(itemCreator.TxtName, itemName).UsingClearMethod());
+             user.AttemptsTo(SetWhenProvided.TextBox(AddProductPage.ItemCreator.TxtStandardPrice, CreateProductData.StandardPrice));
+             user.AttemptsTo(Click.On(AddProductPage.ItemCreator.TxtDiscountPrice));   // trigger the script that defaults the discount price
+             user.AttemptsTo(SetWhenProvided.TextBox(AddProductPage.ItemCreator.TxtDiscountPrice, CreateProductData.DiscountPrice));
+             user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Accounting")));
+             user.WaitsUntil(Appearance.Of(itemCreator.TaxInfo.TaxableCheckBox), IsEqualTo.True());
+             if (CreateProductData.IsTaxable ?? false)
-             if (CreateProductData.HasAccountingInformation)
-                 user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Accounting")));
-                 user.AttemptsTo(Select.ByText(itemCreator.FinancialEntityDropDownList, CreateProductData.FinancialEntity ?? "Default"));
+                 //user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.TaxInfo.TaxableCheckBox, CreateProductData.IsTaxable));
+                 user.AttemptsTo(Click.On(itemCreator.TaxInfo.TaxableCheckBox));
- 
-                 if (CreateProductData.IsTaxable)
-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.TaxableCheckBox));
- 
-                 if (CreateProductData.IsGstHstEnabled)
-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.CheckBoxGstHst));
- 
-                 if (CreateProductData.IsPstEnabled)
-                     user.AttemptsTo(Check.On(itemCreator.TaxInfo.CheckBoxPst));
- 
-                 if (!string.IsNullOrEmpty(CreateProductData.TaxCode))
- 
+             }
-                 user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Summary")));
-             }
-             context.UpsertData("ItemCode", ProductContext.Code);
-         }
+             user.AttemptsTo(Click.On(AddProductPage.ItemCreator.TabStripControl.GetTab("Summary")));
+             user.AttemptsTo(ClickCommandButton.Save());
-         /// <summary>
+             user.AsksFor(Text.Of(ItemPage.GeneralProductDisplay.DynamicProductDisplay.ProductTitle)).Should().Be(itemName);
-         /// Adds items to the product based on what the user provides
-         /// </summary>
-         /// <param name="user"></param>
-         public void EntryItemsToCollection(IActor user)
-         {
-             var itemDialog = AddProductPage.AddItemDialog;
-             var itemCreator = AddProductPage.ItemCreator;
-             var row = 1;
-             foreach (var productItem in ProductItemsData)
+             context.UpsertData("ItemCode", itemCode);
-             {
-                 user.AttemptsTo(Click.On(itemCreator.AddLinkButton));
-                 user.AttemptsTo(SwitchFrame.ToGenericWindow());
- 
-                 var parameterName = string.IsNullOrEmpty(productItem.Title)
-                     ? "Product Code Starts With"
-                     : "Product Title";
-                 var searchProductTextBox = ((QueryTextParameter)itemDialog.Lister.GetParameter("Add Item", parameterName)).Textbox;
-                 var searchProductText = string.IsNullOrEmpty(productItem.Title) ? productItem.Code : productItem.Title;
- 
-                 user.AttemptsTo(SendKeys.To(searchProductTextBox, searchProductText).ThenHitEnter());
-                 user.WaitsUntil(itemDialog.Lister.GetRowCount(), IsEqualTo.Value(1));
-                 user.AttemptsTo(Click.On(itemDialog.Lister.FirstCellLink));
-                 user.AttemptsTo(SwitchFrame.ToDefaultFrame());
- 
-                 user.WaitsUntil(Text.Of(itemCreator.CollectionItemsGrid.Cells(row)), IsNotEqualTo.Value("There are no set items."));
-                 if (productItem.Quantity > 1)
-                 {
-                     user.AttemptsTo(SendKeys.To(itemCreator.CollectionItemsGrid.Cell(row, 4, tableSection: "tbody", postXPath: "//input"),
-                         productItem.Quantity.ToString()));
-                 row++;
-             }
-         }
- 
-         /// <summary>
-         /// Saves the product
-         /// </summary>
-         /// <param name="user"></param>
-         public void SaveProductData(IActor user)
-         {
-             user.AttemptsTo(ClickCommandButton.Save());
- 
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
-             user.WaitsUntil(Text.Of(productDisplay.ProductTitle), IsEqualTo.Value(ProductContext.Name));
-             if (user.AsksFor(Existence.Of(productDisplay.InventoryDetailsButton)))
-             {
-                 user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));
-                 ProductContext.LastCost = user.WaitsUntil(Text.Of(productDisplay.TotalCostValueLabel), IsNotEqualTo.Value(""));
-                 ProductContext.ContainsInventory = true;
-             }
-         }
- 
- 
-             SimpleItem,
+             SimpleItem
-             CollectionOfItems,
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Shop/CheckOut.cs)
- #pragma warning disable CS0169, CS0414
- /* future work
- warning CS0169: The field 'CheckOut.Random' is never used 
- warning CS0414: The field 'CheckOut.SkipCart' is assigned but its value is never used
- */
- 
- namespace Asi.Selenium.Web.Interactions.Shop
-             PayPalCheckOutPage = new PayPalCheckOutPage();
-             PayPalCheckOutPage = new PayPalCheckOutPage();
-         private Cart Cart { get; }
-         private DonateNowPage DonateNowPage { get; }
-         private PayPalCheckOutPage PayPalCheckOutPage { get; }
-         private CartData CartData { get; }
+         private Cart Cart { get; set; }
+         private DonateNowPage DonateNowPage { get; set; }
+         private CartData CartData { get; set; }
+         private OrderConfirmation OrderConfirmation { get; set; }
-         private OrderConfirmation OrderConfirmation { get; }
-         private CheckOutPaymentMethodType PaymentMethodType { get; }
-         private const string _payPalUserEmail = "USA_Pers@advsol.com";
+         private CheckOutPaymentMethodType PaymentMethodType { get; set; }
-         private const string _payPalUserPassword = "qaperson123";
- 
-         /// Proceeds to pay for the items with PayPal button
-         /// </summary>
-         /// <returns></returns>
-         public static CheckOut WithPayPal() => new CheckOut(CheckOutPaymentMethodType.PayPal).SkipSubmitOrderButton();
- 
-         /// <summary>
-         /// Proceeds to submit the zero dollar order without providing a payment
-         /// </summary>
-         /// <returns></returns>
-         public static CheckOut WithoutPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.WithoutPayment, cartData);
- 
-         /// <summary>
- 
-             if (!string.IsNullOrEmpty(CartData?.PromoCode))
-             {
-                 user.AttemptsTo(SendKeys.To(Cart.PromotionManagerDisplay.PromotionalCode, CartData.PromoCode));
-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(Cart.PromotionManagerDisplay.ApplyPromotionalCodeButton));
-             }
- 
+                 user.WaitsUntil(Appearance.Of(Cart.SubmitOrderButtonLink.SubmitCartOrderButton), IsEqualTo.True());
-             user.AttemptsTo(Waiting.InSeconds(1));
+             user.WaitsUntil(Appearance.Of(paymentCreator.PaymentAmount), IsEqualTo.True());
-                 case CheckOutPaymentMethodType.PayPal:
-                     PayWithPayPal(user, paymentCreator);
-                     break;
-                 case CheckOutPaymentMethodType.WithoutPayment:
-                     return;
-                     else if (CartData.PaymentMethod.Contains("Check", StringComparison.OrdinalIgnoreCase) || (CartData.PaymentMethodType.Contains("Check", StringComparison.OrdinalIgnoreCase)))
+                     else if (CartData.PaymentMethodType.Contains("Check"))
-                     else if (CartData.PaymentMethodType.Contains("Credit", StringComparison.OrdinalIgnoreCase))
+                     else if (CartData.PaymentMethodType.Contains("Credit"))
-             if (context.IsV10)
+             if(context.IsV10)
+                 
-             if (!CartData.PostalCode.IsNullOrEmpty() && creditCard)
+             if (!(CartData.PostalCode is {Length:>0}) && creditCard)
-                 if (user.AsksFor(Appearance.Of(paymentCreator.CCPostalCode)))
-         /// Pays with PayPal
-         /// </summary>
-         /// <param name="user">Screenplay user</param>
-         /// <param name="paymentCreator">Payment creator page</param>
-         public void PayWithPayPal(IActor user, PaymentCreator paymentCreator)
-         {
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(paymentCreator.CheckoutWithPayPalButton));
- 
-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.EmailInput), IsEqualTo.True());
-             user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.EmailInput, _payPalUserEmail));
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.NextButton));
- 
-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.PasswordInput), IsEqualTo.True());
-             user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.PasswordInput, _payPalUserPassword));
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.LoginButton));
- 
-             user.WaitsUntil(Existence.Of(PayPalCheckOutPage.CompletePurchaseButton), IsEqualTo.True());
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.CompletePurchaseButton));
-         }
- 
-         /// <summary>
-             if (string.IsNullOrEmpty(context.GetData<string>("FullName")))
+             if(string.IsNullOrEmpty(context.GetData<string>("FullName")))
+ 
-             DebitCard,
+             DebitCard
-             PayPal,
-             WithoutPayment,
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/User/SignIn.cs)
-             LicenseServerPage = new LicenseServerPage();
+         private string Password;
-         private LicenseServerPage LicenseServerPage { get; set; }
-         public static SignIn ToLicenseServer(string userRole ="License Administrator") => new SignIn(LogInType.UserRole, userRole);
-             if(LogInTypeValue.Equals(LogInType.UserRole))
-                 context.SetContextByRole(Site.ToString(), UserNameValue);
-             else
+             context.Website = Site.ToString();
+             context.UserName = LogInTypeValue.Equals(LogInType.UserRole) ? SelectUser() : UserNameValue;
+             Password = "demo123";
-                 context.SetContextByName(Site.ToString(), UserNameValue);
- 
-             if(UserNameValue != "License Administrator") 
-             {
-                     user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInPassword, context.Password));
+                 user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInPassword, Password));
-                     user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInPassword, context.Password));
+                 user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInPassword, Password));
-                     user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInPassword, context.Password));
+                 user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInPassword, Password));
-                 user.AttemptsTo(Waiting.ForPageReload()); // Wait for iMIS to fully authenticate
-                     user.WaitsUntil(Appearance.Of(AccountArea.PartyName), IsEqualTo.True());
-             //condition to access license server site. "License Administrator" role value is provided in feature file and saved in Users.json
-             else
+ 
+ 
+         public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)
-                 user.AttemptsTo(Browse.ToUrl(context.LicenseUrl.ToString()));
+             user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Be(LogInTypeValue.ToString());
-                 user.AttemptsTo(SendKeys.To(LicenseServerPage.User, context.UserName));
-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));
-                 user.AttemptsTo(SendKeys.To(LicenseServerPage.Password, context.Password));
-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));
-                 user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));
-             }
-         public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)
+         private string SelectUser()
-             user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Be(LogInTypeValue.ToString());
+             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");
+             var userSelection = userList.Where(t => t.Role.Equals(UserNameValue));
+             int userCount = userSelection.Count();
+             var user = userSelection.ElementAt(Random.Next(userSelection.Count()));
+             return user.UserName;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Finance/Settings/SelectDefaultCountryCurrency.cs)
-             user.WaitsUntil(Text.Of(FinanceGeneralSettingsPage.PageTitle),IsEqualTo.Value("Accounting settings"));
+             user.AsksFor(Text.Of(FinanceGeneralSettingsPage.PageTitle)).Should().Be("Accounting settings");
+                 if(CurrencyType.ToString()=="Other")
+                 {
+                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox,"CRC").UsingClearMethod());
+                 }
-             user.WaitsUntil(SelectedOptionText.Of(FinanceGeneralSettingsPage.DefaultCountryCurrency),
+             user.AsksFor(SelectedOptionText.Of(FinanceGeneralSettingsPage.DefaultCountryCurrency)).Should().Be(CurrencyType.GetDisplayName());
-                 IsEqualTo.Value(CurrencyType.GetDisplayName()));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Finance/Settings/SelectDefaultCountry.cs)
-             user.WaitsUntil(Text.Of(ContactGeneralSettingsPage.PageTitle),IsEqualTo.Value("Contact settings"));
+             user.AsksFor(Text.Of(ContactGeneralSettingsPage.PageTitle)).Should().Be("Contact settings");
-             user.WaitsUntil(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry),IsEqualTo.Value(CountryName));
+             user.AsksFor(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)).Should().Be(CountryName);
-             user.WaitsUntil(Text.Of(ContactGeneralSettingsPage.PageTitle), IsEqualTo.Value("Contact settings"));
-             user.WaitsUntil(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry), IsEqualTo.Value(CountryName));
+             user.AsksFor(Text.Of(ContactGeneralSettingsPage.PageTitle)).Should().Be("Contact settings");
+             user.AsksFor(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)).Should().Be(CountryName);
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Events/RegisterSomeoneElse.cs)
-             if (context.IsV10)
-             {
-             }
+ 
-                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellAnyElementWithText(EventData.RegistrationOption)));
+                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellInputWithText(EventData.RegistrationOption)));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Events/GoToStarterEvent.cs)
-         private new SitesToBrowse Site { get; set; }
+         private SitesToBrowse Site { get; set; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Events/CreateEvent.cs)
-             if (context.IsV10)
+             if(context.IsV10)
+             string randNumber = TestHelper.GenerateRandomString(5);
-             {
-                 var eventCode = TestHelper.GenerateRandomString(5);
-                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.Code, eventCode));
+                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.Code, randNumber));
+             user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventName, "Copy of " + CreateEventData.EventName).UsingClearMethod());
+             context.UpsertData("Event Name", "Copy of " + CreateEventData.EventName);
-                 context.UpsertData("ItemCode", eventCode);
-             }
- 
-             var eventName = $"Copy of {CreateEventData.EventName}";
-             user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventName, eventName).UsingClearMethod());
-             context.UpsertData("Event Name", eventName);
-             if (CreateEventData.HasPricingData)
-             {
-                 user.AttemptsTo(Click.On(EditEventPage.EventEdit.Tabs.GetTab("Pricing")));
-                 user.WaitsUntil(UserMessageState.HasAny().WithMessage("The event has been saved"), IsEqualTo.True());
-                 if (CreateEventData.TaxByAddress)
-                     user.AttemptsTo(Check.On(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxByAddressCheckBox));
- 
-                 if (!string.IsNullOrEmpty(CreateEventData.TaxCode))
-                     user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxAuthorityDropDown, CreateEventData.TaxCode));
- 
-                 if (!string.IsNullOrEmpty(CreateEventData.VatExceptionRule))
-                     user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.VatRuleSetDropDown, CreateEventData.VatExceptionRule));
- 
-                 if (CreateEventData.HasRegistrationOptionData)
-                 {
-                     CreateEventFunction(user, EventDashboardPage.FunctionEdit.AddNewRegistrationOptionLink,
-                         CreateEventData.RegistrationOptionDefaultRegularPrice,
-                         CreateEventData.IsRegistrationOptionTaxable,
-                         CreateEventData.IsRegistrationOptionPstEnabled,
-                         CreateEventData.IsRegistrationOptionGstHstEnabled,
-                         CreateEventData.RegistrationOptionTaxCode);
-                 }
-             }
- 
- 
-             if (CreateEventData.HasProgramItemData)
-             {
-                 CreateEventFunction(user, EventDashboardPage.EventProgramDisplay.AddNewProgramItemLink,
-                     CreateEventData.ProgramItemDefaultRegularPrice,
-                     CreateEventData.IsProgramItemTaxable,
-                     CreateEventData.IsProgramItemPstEnabled,
-                     CreateEventData.IsProgramItemGstHstEnabled,
-                     CreateEventData.ProgramItemTaxCode);
-             }
-         }
- 
-         /// <summary>
-         /// Creates event function such as program item or registration option
-         /// </summary>
-         /// <param name="user"></param>
-         /// <param name="addFunctionLink"></param>
-         /// <param name="defaultRegularPrice"></param>
-         /// <param name="isTaxable"></param>
-         /// <param name="isPstEnabled"></param>
-         /// <param name="isGstHstEnabled"></param>
-         /// <param name="taxCode"></param>
-         private void CreateEventFunction(IActor user, IWebLocator addFunctionLink, double defaultRegularPrice, bool isTaxable, bool isPstEnabled, bool isGstHstEnabled, string taxCode)
-         {
-             user.AttemptsTo(Click.On(addFunctionLink));
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
-             user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextCode, TestHelper.GenerateRandomString(5)));
-             user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextName, TestHelper.GenerateRandomString(5)));
- 
-             if (defaultRegularPrice != 0)
-             {
-                 user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Pricing")));
-                 user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventFunctionPricing.TextPriceStandardRegular, defaultRegularPrice.ToString()));
-             }
- 
-             if (isTaxable || isPstEnabled || isGstHstEnabled || !string.IsNullOrEmpty(taxCode))
-             {
-                 user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Accounting")));
- 
-                 var taxInfo = EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo;
-                 if (isTaxable)
-                     user.AttemptsTo(Check.On(taxInfo.TaxableCheckBox));
- 
-                 if (isGstHstEnabled)
-                     user.AttemptsTo(Check.On(taxInfo.CheckBoxGstHst));
- 
-                 if (isPstEnabled)
-                     user.AttemptsTo(Check.On(taxInfo.CheckBoxPst));
- 
-                 if (!string.IsNullOrEmpty(taxCode))
-                     user.AttemptsTo(SetWhenProvided.DropDown(taxInfo.TaxAuthorityDropDown, taxCode));
-             }
- 
-             user.AttemptsTo(ClickCommandButton.SaveAndClose());
-             user.WaitsUntil(Appearance.Of(EventDashboardPage.FunctionEdit.TextCode), IsEqualTo.False());
-             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Events/RegisterForAnEvent.cs)
-         public static RegisterForAnEvent ToEvent(EventData eventData) => new(eventData);
+         public static RegisterForAnEvent ToEvent(EventData eventData) => new (eventData);
+ 
- 
-                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellAnyElementWithText(EventData.RegistrationOption)));
- 
+                 user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.CellInputWithText(EventData.RegistrationOption)));
+             if(EventData.Programs.Count >= 1)
-             if (EventData.AddFirstProgram)
-                 EventData.Programs = new List<string> { user.WaitsUntil(Text.Of(EventDisplayPage.EventProgramDisplay.FirstProgramName), IsNotEqualTo.Value("")) };
- 
-             if (EventData.Programs.Any())
-                     var itemProgram = EventDisplayPage.EventProgramDisplay.AddProgram(program);
-                     user.WaitsUntil(Appearance.Of(itemProgram), IsEqualTo.True());
-                     user.AttemptsTo(Click.On(itemProgram));
- 
+                     if (user.AsksFor(Appearance.Of(EventDisplayPage.EventProgramDisplay.AddProgram(program))))
+                         user.AttemptsTo(Click.On(EventDisplayPage.EventProgramDisplay.AddProgram(program)));
+                     else
+                         throw new ElementNotVisibleException();
-             var yesNoQuestion = EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion);
+             user.AttemptsTo(SetWhenProvided.CheckBox(EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion), true));
-             if (user.AsksFor(Existence.Of(yesNoQuestion)))
-                 user.AttemptsTo(Check.On(yesNoQuestion));
- 
-                 NavigateToEvent(user, context);
+                 NavigateToEvent(user,context);
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Interactions/Membership/JoinNow.cs)
-         private JoinNow(JoinBillingCyclesType billingCycleType, JoinNowData joinNowData = null)
+         private JoinNow(JoinBillingCyclesType billingCycleType)
+         {
+             BillingCycleType = billingCycleType;
+             AccountPageStaff = new AccountPageStaff();
+             JoinNowPage = new JoinNowPage();
+         }
+ 
+         private JoinNow(JoinBillingCyclesType billingCycleType, JoinNowData joinNowData)
-             JoinBillingCyclesTypesCodes = InitializeJoinBillingCyclesTypesCodes();
-         private Dictionary<JoinBillingCyclesType, string> JoinBillingCyclesTypesCodes { get; }
-         /// <param name="joinBillingType"></param>
-         /// <param name="joinNowData">JoinNowData is required for this type</param>
- 
-         /// <summary>
-         /// Initialization with JoinNowData
-         /// </summary>
-         /// <param name="data"></param>
-         /// <returns></returns>
-         public JoinNow WithJoinNowData(JoinNowData data)
-         {
-             JoinNowData = data;
-             return this;
-         }
-             try
-             {
-                 var memberTypeLocator = AccountPageStaff.ContactProfile.ContactStatus.MemberType;
+             if (user.AsksFor(Appearance.Of(AccountPageStaff.ContactProfile.ContactStatus.MemberType)))
+                 memberType = user.AskingFor(Text.Of(AccountPageStaff.ContactProfile.ContactStatus.MemberType));
+             else memberType = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("Type")));
-                 user.WaitsUntil(Appearance.Of(memberTypeLocator), IsEqualTo.True(), timeout: 5);
-                 memberType = user.AsksFor(Text.Of(memberTypeLocator));
-             }
-             catch (WaitingException)
-             {
-                 memberType = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("Type")));
-             }
- 
-             {
-                 if (Site == SitesToBrowse.Mbrr)
-                 {
-                     SelectBillingCycleInMemberSite(user);
-                 }
-                 else
-                 }
- 
-                 if (JoinNowData?.ItemNames?.Any() ?? false)
-                     SetupItems(user);
- 
-                     bool finishedUpdating = false;
-                     do
+                     // jkh 
+                     for (var i=0; i<10; i++)
-                         if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) > 0) finishedUpdating = true;
-                     } while (finishedUpdating == false);
+                         if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) > 0) break;
+                         if (i==10) {
+                             throw new Exception("Unit price is 0");
+                         }
+                         System.Threading.Thread.Sleep(1000);
+                     };
-                 user.WaitsUntil(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel), IsNotEqualTo.Value(""))
-                     .Should().BeOneOf("This item has been added to your cart", "Your cart has been updated");
+                 string message = user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel));
+                 if (message!="This item has been added to your cart" && message!="Your cart has been updated") throw new InvalidElementStateException();
- 
-             }
-         }
- 
-         /// <summary>
-         /// Navigate billing cycle on Member site
-         /// </summary>
-         /// <param name="user"></param>
-         private void SelectBillingCycleInMemberSite(IActor user)
-         {
-             user.AttemptsTo(Browse.InMemberSite(JoinNowPage.GetUrl(JoinBillingCyclesTypesCodes[BillingCycleType])));
-         }
- 
-         /// <summary>
-         /// Setup Items when place your order
-         /// </summary>
-         /// <param name="user"></param>
-         private void SetupItems(IActor user)
-         {
-             var dynamicProductDisplay = JoinNowPage.MOO.DynamicProductDisplay;
- 
-             foreach (var item in JoinNowData.ItemNames)
-             {
-                 user.AttemptsTo(Check.On(dynamicProductDisplay.GetItemCheckBoxByText(item)));
-                 if (!string.IsNullOrEmpty(JoinNowData.AmountTo))
-                     user.AttemptsTo(SendKeys.To(dynamicProductDisplay.GetAmountTextBoxByText(item), JoinNowData.AmountTo));
-         /// Initialize ProductCodes for JoinBillingCyclesTypes
-         /// </summary>
-         private static Dictionary<JoinBillingCyclesType, string> InitializeJoinBillingCyclesTypesCodes()
-         {
-             return new Dictionary<JoinBillingCyclesType, string>
-             {
-                 { JoinBillingCyclesType.RegularMembershipFees, "REGULAR_MEMBERSHIP_FEES" },
-                 { JoinBillingCyclesType.NonMemberSubscriptions, "Non-Member_Subscriptions" },
-             };
-         }
- 
-         /// <summary>
-             YoungProfessionalMembership,
+             YoungProfessionalMembership
-             NonMemberSubscriptions,
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/PanelDefinition/MembershipPanel.cs)
-         public IWebLocator JoinDate => LocatorByXPath("JoinDate");
-         public IWebLocator PaidThrough => LocatorByXPath("PaidThrough");
-         public IWebLocator RenewedThru => LocatorByXPath("RENEWED_THRU");
+         public BusinessCalendar2 JoinDate => new BusinessCalendar2("JoinDate");
+         public BusinessCalendar2 PaidThrough => new BusinessCalendar2("PaidThrough");
+         public BusinessCalendar2 RENEWED_THRU => new BusinessCalendar2("RENEWED_THRU");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Controls/Basic/ListView.cs)
+ 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Controls/Angular/AngularControl.cs)
-     public class ReceiptMessage: AngularControl
-     {
-         public ReceiptMessage(string parentXPath): base("div", parentXPath)
-         {
- 
-         }
- 
-         public new IWebLocator GetLocator(string message) => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage'][contains(text(),'{message}')]");
-         public new IWebLocator GetLocator() => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage']");
-     }
- 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadGrid.cs)
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator Cell(string text, bool link = false, string postXPath = "", string tag = "id", string tableSection = "tbody", bool exactMatch = false) =>
-             WebLocator.L("SelectedItem locator", GetTableXPath(GetId(GridIdSuffix), Predicate("text()", text, exactMatch), link, postXPath, tag, tableSection));
+         public IWebLocator Cell(string text, bool link = false, string postXPath = "", string tag ="id", string tableSection = "tbody") =>
+             WebLocator.L("SelectedItem locator", GetTableXPath(GetId(GridIdSuffix), $"contains(text(),'{text}')", link, postXPath, tag, tableSection));
-         /// Returns a weblocator of cells which matches the given text
+         /// Returns a weblocator of cells which contain the given text
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator TextInTable(string text, bool exactMatch = false) => Cell(text, exactMatch);
+         public IWebLocator TextInTable(string text) => Cell(text);
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator LinkInTable(string text, bool exactMatch = false) => Cell(string.Empty, true, $"[{Predicate("text()",text,exactMatch)}]");
+         public IWebLocator LinkInTable(string text) => Cell(string.Empty, true, $"[contains(text(),'{text}')]");
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator DeleteButtonByLink(string linkText, bool exactMatch = false) => LocatorForXpath($"//tr[td[a[{Predicate("text()",linkText,exactMatch)}]]]//td//input");
+         public IWebLocator DeleteButtonByLink(string linkText) => LocatorForXpath($"//tr[td[a[contains(text(),'{linkText}')]]]//td//input");
-         /// Returns the IWebLocator of the edit button for a specific row in the Rad Grid which
-         /// contains the specified link text.
-         /// </summary>
-         /// <param name="linkText">Link text to find row to edit</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         /// <returns></returns>
-         public IWebLocator EditButtonByLink(string linkText, bool exactMatch = false) => LocatorForXpath($"//tr[td[a[{Predicate("text()", linkText, exactMatch)}]]]//td//input");
- 
-         /// <summary>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator SpanInTable(string text, bool exactMatch = false) => Cell(string.Empty, postXPath: $"//span[{Predicate("text()",text,exactMatch)}]");
+         public IWebLocator SpanInTable(string text) => Cell(string.Empty, postXPath: $"//span[contains(text(),'{text}')]");
-         /// Returns the cell with the provided data
+         /// Returns the IWebLocator of the edit button for a specific row in the Rad Grid which
+         /// contains the specified link text.
-         /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>
+         /// <param name="linkText">Link text to find row to edit</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator CellAnyElementWithText(string text, bool exactMatch = false)
+         public IWebLocator EditButtonByLink(string linkText) => LocatorForXpath($"//tr[td[a[contains(text(),'{linkText}')]]]//td//input");
-         {
-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]//parent::*//input");
-         }
-         /// <param name="postXPath">post pends xpath to the default table row/column</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator CellWithText(string text, string postXPath = "", bool exactMatch = false)
+         public IWebLocator CellInputWithText(string text)
-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]{postXPath}");
+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]//parent::*//input");
-         /// Returns the cell with the provided data in the provided element type
+         /// Returns the cell with the provided data
-         /// <param name="element">The element you want to search with, for example "input"</param>
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator CellInputWithText(string text, string postXPath = "", bool exactMatch = false)
+         public IWebLocator CellWithText(string text, string postXPath = "")
-             return Cell(string.Empty, false, $"//input[{Predicate("value", text, exactMatch)}]{postXPath}");
+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]{postXPath}");
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator CellLinkWithText(string text, bool exactMatch = false)
+         public IWebLocator CellLinkWithText(string text)
-             return Cell(string.Empty, false, $"//a[{Predicate("text()", text, exactMatch)}]");
+             return Cell(string.Empty, false, $"//a[contains(text(),'{text}')]");
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator CellSpanLinkWithText(string text, bool exactMatch = false)
+         public IWebLocator CellSpanLinkWithText(string text)
-             return Cell(string.Empty, false, $"//span[{Predicate("text()", text, exactMatch)}]");
+             return Cell(string.Empty, false, $"//span[contains(text(),'{text}')]");
-         /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>
-         public IWebLocator SelectLinkWithRowText(string text, bool exactMatch = false)
+         public IWebLocator SelectLinkWithRowText(string text)
-             return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]//ancestor::tr//a");
+             return Cell(string.Empty, false, $"//*[contains(text(),'{text}')]//ancestor::tr//a");
-             WebLocator.L("RadGrid Pager", GetTableXPath(GetId(GridIdSuffix), "", false, $"//div[{Predicate("class", "rgNumPart")}]/a[{pageNumber}]", "id", tableSection));
+             WebLocator.L("RadGrid Pager", GetTableXPath(GetId(GridIdSuffix), "", false, $"//div[contains(@class,'rgNumPart')]/a[{pageNumber}]", "id", tableSection));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadTab.cs)
-         private readonly int _index;
-         private readonly string _tabName;
+         private int _index;
+         public RadTab(int index, string name) : base(name)
- 
-         public RadTab(int index, string tabStripName, string tabName) : base(tabStripName)
-             _tabName = tabName;
- 
-         public IWebLocator TabByName => GetLocatorById("", postXPath: $"/div/ul/li/a/span/span/span[text()='{_tabName}']");
+         public IWebLocator TabByName => GetLocatorById("", postXPath: $"/div/ul/li/a/span/span/span[text()='{Name}']");
-                 base.Add(tabName, new RadTab(_i++, Name, tabName));
+                 base.Add(tabName, new RadTab(_i++, Name));
-             base.Add(key, new RadTab(_i++, Name, key));
+             base.Add(key, new RadTab(_i++, Name));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadTabStrip.cs)
- 
-         }
- 
-         public IWebLocator GetDynamicTab(string tabName)
-         {
-             return new RadTab(0, Name, tabName).TabByName;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/TestMethodBase.cs)
-             var user = new ImisUser(name, _context.Logger());
+             var user = new ImisUser(name, new ConsoleLogger());
-             var user = new ImisUser(name, _context.Logger());
+             var user = new ImisUser(name, new ConsoleLogger());
-             var user = new ImisUser(name, _context.Logger());
+             var user = new ImisUser(name, new ConsoleLogger());
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/NavigationTestMethods.cs)
-             user.AttemptsTo(SwitchWindow.To(windowHandles[1]));
-             user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);
+             user.AttemptsTo(Waiting.ForRecaptcha());
+             //user.AttemptsTo(SwitchWindow.To(windowHandles[1]));
+             //user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Commerce/ProductTestMethods.cs)
-         public ProductTestMethods(IWebDriver driver, IAsiWebContext context, ProductContext productContext) : base(driver, context)
+         public ProductTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)
+             ProductDisplayPage = new ProductDisplayPage();
-             CartTestMethods = new CartTestMethods(driver, context);
-             ProductContext = productContext;
+             OrderConfirmation = new OrderConfirmation();
+             CartTestMethods = new CartTestMethods(driver,context);
+         public AddProductPage AddProductPage { get; set; }
+         public ProductDisplayPage ProductDisplayPage { get; set; }
-         public ProductContext ProductContext { get; set; }
-             user.AttemptsTo(CreateProduct.SimpleItem(createProductData, ProductContext));
+             user.AttemptsTo(CreateProduct.SimpleItem(createProductData));
-         }
- 
-         public void CreateProductWithItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(CreateProduct.CollectionOfItems(createProductData, productItemsData, ProductContext));
-         }
- 
-         public void VerifyProductWasAdded()
-         {
-             var user = LoggedInUser();
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
- 
-             user.AsksFor(Text.Of(productDisplay.ProductTitle)).Should().Be(ProductContext.Name);
-             user.AsksFor(Text.Of(productDisplay.ProductDescription)).Should().Be(ProductContext.Description);
-             if (ProductContext.ContainsInventory)
-                 user.AsksFor(Text.Of(productDisplay.InventoryLabel)).Should().Be("This item is not currently available.");
-         }
- 
-         public void VerifyProductIsAvailable()
-         {
-             var user = LoggedInUser();
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
- 
-             user.AttemptsTo(Browse.InImis(ItemPage.WithBaseUrlParameters(ProductContext.Code).BaseUrl));
-             user.WaitsUntil(Text.Of(productDisplay.InventoryLabel), IsNotEqualTo.Value("This item is not currently available."));
-                 var simpleProductDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
+                 user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));
-                 user.AttemptsTo(SendKeys.To(simpleProductDisplay.QuantityTextBox, cartData.Quantity.ToString()));
-                 user.AttemptsTo(Click.On(simpleProductDisplay.AddToCart));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Commerce/CartTestMethods.cs)
-         public void Checkout(CartData cartData, bool shouldSubmitCart = true)
+         public void Checkout(CartData cartData)
-             var checkOut = cartData.PaymentMethod switch
+             user.AttemptsTo(CheckOut.WithDefaultPayment(cartData));
-             {
-                 "PayPal" => CheckOut.WithPayPal(),
-                 "Main Checking Account" => CheckOut.WithMainCheckingAccount(cartData),
-                 "Without payment" => CheckOut.WithoutPayment(cartData),
-                 _ => CheckOut.WithDefaultPayment(cartData),
-             };
-             checkOut = shouldSubmitCart ? checkOut : checkOut.SkipSubmitOrderButton();
- 
-             user.AttemptsTo(checkOut);
-                 user.AsksFor(Appearance.Of(Cart.ShoppingCart.ItemGrid.CellAnyElementWithText(cList.CartItem))).Should().BeTrue();
+                 user.AsksFor(Appearance.Of(Cart.ShoppingCart.ItemGrid.CellInputWithText(cList.CartItem))).Should().BeTrue();
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Settings/LicenseManagementTestMethods.cs)
-         private LicenseServerPage LicenseServerPage { get; set; }
-         private UpsertLicenseModal UpsertLicenseModal { get; set; }
-         private UpsertLicenseIssuedModal UpsertLicenseIssuedModal { get; set; }
-             LicenseServerPage = new LicenseServerPage();
-             UpsertLicenseModal = new UpsertLicenseModal();
-             UpsertLicenseIssuedModal = new UpsertLicenseIssuedModal();
-         }
- 
-         public void VerifyLicenseServerPageTitle()
-         {
-             var user = User("LicenseManager");
-             user.AsksFor(Title.OfPage()).Should().Be("Index - Asi License Server");
-         }
- 
-         public void CreateNewLicense(string licenseProduct, string licenseType)
-         {
-             var user = User("LicenseManager");          
-             var clientName = licenseProduct + " " + TestHelper.GenerateRandomString(3);
-             //Storing the randomly generated value to the data storage and use it  the test method later 
-             _context.DataStorage.Add("ClientName",clientName);
-             _context.DataStorage.Add("LicenseProduct", licenseProduct);
- 
-             user.AttemptsTo(Click.On(LicenseServerPage.AddClientButton));
-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientName, clientName));
-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientID, TestHelper.GenerateRandomNumber(10,1000).ToString()));
-             user.AttemptsTo(SendKeys.To(UpsertLicenseModal.SerialNumber, TestHelper.GenerateRandomNumber(100,5000).ToString()));
-             user.AttemptsTo(Select.ByText(UpsertLicenseModal.Region,"United States"));
-             if (licenseProduct == "iMIS EMS")
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseProduct));
-             else if(licenseProduct == "iMIS 100")                
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.ProfessionalProduct));
-             else
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseOnPremiseProduct));
-             //Select License Type
-             if (licenseType == "Production")
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.ProductionLicense));
-             else if( licenseType == "Test")
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.TestLicense));
-             else
-                 user.AttemptsTo(Click.On(UpsertLicenseModal.DemoLicense));
-             user.AttemptsTo(Click.On(UpsertLicenseModal.SaveAndCloseButton));
- 
-         }
- 
-         public void VerifyLicenseCreation(string licenseProduct, string licenseType)
-         {
-             var user = LoggedInUser();
-             var clientName = _context.DataStorage["ClientName"].ToString();
-             user.AsksFor(Text.Of(LicenseServerPage.LicenseNameLocator(clientName))).Should().Be(clientName);
-             user.AsksFor(Text.Of(LicenseServerPage.LicenseProductLocator)).Should().Be(licenseProduct);
-             user.AsksFor(Text.Of(LicenseServerPage.LicenseUseLocator)).Should().Be(licenseType);
-         }
- 
-         public void DeleteLicense()
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Click.On(LicenseServerPage.EditButton));
-             user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteButton));
-             user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteConfirmationButton));
- 
-         }
- 
-         public void VerifyLicenseDeletion()
-         {
-             var user = LoggedInUser();
-             var clientName = _context.DataStorage["ClientName"].ToString();
-             user.WaitsUntil(Appearance.Of(LicenseServerPage.SuccessfulDeleteAlert(clientName)), IsEqualTo.True());
-         }
- 
-         public void AddLicenseFeatures()
-         {
-             var user = LoggedInUser();
-             var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();
- 
-             user.AttemptsTo(Click.On(UpsertLicenseModal.AddNewLicenseButton));
-             foreach (var feature in UpsertLicenseIssuedModal.LegacyAndCommonFeatures(licenseProduct))
-             {
-                 user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());
-                 user.AttemptsTo(Click.On(feature));
-             }
-             user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.SelectAllPackage));
-             user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.AddAndCloseButton));
-         }
- 
-         public void VerifyActiveLicenseCreation()
-         {
-             var user = LoggedInUser();
-             var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();
- 
-             user.WaitsUntil(Existence.Of(UpsertLicenseModal.ActiveLicense), IsEqualTo.True());
-             user.WaitsUntil(Existence.Of(UpsertLicenseModal.LicensedFeatures), IsEqualTo.True());
-             foreach (var feature in UpsertLicenseModal.SelectAllFeatures(licenseProduct))
-             {
-                 user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());
-             }
- 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Settings/SettingsTestMethods.cs)
+ 
+ 
+ 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Settings/Finance/FinanceSettingsTestMethods.cs)
-                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, Keys.Tab));
+                     user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, Keys.Enter));
-                     user.WaitsUntil(Text.Of(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBoxRequiredValidator), ContainsSubstring.Text("currency"));
-         }
- 
-         public void SelectBatchMode(string BatchModeSelection)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));
-             user.AttemptsTo(SetWhenProvided.DropDown(FinanceGeneralSettingsPage.BatchModeSelectorDropDownList, BatchModeSelection));
-             user.AttemptsTo(ClickCommandButton.Save());
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Forms/FormTestMethods.cs)
-         public ContactData NewestContact { get; set; }
-             NewestContact = new ContactData();
-                     FormDesignerPage.FormManagerDragAndDrop.FormsElementTopLevelMenuItemExpander(nestedMenu) :
+                     FormDesignerPage.FormManagerDragAndDrop.FormsElementTopLevelMenuItemExpander(nestedMenu):
+         }
+ 
+         /// <summary>
+         /// Create a new form
+         /// </summary>
+         /// <param name="formName"></param>
+         public void CreateForm(string formName, bool requireApproval = false)
+         {
+             var user = LoggedInUser();
+             
+             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.RadGrid1.AddNew));
+             user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.FormNameInput, formName));
+             if (requireApproval)
+             {
+                 user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.FormApprovalCheckBox));
+             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.AddFormButton));
+         }
-         /// <param name="requireApproval"></param>
+         public void NavigateAndCreateForm(string formName, Table elements, bool requireApproval = false)
-         /// <param name="groupName">Create form in provided group, or General by default. Create group if not exists.</param>
-         public void NavigateAndCreateForm(string formName, Table elements, bool requireApproval = false, string groupName = null)
-             if (!string.IsNullOrEmpty(groupName))
-             {
-                 var groupTab = FormsLibraryPage.FormLibrary.FormGroupsTabStrip.GetDynamicTab(groupName);
-                 if (!user.AsksFor(Existence.Of(groupTab)))
-                 {
-                     user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.FormGroupsTabStrip.GetTabByName("+")));
-                     user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.GroupNameInput, groupName));
-                     user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.AddGroupButton));
-                 }
- 
-                 user.AttemptsTo(Click.On(groupTab));
-             }
- 
-             user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.RadGrid1.AddNew));
+             CreateForm(formName, requireApproval);
-             user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.FormNameInput, formName));
-             if (!string.IsNullOrEmpty(groupName))
-                 user.AsksFor(ValueAttribute.Of(FormsLibraryPage.FormLibrary.FormGroupCombobox)).Should().Be(groupName);
- 
-             if (requireApproval)
-                 user.AttemptsTo(Check.On(FormsLibraryPage.FormLibrary.FormApprovalCheckBox));
- 
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.AddFormButton));
-                 row.TryGetValue("Category", out var category);
-                 row.TryGetValue("Field", out var field);
+                 string category, field;
+                 row.TryGetValue("Category", out category);
+                 row.TryGetValue("Field", out field);
-             if (option.StartsWith("ddl") || option.StartsWith("dd"))
+             if (option.StartsWith("ddl"))
-         public void AddFormContent(string formName, bool createContact = false)
+         public void AddFormContent(string formName)
+             //user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));
-             if (createContact)
-                 user.AttemptsTo(Click.On(FormsConfigEdit.NewContactRecordCheckbox.Control));
+             // TODO!! jkh This cannot save and close because it is not give the publishing name, maybe other reasons?
+ 
-         /// <summary>
-         /// Verify form elements
-         /// </summary>
-         /// <param name="table"></param>
-         public void VerifyFormHasElements(Table table)
-         {
-             var user = LoggedInUser();
- 
-             foreach (var row in table.Rows)
-             {
-                 if (row.TryGetValue("Field", out var field))
-                     user.AsksFor(Existence.Of(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(field))).Should().BeTrue();
-             }
-         }
- 
-         public void SetFieldValues(string fieldType, Table fields, string randomizedString = null)
+         public void SetFieldValues(string fieldType, Table fields)
-                 if (value.Contains("Random") && randomizedString != null)
-                 {
-                     value = value.Replace("Random", randomizedString);
-                 }
-                 //clunky but sometimes we need to keep track of these
-                 if (field.ToLowerInvariant().Contains("email")) NewestContact.Email = value;
-                 if (field.ToLowerInvariant().Contains("lastname")) NewestContact.LastName = value;
-                 if (field.ToLowerInvariant().Contains("firstname")) NewestContact.FirstName = value;
-         }
- 
-         public void NavigateToMBRRContent(string pageName)
-         {
-             // Navigate to page
-             var user = User("Unauthenticated MBRR User");
-             user.AttemptsTo(Browse.InMemberSite(new ImisUrl(pageName + ".aspx")));
- 
-         public void VerifyValuesWithElements(Table table)
-         {
-             var user = LoggedInUser();
-             foreach (var row in table.Rows) {
-                 string given, expected;
-                 string field = "AStaticTestSource_Curr";
-                 given = row["Given"];
-                 expected = row["Expected"];
-                 user.AttemptsTo(SendKeys.To(FormsDisplay.TextInputField(field), given));
- 
-                 user.AttemptsTo(Click.On(FormsDisplay.TextBoxLabelField(field))); //we need to get out of the box so the waits until works
-                 user.WaitsUntil(HtmlAttribute.Of(FormsDisplay.ClientStateTextInputField(field), "value"), ContainsSubstring.Text(expected));
-                 user.AttemptsTo(Click.On(FormsDisplay.SubmitButton));
-             }
-         }
- 
-         public void VerifyElementLabelLocation(string inputType, string section, string location) 
-         {
-             var user = LoggedInUser();
-             if (inputType.Equals("checkbox"))
-                 user.AsksFor(Existence.Of(FormsDisplay.LabelLocation(section, location))).Should().BeTrue();
-         }
-         }
- 
-         public void VerifyCurrentUrl(string url)
-         {
-             _driver.Url.Should().Contain(url.ToString());
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Fundraising/EnterGiftsTestMethods.cs)
-             user.AttemptsTo(Waiting.InSeconds(2));
+             
-                 user.AttemptsTo(Waiting.InSeconds(2));
+                 Waiting.ForPageReload();
-                 user.AttemptsTo(Waiting.InSeconds(2));
+                 Waiting.ForPageReload();
+                 Waiting.ForPageReload();
-             var messageElement = GiftEntryPage.GiftEntryApp.UserMessage.GetLocator(message);
-             user.AttemptsTo(Wait.Until(Appearance.Of(messageElement), IsEqualTo.True()));
+             var test = GiftEntryPage.GiftEntryApp.UserMessage.GetLocator(message);
+             user.AttemptsTo(Wait.Until(Appearance.Of(test), IsEqualTo.True()));
-         public void VerifyGiftAppReceiptMessage(string message)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));//need to make sure focus isn't on date for message to appear
-             var messageElement = GiftEntryPage.GiftEntryApp.ReceiptMessage.GetLocator(message);
-             user.AttemptsTo(Wait.Until(Appearance.Of(messageElement), IsEqualTo.True()));
-         }
- 
-         }
- 
-         public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)
-         {
-             var user = LoggedInUser();
- 
-             user.WaitsUntil(FindGiftsPage.SelectAQuery.GetRowCount(), IsEqualTo.Value(1));
-             user.WaitsUntil(Text.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.Value(id));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Fundraising/GiftAidTestMethod.cs)
-             user.AttemptsTo(
+             user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.ContentItem(contentItem)));
-                 DoubleClick.On(ObjectBrowserComponents.ContentItem(contentItem)));
-             user.AttemptsTo(Waiting.ForPageReload());
+ 
-             user.AttemptsTo(Check.On(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox));
-             // Checking for an existing Declaration - Confirmation message if one exists 
+             if (!user.AsksFor(SelectedState.Of(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox)))
+                 user.AttemptsTo(Click.On(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox));
-             if (!user.AsksFor(Appearance.Of(DonateNowPage.GiftAidConfirmationMessage)))
-             {
-                 user.WaitsUntil(Existence.Of(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.MethodOfDeclaration), IsEqualTo.True());
-             }
+ 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Finance/FinanceTestMethods.cs)
-         private const string _creditValueKey = "creditValue";
-         private const string _totalRefundKey = "totalRefund";
-         private const string _availableCreditAlertText = "Available credit:";
- 
-             ItemPage = new ItemPage();
+             ProductDisplayPage = new ProductDisplayPage();
-             PaymentDetails = new PaymentDetails("TemplateBody");
-             BatchesPage = new BatchesPage();
-             BatchDetailPage = new BatchDetailPage();
-             PayCentralLivePage = new PayCentralLivePage();
-         private ItemPage ItemPage { get; }
+         private ProductDisplayPage ProductDisplayPage { get; }
-         private PaymentDetails PaymentDetails { get; }
-         private BatchesPage BatchesPage { get; }
-         private BatchDetailPage BatchDetailPage { get; }
-         private PayCentralLivePage PayCentralLivePage { get; set; }
-         }
- 
-         /// <summary>
-         /// Save available credit value to context
-         /// </summary>
-         public void SaveAvailableCreditValue()
-         {
-             var user = User("AdjustPaymentUser");
- 
-             GotoAccountArea(user);
-             _context.AddData(_creditValueKey, GetAvailableCreditValue(user));
-         }
- 
-         /// <summary>
-         /// Adjust payment based on what the user provides
-         /// </summary>
-         /// <param name="adjustmentType">Must be Unapply, Reverse. For Refund use RefundPayment method</param>
-         public void AdjustPayment(string adjustmentType)
-         {
-             var user = User("AdjustPaymentUser");
- 
-             FindPaymentAndStartAdjustment(user, adjustmentType);
-             if (adjustmentType == "Unapply")
-             {
-                 var totalAmount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.TotalAmountValueLabel), IsNotEqualTo.Value("")));
-                 var creditValue = _context.GetData<double>(_creditValueKey);
-                 _context.UpsertData(_creditValueKey, creditValue + totalAmount);
-             }
- 
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));
- 
-             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Payment successfully"), IsEqualTo.True());
-         }
- 
-         /// <summary>
-         /// Refund payment based on what the user provides
-         /// </summary>
-         /// <param name="paymentMethod"></param>
-         /// <param name="refundDataSet"></param>
-         public void RefundPayment(string paymentMethod, IEnumerable<RefundData> refundDataSet)
-         {
-             var user = User("AdjustPaymentUser");
- 
-             FindPaymentAndStartAdjustment(user, "Refund");
-             user.AttemptsTo(Select.ByValue(PaymentDetails.RefundDisplay.PaymentMethod, paymentMethod));
- 
-             foreach (var refundData in refundDataSet)
-             {
-                 var amount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.RefundDisplay.GetAmountTextbox(refundData.Description)),
-                     IsNotEqualTo.Value("")));
- 
-                 var amountToRefund = (refundData.PercentageFromAmountToRefund / 100) * amount;
- 
-                 user.AttemptsTo(SendKeys.To(PaymentDetails.RefundDisplay.GetAmountToRefundLabel(refundData.Description),
-                     amountToRefund.ToString("F2")));
-             }
- 
-             // update the total refund after the last value has been entered
-             user.AttemptsTo(Click.On(PaymentDetails.TotalAmountValueLabel));
- 
-             var totalRefund = double.Parse(user.AsksFor(Text.Of(PaymentDetails.TotalAmountValueLabel)));
-             _context.AddData(_totalRefundKey, totalRefund);
- 
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));
-         }
- 
-         /// <summary>
-         /// Verify available credit on account page
-         /// </summary>
-         public void VerifyThatCreditIsOpen()
-         {
-             var user = User("AdjustPaymentUser");
- 
-             user.AttemptsTo(Click.On(PaymentDetails.PayerLink));
-             GetAvailableCreditValue(user).Should().Be(_context.GetData<double>(_creditValueKey));
-         }
- 
-         /// <summary>
-         /// Verify that payment get status reversed
-         /// </summary>
-         public void VerifyThatPaymentIsReversed()
-         {
-             var user = User("AdjustPaymentUser");
- 
-             user.WaitsUntil(Text.Of(PaymentDetails.Status), IsEqualTo.Value("Reversed"));
-         }
- 
-         /// <summary>
-         /// Verify that payment is refunded
-         /// </summary>
-         public void VerifyThatPaymentIsRefund()
-         {
-             var user = User("AdjustPaymentUser");
-             var totalRefund = _context.GetData<double>(_totalRefundKey);
- 
-             user.WaitsUntil(UserMessageState.HasAny().WithMessage($"Refund successfully recorded in iMIS for {totalRefund:F2}"),
-                 IsEqualTo.True());
-             user.AttemptsTo(Waiting.InSeconds(1));
+ 
-             // fill in different payment method types
-             switch (cartData.PaymentMethodType) {
-                 case "Direct debit":
-                     user.AttemptsTo(SwitchFrame.To("iFrame"));
-                     user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.RoutingNumber), IsEqualTo.True());
-                     user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.RoutingNumber, cartData.RoutingNumber));
-                     user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.AccountNumber, cartData.AccountNumber));
-                     break;
-                 default:
+ 
-                     // check if postal code exists before adding a value to it
-                     if (user.AsksFor(Existence.Of(CartPage.PaymentDetails.CCPostalCode)))
-                     break;
+ 
-             };
-             user.AttemptsTo(Click.On(ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));
-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));
+             user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));
+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
-             user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60);
+             bool finishedProcessing = false;
+             do
+             {
+                 if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;
+             } while (finishedProcessing == false);
-             user.WaitsUntil(Text.Of(CreditInvoicePage.PastExportsGrid.Cell(1, 3)), IsEqualTo.Value(amount));
+             user.AsksFor(Text.Of(CreditInvoicePage.PastExportsGrid.Cell(1, 3))).Should().Be(Amount);
-             user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60);
+             bool finishedProcessing = false;
+             do
+             {
+                 if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;
+             } while (finishedProcessing == false);
-             GotoAccountArea(user);
+             // goto account area
+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));
+             user.AttemptsTo(Click.On(AccountArea.PartyName));
+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
-             GotoAccountArea(user);
+             // goto account area
+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));
+             user.AttemptsTo(Click.On(AccountArea.PartyName));
+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
- 
-             GotoAccountArea(user);
+             // goto account area
+             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));
+             user.AttemptsTo(Click.On(AccountArea.PartyName));
+             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
-         }
- 
-         /// <summary>
-         /// Post the first batch from grid
-         /// </summary>
-         public void PostTheFirstBatch()
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Browse.InImis(BatchesPage.BaseUrl));
- 
-             user.AttemptsTo(Click.On(BatchesPage.BatchList.SelectAQuery.Cell(1, 2, link: true)));
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.SetReadyOrOpenButton));
- 
-             user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Ready for review"));
- 
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.PostBatchButton));
-             user.AttemptsTo(AcceptAlert.ThatMustExist());
- 
-             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Batch submitted for posting."), IsEqualTo.True());
- 
-         /// <summary>
-         /// Verify batch is posted
-         /// </summary>
-         public void VerifyThatTheBatchIsPosted()
-         {
-             var user = LoggedInUser();
- 
-             // Refresh page to update status
-             user.AttemptsTo(Refresh.Browser());
-             user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Closed"));
-         }
- 
-         private void GotoAccountArea(ImisUser user)
-         {
-             user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));
-             user.AttemptsTo(Click.On(AccountArea.PartyName));
-             user.AttemptsTo(Click.On(AccountArea.MyAccountLink));
-         }
- 
-         private void FindPaymentAndStartAdjustment(IActor user, string adjustmentType)
-         {
-             var payerName = _context.GetData<string>("FullName");
- 
-             user.AttemptsTo(FindPayment.ByPayerName(payerName).WithStatus("Paid"));
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.AdjustPaymentButton));
-             user.AttemptsTo(Select.ByText(PaymentDetails.RefundDisplay.AdjustmentType, $"{adjustmentType} the payment"));
-         }
- 
-         private double GetAvailableCreditValue(IActor user)
-         {
-             var alert = AccountPageStaff.AlertDisplay.AlertContainer(_availableCreditAlertText);
-             try
-             {
-                 user.WaitsUntil(Appearance.Of(alert), IsEqualTo.True(), timeout: 5);
-             }
-             catch (WaitingException)
-             {
-                 return 0; // user doesn't have available credit
-             }
- 
-             return double.Parse(user.AsksFor(Text.Of(alert))
-                 .Replace(_availableCreditAlertText, "")
-                 .Trim());
-         }
- 
-         /// <summary>
-         /// Verify Pay Central Live payment exists from context last name and total amount
-         /// </summary>
-         public void VerifyPaymentPayCentralLive()
-         {
-             var user = LoggedInUser();
-             // get data to verify from context
-             var lastName = _context.GetData<string>("LastName");
-             var totalAmount = _context.GetData<string>("TotalAmount");
-             // navigate to Pay Central Live page
-             user.AttemptsTo(Browse.InImis(PayCentralLivePage.BaseUrl));
-             // find the payment via last name from context
-             user.WaitsUntil(Existence.Of(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox), IsEqualTo.True());
-             user.AttemptsTo(SendKeys.To(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox, lastName));
-             user.AttemptsTo(Click.On(PayCentralLivePage.DataVaultLiveDisplay.SearchButton));
-             //user.AttemptsTo(Waiting.InSeconds(2));
-             // verify Pay Central Live payment from context data exists. Date is assumed to be today
-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 2)), ContainsSubstring.Text(lastName));
-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 4)), ContainsSubstring.Text(DateTime.Now.ToShortDateString()));
-             user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 5)), ContainsSubstring.Text(totalAmount));
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Events/CreateNewEventTestMethods.cs)
+ 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Community/ContactTestMethods.cs)
-             AdjustMembershipFeesPage = new AdjustMembershipFeesPage();
-             FindContactsPage = new FindContactsPage();
-         public FindContactsPage FindContactsPage { get; set; }
-         public AdjustMembershipFeesPage AdjustMembershipFeesPage { get; set; }
-             if (!contactData.ExpectError)
-             {
-             }
+ 
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Email, randNumber + (contactData.Email ?? "test@imisdemo.com")));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Email, randNumber + contactData.Email));
-             user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.CountrySelect, contactData.Country ?? "Zambia"));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Address1, contactData.Address1 ?? "123 Some Street"));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.City, contactData.City ?? "Austin"));
+             user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.CountrySelect, contactData.Country));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Address1, contactData.Address1));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.City, contactData.City));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.PostalCode, contactData.PostalCode ?? "11111"));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Password, contactData.Password ?? "demo123"));
-             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.ConfirmPassword, contactData.Password ?? "demo123"));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.PostalCode, contactData.PostalCode));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Password, contactData.Password));
+             user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.ConfirmPassword, contactData.Password));
-         public void VerifyTheInvalidCharacterWarning()
-         {
-             var user = LoggedInUser();
-             user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterValidatorWarning), IsEqualTo.True());
-             user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterConfirmValidatorWarning), IsEqualTo.True());
- 
-         }
- 
-         }
-         public void PressAdjustMembershipButton()
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));
-             NavigateToTab("Membership");
-             user.AttemptsTo(Click.On(AccountPageStaff.MembershipTab.AdjustMembershipButton));
-         }
-         public void VerifyAdjustMembershipButtonHasOptions(string firstOption, string secondOption)
-         {
-             var user = LoggedInUser();
- 
-             var adjustFeesLink = AccountPageStaff.MembershipTab.AdjustFeesLink;
-             var cancelItemsLink = AccountPageStaff.MembershipTab.CancelItemsLink;
- 
- 
-             user.WaitsUntil(Existence.Of(adjustFeesLink),IsEqualTo.True());
-             user.AsksFor(Text.Of(adjustFeesLink)).Should().Be(firstOption);
-             user.WaitsUntil(Existence.Of(cancelItemsLink),IsEqualTo.True());
-             user.AsksFor(Text.Of(cancelItemsLink)).Should().Be(secondOption);
-         }
-         public void CancelFirstItem()
-         {
-             var user = LoggedInUser();
-             NavigateToMidtermChanges(AccountPageStaff.MembershipTab.CancelItemsLink);
-             var secondMembershipItemCancellationLink = AdjustMembershipFeesPage.SubscriptionsGrid.LinkInTable("Cancel");
- 
-             user.AttemptsTo(Click.On(secondMembershipItemCancellationLink));
-             user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));
-         }
-         public void AdjustFirstFee(int desiredAmount)
-         {
-             var user = LoggedInUser();
-             NavigateToMidtermChanges(AccountPageStaff.MembershipTab.AdjustFeesLink);
-             var firstMembershipItemAdjustmentAmount = AdjustMembershipFeesPage.SubscriptionsGrid.CellInputWithText("0.00",exactMatch: true);
- 
-             user.AttemptsTo(SendKeys.To(firstMembershipItemAdjustmentAmount, desiredAmount.ToString()));
-             user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));
-         }
-         public void NavigateToMidtermChanges(IWebLocator adjustmentLinkLocator)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));
-             PressAdjustMembershipButton();
-             user.AttemptsTo(Click.On(adjustmentLinkLocator));
-         public void VerifyUserMessage(string userMessage)
-         {
-             var user = LoggedInUser();
-             user.WaitsUntil(Text.Of(AdjustMembershipFeesPage.InfoMessage), ContainsSubstring.Text(userMessage));
-         }
- 
-         public void VerifyContactExists(string lastName, string firstName)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));
-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));
-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));
-             user.AttemptsTo(ClickCommandButton.Submit());
-             user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 2))).Trim().Should().Contain($"{firstName} {lastName}");
-         }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/RiSE/RiseTestMethods.cs)
-         public CommunitiesDashboardPage CommunitiesDashboardPage { get; set; }
-         public AccountArea AccountArea { get; set; }
-         public BigButtonPanelEdit BigButtonPanelEdit { get; set; }
-         public PublishServersListPage PublishServersListPage { get; set; }
-             CommunitiesDashboardPage = new CommunitiesDashboardPage();
-             AccountArea = new AccountArea("AccountArea");
-             BigButtonPanelEdit = new BigButtonPanelEdit();
-             PublishServersListPage = new PublishServersListPage();
-             user.AttemptsTo(Waiting.InSeconds(1));
+             user.AttemptsTo(Waiting.InSeconds(2));
-         }
- 
+             // jkh?? field is required but not filled, save fails
+            user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.PublishFileName, ContentName));
-         public void CreateMemberWebsiteContent(string ContentName)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));
-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("@")));
-             user.AttemptsTo(Waiting.ForPageReload());
-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Quick Start Sites")));
-             user.AttemptsTo(Waiting.ForPageReload());
-             user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Member Responsive")));
-             user.AttemptsTo(Waiting.ForPageReload());
-             user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));
-             user.AttemptsTo(Waiting.InSeconds(1));
-             user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.WebsiteContentItem), IsEqualTo.True());
-             user.AttemptsTo(Click.On(ObjectBrowserComponents.WebsiteContentItem));
-             user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));
-             user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.ContentTitle, ContentName));
-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName,exactMatch: true)))) 
-             {
-                 _context.UpsertData(panel.Name, panel);
-                 SourceAndPanelCleanup(panel.Name);
-             }
- 
-             if (!prop.PreDefinedValuesType.IsNullOrEmpty())
+             if (!string.IsNullOrEmpty(prop.PreDefinedValuesType))
-                 if (prop.Type.IsNullOrEmpty())
+                 if (string.IsNullOrEmpty(prop.Type))
-                 if (prop.Type.Equals("Text",StringComparison.OrdinalIgnoreCase) && prop.PreDefinedValuesType.IsNullOrEmpty())
+                 if (prop.Type.Equals("Text",StringComparison.OrdinalIgnoreCase) && string.IsNullOrEmpty(prop.PreDefinedValuesType))
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
-                 if (user.AsksFor(Existence.Of(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(coords[0], coords[1]))))
+                 if (user.AsksFor(
+                         Existence.Of(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(coords[0], coords[1]))))
+                 {
+                     user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method
+                 }
-             user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method
-             var windowHandles = _driver.WindowHandles;
-             var windowTitle = _driver.SwitchTo().Window(windowHandles[1]).Title;
+             // var windowHandles = _driver.WindowHandles;
+             // var windowTitle = _driver.SwitchTo().Window(windowHandles[1]).Title;
-             //Verify that correctly loaded browser tab title has correct Content Name
-             windowTitle.Should().Contain(ContentName);
+             // //Verify that correctly loaded browser tab title has correct Content Name
+             // windowTitle.Should().Contain(ContentName);
- 
-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))
-                 user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));
- 
-             if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName)))) 
-             {
-             }
-             user.AttemptsTo(SetWhenProvided.TextBox(PanelEditorConfigEdit.DescriptionTextArea, "Panel description text with <b>markup</b>"));
-             var shouldSendPropsToGrid = destination.IsNullOrEmpty() || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
+             var shouldSendPropsToGrid = destination is {Length:>0} || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);
-         }
- 
-         public void EditPanelSource(string attributeName, string propertyName, string panelName)
-         {
-             var panel = (PanelData)_context.DataStorage[panelName];
-             EditPanelDefinition(panel);
-             EditSourceProperty(attributeName, propertyName, panel.Source);
-         }
- 
-         private void EditSourceProperty(string attributeName, string propertyName, string sourceName)
-         {
-             var user = LoggedInUser();
- 
-             var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);
-             var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;
- 
-             OpenSourceProperties(sourceName);
- 
-             user.AttemptsTo(Click.On(pathToPropertyElement));
-             user.AttemptsTo(RightClick.On(pathToPropertyElement));
-             user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());
-             user.AttemptsTo(Waiting.InSeconds(1));
-             user.AttemptsTo(Click.On(pathToPropertyViewButton));
- 
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
- 
-             user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());
-             user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);
- 
-             if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))
-                 user.AttemptsTo(Check.On(PanelDesignerPage.LogAllChangesCheckBox));
- 
-             user.AttemptsTo(ClickCommandButton.Ok());
- 
-         }
- 
-         public void VerifyPropertyAttributeValue(string attributeName, string propertyName) 
-         {
-             var user = LoggedInUser();
- 
-             var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);
-             var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;
- 
-             user.AttemptsTo(SwitchFrame.ToParentFrame());
- 
-             user.AttemptsTo(Click.On(pathToPropertyElement));
-             user.AttemptsTo(RightClick.On(pathToPropertyElement));
-             user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());
-             user.AttemptsTo(Waiting.InSeconds(1));
-             user.AttemptsTo(Click.On(pathToPropertyViewButton));
- 
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
- 
-             user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());
-             user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);
- 
-             if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))
-                 user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.LogAllChangesCheckBox, "checked"));
- 
- 
-         public void VerifyPageConfigureProperties()
-         {
-             var user = LoggedInUser();
- 
-             user.AsksFor(Appearance.Of(StandaloneEditor.PanelDescription)).Should().BeTrue();
-             user.AsksFor(Text.Of(StandaloneEditor.PanelDescription)).Should().Contain("Panel description text with markup");
- 
-         public void NavigateToTheContentItemToEdit(Table table)
-         {
-             var basePage = ((string[])table.Rows[0].Values)[0];
- 
-             var user = LoggedInUser();
- 
-             if (basePage.Equals("CommunitiesDashboardPage")) 
-             {
-                 user.AttemptsTo(Browse.InStaffSite(CommunitiesDashboardPage.BaseUrl));
-             }
-             
-             if (user.AsksFor(Existence.Of(AccountArea.STEToggleOff)) == true)
-                 user.AttemptsTo(Click.On(AccountArea.STEToggleOff));
- 
-             var contentItemName = ((string[])table.Rows[0].Values)[1];
-             if (contentItemName.Equals("BigButtonPanelEdit"))
-             {
- 
-                 user.AttemptsTo(Click.On(PageUtilities.ConfigureButton("Big Button Panel")));
-                 user.AttemptsTo(SwitchFrame.ToGenericWindow());
- 
-                 user.AttemptsTo(Waiting.InSeconds(1));
-                 user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.AddButton));
-                 user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));
- 
-                 for (int i = 1; i <= 15; i++)
-                 {     
-                     user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));
-                     user.AttemptsTo(Waiting.InSeconds(1));
-                     user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item {i}"));
-                     user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTargetTextBox, $"http://{TestHelper.GenerateRandomString(10)}.org"));
-                     user.AttemptsTo(Click.On(BigButtonPanelEdit.InsertButton));
- 
-                     if (i < 15)
-                     {                       
-                         user.AttemptsTo(Waiting.InSeconds(1));
-                         user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));
-                         user.AttemptsTo(Waiting.InSeconds(1));
-                     }
-                 }
-             }
-         }
- 
-         public void VerifyContentItemCorrect()
-         {
-             var user = LoggedInUser();
- 
-             //This control is tall when the grid is populated and has postbacks
-             //and the page has to scroll back to the bottom each time so the wait times are needed.
- 
-             user.AttemptsTo(Waiting.InSeconds(2));
-             user.AttemptsTo(Click.On(BigButtonPanelEdit.EditButton));
- 
-             user.AttemptsTo(Waiting.InSeconds(2));
-             user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));
-             user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item Modified Test"));
-             user.AttemptsTo(Click.On(BigButtonPanelEdit.UpdateButton));
- 
-             user.AttemptsTo(Waiting.InSeconds(2));
-             user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.FirstPageButton));
-             user.AsksFor(Appearance.Of(PageBase.UIText("Item 1"))).Should().BeTrue();
- 
-             user.AttemptsTo(Waiting.InSeconds(2));
-             user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.ResultsGrid.LastPageButton));
-             user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.LastPageButton));
- 
-             user.AttemptsTo(Waiting.InSeconds(2));
-             user.AsksFor(Appearance.Of(PageBase.UIText("Item Modified Test"))).Should().BeTrue();
-         }
- 
-         public void NavigateToThePublishingServersPage() 
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InStaffSite(PublishServersListPage.BaseUrl));
-             user.WaitsUntil(Appearance.Of(PublishServersListPage.PublishingServersGrid.Grid), IsEqualTo.True());
-             user.WaitsUntil(Existence.Of(PageBase.PageTitle), IsEqualTo.True());
-         }
- 
-         public void VerifyPublishingServersGridLoads() 
-         {
-             var user = LoggedInUser();
-             user.AsksFor(Text.Of(PageBase.PageTitle)).Should().Be("Publishing servers");
-             user.AsksFor(Existence.Of(PublishServersListPage.AddServerLink));
-             user.AsksFor(Existence.Of(PublishServersListPage.PublishingServersGrid.CellLinkWithText("Gold publish server", exactMatch: true)));
-         }
-     }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/TestMethods/Authentication/SignInTestMethods.cs)
-             user.AttemptsTo(Waiting.ForPageReload());
-             TurnOffPageStatistics();
+             TurnOffPageStatisticsForVat();
+         public void TurnOffPageStatisticsForVat()
+         {
+             var user = User("TurnOffPageStatistics");
+             // if page turn statistics is on try to turn it off
+             try
+             {
+                 //if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))
+                   //  user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));
+             }
+             catch (NoSuchElementException)
+             {
+                 // if page turn stats does not exist or is already off do nothing
+             }
+             catch (StaleElementReferenceException)
+             {
+                 // if page turn stats does not exist or is already off do nothing
+             }
+         }
-                 if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))
-                     user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));
+              //   if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))
+              //     user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));
-             }
- 
+             catch (StaleElementReferenceException)
-         public void SignInToLicenseServer()
-             var user = User("SignInToLicenseServer");
-             user.AttemptsTo(SignIn.ToLicenseServer());
+                 // if page turn stats does not exist or is already off do nothing
+             }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/AsiWeb/MultiSelectControl.cs)
-         public IWebLocator SearchField { get => LocatorByXPath(_selectId, "div", "id", "/ul/li/input"); }
+         public IWebLocator SearchField { get => LocatorByXPath(_selectId, "/ul/li/input"); }
-         public IWebLocator ActiveItem { get => LocatorByXPath(_selectId, "div", "id", "/div/ul/li"); }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/AsiWeb/Lister.cs)
-         public IWebLocator FirstPageButton => LocatorByXPath("rgPageFirst", "input", "class");
-         public IWebLocator LastPageButton => LocatorByXPath("rgPageLast", "input", "class");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/AsiWeb/Helpers/DialogWindowWrapper.cs)
-         public static IWebLocator CloseButtonTop => LocatorByXPath("Close", "a", "title");
+         public static IWebLocator CloseButtonTop => LocatorByXPath("Close", "*", "title");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/DisplayIPartBase.cs)
+         public IWebLocator GetLocatorByIdWithoutName(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>
+             LocatorByXPath(elementId, tag, attribute, postXPath);
+ 
- 
-         public new IWebLocator PartialLinkText(string linkName) =>
-             WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/AccountArea.cs)
-         public IWebLocator BatchSelectorDropdown => LocatorByXPath("BatchSelectVisibilityPanel", "div");
-         public IWebLocator OverrideTransactionDateWrapper => LocatorByXPath("DateViewInputWrapper", "div");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/PromotionManager.cs)
-         public IWebLocator RemovePromotionalCodeLink => GetLocatorById("RemovePromotionalCode");
-         public IWebLocator ApplyPromotionalCodeButton => GetLocatorById("ApplyPromotionalCode");
-         public IWebLocator PromotionalCode => GetLocatorById("PromotionalCode", "input");
+         public IWebLocator RemovePromotionalCodeLink => LocatorForXpath("RemovePromotionalCode");
+         public IWebLocator ApplyPromotionalCodeButton => LocatorForXpath("ApplyPromotionalCode");
+         public IWebLocator PromotionalCode => LocatorForXpath("PromotionalCode", "input");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/CartChargesDisplay.cs)
-         public IWebLocator PstTaxAmount => GetLocatorById("1");
-         public IWebLocator GstTaxAmount => GetLocatorById("2");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/RefundDisplay.cs)
-     public class RefundDisplay : DisplayIPartBase
+     public class RefundDisplay: DisplayIPartBase
-         public RefundDisplay(string name) : base(name)
+         public RefundDisplay(string name): base(name)
-             AdjustmentDetailsGrid = new BusinessDataGrid("AdjustmentDetailsGrid");
-         }
-         public BusinessDataGrid AdjustmentDetailsGrid { get; }
+         }
-         public IWebLocator PaymentMethod => GetLocatorById("RefundPaymentMethodList", "select");
- 
-         public IWebLocator GetAmountToRefundLabel(string description) =>
-             AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");
- 
-         public IWebLocator GetAmountTextbox(string description) =>
-             AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//span[contains(@id,'AmountAppliedLabel')]");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/DataVaultLiveDisplay.cs)
-         public BusinessCalendar2 SearchDateFrom { get; set; }
-         public BusinessCalendar2 SearchDateTo { get; set; }
-         public BusinessDataGrid DataVaultLiveGrid { get; set; }
+         BusinessCalendar2 SearchDateFrom { get; set; }
+         BusinessCalendar2 SearchDateTo { get; set; }
+         BusinessDataGrid DataVaultLiveGrid { get; set; }
-         public IWebLocator SearchButton => LocatorByXPath("_SearchButton");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/OrderDetailsHeader.cs)
-         public OrderDetailsHeader(string name) : base(name) { }
+         public OrderDetailsHeader(string name) : base(name) {}
- 
-         public IWebLocator ActionButton => GetLocatorById("ActionButtonDiv", postXPath: "/div/button");
- 
-         public IWebLocator HeaderLabel => GetLocatorById("HeaderLabel");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/OrderConfirmationDisplay.cs)
-         public IWebLocator PstTaxAmount => GetLocatorById("1");
-         public IWebLocator GstTaxAmount => GetLocatorById("2");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/ItemCreator/ItemCreator.cs)
-             TxtDescription = new BusinessHtmlEditor("txtDescription");
-         public BusinessHtmlEditor TxtDescription { get; private set; }
+ 
-         public IWebLocator ProductTypeDropDown => GetLocatorById("ProductTypeDropDown", "select");
-         public IWebLocator ProductClassDropDown => GetLocatorById("ProductClassDropDown", "select");
+         public IWebLocator ProductTypeDropDown => GetLocatorById("ProductTypeDropDown","select");
+         public IWebLocator ProductClassDropDown => GetLocatorById("ProductClassDropDown","select");
-         public IWebLocator ProductStatusDropDown => GetLocatorById("ProductStatusDropDown", "select");
+         public IWebLocator ProductStatusDropDown => GetLocatorById("ProductStatusDropDown","select");
- 
+         public IWebLocator AddLinkButton => GetLocatorById("AddLinkButton");
-         public IWebLocator AddLinkButton => CollectionItemsGrid.Cell(1, 1, tableSection: "thead", postXPath: "//a[contains(@id,'AddLinkButton')]");
+         public IWebLocator TxtDescription => GetLocatorById("txtDescription");     
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/InvoiceDetail/InvoiceLinesTemplate.cs)
-             TaxGrid = new RadGrid("TaxLinesDataGrid");
-         public IWebLocator TotalChargesValue => GetLocatorById("TotalChargesValue");
-         public IWebLocator AdjustmentsValue => GetLocatorById("AdjustmentsValue");
-         public IWebLocator AdjustedTotalChargesValue => GetLocatorById("AdjustedTotalChargesValue");
-         public IWebLocator Tax => GetLocatorById("TaxTotalValue");
-         public IWebLocator PaymentsValue => GetLocatorById("PaymentsValue");
+         public IWebLocator TotalChargesValue { get => GetLocatorById("TotalChargesValue"); }
+         public IWebLocator AdjustmentsValue { get => GetLocatorById("AdjustmentsValue"); }
+         public IWebLocator AdjustedTotalChargesValue { get => GetLocatorById("AdjustedTotalChargesValue"); }
+         public IWebLocator PaymentsValue { get => GetLocatorById("PaymentsValue"); }
+         public IWebLocator RemainingBalanceValue { get => GetLocatorById("RemainingBalanceValue"); }
-         public IWebLocator RemainingBalanceValue => GetLocatorById("RemainingBalanceValue");
-         public RadGrid InvoiceAdjustmentsGrid { get; }
-         public RadGrid PaymentsGrid { get; }
+         public RadGrid InvoiceAdjustmentsGrid { get; set; }
+         public RadGrid PaymentsGrid { get; set; }   
-         public RadGrid TaxGrid { get; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/GeneralProductDisplay/ProductDisplay.cs)
-         public IWebLocator ProductTitle => LocatorByXPath("ProductTitle");
+         public IWebLocator ProductTitle => LocatorByXPath("ProductTitleHeader");
-         public IWebLocator InventoryDetailsButton => LocatorByXPath("InventoryDetailsSection", attribute: "aria-controls");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Commerce/GeneralProductDisplay/DynamicProductDisplay.cs)
- 
-         public IWebLocator GetItemCheckBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'SelectCheckBox')]");
-         public IWebLocator GetAmountTextBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");
-         public IWebLocator TermEndDate => LocatorByXPath("TermEndDate");
+         public BusinessCalendar2 TermEndDate => new BusinessCalendar2("TermEndDate"); 
-         public IWebLocator AddToCartButton { get => GetLocatorById("AddToCartButton"); }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/PotentialDuplicateListDisplay.cs)
-         public IWebLocator RunTaskNowButton => LocatorByXPath("RunTaskNowButton");
-         public IWebLocator CheckBoxScheduleTask => LocatorByXPath("CheckBoxScheduleTask");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactAccountCreator.cs)
-         public IWebLocator CreateAccountTypeIndividual { get => GetLocatorById("CreateAccountType_0");  }
+         public IWebLocator CreateAccountType { get => GetLocatorById("CreateAccountType"); }
-         public IWebLocator CreateAccountTypeOrganization { get => GetLocatorById("CreateAccountType_1"); }
-         public IWebLocator InvalidCharacterValidatorWarning => LocatorByXPath("PasswordRegExpValidator");
-         public IWebLocator InvalidCharacterConfirmValidatorWarning => LocatorByXPath("ConfirmPasswordRegExpValidator");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactMiniProfile/ContactMiniProfile.cs)
-         public IWebLocator EditButton => GetLocatorById("EditButtonPlaceHolder", "div", postXPath: "//a");
+         public IWebLocator EditButton => GetLocatorByIdWithoutName("ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_EditButtonPlaceHolder", "div", "id", postXPath: "/a");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactMiniProfile/ContactName.cs)
-         public IWebLocator AddDesignation { get => LocatorByXPath("create-option active-result", "li", "class"); }
- 
+         public IWebLocator AddDesignation { get => GetLocatorByIdWithoutName("ctl00_TemplateBody_contactNameDisplay1_DesignationMultiSelect_ListBox_chosen", "li", "id", postXPath: "/div/ul/li"); 
+         }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactAddressEditor/ContactAddressEditor.cs)
-             tabs.AddTab("Address");
+             tabs.AddTab("Address", new RadTab(0, "Address"));
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Fundraising/GiftEntry/AngularContent/GiftEntryApp/AsiGiftEntry.cs)
-             ReceiptMessage = new ReceiptMessage(ParentXPath);
-         public ReceiptMessage ReceiptMessage { get; set; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Common/PanelEditor.cs)
-         public IWebLocator PanelDescription { get => GetLocatorById("_Description", "div", "id", "//div"); }
+ 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/FormsDisplay.cs)
-         public IWebLocator ClientStateTextInputField(string id) => LocatorByXPath($"FB_TextBox_{id}_ClientState", "input");
- 
- 
-         public IWebLocator TextBoxLabelField(string id) => LocatorByXPath($"FB_TextBox_{id}", "label");
- 
-         public IWebLocator LabelLocation(string id, string location) => LocatorByXPath($"Section_{id}", "div", postXPath: $"//div[contains(@class,'{location}')]");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/Controls/FormsConfigEdit.cs)
-         public static SmartControl NewContactRecordCheckbox { get => SmartControl.CheckBoxSet("FormCreateContact"); }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/Controls/FormLibrary.cs)
-         public RadTabStrip FormGroupsTabStrip { get; }
+         public RadGrid RadGrid1;
-         public RadGrid RadGrid1 { get; }
-         public IWebLocator GroupNameInput { get => GetLocatorById("tbGroupName", "input"); }
-         public IWebLocator AddGroupButton { get => GetLocatorById("AddGroupButton", "input"); }
-         public IWebLocator FormGroupCombobox { get => GetLocatorDoubleContains("ComboFormGroup", "input"); }
-             FormGroupsTabStrip = CreateTabStrip();
-             FormGroupsTabStrip = CreateTabStrip();
-         }
- 
-         private static RadTabStrip CreateTabStrip()
-         {
-             var tabStrip = new RadTabStrip("FormGroups");
-             tabStrip.AddTab("General");
-             tabStrip.AddTab("+");
- 
-             return tabStrip;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Common/PanelEditor/PanelEditorConfigEdit.cs)
-         public static IWebLocator DescriptionTextArea => LocatorByXPath($"PartDescription_TextArea", "textarea", "id");  
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Advertising/Settings/Component/MediaAsset/RateCardDetailsSetting.cs)
-         public static IWebLocator CreateMatrix { get => LocatorByXPath("btnRateCardDetails", "button"); }
-         public static IWebLocator Save { get => LocatorByTextXPath(" Save ", "button", true); }
+         public static IWebLocator CreateRateCardDetailsMatrix { get => LocatorByTextXPath(" Create Rate Card Details Matrix", "button", true); }
+         public static IWebLocator AddRateInRateCardDetailsMatrix { get => LocatorByTextXPath("Add Rate Card Details", "button", true); }
+         public static IWebLocator EditRateInRateCardDetailsMatrix { get => LocatorByTextXPath("Edit Rate Card Details", "button", true); }
-         public static IWebLocator ContentPanel { get => LocatorByXPath("ctl01_ContentPanel"); }
-         public static IWebLocator DeletePopUpDialog { get => LocatorByXPath("modal-dialog center-popup", "div", "class"); }
-         public static IWebLocator DeletePopUpDeleteOption { get => LocatorByTextXPath("Delete", "button", true); }
- 
-         public static IWebLocator GetRemovedIconWithValue(string value)
-          => LocatorForXpath("//span[contains(text(),'" + value + "')]//parent::div//span[contains(@class,'ng-value-icon')]");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/EventPricingGroup.cs)
-         public IWebLocator PreviewPanel => LocatorByXPath("PreviewDiv", "div");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/FunctionEdit.cs)
-             Tabs.AddTab("Questions");
-             Tabs.AddTab("Registration Options");
-             Tabs.AddTab("Plan");
-         public IWebLocator AddNewRegistrationOptionLink => LocatorByTextXPath("Add new registration option", "a");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/FunctionDisplay.cs)
-         public IWebLocator EditButton => LocatorByXPath("Edit", "a", "title");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/EventResources.cs)
-             SpaceRequirements = new RadGrid("RadGrid1");
-             ResourcesRadGrid = new RadGrid("RadGrid2");
-             Speakers = new RadGrid("RadGrid3");
-             SupportStaff = new RadGrid("RadGrid4");
+             RadGrid1 = new RadGrid("RadGrid1");
+             RadGrid2 = new RadGrid("RadGrid2");
+             RadGrid3 = new RadGrid("RadGrid3");
+             RadGrid4 = new RadGrid("RadGrid4");
-         public RadGrid SpaceRequirements;
-         public RadGrid ResourcesRadGrid;
-         public RadGrid Speakers;
-         public RadGrid SupportStaff;
+         public RadGrid RadGrid1;
+         public RadGrid RadGrid2;
+         public RadGrid RadGrid3;
+         public RadGrid RadGrid4;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/EventProgramDisplay.cs)
-         public EventProgramDisplay() : base("New EventProgramDisplay Common") => Construct();
+         public EventProgramDisplay() : base("New EventProgramDisplay") => Construct();
-         public IWebLocator FirstProgramName => ListFunctions.Cell(1, 1, postXPath: "//ancestor::td//a[contains(@id, 'DisplayLink')]");
-         public IWebLocator AddNewProgramItemLink => GetLocatorById("TitleBar", postXPath: "/div/div/a");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/iParts/Events/EventFunctionPricing.cs)
-         public IWebLocator TextPriceStandardRegular => LocatorByXPath("TextPriceStandardRegular", "input");
+         public IWebLocator TextPriceStandardRegular => LocatorByXPath("TextPriceStandardRegular");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/PageBase.cs)
-         public static IWebLocator InfoMessage => LocatorByXPath("UserMessageText",postXPath:"//p");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Commerce/FindProductsPage.cs)
-         public new IWebLocator PageTitle => LocatorByTextXPath("Find products","h2");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Commerce/ItemPage.cs)
-         public ItemPage(string productCode = "", string category = "")
+         public ItemPage(string productKey = "", string category = "") 
-             BaseUrl = new ImisUrl("ItemDetail");
+             BaseUrl = new ImisUrl("ItemDetail"+"?iProductCode="+productKey+"&Category="+category);
-             WithBaseUrlParameters(productCode, category);
- 
- 
-         public ItemPage WithBaseUrlParameters(string productCode = "", string category = "")
-         {
-             BaseUrl
-                 .WithUrlParameter("iProductCode", productCode)
-                 .WithUrlParameter("Category", category);
- 
-             return this;
-         }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Commerce/AddProductPage.cs)
-     public class AddProductPage : PageBase
+     public class AddProductPage: PageBase
-             AddItemDialog = new AddItemDialog();
-         public AddItemDialog AddItemDialog { get; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Commerce/PaymentDetailsDisplay/PaymentDetails.cs)
-         public IWebLocator PayerLink => GetLocatorById("payerLink");
-         public IWebLocator TotalAmountValueLabel => GetLocatorById("TotalAmountValueLabel");
-         public IWebLocator Status => GetLocatorById("Status", "span");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Settings/Finance/FinanceGeneralSettingsPage.cs)
-         public static IWebLocator BatchModeSelectorDropDownList => LocatorByXPath("BatchModeDd", "select");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Contacts/MembershipTab.cs)
-         public IWebLocator MembershipTabButton => LocatorByXPath("Membership", "span");
-         public IWebLocator AdjustMembershipButton => LocatorByXPath("AdjustMembershipButton","button");
-         public IWebLocator AdjustFeesLink => LocatorByXPath("AdjustFeesLink", "a");
-         public IWebLocator CancelItemsLink => LocatorByXPath("CancelItemsLink", "a");
- 
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Contacts/AccountPageStaff.cs)
-             AlertDisplay = new AlertDisplay("AlertDisplay");
-         public AlertDisplay AlertDisplay { get; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Shop/Cart.cs)
-             PromotionManagerDisplay = new PromotionManager("PromotionManagerCommon");
+             PromotionManagerDisplay = new PromotionManager();
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Fundraising/FindGiftsPage.cs)
-             query.Parameters.Add("Donor ID", new QueryTextParameter());
-             query.Parameters.Add("Gift date between", new QueryDateParameter());
+             query.Parameters.Add("Gift date between start", new QueryDateParameter());
+             query.Parameters.Add("Gift date between end", new QueryDateParameter());
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Fundraising/ManageGiftAidClaims/ManageGiftAidClaimsPage.cs)
-         public new static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");
+         public static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Finance/PayCentral/PayCentralLivePage.cs)
-             BaseUrl = new ImisUrl("/iCore/Finance/PayCentralLive.aspx");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Events/EventDashboardPage.cs)
-             EventProgramDisplay = new EventProgramDisplay("EventProgramDisplay");
-         public EventProgramDisplay EventProgramDisplay { get; set; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Events/EventRegistrationDetailPage.cs)
-             InvoicesGrid = new Lister("Invoices_ResultsGrid");
-         public Lister InvoicesGrid { get; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Community/AddContactPage.cs)
-             PrimaryOrgSelector = new PrimaryOrganizationSelector("primaryOrgSelector");
-         public PrimaryOrganizationSelector PrimaryOrgSelector { get; set; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Community/ManageDuplicatesPage.cs)
-             BaseUrl = new ImisUrl("iCore/Contacts/Manage_Duplicates.aspx");
+             BaseUrl = new ImisUrl("Core/Contacts/Manage_Duplicates.aspx");
-             MiniProfile = new ContactMiniProfile("MiniProfile");
-         public ContactMiniProfile MiniProfile;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/RiSE/SiteBuilder/ManageWebSitesPage.cs)
+ #if USE_PLAYWRIGHT
+ 
+ #else
+ #endif
+ 
+ namespace Asi.Selenium.Web.Pages.RiSE.SiteBuilder
-         public IWebLocator StatusPanel => LocatorByXPath("collapse", attribute: "data-toggle");
+         // jkh changed to locate by id
+         public IWebLocator StatusPanel => L("status toggle", By.XPath(@"//*[@id='ctl00_TemplateBody_WebsiteEditControl_StatusPanel_Head']/div/a"));
+         //LocatorByXPath("collapse", attribute: "data-toggle");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/RiSE/ProcessAutomation/TasksPage.cs)
-             Task = new Task();
+             Task = new iParts.Common.Tasks.Task();
-         public Task Task { get; set; }
+         public iParts.Common.Tasks.Task Task { get; set; }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/RiSE/PanelDesigner/PanelDesignerPage.cs)
-         public IWebLocator RadMenuViewButton => LocatorByTextXPath("View", "span");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/RiSE/FormBuilder/FormDesignerPage.cs)
-         public new ImisUrl  BaseUrl { get => new ImisUrl("iCore/Forms/Form-Designer.aspx"); }
+         public ImisUrl BaseUrl { get => new ImisUrl("iCore/Forms/Form-Designer.aspx"); }
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Donor/DonateNowPage.cs)
- 
-         public IWebLocator GiftAidConfirmationMessage = LocatorByXPath("GiftAidConfirmationMessage", "div", "id");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Membership/BillingCycleDetailPage.cs)
-         public static IWebLocator BillingTimeDropDown => LocatorByXPath("BillingTypeAnnualAnniversaryDropDownList", "select");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Membership/ManageExpiredMembersPage.cs)
-         public new static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");
+         public static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Membership/JoinNowPage.cs)
-         public ImisUrl GetUrl(string productCode)
+         public ImisUrl Url(string productCode)
-             return BaseUrl.WithUrlParameter("iProductCode", productCode);
+             BaseUrl.AddParameter("iProductCode", productCode);
+             return BaseUrl;
<> ../asi1/src/Asi.Test/Selenium/Asi.Selenium.Web/Pages/Membership/BillingProduct/BillingProductsPage.cs)
-             if (!string.IsNullOrEmpty(tab))
+             if (!(tab is {Length:>0}))
- /Asi.Selenium.Web.V10/Asi.Selenium.Web.V10.csproj
- /Asi.Selenium.Web.V10/TestMethods/Commerce/PricingGroupTestMethods.cs
- /Asi.Selenium.Web.V10/TestMethods/Commerce/OrdersTestMethods.cs
- /Asi.Selenium.Web.V10/TestMethods/Community/ManageDuplicatesTestMethods.cs
- /Asi.Selenium.Web.V10/TestMethods/Membership/MemberResponsiveTestMethods.cs
- /Asi.Selenium.Web.V10/Pages/Commerce/OrderDetailsPage.cs
- /Asi.Selenium.Web.V10/Pages/Commerce/PricingGroupDetailsPage.cs
- /Asi.Selenium.Web.V10/Pages/Commerce/PricingGroupPage.cs
- /Asi.Selenium.Web.V10/Pages/Events/EventPricingGroupDialogPage.cs
- /Asi.Selenium.Web.V10/Pages/Community/CreateAccountNoSignInPage.cs
- /Asi.Selenium.Shared.V10/Startup.cs
- /Asi.Selenium.Shared.V10/appsettings.QA.json
- /Asi.Selenium.Shared.V10/Asi.Selenium.Shared.V10.csproj
- /Asi.Selenium.Shared.V10/Features/Forms/ContactFormTests.feature
- /Asi.Selenium.Shared.V10/Features/IntroVideo/video.feature
- /Asi.Selenium.Shared.V10/Features/Fundraising/AdjustedReceiptsTests.feature
- /Asi.Selenium.Shared.V10/Steps/Forms/CreatedFormInteractionStepDef.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/member_login_task.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/creditcard_task.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/edit_profile.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/find_member_make_refund_task.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/shop.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/add_contacts_task.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/staff_login_task.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/Steps/asi_steps.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/login.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_home_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_buy_membership_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_navigate_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_conference_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staffhome_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staff_addcontacts_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/member_Morgan_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staff_fundraising.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/find_contacts_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/make_a_refund_page.cs
- /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/community_dashboard_page.cs
- /Asi.Selenium.V10/Asi.Selenium.V10.csproj
- /Asi.Selenium.V10/Features/Commerce/Orders.feature
- /Asi.Selenium.V10/Features/Commerce/PricingGroup.feature
- /Asi.Selenium.V10/Features/Commerce/CanadaTaxation.feature
- /Asi.Selenium.V10/Features/PaymentGateways/Stripe.feature
- /Asi.Selenium.V10/Features/PaymentGateways/GoCardless.feature
- /Asi.Selenium.V10/Features/Staff/ManualBatch.feature
- /Asi.Selenium.V10/Features/Community/ManageDuplicates.feature
- /Asi.Selenium.V10/Features/Membership/Membership.feature
- /Asi.Selenium.V10/Steps/Commerce/OrdersStepDef.cs
- /Asi.Selenium.V10/Steps/Commerce/PricingGroupStepDef.cs
- /Asi.Selenium.V10/Steps/Settings/SettingsStepDef.cs
- /Asi.Selenium.V10/Steps/Community/ManageDuplicatesStepDef.cs
- /Asi.Selenium.V10/Steps/Membership/MembershipStepDef.cs
+ /Asi.Selenium.Web.V10/Pages/Finance/PayCentral/FindPaymentsPage.cs
+ /Asi.Selenium.Shared.V10/Steps/Forms/StateProvinceStepDef.cs
+ /Asi.Selenium.V10/Features/Membership/SpecFlowFeature1.feature
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupPaymentMethodSet.cs)
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountName)), IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountName))).Should().BeTrue();
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodName)), IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodName))).Should().BeTrue();
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountCode)),IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountCode))).Should().BeTrue();
-                 user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodCode)),IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodCode))).Should().BeTrue();
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupGateway.cs)
+     
-         private bool ShouldSaveGateway { get; set; } = true;
-         public static SetupGateway GoCardless(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.GoCardless, gatewayData);
- 
-         public SetupGateway AndDontSaveGateway()
-         {
-             ShouldSaveGateway = false;
-             return this;
-         }
-             context.UpsertData("GatewayData", GatewayData);
-             //switch (based on settings) to stop
-             if (ShouldSaveGateway)
-             {
-             }
-                     break;
-                 case GatewayTypeEnum.GoCardless:
-                     SetGoCardless(user);
-                 case GatewayTypeEnum.Stripe:
-                     SetStripe(user);
-                     break;
- 
-         public void SetGoCardless(IActor user)
-         {
-             //Fill out fields
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessDialog.AccountName,GatewayData.AccountName));
-             user.AttemptsTo(SetWhenProvided.DropDown(GoCardlessDialog.Environment, GatewayData.Environment));
- 
-             if (!GatewayData.CompleteOnboarding)
-                 return;
-             // Onboarding and OAuth completion
-             user.AttemptsTo(Click.On(GoCardlessDialog.GoCardlessOauthLink));
-             TestHelper.WaitForPageReload();
-             var goCardlessHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];
-             user.AttemptsTo(SwitchWindow.To(goCardlessHandle));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.SigninLink));
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.EmailInput,GatewayData.Email));
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.PasswordInput, GatewayData.Password));
-             user.AttemptsTo(ScrollToElement.At(GoCardlessOAuth.ConnectAccountButton));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.ToSCheckBox));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.ConnectAccountButton));
-             TestHelper.WaitForPageReload();
-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];
-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));
-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());
-         }
- 
-         public void SetStripe(IActor user)
-         {
-             //Fill out fields
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeDialog.AccountName, GatewayData.AccountName));
- 
-             if (!GatewayData.CompleteOnboarding)
-                 return;
- 
-             // Onboarding completion
-             user.AttemptsTo(Click.On(StripeDialog.StripeConnectLink));
-             for (int i = 0; i < 30; i++)
-             {
-                 int tabCount = user.Using<TestImis>().WebDriver.WindowHandles.Count;
-                 if (tabCount > 1)
-                     break;
-                 user.AttemptsTo(Waiting.InSeconds(1));
-             }
-             var stripeHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];
-             user.AttemptsTo(SwitchWindow.To(stripeHandle));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.EmailInputBox, GatewayData.Email));
-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.PasswordInputBox, GatewayData.Password));
-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));
-             string codeToEnter = MultiFactorAuthentication.Generate2FACode(GatewayData.MFACode);
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.VerificationCodeInputBox, codeToEnter));
- 
-             //After entering the code, we should be redirected to the next page which allows you to continue.
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ContinueButton), IsEqualTo.True());
-             // Incase there are any saved credentials, we need to skip the first page which asks to use existing info
-             bool promptedToUseSavedInfo = user.AsksFor(Appearance.Of(StripeOnboarding.Span("Use your saved information")));
-             if (promptedToUseSavedInfo)
-                 user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton)); //Continue through onboarding wizard to get to starting page and create new business
- 
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Let’s start with some basics")), IsEqualTo.True());
-             //Let’s start with some basics
-             // We are just going to continue with a UK business location and Individual type of business, and fill out all data with dummy data.
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
- 
-             //Personal Details
-             // Name
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Verify your personal details")), IsEqualTo.True());
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("First name"), "Timmy"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Last name"), "Tester"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("you@example.com"), GatewayData.Email ?? "Somebody@advsol.com"));
-             // Date of birth
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("MM"), "05"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("DD"), "05"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("YYYY"), "1960"));
-             // Home address
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Address line 1"), "798 New Road"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Town or City"), "London"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Postal code"), "W49 3IX"));
- 
-             // Phone number
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("121 234 5678"), "121 234 5678"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Professional Details
-             // Industry
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Professional details")), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Please select your industry…")));
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Software")));
-             // Website
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("www.example.com"), "www.imis.com"));
-             // Product description
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.ProductDescriptionBox, "We test websites"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Add your bank to receive payouts
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add your bank to receive payouts")), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Use test account")));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Add public details for customers
-             // Shortened Descriptor
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add public details for customers")), IsEqualTo.True());
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Business"), "iMIS"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Setting climate contribution
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ClimateContributionLabel),IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Agreeing and submitting all data
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Review and finish up")),IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.AgreeAndSubmitButon));
-             user.WaitsUntil(Appearance.Of(ImisRedirectPage.returnSpan), IsEqualTo.True());
- 
-             // Return to iMIS
-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];
-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));
-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());
-         }
- 
-             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName)),IsEqualTo.True());
-             user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());
+             user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();
+             user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))).Should().BeTrue();
-             ImisPassThrough,
+             ImisPassThrough
-             [Display(Name = "GoCardless")]
-             GoCardless,
-             [Display(Name = "Stripe")]
-             Stripe
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupPaymentMethod.cs)
+             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));
+             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());
- 
-             user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));
-             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());
-             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));
-             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name));
+             //TODO: Cleanup this automatic assignment from feature files and define the gl account there
+             if (GatewayData.AccountName.Contains("DD") 
+                 || (!string.IsNullOrEmpty(GatewayData.PaymentMethodType) && GatewayData.PaymentMethodType.Equals("Direct debit")))
+             {
+                 user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1060: Debit"));
+             }
+             else
+             {
+                 user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1020: VISA"));
+             }
+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Account.TextBox, GatewayData.GLAccount));
+             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.ExpandArrow));
- 
-             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.ExpandArrow));
-             user.AttemptsTo(Waiting.ForPageReload());
-             user.AttemptsTo(Click.On(PaymentMethodDialog.Account.DropDownValue(GatewayData.GLAccount)));
- 
-             user.AttemptsTo(Waiting.ForPageReload());
- 
-             user.AttemptsTo(ClickCommandButton.Save());
-             user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("Successfully saved"));
+             //driver.WaitInSeconds(2);//GET RID OF IT
+             user.WaitsUntil(Existence.Of(PaymentMethodDialog.Code), IsEqualTo.True());
+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));
+             user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name));
+             user.AttemptsTo(ClickCommandButton.Save().AndExpectMessage());
+             var userMessage = user.AsksFor(UserMessageContents.First());
+             if (userMessage.Equals("Successfully saved")) return;
+             else
+                 throw new Exception("Payment Method was not saved.");
- 
- 
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.AccountName)), IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.PaymentMethodName)), IsEqualTo.True());
- 
-             if (string.IsNullOrEmpty(GatewayData.PaymentMethodCode))
+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.PaymentMethodName))).Should().BeTrue();
+             if(string.IsNullOrEmpty(GatewayData.PaymentMethodCode))
+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))).Should().BeTrue();
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode)),IsEqualTo.True());
+                 user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode))).Should().BeTrue();
- 
-             if (string.IsNullOrEmpty(GatewayData.GLAccount))
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());
-             else
-                 user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode)), IsEqualTo.True());
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupAutoPay.cs)
-             user.WaitsUntil(UserMessageContents.First(),IsEqualTo.Value("Settings successfully updated."));
+             var userMessage = user.AsksFor(UserMessageContents.First());
+             if (userMessage.Equals("Settings successfully updated.")) return;
+             else
+                 throw new Exception("Autopay settings were not saved.");
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring),IsEqualTo.Value(AutoPayData.DefaultToRecurring));
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount), IsEqualTo.Value(AutoPayData.AllowDonorsChangeAmount));
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate),IsEqualTo.Value(AutoPayData.AllowDonorsSelectCollectionDate));
+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring)).Should().Be(AutoPayData.DefaultToRecurring);
+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount)).Should().Be(AutoPayData.AllowDonorsChangeAmount);
+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate)).Should().Be(AutoPayData.AllowDonorsSelectCollectionDate);
-             user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships),IsEqualTo.Value(AutoPayData.RenewingMemberships));
+             user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships)).Should().Be(AutoPayData.RenewingMemberships);
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew),IsEqualTo.Value(AutoPayData.DefaultAutoRenew));
-                 user.WaitsUntil(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew), IsEqualTo.Value(AutoPayData.RequiredAutoRenew));
+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew)).Should().Be(AutoPayData.DefaultAutoRenew);
+                 user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew)).Should().Be(AutoPayData.RequiredAutoRenew);
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Advertising/Settings/MediaAsset/AdjustRateCardDetails.cs)
+ #nullable enable
+ using Asi.Selenium.Web.Controls.Telerik;
+ using Asi.Selenium.Core.DataClasses;
+ using Asi.Selenium.Core.DataClasses.Advertising;
+ using Asi.Selenium.Core.Interfaces;
+ using Asi.Selenium.Web.iParts.Advertising.Settings.Component.MediaAsset;
+ using Asi.Selenium.Web.V10.Pages.Advertising.MediaAsset;
+ using Asi.Selenium.Core.WebDriver;
+ using Boa.Constrictor.Screenplay;
+ 
+ using FluentAssertions;
+ 
+ using System.Collections.Generic;
+ using System.Linq;
+ using TechTalk.SpecFlow;
+ using TechTalk.SpecFlow.Assist;
+ using Asi.Selenium.Web.Interactions.Tasks;
+ 
+ namespace Asi.Selenium.Web.V10.Interactions.Advertising.Settings.MediaAsset
-         private AdjustRateCardDetails(string adColor, ActionType action, string mediaAssets, string rateCardName, Table table)
+         private AdjustRateCardDetails(string adColor, ActionType action, string mediaAssets, string rateCardName, Table? table)
-         private Table Table { get; set; }
+         private Table? Table { get; set; }
-             var deletePopUp = user.AskingFor(Text.Of(RateCardDetailsSetting.DeletePopUpDialog));
+             var deletePopUp = user.AskingFor(Text.Of(RateCardDetailsSetting.DeletePopUp));
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.DeletePopUpDeleteOption));
+             user.AttemptsTo(Click.On(RateCardDetailsSetting.DeletePopUpYesOption));
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.Save));
+             user.AttemptsTo(Click.On(RateCardDetailsSetting.EditRateInRateCardDetailsMatrix));
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateMatrix));
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.Save));
+             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateRateCardDetailsMatrix));
+             if (user.AsksFor(AlertPresence.InBrowser()) == true)
+             {
+                 user.AttemptsTo(AcceptAlert.ThatMustExist());
+                 user.AttemptsTo(Click.On(RateCardDetailsSetting.EditRateInRateCardDetailsMatrix));
+                 user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());
+             }
+             else
+             {
+                 user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix, true));
+                 user.AttemptsTo(Click.On(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix));
+                 user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());
+             }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Advertising/Settings/MediaOrder/AdjustStep4ProductionDetails.cs)
-         private ProductionDetailAction Action;
-         private MediaOrderData Data;
-         private List<string> IssueDateList;
-         private Table Table;
+         private ProductionDetailAction? Action;
+         private MediaOrderData? Data;
+         private List<string>? IssueDateList;
+         private Table? Table;
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Community/AddContact.cs)
-             CreateAccountNoSignIn = new CreateAccountNoSignInPage();
-         private CreateAccountNoSignInPage CreateAccountNoSignIn { get; set; }
-         /// Constructs the Task object for a Organization
+         /// Constructs the Task object with Associate Membership fees.
-         /// Constructs the Task object for an Individual
+         /// Constructs the Task object with Regular Membership fees.
+             // navigate straight to Add Contacts page
+             user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));
-                 // navigate to Add Contacts page
+                 user.AsksFor(Appearance.Of(AddContactPage.AddContact.OrganizationName));
-                 user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));
-                 user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.OrganizationName), IsEqualTo.True());
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.CreateAccountTypeOrganization, Keys.Space));
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.OrganizationName, Organization + Keys.Enter));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.CreateAccountTypeOrganization, Keys.Space));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.OrganizationName, Organization + Keys.Enter));
-             }
-             else if (Contact.ContactType == "MBRR")
-             {
-                 user.WaitsUntil(Existence.Of(CreateAccountNoSignIn.ContactAccountCreator.Prefix), IsEqualTo.True());
-                 string preFix = Contact.PrefixString;
-                 user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.Prefix, preFix));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.FirstName, Contact.FirstName));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MiddleName, Contact.MiddleName));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.LastName, Contact.LastName));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.OrganizationName, Contact.Organization));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Email, Contact.Email));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Phone, Contact.Phone));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MobilePhone, Contact.MobilePhone));
-                 user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.CountrySelect, Contact.Country));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Address1, Contact.Address1));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address2, Contact.Address2));
-                 user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address3, Contact.Address3));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.City, Contact.City));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.SelectSubEntityCode, Contact.State));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.PostalCode, Contact.PostalCode));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Password, Contact.Password));
-                 user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.ConfirmPassword, Contact.Password));
-                 // save the record 
-                 user.AttemptsTo(ClickCommandButton.Save());
-                 // save to context for use later
-                 context.UpsertData("FirstName", Contact.FirstName);
-                 context.UpsertData("MiddleName", Contact.MiddleName);
-                 context.UpsertData("LastName", Contact.LastName);
-                 context.UpsertData("Username", Contact.Email);
-                 context.UpsertData("Email", Contact.Email);
-                 // navigate to Add Contacts page
-                 user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));
-                 user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.FirstName), IsEqualTo.True());
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.FirstName, Contact.FirstName));
-                 user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.MiddleName, Contact.MiddleName));
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.LastName, Contact.LastName));
+                 user.AsksFor(Appearance.Of(AddContactPage.AddContact.FirstName));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.FirstName, Contact.FirstName));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.MiddleName, Contact.MiddleName));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.LastName, Contact.LastName));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.PrimaryOrgSelector.PrimaryOrganization.TextBox, Contact.Organization));
+                 user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.Email, Contact.Email));
-                 user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.PrimaryOrgSelector.PrimaryOrganization.TextBox, Contact.Organization));
-                 user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.Email, Contact.Email));
-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.CreateAnAccountCheckBox, Keys.Space));
-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.Password, Contact.Password));
-                     user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.ConfirmPassword, Contact.Password));
+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.CreateAnAccountCheckBox, Keys.Space));
+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.Password, Contact.Password));
+                     user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.ConfirmPassword, Contact.Password));
-                 context.UpsertData("MiddleName", Contact.MiddleName);
-                 context.UpsertData("Email", Contact.Email);
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/InventoryReceiptsTestMethods.cs)
-         public InventoryReceiptsTestMethods(IWebDriver driver, IAsiWebContext context, ProductContext productContext) : base(driver, context)
+         public InventoryReceiptsTestMethods(IWebDriver driver, IAsiWebContext context, SpecFlowContext scenarioContext) : base(driver, context)
-             ItemPage = new ItemPage();
+             ProductDisplayPage = new ProductDisplayPage();
-             ProductContext = productContext;
+             ScenarioContext = scenarioContext;
+ 
+         private const string _onHandKey = "onHand";
+         private const string _lastCostKey = "lastCost";
+         private const string _unitCostKey = "unitCost";
+         private const string _quantityKey = "quanitty";
-         private ItemPage ItemPage { get; }
+         private ProductDisplayPage ProductDisplayPage { get; }
-         private ProductContext ProductContext { get; }
+         private SpecFlowContext ScenarioContext { get; }
-         public void SaveProductDetailsBeforeUpdate(string productCode)
+         public void SaveInventoryDetailsBeforeUpdate(string productCode)
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
-             user.AttemptsTo(Browse.InImis(ItemPage.WithBaseUrlParameters(productCode).BaseUrl));
-             user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));
-             user.WaitsUntil(Text.Of(productDisplay.OnHandValueLabel), IsNotEqualTo.Value(""));
-             user.WaitsUntil(Text.Of(productDisplay.LastCostValueLabel), IsNotEqualTo.Value(""));
+ 
+             user.AttemptsTo(Browse.InImis(ProductDisplayPage.GetBaseUrl(productCode)));
+             user.AttemptsTo(Click.On(ProductDisplayPage.InventoryDetailsSwitch));
+             user.WaitsUntil(Text.Of(ProductDisplayPage.OnHandValue), IsNotEqualTo.Value(""));
+             user.WaitsUntil(Text.Of(ProductDisplayPage.LastCostValue), IsNotEqualTo.Value(""));
-             ProductContext.Code = productCode;
-             ProductContext.InventoryOnHand = int.Parse(user.AsksFor(Text.Of(productDisplay.OnHandValueLabel)));
+             ScenarioContext.Set(int.Parse(user.AsksFor(Text.Of(ProductDisplayPage.OnHandValue))), _onHandKey);
+             ScenarioContext.Set(user.AsksFor(Text.Of(ProductDisplayPage.LastCostValue)), _lastCostKey);
-             ProductContext.LastCost = user.AsksFor(Text.Of(productDisplay.LastCostValueLabel));
-             ProductContext.Name = user.AsksFor(Text.Of(productDisplay.ProductTitle));
-         public void ProcessInventoryReceipt(string type, bool isPositiveQuantity)
+         public void SelectInventoryReceiptsFromCommerce(string type, string productName, bool isPositiveQuantity)
-             user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 4, tableSection: "tfoot", postXPath: "/span")),
+             user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 4, tableSection: "tfoot", postXPath: "/span")), IsNotEqualTo.Value(""));
-                 IsNotEqualTo.Value(""));
-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, tableSection: "tfoot", postXPath: "//input"),
-                 ProductContext.NameForSearch));
+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, tableSection: "tfoot", postXPath: "//input"), productName));
+             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.GetSelectorOptionWithText(productName)));
+             user.WaitsUntil(ValueAttribute.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input")),
+                 IsEqualTo.Value(ScenarioContext.Get<string>(_lastCostKey)));
-             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.GetSelectorOptionWithText(ProductContext.NameForSearch)));
+             var unitCost = TestHelper.GenerateRandomNumber(1, 10);
+             var quantity = isPositiveQuantity
+                 ? TestHelper.GenerateRandomNumber(1, 10)
+                 : -TestHelper.GenerateRandomNumber(1, 10);
-             // Wait some time because after program is selected,
-             // unit cost input is set with product last cost twice and it isn't possible to wait for second setup with WaitsUntil().
+             ScenarioContext.Set(unitCost, _unitCostKey);
+             ScenarioContext.Set(quantity, _quantityKey);
-             user.AttemptsTo(Waiting.InSeconds(1));
-             ProductContext.UnitCost = TestHelper.GenerateRandomNumber(1, 10);
-             ProductContext.Quantity = isPositiveQuantity ? TestHelper.GenerateRandomNumber(1, 10) : -TestHelper.GenerateRandomNumber(1, 10);
- 
+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input"), unitCost.ToString()));
+             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3, tableSection: "tfoot", postXPath: "//input"), quantity.ToString()));
+             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 5, tableSection: "tfoot", postXPath: "//input[contains(@id, 'Insert')]")));
-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input"),
-                 ProductContext.UnitCost.ToString()));
- 
-             user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3, tableSection: "tfoot", postXPath: "//input"),
-                 ProductContext.Quantity.ToString()));
-             user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 5, tableSection: "tfoot", postXPath: "//input[contains(@id, 'Insert')]")));
-             user.AsksFor(UserMessageState.HasAny().WithMessage("Inventory successfully updated.")).Should().BeTrue();
+             // dg we need to retry this, 
+             user.WaitsUntil(UserMessageState.HasAny().WithMessage("Inventory successfully updated."), IsEqualTo.True());
-         public void VerifyInventoryDetailsAreUpdated(string type)
+         public void VerifyInventoryDetailsAreUpdated(string type, string productName)
-             var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;
+             var expectedUnitCost = ScenarioContext.Get<int>(_unitCostKey);
+             var expectedQuantity = ScenarioContext.Get<int>(_quantityKey);
+ 
-             user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1))).Should().Be(ProductContext.NameForSearch);
-             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2)))).Should().Be(ProductContext.UnitCost);
-             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3)))).Should().Be(ProductContext.Quantity);
+             user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1))).Should().Be(productName);
+             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2)))).Should().Be(expectedUnitCost);
+             double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3)))).Should().Be(expectedQuantity);
-             user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton));
-             user.WaitsUntil(Text.Of(productDisplay.OnHandValueLabel), IsNotEqualTo.Value(""));
-             user.WaitsUntil(Text.Of(productDisplay.LastCostValueLabel), IsNotEqualTo.Value(""));
+             user.AttemptsTo(Click.On(ProductDisplayPage.InventoryDetailsSwitch));
+             user.WaitsUntil(Text.Of(ProductDisplayPage.OnHandValue), IsNotEqualTo.Value(""));
+             user.WaitsUntil(Text.Of(ProductDisplayPage.LastCostValue), IsNotEqualTo.Value(""));
-             double.Parse(user.AsksFor(Text.Of(productDisplay.OnHandValueLabel))).Should().Be(ProductContext.InventoryOnHand + ProductContext.Quantity);
+             double.Parse(user.AsksFor(Text.Of(ProductDisplayPage.OnHandValue))).Should().Be(ScenarioContext.Get<int>(_onHandKey) + expectedQuantity);
-                 double.Parse(user.AsksFor(Text.Of(productDisplay.LastCostValueLabel))).Should().Be(ProductContext.UnitCost);
+                 double.Parse(user.AsksFor(Text.Of(ProductDisplayPage.LastCostValue))).Should().Be(expectedUnitCost);
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/OrderConfirmationTestMethods.cs)
-             OrderDetailsPage = new OrderDetailsPage();
-             InvoicesPage = new InvoicesPage();
-             EventRegistrationDetailPage = new EventRegistrationDetailPage();
-         private OrderConfirmation OrderConfirmation { get; }
+         public OrderConfirmation OrderConfirmation { get; set; }
-         private OrderDetailsPage OrderDetailsPage { get; }
-         private InvoicesPage InvoicesPage { get; }
-         private EventRegistrationDetailPage EventRegistrationDetailPage { get; }
-             TestTaxInclusionForAtLeastOneItem(true, "GST");
+             TestGstInclusionForAtLeastOneItem(true);
-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkBaseGstTax: true);
-             TestTaxInclusionForAtLeastOneItem(false, "GST");
+             TestGstInclusionForAtLeastOneItem(false);
-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkBaseGstTax: true);
-         public void VerifyAtLeastOneItemIncludeVatInc()
+         private void TestGstInclusionForAtLeastOneItem(bool shouldIncludeGst)
-             TestTaxInclusionForAtLeastOneItem(true, "VAT");
-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true);
-         }
+ 
+             var user = User("VerifyGstInc");
+ 
+             var itemGrid = OrderConfirmation.OrderConfirmationDisplay.ItemGrid;
+             user.WaitsUntil(Existence.Of(itemGrid.Grid), IsEqualTo.True());
+ 
+             var gstRegex = new Regex("^.*\\(includes.*GST\\).*$");
-         public void VerifyAtLeastOneItemsDoNotIncludeVatInc()
+             var rows = user.AskingFor(itemGrid.GetRowCount());
+             for (int row = 1; row <= rows; row++)
-             TestTaxInclusionForAtLeastOneItem(false, "VAT");
-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true);
+                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell));
+                 var match = gstRegex.IsMatch(description);
+                 if (match == shouldIncludeGst)
+                     return;     // found a match
-         public void VerifyOrderConfirmationContainsCanadaTax()
+             // if we get here we didnt find a match
+             if (shouldIncludeGst)
+                 throw new Exception("Expected at least one row in the order confirmation to include a GST amount in the description");
+             else
+                 throw new Exception("Expected at least one row in the order confirmation to NOT include a GST amount in the description");
+ 
+         }
+         public void VerifyAtLeastOneItemIncludeVatInc()
-             TestCanadaTaxInclusion(true);
+             TestVatInclusionForAtLeastOneItem(true);
-             TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true, checkBaseGstTax: true);
-         public void VerifyOrderConfirmationDoesNotContainCanadaTax()
+         public void VerifyAtLeastOneItemsDoNotIncludeVatInc()
-             TestCanadaTaxInclusion(false);
+             TestVatInclusionForAtLeastOneItem(false);
-             TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true, checkBaseGstTax: true);
-         private void TestTaxInclusionForAtLeastOneItem(bool shouldIncludeTax, string tax)
+         private void TestVatInclusionForAtLeastOneItem(bool shouldIncludeVat)
-             var user = LoggedInUser();
+ 
+             var user = User("VerifyVatInc");
-             user.AskingFor(Existence.Of(itemGrid.Grid)).Should().BeTrue();
+             user.WaitsUntil(Appearance.Of(itemGrid.Grid), IsEqualTo.True());
-             var regex = new Regex($"^.*\\(includes.*{tax}\\).*$");
+             var gstRegex = new Regex("^.*\\(includes.*VAT\\).*$");
-                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell)).Replace(Environment.NewLine, " ");
-                 var match = regex.IsMatch(description);
-                 if (match == shouldIncludeTax)
+                 var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell));
+                 var match = gstRegex.IsMatch(description);
+                 if (match == shouldIncludeVat)
-             throw new Exception(shouldIncludeTax
-                 ? $"Expected at least one row in the order confirmation to include a {tax} amount in the description"
+             if (shouldIncludeVat)
+                 throw new Exception("Expected at least one row in the order confirmation to include a VAT amount in the description");
-                 : $"Expected at least one row in the order confirmation to NOT include a {tax} amount in the description");
-         }
- 
-         private void TestTaxInclusionOnOrderDetailsAndInvoice(bool shouldIncludeTax, bool checkTax = false, bool checkBaseGstTax = false)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Click.On(OrderConfirmation.OrderConfirmationDisplay.OrderNumber));
-             var isOrderDetailsPage = user.AsksFor(Existence.Of(OrderDetailsPage.BillingDetails.InvoiceLink));
- 
-             if (isOrderDetailsPage && checkTax)
-                 user.AsksFor(Existence.Of(OrderDetailsPage.Total.Tax)).Should().Be(shouldIncludeTax);
- 
-             if (isOrderDetailsPage && checkBaseGstTax)
-                 user.AsksFor(Existence.Of(OrderDetailsPage.Total.TaxBaseGst)).Should().Be(shouldIncludeTax);
- 
-             user.AttemptsTo(Click.On(isOrderDetailsPage
-                 ? OrderDetailsPage.BillingDetails.InvoiceLink
-                 : EventRegistrationDetailPage.InvoicesGrid.FirstCellLink));
- 
-             var taxValue = double.Parse(user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.Tax), IsNotEqualTo.Value("")));
-             if (shouldIncludeTax)
-                 taxValue.Should().NotBe(0);
-                 taxValue.Should().Be(0);
+                 throw new Exception("Expected at least one row in the order confirmation to NOT include a VAT amount in the description");
-             user.AsksFor(Existence.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TaxGrid.Grid)).Should().Be(shouldIncludeTax);
- 
-         private void TestCanadaTaxInclusion(bool shouldIncludeTax)
-         {
-             var user = LoggedInUser();
-             user.AsksFor(Existence.Of(OrderConfirmation.OrderConfirmationDisplay.PstTaxAmount)).Should().Be(shouldIncludeTax);
-             user.AsksFor(Existence.Of(OrderConfirmation.OrderConfirmationDisplay.GstTaxAmount)).Should().Be(shouldIncludeTax);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/CartTestMethods.cs)
-         public void VerifyCartContainsGstIncTaxForItems(IEnumerable<string> itemIds)
+         public void VerifyCartContainsGstIncTaxForItems(List<string> itemIds)
-         public void VerifyCartDoesNotContainGstIncTaxForItems(IEnumerable<string> itemIds)
+         public void VerifyCartDoesNotContainGstIncTaxForItems(List<string> itemIds)
-         private void TestGstInclusionForItems(IEnumerable<string> itemIds, bool shouldIncludeGst)
+         private void TestGstInclusionForItems(List<string> itemIds, bool shouldIncludeGst)
- 
+             user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());
-                     var itemHref = user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"));
-                     if (itemHref.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ||
+                     if (user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))
+                             ?.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ?? false)
-                         itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCase))
- 
+         public void VerifyCartContainsVatIncTaxForItems(List<string> itemIds)
-         public void VerifyCartContainsVatIncTaxForItems(IEnumerable<string> itemIds)
-         public void VerifyCartDoesNotContainVatIncTaxForItems(IEnumerable<string> itemIds)
+         public void VerifyCartDoesNotContainVatIncTaxForItems(List<string> itemIds)
-         private void TestVatInclusionForItems(IEnumerable<string> itemIds, bool shouldIncludeVat)
+         private void TestVatInclusionForItems(List<string> itemIds, bool shouldIncludeVat)
+             user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());
-                     var itemHref = user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"));
-                     if (itemHref.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ||
+                     if (user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))
+                             ?.Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ?? false)
-                         itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCase))
-         }
- 
-         public void VerifyCartContainsCanadaTax()
-         {
-             TestCanadaTaxInclusion(true);
-         public void VerifyCartDoesNotContainCanadaTax()
-         {
-             TestCanadaTaxInclusion(false);
-         }
- 
-         private void TestCanadaTaxInclusion(bool shouldIncludeTax)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Browse.InImis(Cart.BaseUrl));
-             user.AsksFor(Appearance.Of(Cart.CartCharges.PstTaxAmount)).Should().Be(shouldIncludeTax);
-             user.AsksFor(Appearance.Of(Cart.CartCharges.GstTaxAmount)).Should().Be(shouldIncludeTax);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Settings/MiscNavigationTestMethods.cs)
-         public AccountArea AccountArea { get; set; }
-             AccountArea = new AccountArea("AccountArea");
+         }
- 
-         public void ClickOnAccountAreaBatchToggleIcon()
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Click.On(AccountArea.BatchToggle));
-         public void VerifyExistanceOfBatchSelectVisibilityPanelDiv()
-         {
-             var user = LoggedInUser();
-             user.WaitsUntil(Appearance.Of(AccountArea.OverrideTransactionDateWrapper), IsEqualTo.True());
-             user.AskingFor(Existence.Of(AccountArea.BatchSelectorDropdown));
-         }
-     }
- }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Settings/Finance/PayCentral/Gateway/GatewayTestMethods.cs)
-             var user = LoggedInUser();
+             var user = User();
-             var user = LoggedInUser();
+             var user = User();
-             var user = LoggedInUser();
+             var user = User();
-             var user = LoggedInUser();
+             var user = User();
-             var user = LoggedInUser();
+             var user = User();
-         }
- 
-         public void FillOutNewGateway(GatewayData gatewayData)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData).AndDontSaveGateway());
-         }
- 
-         public void VerifyLinkValidationError()
-         {
-             var user = LoggedInUser();
-             var gatewayData = _context.GetData<GatewayData>("GatewayData");
-             user.Verifies(ValidationForLink.WithGatewayData(gatewayData));
-         }
- 
-         public void AttemptToSaveAndCloseGateway()
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
-             user.AttemptsTo(ClickCommandButton.Continue());
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Fundraising/ReceiptingTestMethods.cs)
-         public FindIssuedReceiptsPage FindIssuedReceiptsPage { get; }
-             FindIssuedReceiptsPage = new FindIssuedReceiptsPage();
-         public void FindReceiptsToIssue(string name, string item)
-         {
-             var user = StaffSiteUser();
-             user.AttemptsTo(Browse.InStaffSite(IssueReceiptsPage.BaseUrl));
-             var query = IssueReceiptsPage.SelectAQuery.Queries.Get("All gifts elligible for receipting");
-             var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;
-             user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, name));
-             user.AttemptsTo(Click.On(query.Find));
-         }
- 
-         public void IssueReceipts()
-         {
-             var user = StaffSiteUser();
-             user.AttemptsTo(Click.On(IssueReceiptsPage.IssueReceiptsButton));
-         }
- 
-         public void FindIssuedReceipts(string name, string receiptNumber, string receiptStatus)
-         {
-             var user = StaffSiteUser();
-             user.AttemptsTo(Browse.InStaffSite(FindIssuedReceiptsPage.BaseUrl));
-             var query = FindIssuedReceiptsPage.SelectAQuery.Queries.Get("Main");
-             var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;
-             var number = query.Parameters.Get("Receipt number equals") as QueryTextParameter;
-             var status = query.Parameters.Get("Receipt status") as QueryComboBoxParameter;
-             user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, name));
-             user.AttemptsTo(SetWhenProvided.TextBox(number.Textbox, receiptNumber));
-             user.AttemptsTo(SetWhenProvided.TextBox(status.ComboBoxTextBox, receiptStatus));
-             user.AttemptsTo(Click.On(query.Find));
-         }
- 
-         public string GetReceiptNumber()
-         {
-             var user = StaffSiteUser();
-             return user.AsksFor(Text.Of(FindIssuedReceiptsPage.SelectAQuery.Cell(1, 1)));
-         }
- 
-         public void VerifyReceiptNumber(string expectedNumber)
-         {
-             var user = StaffSiteUser();
-             user.AsksFor(Text.Of(FindIssuedReceiptsPage.SelectAQuery.Cell(1, 1))).Should().Be(expectedNumber);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Advertising/Settings/MediaAsset/RateCardDetailsTestMethod.cs)
- 
-         #region remove ad size and frequency from rate cards details
-         public void UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(string mediaAsset, string rateCard, string adColor, Table table)
-         {
-             var user = User(mediaAsset);
-             CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);
-             CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);
-             user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, adColor));
-             user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());
-             user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AdColorSelect, true));
-             List<RateCardDetailList> rateCardDetailList;
-             rateCardDetailList = table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();
-             foreach (RateCardDetailList rateCardDetail in rateCardDetailList)
-             {
-                 if (!string.IsNullOrEmpty(rateCardDetail.AdSize))
-                     user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.AdSize)));
-                 if (!string.IsNullOrEmpty(rateCardDetail.Frequency))
-                     user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.Frequency)));
-             }
-             user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateMatrix));
-         }
- 
-         public void VerifyMessage(string message)
-         {
-             var user = User("");
-             user.AskingFor(Text.Of(RateCardDetailsSetting.ContentPanel)).Should().Contain(message);
-         }
-         #endregion
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Staff/AccountPageTestMethods.cs)
-             user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.EditButton));
+             // user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.EditButton));
+             var xp = By.XPath("//div[@id='ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_EditButtonPlaceHolder']/a");
+             user.AttemptsTo(Click.On(new WebLocator("",xp)));
+ 
-             PartyDesignation = $"({code}){description}";
+             // jkh, it seems to be losing the code here.
+             PartyDesignation = $"{description}";
+             user.AttemptsTo(SwitchFrame.ToDefaultFrame());
-             user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel partial update 
-             user.AsksFor(Text.Of(AccountPageStaff.MiniProfile.ContactName.FullName)).Should().Contain(PartyDesignation);
+             // jkh(remove) user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel partial update 
+             for (var i=0; i<30; i++) {
+                 // jkh this is broken, the names have changed.
+                 //var xp = AccountPageStaff.MiniProfile.ContactName.FullName;
+                 var xp = new WebLocator("fullname", By.XPath("//*[contains(@id,'fullName')]"));
+                 string x = user.AsksFor(Text.Of(xp));
+                 if (x.Contains(PartyDesignation)){
+                     return;
+                 }
+             }
+             throw new Exception($"Text did not contain {PartyDesignation}");
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Events/EventTestMethods.cs)
-             EventStaffFunctionDisplayPage = new EventStaffFunctionDisplayPage();
-             EventStaffFunctionDialog = new EventStaffFunctionDialog();
-             EventPricingGroupDialogPage = new EventPricingGroupDialogPage();
-             EventPricingGroup = new EventPricingGroup("");
-         public EventStaffFunctionDisplayPage EventStaffFunctionDisplayPage;
-         public EventStaffFunctionDialog EventStaffFunctionDialog;
-         public EventPricingGroupDialogPage EventPricingGroupDialogPage;
-         public EventPricingGroup EventPricingGroup;
- 
-         /// Verifies the title of the event
+         /// Verfies the title of the event
-             user.AsksFor(UserMessageState.HasWarnings().WithMessage("Event has a status of Cancelled")).Should().BeTrue();
+             user.WaitsUntil(UserMessageState.HasWarnings().WithMessage("Event has a status of Cancelled"),IsEqualTo.True());
+             //.Should().BeTrue();
+             // so this is not happening - why?
-         }
-         public void AddAResourceWithQuantity(decimal decimalQuantity)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Click.On(EventDashboardPage.EventProgramDisplay.ListFunctions.CellLinkWithText("Video Access")));
-             user.AttemptsTo(Click.On(EventStaffFunctionDisplayPage.FunctionDisplay.EditButton));
-             var resourcesRadGrid = EventStaffFunctionDialog.EventResources.ResourcesRadGrid;
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
-             user.AttemptsTo(Click.On(EventStaffFunctionDialog.FunctionEdit.Tabs.GetTab("Plan")));
-             user.AttemptsTo(Click.On(resourcesRadGrid.AddNew));
-             var quantityBox = resourcesRadGrid.Cell(3, 2, postXPath: "/input", tableSection: "thead"); ;
-             user.AttemptsTo(SendKeys.To(quantityBox, decimalQuantity.ToString()).UsingClearMethod());
-             user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));
-             var ButtonExists = user.AsksFor(Existence.Of(resourcesRadGrid.SaveNewButton));
-             if (ButtonExists) //only works in debug without second attempt :)
-                 user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));
-             user.AttemptsTo(ClickCommandButton.SaveAndClose());
- 
-         }
- 
-         public void VerifyTheResourceIs(decimal decimalQuantity)
-         {
-             var user = LoggedInUser();
-             user.WaitsUntil(Existence.Of(EventStaffFunctionDisplayPage.ResourcesRadGrid.Cell(decimalQuantity.ToString(),exactMatch: true)), IsEqualTo.True());
- 
-         }
-         public void DeleteTheEventButDontExit()
-         {
- 
-             var user = LoggedInUser();
-             user.AttemptsTo(Click.On(EventDashboardPage.EventDisplay.EditButton));
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
-             user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.DeleteEvent));
-             user.AttemptsTo(Hover.Over(EventDashboardPage.EventEdit.ConfirmDeleteButton));
-             user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.ConfirmDeleteButton));
-             user.WaitsUntil(UserMessageState.HasWarnings().WithMessage("Event delete submitted for processing."), IsEqualTo.True());
-         }
- 
-         public void VerifyTheCancelButtonIsGreyedOut()
-         {
-             var user = LoggedInUser();
-             var cancelButton = ClickCommandButton.ButtonLocator(ClickCommandButton.CommandButtonBarButtons.CloseButton);
-             user.WaitsUntil(EnabledState.Of(cancelButton),IsEqualTo.False());
-         }
- 
-         public void AddEventPricingGroup(Table table)
-         {
-             var user = LoggedInUser();
- 
-             foreach (var row in table.Rows)
-             {
-                 row.TryGetValue("EventKey", out string eventKey);
-                 row.TryGetValue("FunctionKey", out string functionKey);
-                 row.TryGetValue("GroupType", out string groupType);
-                 row.TryGetValue("Group", out string group);
-                 row.TryGetValue("Role", out string role);
- 
-                 var functionEditShortcut = new ImisUrl("FunctionEdit");
-                 functionEditShortcut.AddParameter("EventKey", eventKey);
-                 functionEditShortcut.AddParameter("FunctionKey", functionKey);
-                 user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));
- 
-                 user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, functionKey)));
- 
-                 user.WaitsUntil(Existence.Of(EventPricingGroup.DisplayNameTextBox), IsEqualTo.True());
- 
-                 string randNumber = TestHelper.GenerateRandomString(4);
- 
-                 if (!string.IsNullOrEmpty(groupType) && string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))
-                 {
-                     string name = $"A-{randNumber}(GroupType Only:{groupType})";
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));
- 
-                     user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));
-                 }
-                 else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))
-                 {
-                     string name = $"B-{randNumber}(Group Only:{group})";
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));
- 
-                     SelectGroup(user, group);
-                 }
-                 else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))
-                 {
-                     string name = $"C-{randNumber}(Group:{group}) w/Role";
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));
- 
-                     SelectGroup(user, group);
-                     SelectRole(user, role);
-                 }
-                 else if (!string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))
-                 {
-                     string name = $"D-{randNumber}(GroupType:{groupType} w/Group:{group}) w/Role";
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));
- 
-                     user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));
- 
-                     SelectGroup(user, group);
-                     SelectRole(user, role);
-                 }
- 
-                 user.AttemptsTo(ClickCommandButton.Ok());
- 
-             }
-         }
- 
-         private void SelectGroup(ImisUser user, string group)
-         {
-             if (group.Contains(","))
-             {
-                 var g = group.Split(",");
-                 foreach (var i in g)
-                 {
-                     user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, i.ToString()));
-                     user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));
-                 }
-             }
-             else
-             {
-                 user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));
-                 user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, group));
-                 user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));
-             }
-         }
- 
-         private void SelectRole(ImisUser user, string role)
-         {
-             if (role.Contains(","))
-             {
-                 var r = role.Split(",");
-                 foreach (var i in r)
-                 {
-                     user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));
-                     user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, i.ToString()));
-                     user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));
-                 }
-             }
-             else
-             {
-                 user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));
-                 user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, role));
-                 user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));
-             }
-         }
- 
-         public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey) 
-         {
-             var user = LoggedInUser();
- 
-             string eventFunctionKey = $"{eventKey}/{functionKey}";
-             var functionEditShortcut = new ImisUrl("FunctionEdit");
-             functionEditShortcut.AddParameter("EventKey", eventKey);
-             functionEditShortcut.AddParameter("FunctionKey", eventFunctionKey);
-             user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));
-             user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, eventFunctionKey)));     
-         }
- 
-         public void SelectExistingPricingGroups()
-         {
-             var user = LoggedInUser();
-        
-             user.WaitsUntil(Existence.Of(EventPricingGroup.UseExistingRadioButton), IsEqualTo.True());
-             user.AttemptsTo(Click.On(EventPricingGroup.UseExistingRadioButton));
- 
-             user.WaitsUntil(Appearance.Of(EventPricingGroup.ExistingPriceSheetsDropDownList), IsEqualTo.True());
-             user.AttemptsTo(Click.On(EventPricingGroup.ExistingPriceSheetsDropDownList));
- 
-             var priceSheetsDropDownList = user.AskingFor(SelectOptionsAvailable.For(EventPricingGroup.ExistingPriceSheetsDropDownList));
- 
-             for (int i = 1; i < priceSheetsDropDownList.Count; i++)
-             {
-                 user.AttemptsTo(Select.ByIndex(EventPricingGroup.ExistingPriceSheetsDropDownList, i));
- 
-                 string selectedItem = user.AsksFor(SelectedOptionText.Of(EventPricingGroup.ExistingPriceSheetsDropDownList));
- 
-                 if (selectedItem.Contains("(GroupType Only:Committee)"))
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Committee groups"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                 }
-                 else if (selectedItem.Contains("(GroupType Only:Member Type)")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Member Type groups"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                 }
-                 else if (selectedItem.Contains("(GroupType Only:Chapter)")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Chapter groups"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                 }
-                 else if (selectedItem.Contains("(Group Only:Harris County Chapter)")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Harris County Chapter group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                 }
-                 else if (selectedItem.Contains("(Group Only:Professional Member)")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Professional Member group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                 }
-                 else if (selectedItem.Contains("(Group:Membership Committee) w/Role")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Membership Committee group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("President role"));
-                 }
-                 else if (selectedItem.Contains("(Group:Awards Committee,East Chapter) w/Role")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("East Chapter group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Awards Committee group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Secretary role"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Compliance Officer role"));
-                 }
-                 else if (selectedItem.Contains("GroupType:Committee w/Group:Governmental")) 
-                 {
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Governmental Affairs Committee group"));
-                     user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Committee Administrator role"));
-                 }
-             }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Community/ContactTestMethods.cs)
-         public void FindContactByEmail(string email)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));
-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));
-             user.AttemptsTo(ClickCommandButton.Submit());
-             user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));
-         }
- 
-         public void VerifyContactExistsByEmail(string email)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));
-             user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));
-             user.AttemptsTo(ClickCommandButton.Submit());
-             user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 8))).Trim().Should().Be(email);
-         }
- 
-         }
- 
-         public void AddNewContact(ContactData contactData)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(AddContact.AddIndividual(contactData));
- 
-         /// <summary>
-         /// Add a new contact with a random name
-         /// </summary>
-         public void AddNewRandomContact()
-         {
-             var user = LoggedInUser();
-             // create a new contact
-             var contact = new ContactData()
-             {
-                 FirstName = $"{TestHelper.GenerateRandomString(5)}First",
-                 MiddleName = $"{TestHelper.GenerateRandomString(5)}Middle",
-                 LastName = $"{TestHelper.GenerateRandomString(5)}Last",
-             };
-             contact.Email = $"{contact.LastName}@netfake.com";
-             user.AttemptsTo(AddContact.AddIndividual(contact));
-         }
- 
-         /// <summary>
-         /// Add a new duplicate contact from exisiting contact name saved in the context
-         /// </summary>
-         public void AddANewDuplicateContactFromContext()
-         {
-             var user = LoggedInUser();
-             // create a new dupe contact from context
-             var contact = new ContactData()
-             {
-                 FirstName = _context.GetData<string>("FirstName"),
-                 MiddleName = _context.GetData<string>("MiddleName"),
-                 LastName = _context.GetData<string>("LastName"),
-                 Email = _context.GetData<string>("Email"),
-             };
-             user.AttemptsTo(AddContact.AddIndividual(contact));
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/BillingFinanceTestMethods.cs)
-             AssocMemberJoinPage = new AssocMemberJoinPage();
+             ProductDisplayPage = new ProductDisplayPage();
- 
-             ItemPage = new ItemPage();
-         private ItemPage ItemPage { get; set; }
+         private ProductDisplayPage ProductDisplayPage { get; }
-         public AssocMemberJoinPage AssocMemberJoinPage { get; set; }
- 
-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));
+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
-             user.AttemptsTo(Click.On(ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));
-             user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton));
+             user.AttemptsTo(Click.On(ProductDisplayPage.AddToCart));
+             user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart));
-             for (int x = 0; x < 8; x++)
+             for (int x=0;x<8; x++)
-                 user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for " + bList.ContactFirstName + " " + bList.ContactLastName);
+                 user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for "+bList.ContactFirstName+" "+bList.ContactLastName);
-             ISubmitOrderForProductWithTermSpanAndPaymentOption(bList.ProductName, bList.TermSpan, bList.PayOption, bList.PayNow);
+             ISubmitOrderForProductWithTermSpanAndPaymentOption(bList.ProductName, bList.TermSpan, bList.PayOption);
-         /// <param name="payOption"></param>
-         /// <param name="shouldPayNow"></param>
+         /// <param name="payNowOption"></param>
+         public void ISubmitOrderForProductWithTermSpanAndPaymentOption(string productName, int termSpan, string payNowOption)
-         public void ISubmitOrderForProductWithTermSpanAndPaymentOption(string productName, int termSpan, string payOption, bool shouldPayNow = false)
-             EnsureProductIsSelected(user, productName);
- 
+             // check if passed product name is the selected product in the product list
+             bool finishedloop = false;
+             int rowPos = 0;
+             do
+             {
+                 if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)
+                 {
+                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, rowPos))).Should().BeTrue();
+                     finishedloop = true;
+                 }
+                 rowPos++;
+             } while (finishedloop == false);
-             user.WaitsUntil(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel), IsEqualTo.Value("This item has been added to your cart"));
+             user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel)).Should().Be("This item has been added to your cart");
-             //  Set the Pay Now / Pay Later radio button
-             user.AttemptsTo(shouldPayNow
-                 ? Click.On(Cart.PaymentDetails.PayNowRadioButton)
-                 : Click.On(Cart.PaymentDetails.PayLaterRadioButton));
+             user.AttemptsTo(Click.On(Cart.PaymentDetails.PayLaterRadioButton));
-             if (!shouldPayNow)
+             user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod)).Should().Contain("will be billed for the balance due");
-                 user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod), ContainsSubstring.Text("will be billed for the balance due"));
-             EnsureProductIsSelected(user, productName);
- 
+             // check if passed product name is the selected product in the product list
+             bool finishedloop = false;
+             int rowPos = 0;
+             do
+             {
+                 if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)
+                 {
+                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, rowPos))).Should().BeTrue();
+                     finishedloop = true;
+                 }
+                 rowPos++;
+             } while (finishedloop == false);
- 
-                 for (int x = 1; x < 8; x++)
+                 for (int x=1;x<8;x++)
-         }
- 
-         /// <summary>
-         /// Join now as provided member type
-         /// </summary>
-         /// <param name="memberType"></param>
-         /// <param name="site"></param>
-         /// <param name="joinNowData"></param>
-         public void JoinNowAs(string memberType, string site = "Staff", JoinNowData joinNowData = null)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(JoinNow.WithMembership(memberType).WithJoinNowData(joinNowData).InImis(site));
-         }
- 
-         /// <summary>
-         /// Cancel renewal for user
-         /// </summary>
-         /// <param name="id">user id</param>
-         public void CancelRenewalForUser(int id)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Browse.InImis(AccountPage.Url(id.ToString())));
-             user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));
- 
-             var cancelRenewalButton = AccountPageStaff.MembershipTab.ReviewOrCancel.CancelInvoiceButton;
-             user.WaitsUntil(Appearance.Of(cancelRenewalButton), IsEqualTo.True());
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(cancelRenewalButton));
-         }
- 
-         /// <summary>
-         /// Verify transaction grand total is 0
-         /// </summary>
-         public void VerifyOrderWasSubmittedWithoutPayment()
-         {
-             var user = LoggedInUser();
- 
-             var transactionGrandTotalText = user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount),
-                 IsNotEqualTo.Value(""));
- 
-             double.Parse(transactionGrandTotalText).Should().Be(0);
-         }
- 
-         /// <summary>
-         /// Verify that Non-member Subscriptions is ordered for public users
-         /// </summary>
-         public void VerifyANonDuesProductIsOrdered()
-         {
-             var user = LoggedInUser();
- 
-             user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.FirstCell),
-                 IsEqualTo.Value("Non-Member Subscriptions"));
-         }
- 
-         /// <summary>
-         /// Change billing time for billing cycle
-         /// </summary>
-         /// <param name="billingTime"></param>
-         /// <param name="billingCycle"></param>
-         public void ChangeBillingTimeForBillingCycle(string billingTime, string billingCycle)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Browse.InImis(BillingCyclesPage.BaseUrl));
- 
-             user.AttemptsTo(Click.On(BillingCyclesPage.BillingCycleGrid.CellLinkWithText(text: billingCycle)));
-             user.AttemptsTo(Select.ByValue(BillingCycleDetailPage.BillingTimeDropDown, billingTime));
-             user.AttemptsTo(ClickCommandButton.SaveAndClose());
-         }
- 
-         /// <summary>
-         /// Verify product price
-         /// </summary>
-         /// <param name="productName"></param>
-         /// <param name="price"></param>
-         public void VerifyProductPriceIs(string productName, string price)
-         {
-             var user = LoggedInUser();
- 
-             user.AttemptsTo(Browse.InImis(Cart.BaseUrl));
- 
-             user.AttemptsTo(Click.On(Cart.ShoppingCart.ItemGrid.FirstCell));
- 
-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.NestedItemGrid.Cell(productName, postXPath: "//parent::tr//td[3]")),
-                 IsEqualTo.Value(price));
-         }
- 
-         /// <summary>
-         /// Verify the membership period for annual billing time
-         /// </summary>
-         public void VerifyTheMembershipPeriod()
-         {
-             const int december = 12;
-             const int startSecondHalfOfMonth = 15;
- 
-             var user = LoggedInUser();
-             var currentDate = DateTime.Now;
- 
-             var beginDate = currentDate.Day < startSecondHalfOfMonth
-                 ? new DateTime(currentDate.Year, currentDate.Month, 1)
-                 : new DateTime(currentDate.AddMonths(1).Year, currentDate.AddMonths(1).Month, 1);
- 
-             var endDate = new DateTime(beginDate.Year, december, 31);
- 
-             user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid[1].ItemDescriptionLink),
-                 ContainsSubstring.Text($"({beginDate.ToString("d", CultureInfo.CurrentCulture)} - {endDate.ToString("d", CultureInfo.CurrentCulture)})"));
-         }
- 
-         private void EnsureProductIsSelected( ImisUser user, string productName)
-         {
-             IWebLocator ProductRow(int i) => JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, i);
-             bool ProductRowExists(int i) => user.AsksFor(Existence.Of(ProductRow(i)));
-             bool FoundCorrectProductRow(int i) => user.AsksFor(Text.Of(ProductRow(i))) == productName;
- 
-             user.WaitsUntil(Existence.Of(ProductRow(0)), IsEqualTo.True());
-             TestHelper.WaitForPageReload();
-             for (int i = 0; i < 1000; i++)
-                 if (ProductRowExists(i) && FoundCorrectProductRow(i))
-                 {
-                     user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, i))).Should().BeTrue();
-                     return;
-                 }
- 
-             throw new NotFoundException($"Did not find {productName} as a selected product within the first 1000 items in the list.");
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/RenewalsTestMethods.cs)
-         private const string _paidThruDateKey = "paidThruDate";
- 
-             AccountPage = new AccountPageStaff();
+             AccountPage = new AccountPage();
-         private AccountPageStaff AccountPage { get; set; }
+         private AccountPage AccountPage { get; set; }
-             user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 2))).Should().Be("Versaton New Zealand");
+             user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1,2))).Should().Be("Versaton New Zealand");
-             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchTemplateTitle)).Should().Contain("Batch " + batchNumber);
+             user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchTemplateTitle)).Should().Contain("Batch "+batchNumber);
-         /// <summary>
-         /// Reverse first open invoice
-         /// </summary>
-         /// <summary>
-         /// Verify open invoice is reversed
-         /// </summary>
-         }
- 
-         /// <summary>
-         /// Renew membership on user account page
-         /// </summary>
-         public void RenewUserMembership(int userId)
-         {
-             var user = User("RenewMembershipUser");
- 
-             user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));
-             var paidThruDate = DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")));
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(AccountPage.RenewalButton.RenewInAdvanceButton));
-             user.WaitsUntil(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.PickList(0, 0)),
-                 IsEqualTo.Value("East Chapter"));
- 
-             var termStartDate = DateTime.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermStartDate.TextBox)));
-             termStartDate.Should().Be(paidThruDate.AddDays(1));
- 
-             var termLength = int.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermLength)));
-             termLength.Should().BeGreaterThan(0);
- 
-             var termEndDate = DateTime.Parse(user.WaitsUntil(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermEndDate), IsNotEqualTo.Value("")));
-             termEndDate.Should().Be(termStartDate.AddMonths(termLength).AddDays(-1));
- 
-             _context.AddData(_paidThruDateKey, termEndDate);
-             user.AttemptsTo(ClickCommandButton.WithWebLocator(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));
-         }
- 
-         /// <summary>
-         /// Verify user membership was renewed
-         /// </summary>
-         public void VerifyUserMembershipWasRenewed(int userId)
-         {
-             var user = User("VerifyRenewUser");
- 
-             user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));
-             DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")))
-                 .Should().Be(_context.GetData<DateTime>(_paidThruDateKey));
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/ChaptersTestMethods.cs)
-             user.WaitsUntil(Text.Of(BillingProductsPage.PageTitle),IsEqualTo.Value(expectedHeaderText));
+             user.AsksFor(Text.Of(BillingProductsPage.PageTitle)).Should().Be(expectedHeaderText);
-             user.WaitsUntil(Text.Of(BillingProductsPage.ItemGrid.AddToGrid),IsEqualTo.Value(expectedAddText));
+             user.AsksFor(Text.Of(BillingProductsPage.ItemGrid.AddToGrid)).Should().Be(expectedAddText);
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Commerce/FindOrderPage.cs)
-             query.Parameters.Add("Order number equals", new QueryTextParameter());
-             query.Parameters.Add("Order type", new QueryComboBoxParameter());
-             query.Parameters.Add("First name starts with", new QueryTextParameter());
-             query.Parameters.Add("Last name starts with", new QueryTextParameter());
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Commerce/InventoryReceiptsDialogPage.cs)
-         public IWebLocator ConfirmSubmitButton => LocatorByXPath("rwPopupButton", attribute: "class", postXPath: "//span[text()='OK']");
- 
+         // public IWebLocator ConfirmSubmitButton => LocatorByXPath("rwPopupButton", attribute: "class", postXPath: "//span[text()='OK']");
+         public IWebLocator ConfirmSubmitButton => WebLocator.L("Ok button", By.CssSelector("button.rwOkBtn")); // dg
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Forms/AssocMemberJoinPage.cs)
-             GeneralProductDisplay = new GeneralProductDisplay();
- 
-         public GeneralProductDisplay GeneralProductDisplay { get; set; }
- 
-         public static IWebLocator FinishButton => LocatorByXPath("btnNext_2", "input");
- 
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Fundraising/IssueReceiptsPage.cs)
-             SelectAQuery = BuildLister();
- 
-         public IWebLocator IssueReceiptsButton => LocatorByXPath("GenerateReceipts", "input");
- 
-         public Lister SelectAQuery;
- 
-         private static Lister BuildLister()
-         {
-             var lister = new Lister("ResultsGrid1");
-             lister.Queries.Add("All gifts elligible for receipting", BuildAllQuery());
-             return lister;
-         }
- 
-         private static ListerSheet BuildAllQuery()
-         {
-             var query = new ListerSheet();
-             query.Parameters.Add("Gift date between", new QueryDateParameter());
-             query.Parameters.Add("Donor name contains", new QueryTextParameter());
-             query.Parameters.Add("Gift item contains", new QueryTextParameter());
-             return query;
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Community/AddContactPage.cs)
-     public class AddContactPage : PageBase
+     class AddContactPage : PageBase
-             ContactAccountCreator = new ContactAccountCreator("Addcontact");
+             AddContact = new ContactAccountCreator("Addcontact");
-         public ContactAccountCreator ContactAccountCreator { get; set; }
+         public ContactAccountCreator AddContact { get; set; }
+         
+         public static IWebLocator CreateAccountTypeIndividual => LocatorByXPath("CreateAccountType_0");
+         public static IWebLocator CreateAccountTypeOrganization => LocatorByXPath("CreateAccountType_1");
+ 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/appsettings.json)
-     "LicenseUrl":  "https://informationservice.imistest.com",
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Users.json)
-     "username": "sffull",
+     "username": "ferriss",
-     "password": "sffull4",
-     "username": "cwest",
+     "username": "charlesw",
-     "username": "FOBOE",
+     "username": "franciso",
-   },
-   {
-     "username": "zzzlicenseqaadmin@advsol.com",
-     "password": "W&QMmx#tSi952eY6PKjqr*jc52spzW66YAr!q3iFsROkzYwP",
-     "firstname": "License",
-     "lastname": "TestUser",
-     "role": "License Administrator",
-     "title": "License Administrator"
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Forms/MemberField.feature)
- 	And I verify the select field for element CsContact.Designation contains Other value
+ # todo!!: this is not working, the select field does not have the other option.
+ #	And I verify the select field for element CsContact.Designation contains "" value
- 
- @ConfigureCheckBoxLabelLocation
- Scenario: Configure checkbox label location
- 	Given I create a new member form TestCheckBoxLabelLocation with elements
- 		| Category       | Field						|
- 		| Contact fields | CsContact.ExcludeDirectory	|		
- 	When I edit the options for element CsContact.ExcludeDirectory
- 		| Option			| Value          |
- 		| ddLabelLocation   | Right |
- 	And I publish content TestCheckBoxLabelLocation with the member form
- 	Then I navigate to the member page
- 	And I verify the checkbox label in form section R1C1W12 is Right aligned
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Forms/FormDesigner.feature)
- 
- Scenario: Forms CRUD
- 	Given I am on the Staff site as designated user System Administrator
- 	When I add new form named TestForm on Test group with elements
- 		| Category       | Field               |
- 		| Contact fields | CsContact.BirthDate |
- 		| Contact fields | CsContact.FirstName |
- 		| Contact fields | CsContact.Informal  |
- 		| Actions        | Submit button       |
- 		| Actions        | Cancel button       |
- 	Then I verify form has elements
- 		| Field               |
- 		| CsContact.BirthDate |
- 		| CsContact.FirstName |
- 		| CsContact.Informal  |
- 		| Submit.yes          |
- 		| Cancel.no           |
- 
- Scenario: Create numeric form content with panel designer source to compare to panel
-     Given I am on the Staff site as designated user System Administrator
-     And I create a Contact type Single-Instance specific panel named AStaticTest
-     And I add specific Currency property named Curr to the AStaticTest
-     And I add new form named NumericTestForm with elements
-     | Category                          | Field                  |
-     | Single instance.AStaticTestSource | AStaticTestSource.Curr |
-     | Actions                           | Submit button          |
-     When I add new form to content and publish
-     And I navigate to the page created
-     Then I verify client state text input field and submit rows
-     | Given    | Expected    |
-     | 12334.01 | 12,334.0100 |
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Community/Contact.feature)
- 
- Scenario: Verify you cannot create accounts with bad passwords
- 	Given I am on the Staff site as designated user Staff
- 	When I add contact
- 		| Key          | Value             |
- 		| FirstName    | New               |
- 		| LastName     | Account           |
- 		| Organization | OrgBorg           |
- 		| Email        | test@imisdemo.com |
- 		| Password     | 123asdad<Dasd     |
- 		| ExpectError  | True              |
- 	Then I verify the Invalid Character Warning
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Rise/Rise.feature)
- 
- Scenario: Add and edit a datasource property attribute in Panel Designer
-     Given I am on the Staff site as designated user System Administrator
-     And I create a Contact type Single-Instance specific panel named APropertyTest
-     And I add specific Text property named TestProperty1 to the APropertyTest source
- 	When I edit the attribute LogAllChanges for property TestProperty1 for the panel named APropertyTest		
- 	Then I verify the attribute LogAllChanges changes for property TestProperty1
- 
- Scenario: I navigate directly to the ContentItemEdit control
-     Given I am on the Staff site as designated user System Administrator
- 	When I navigate to a page to configure a content item
- 		| BasePage					| ContentItemName    |
- 		| CommunitiesDashboardPage	| BigButtonPanelEdit |
- 	Then I verify the correct BigButtonPanelEdit item was modified
- 
- @RiSEMaintenance
- Scenario: Verify publishing servers page loads correctly
-     Given I am on the Staff site as designated user System Administrator
- 	When I navigate to the publishing servers page
- 	Then I verify publishing servers grid loads
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Rise/PanelDesignerDuplicateMerge.feature)
-      And I verify panel description exists
- 
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/TaxationStepDef.cs)
-         [Given(@"I set financial entity if not already set")]
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/RiseStepDef.cs)
-         [When($@"I edit the attribute {StepRegex.SingleWord} for property {StepRegex.SingleWord} for the panel named {StepRegex.SingleWord}")]
-         public void WhenIEditTheDatasourceProperty(string attributeName, string propertyName, string panelName)
-         {
-             RiseTestMethods.EditPanelSource(attributeName, propertyName, panelName);
-         }
- 
-         [Then($@"I verify the attribute {StepRegex.SingleWord} changes for property {StepRegex.SingleWord}")]
-         public void ThenIVerifyPropertyAttributeValue(string attributeName, string propertyName)
-         {
-             RiseTestMethods.VerifyPropertyAttributeValue(attributeName, propertyName);
-         }
- 
-         [Then(@"I verify panel description exists")]
-         public void ThenIVerifyPanelDisplayPropertyExists()
-         {
-             RiseTestMethods.VerifyPageConfigureProperties();
-         }
- 
- 
-         [When(@"I navigate to a page to configure a content item")]
-         public void WhenINavigateToAPageToModifyContentItemEdit(Table table)
-         {                        
-             RiseTestMethods.NavigateToTheContentItemToEdit(table);
-         }
- 
-         [Then(@"I verify the correct BigButtonPanelEdit item was modified")]
-         public void ThenIVerifyTheCorrectItemWasModified()
-         {
-             RiseTestMethods.VerifyContentItemCorrect();
-         }
- 
-         [When(@"I navigate to the publishing servers page")]
-         public void NavigateToThePublishingServersPage()
-         {
-             RiseTestMethods.NavigateToThePublishingServersPage();
-         }
- 
-         [Then(@"I verify publishing servers grid loads")]
-         public void VerifyPublishingServersGridLoads()
-         {
-             RiseTestMethods.VerifyPublishingServersGridLoads();
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/LicenseManagementStepDef.cs)
+ 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/StepRegex.cs)
-         //Ensure all regex are encapsulated in "()"
- 
-         public const string WordContainsClub = "([\\s\\a-zA-Z&]+[Club])";
-         public const string ArrayOfDigits = "((?:\\d+,\\s)*\\d+)";
- 
- 
-         public const string TrueOrFalse = $"({True}|{False})";
-         public const string True = $"{CaseInsensitive}true";
-         public const string False = $"{CaseInsensitive}false";
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/CartStepDef.cs)
-         [Given(@"I checkout items in the cart")]
-         /// <summary>
-         /// This step goes through all of checkout, but does not submit the cart.
-         /// </summary>
-         /// <param name="data"></param>
-         [Given(@"I start checking out items in the cart")]
-         [When(@"I start checking out items in the cart")]
-         public void IStartCheckingOutItemsInTheCart(Table data)
-         {
-             CartTestMethods.Checkout(data.AsiCreateInstance<CartData>(), shouldSubmitCart: false);
-         }
- 
-         [Given(@"I empty the cart")]
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/ProductStepDef.cs)
-         private const string CreateProductDataKey = "createProductData";
+         public ProductStepDef(IWebDriver driver, IAsiWebContext context)
- 
-         public ProductStepDef(IWebDriver driver, IAsiWebContext context, ProductContext productContext)
-             ProductTestMethods = new ProductTestMethods(driver, context, productContext);
+             ProductTestMethods = new ProductTestMethods(driver, context);
-             Context = context;
-         public ProductTestMethods ProductTestMethods { get; }
+         public ProductTestMethods ProductTestMethods { get; set; }
-         public IAsiWebContext Context { get; }
-         [Given(@"I create a simple product")]
+         [When(@"I create a product")]
-         [When(@"I create a simple product")]
-         }
- 
-         [Then(@"I verify the product was added")]
-         public void VerifyTheProductWasAdded()
-         {
-             ProductTestMethods.VerifyProductWasAdded();
-         [Then(@"I verify the product is available")]
-         public void VerifyProductIsAvailable()
-         {
-             ProductTestMethods.VerifyProductIsAvailable();
-         }
- 
-         [When(@"I have product data")]
-         public void HaveProductData(Table data)
-         {
-             var createProductData = data.AsiCreateInstance<CreateProductData>();
-             Context.AddData(CreateProductDataKey, createProductData);
-         }
- 
-         [When(@"I create a product with collection of items")]
-         public void CreateAProductWithCollectionOfItems(Table data)
-         {
-             var createProductData = Context.GetData<CreateProductData>(CreateProductDataKey);
-             var productItemsData = data.CreateSet<ProductItemData>();
-             ProductTestMethods.CreateProductWithItems(createProductData, productItemsData);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/ItemStepDef.cs)
-         [Given(@"I add the current item to the cart")]
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Settings/SettingsStepDef.cs)
-             var user = new ImisUser("AboutiMIS", _context.Logger());
+             var user = new ImisUser("AboutiMIS", new ConsoleLogger());
-             var user = new ImisUser("AboutiMIS", _context.Logger());
+             var user = new ImisUser("AboutiMIS", new ConsoleLogger());
- 
-             user.WaitsUntil( WindowCount.Of(), IsEqualTo.Value(2));
-         }
- 
-      public class WindowCount : AbstractWebQuestion<int>
-     {
-         public static WindowCount Of() => new WindowCount();
-         public override int RequestAs(IActor actor, IWebDriver driver) => driver.WindowHandles.Count;
-         public override string ToString() {
-             return  $"window count";
-     }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/MemberFieldStepDef.cs)
-         [Then(@"I verify the (.*) label in form section (.*) is (Left|Right) aligned")]
-         public void VerifyTheElementLabelLocation(string inputType, string section, string location)
-         {
-             FormTestMethods.VerifyElementLabelLocation(inputType, section, location);
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/ContactEmailAddressSyncSteps.cs)
-         public  ContactEmailAddressSyncSteps(IWebDriver driver, IAsiWebContext context)
+         public ContactEmailAddressSyncSteps(IWebDriver driver, IAsiWebContext context)
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/FormDesignerStepDef.cs)
-             WhenICreateANewFormWithElements(name, null, table);
-         }
-         [When($@"I add new form named {StepRegex.SingleWord} on {StepRegex.SingleWord} group with elements")]
-         public void WhenICreateANewFormWithElements(string name, string groupName, Table table)
-         {
-             if (!string.IsNullOrEmpty(groupName))
+             FormTestMethods.NavigateAndCreateForm(FormName, table);
-                 groupName = TestHelper.GenerateRandomName(groupName);
- 
-             FormTestMethods.NavigateAndCreateForm(FormName, table, groupName: groupName);
-         [Then($@"I add new form to content and publish")]
-         }
- 
-         [Then("I verify form has elements")]
-         public void ThenIVerifyFormHasElements(Table table)
-         {
-             FormTestMethods.VerifyFormHasElements(table);
-         [When(@"I navigate to the page created")]
-         }
- 
-         [Then(@"I verify client state text input field and submit rows")]
-         public void VerifyClientStateTextInputFieldAndSubmitRows(Table table)
-         {
-             FormTestMethods.CheckForRuntimeMessage();
-             FormTestMethods.VerifyValuesWithElements(table);
-             FormTestMethods.CheckForRuntimeMessage();
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Fundraising/EnterGiftsStepDef.cs)
-         public ReceiptingTestMethods ReceiptingTestMethods { get; set; }
-         public string ReceiptNumber { get; set; }
-             ReceiptingTestMethods = new ReceiptingTestMethods(driver, context);
-         {
-             GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(giftType, data);
-             Authentication.LogOut(false);
-         }
- 
-         [Given(@"a System Administrator enters a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b) and remains logged in")]
-         public void GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(string giftType, Table data)
+             Authentication.LogOut(false);
+ 
-             EnterGiftsTestMethods.EnterGift("Pledge", giftData, new CartData()); //cart data isn't applicable to pledges here
+             EnterGiftsTestMethods.EnterGift("Pledge", giftData, new CartData()); //cart data isn't applicable to pledges
+ 
+             //var logData = table.AsiCreateInstance<AdjustmentLogData>();
+            // var adjustmentData = data.AsiCreateInstance<List<SoftCreditData>>();
-         }
- 
-         [Given(@"I issue receipts for the gift")]
-         public void GivenIPayForTheGiftAndIssueReceipts()
-         {
-             string donorName = $"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.FirstName}";
-             ReceiptingTestMethods.FindReceiptsToIssue(donorName, PersistedGiftInfo.GiftItem);
-             System.Threading.Thread.Sleep(2000);
-             ReceiptingTestMethods.IssueReceipts();
-             ReceiptingTestMethods.FindIssuedReceipts(donorName, null, null);
-             ReceiptNumber = ReceiptingTestMethods.GetReceiptNumber();
-             Authentication.LogOut();
-         [Then(@"I verify user sees the receipt will be voided message")]
-         public void ThenIVerifyUserSeesTheReceiptWillBeVoidedMessage()
-         {
-             EnterGiftsTestMethods.VerifyGiftAppReceiptMessage($"Receipt(s) {ReceiptNumber} will be voided");
-         }
- 
-         [Then(@"I verify the receipt is voided")]
-         public void ThenIVerifyTheReceiptIsVoided()
-         {
-             ReceiptingTestMethods.FindIssuedReceipts($"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.LastName}", ReceiptNumber, "Void");
-             System.Threading.Thread.Sleep(2000);
-             ReceiptingTestMethods.VerifyReceiptNumber(ReceiptNumber);
-         }
- 
-         [Then(@$"I verify the single gift with invoice number {StepRegex.SingleWord} has been found")]
-         public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)
-         {
-             EnterGiftsTestMethods.VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(id);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Site/NavigationStepDef.cs)
-         [Given(@"I navigate to top menu (.*)")]
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Events/RegisterForAnEventStepDef.cs)
-         private RegisterForAnEventTestMethods RegisterForAnEventTestMethods { get; }
+         private RegisterForAnEventTestMethods RegisterForAnEventTestMethods { get; set; }
-         [Given(@"I register myself for an event")]
-         public void WhenIRegisterMyselfForAnEvent(Table data)
+         public void WhenIRegisterSomeoneElseForAnEvent(Table data)
-         public void ThenIVerifyMyselfWasRegistered(Table data)
+         public void ThenIVerifySomeoneElseWasRegistered(Table data)
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Community/ContactStepDef.cs)
-         [Given(@"I create a new contact")]
-         }
- 
-         [Then(@"I verify the Invalid Character Warning")]
-         public void ThenIVerifyTheInvalidCharacterWarning()
-         {
-             ContactTestMethod.VerifyTheInvalidCharacterWarning();
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Authentication/LoginStepDef.cs)
-         [When(@"I log onto the (.*) site as user (.*)")]
+         public void GivenILogOnToTheSiteAsUserName(string site, string userName)
-         public void ILogOnToTheSiteAsUserName(string site, string userName)
-             Authentication.LogOut(false, false);
+             Authentication.LogOut(false);
-         public void IAmOnSiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)
+         public void GivenIAmOnSiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)
+             TestHelper.WaitForPageReload();
- 
-         [Given(@"I log on the License Server site as user License Administrator")]
-         public void ILogOnTheLicenseServerSite()
-         {
-             SignInTestMethods.SignInToLicenseServer();
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/Products.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
+ 		| PaymentMethodType | MainCheckingAccount |
- 
- 
- @SkipSetGatewayStep
- Scenario: Verify a simple product can be added
- 	Given I am on the Staff site as designated user Staff
- 	When I create a simple product
- 		| Key           | Value                |
- 		| Class         | Clothing Apparel     |
- 		| Name          | My FFF Super Product |
- 		| Description   | Super product        |
- 		| StandardPrice | 10.00                |
- 		| DiscountPrice | 10.00                |
- 		| Beginning     | 01/01/2020 12:00 AM  |
- 	Then I verify the product was added
- 
- @SkipSetGatewayStep
- Scenario: Verify a product has become available after inventory receipt processing
- 	Given I am on the Staff site as designated user Staff
- 	When I create a simple product
- 		| Key           | Value                |
- 		| Class         | Gifts                |
- 		| Name          | My WWW Super Product |
- 		| Description   | Super product        |
- 		| StandardPrice | 30.00                |
- 		| DiscountPrice | 20.00                |
- 		| Beginning     | 1/1/2020 12:00 AM    |
- 	And I process inventory Receipt with positive quantity
- 	Then I verify the product is available
- @SkipSetGatewayStep
- Scenario: Verify paying with PayPal express
- 	Given I am on the Mbrr site as designated user Public user
- 	When I order product
- 		| Key       | Value                  |
- 		| Product   | Building a Strong Team |
- 		| ClearCart | true                   |
- 	And I checkout items in the cart
- 		| Key           | Value  |
- 		| PaymentMethod | PayPal |
- 	Then I verify the product was ordered
- 		| Key     | Value                  |
- 		| Product | Building a Strong Team |
- 
- @SkipSetGatewayStep
- Scenario: Verify a collection of items product can be added
- 	Given I am on the Staff site as designated user Staff
- 	When I have product data
- 		| Key             | Value         |
- 		| Class           | Gifts         |
- 		| Name            | MUG Gifts     |
- 		| Description     | my mug gifts  |
- 		| PriceIsTotal    | True          |
- 	And I create a product with collection of items
- 		| Title      | Code   | Quantity |
- 		| Modern Mug |        | 1        |
- 		|            | FRMUG1 | 2        |
- 	Then I verify the product was added
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/InventoryReceipts.feature)
- 	When I process inventory Receipt with positive quantity
- 	Then I verify inventory Receipt is applied
+ 	When I process inventory Receipt for Business Management Series: Communication Skills (P41) with positive quantity
+ 	Then I verify inventory Receipt for Business Management Series: Communication Skills (P41) is applied
- 	When I process inventory Adjustment with positive quantity
- 	Then I verify inventory Adjustment is applied
+ 	When I process inventory Adjustment for Business Management Series: Communication Skills (P41) with positive quantity
+ 	Then I verify inventory Adjustment for Business Management Series: Communication Skills (P41) is applied
- 	When I process inventory Adjustment with negative quantity
- 	Then I verify inventory Adjustment is applied
+ 	When I process inventory Adjustment for Business Management Series: Communication Skills (P41) with negative quantity
+ 	Then I verify inventory Adjustment for Business Management Series: Communication Skills (P41) is applied
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/VatincTaxation.feature)
- @UnitedKingdom
- Background:
+ Scenario: Taxable sales product includes a VAT amount in the Cart
- 	And I set financial entity if not already set
- 		| Key            | Value                |
- 		| Code           | VAT                  |
- 		| Country        | United Kingdom       |
+ 	When I set financial entity if not already set
+ 		| Key            | Value				|
+ 		| Code           | VAT					|
+ 		| Country        | United Kingdom		|
- 		| DefaultCulture | true                 |
+ 		| DefaultCulture | true					|
+ 	And I create a product
+ 		| Key           | Value |
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
+ 		| IsTaxable     | True  |
+ 		| TaxCode       | VAT_15|
+ 		| InventoryItem | False |
+ 	And I add the current item to the cart
+ 	Then I verify the cart contains VatInc tax for item @DataStorage.ItemCode
- Scenario: Taxable sales product includes a VAT amount in the Cart
- 	Given I create a simple product
- 		| Key           | Value  |
- 		| IsTaxable     | True   |
- 		| TaxCode       | VAT_15 |
- 		| InventoryItem | False  |
- 	When I add the current item to the cart
- 	Then I verify the cart contains VatInc tax for the previously created item
- 
- 	Given I create a simple product
- 		| Key           | Value  |
- 		| IsTaxable     | True   |
- 		| TaxCode       | VAT_15 |
- 		| InventoryItem | False  |
+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant
+ 	When I set financial entity if not already set
+ 		| Key            | Value                |
+ 		| Code           | VAT					|
+ 		| Country        | United Kingdom		|
+ 		| CultureType    | EnglishUnitedKingdom |
+ 		| DefaultCulture | true					|
+ 	And I empty the cart
+ 	And I create a product
+ 		| Key           | Value |
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
+ 		| IsTaxable     | True  |
+ 		| TaxCode       | VAT_15|
+ 		| InventoryItem | False |
- 	When I checkout items in the cart
+ 	And I checkout items in the cart
- 	Given I create a simple product
+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant
+ 	When I set financial entity if not already set
+ 		| Key            | Value                |
+ 		| Code           | VAT					|
+ 		| Country        | United Kingdom		|
+ 		| CultureType    | EnglishUnitedKingdom |
+ 		| DefaultCulture | true					|
+ 	And I empty the cart
+ 	And I create a product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I add the current item to the cart
- 	Then I verify the cart does not contain VatInc tax for the previously created item
+ 	And I add the current item to the cart
+ 	Then I verify the cart does not contain VatInc tax for item @DataStorage.ItemCode
- 	Given I create a simple product
+ 	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant
+ 	When I set financial entity if not already set
+ 		| Key            | Value                |
+ 		| Code           | VAT					|
+ 		| Country        | United Kingdom		|
+ 		| CultureType    | EnglishUnitedKingdom |
+ 		| DefaultCulture | true					|
+ 	And I empty the cart
+ 	And I create a product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation does not contain VatInc tax
+ 	And I checkout items in the cart
+ 		| Key           	| Value               |
+ 		| PaymentMethod 	| MainCheckingAccount |
+ 		| PaymentMethodType | Check				  |
- 
- Scenario: Taxable event with taxable program item includes a VAT amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value                  |
- 		| Status                                | Active                 |
- 		| RegistrationOptionDefaultRegularPrice | 100                    |
- 		| VatExceptionRule                      | Belgium VAT Exceptions |
- 		| IsRegistrationOptionTaxable           | True                   |
- 		| RegistrationOptionTaxCode             | VAT_15                 |
- 		| ProgramItemDefaultRegularPrice        | 50                     |
- 		| IsProgramItemTaxable                  | True                   |
- 		| ProgramItemTaxCode                    | VAT_15                 |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains VatInc tax for the previously created item
- 
- Scenario: Taxable event with taxable program item includes a VAT amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value                  |
- 		| Status                                | Active                 |
- 		| RegistrationOptionDefaultRegularPrice | 100                    |
- 		| VatExceptionRule                      | Belgium VAT Exceptions |
- 		| IsRegistrationOptionTaxable           | True                   |
- 		| RegistrationOptionTaxCode             | VAT_15                 |
- 		| ProgramItemDefaultRegularPrice        | 50                     |
- 		| IsProgramItemTaxable                  | True                   |
- 		| ProgramItemTaxCode                    | VAT_15                 |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains VatInc tax
- 
- Scenario: Taxable event with non taxable program item includes a VAT amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value                  |
- 		| Status                                | Active                 |
- 		| RegistrationOptionDefaultRegularPrice | 100                    |
- 		| VatExceptionRule                      | Belgium VAT Exceptions |
- 		| IsRegistrationOptionTaxable           | True                   |
- 		| RegistrationOptionTaxCode             | VAT_15                 |
- 		| ProgramItemDefaultRegularPrice        | 50                     |
- 		| IsProgramItemTaxable                  | False                  |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains VatInc tax for the previously created item
- 
- Scenario: Taxable event with non taxable program item includes a VAT amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value                  |
- 		| Status                                | Active                 |
- 		| RegistrationOptionDefaultRegularPrice | 100                    |
- 		| VatExceptionRule                      | Belgium VAT Exceptions |
- 		| IsRegistrationOptionTaxable           | True                   |
- 		| RegistrationOptionTaxCode             | VAT_15                 |
- 		| ProgramItemDefaultRegularPrice        | 50                     |
- 		| IsProgramItemTaxable                  | False                  |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains VatInc tax
- 
- Scenario: Non taxable event with taxable program item includes a VAT amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 		| ProgramItemTaxCode                    | VAT_15 |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains VatInc tax for the previously created item
- 
- Scenario: Non taxable event with taxable program item includes a VAT amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 		| ProgramItemTaxCode                    | VAT_15 |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains VatInc tax
- 
- Scenario: Non taxable event with non taxable program item does not include a VAT amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart does not contain VatInc tax for the previously created item
- 
- Scenario: Non taxable event with non taxable program item does not include a VAT amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/GstIncTaxation.feature)
- @Australia
- Background:
+ Scenario: Taxable sales product includes a GST amount in the Cart
- 	And I set financial entity if not already set
+ 	When I set financial entity if not already set
- 
+ 	And I create a product
- Scenario: Taxable sales product includes a GST amount in the Cart
- 	Given I create a simple product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I add the current item to the cart
- 	Then I verify the cart contains GstInc tax for the previously created item
+ 	And I add the current item to the cart
+ 	Then I verify the cart contains GstInc tax for item @DataStorage.ItemCode
- 	Given I create a simple product
+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart
+ 	When I set financial entity if not already set
+ 		| Key            | Value            |
+ 		| Code           | GSTIN            |
+ 		| Country        | Australia        |
+ 		| CultureType    | EnglishAustralia |
+ 		| DefaultCulture | true             |
+ 	And I empty the cart
+ 	And I create a product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I checkout items in the cart
+ 	And I checkout items in the cart
- 	Given I create a simple product
+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart
+ 	When I set financial entity if not already set
+ 		| Key            | Value            |
+ 		| Code           | GSTIN            |
+ 		| Country        | Australia        |
+ 		| CultureType    | EnglishAustralia |
+ 		| DefaultCulture | true             |
+ 	And I empty the cart
+ 	And I create a product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I add the current item to the cart
- 	Then I verify the cart does not contain GstInc tax for the previously created item
+ 	And I add the current item to the cart
+ 	Then I verify the cart does not contain GstInc tax for item @DataStorage.ItemCode
- 	Given I create a simple product
+ 	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart
+ 	When I set financial entity if not already set
+ 		| Key            | Value            |
+ 		| Code           | GSTIN            |
+ 		| Country        | Australia        |
+ 		| CultureType    | EnglishAustralia |
+ 		| DefaultCulture | true             |
+ 	And I empty the cart
+ 	And I create a product
+ 		| Class         | Sales |
+ 		| StandardPrice | 10    |
+ 		| DiscountPrice | 10    |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation does not contain GstInc tax
+ 	And I checkout items in the cart
+ 		| Key           	| Value               |
+ 		| PaymentMethod 	| MainCheckingAccount |
+ 		| PaymentMethodType | Check 			  |
- 
- Scenario: Taxable event with taxable program item includes a GST amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | True   |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains GstInc tax for the previously created item
- 
- Scenario: Taxable event with taxable program item includes a GST amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | True   |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains GstInc tax
- 
- Scenario: Taxable event with non taxable program item includes a GST amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | True   |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains GstInc tax for the previously created item
- 
- Scenario: Taxable event with non taxable program item includes a GST amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | True   |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains GstInc tax
- 
- Scenario: Non taxable event with taxable program item includes a GST amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart contains GstInc tax for the previously created item
- 
- Scenario: Non taxable event with taxable program item includes a GST amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | True   |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
- 	Then I verify the order confirmation contains GstInc tax
- 
- Scenario: Non taxable event with non taxable program item does not include a GST amount in the Cart
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	When I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	Then I verify the cart does not contain GstInc tax for the previously created item
- 
- Scenario: Non taxable event with non taxable program item does not include a GST amount on the order confirmation
- 	Given I create an event
- 		| Key                                   | Value  |
- 		| Status                                | Active |
- 		| RegistrationOptionDefaultRegularPrice | 100    |
- 		| IsRegistrationOptionTaxable           | False  |
- 		| ProgramItemDefaultRegularPrice        | 50     |
- 		| IsProgramItemTaxable                  | False  |
- 	And I register myself for an event
- 		| Key             | Value |
- 		| AddFirstProgram | True  |
- 	When I checkout items in the cart
- 		| Key           | Value               |
- 		| PaymentMethod | MainCheckingAccount |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/EnterGifts.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
+ 
+ 
+ 
- @SkipSetGatewayStep
- Scenario: Verify Find Gift
- 	Given I am on the Staff site as designated user Staff
- 	When I find the gift
- 		| Key        | Value          |
- 		| Type       | Gift           |
- 		| FirstName  | Ms. Melissa F. |
- 		| LastName   | Hodges         |
- 		| Amount     | 50             |
- 		| SourceCode | MAIL           |
- 	Then I verify the single gift with invoice number R8042 has been found
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/DonorUK.feature)
- 		| Key               | Value                   |
- 		| GatewayType       | Iats                    |
- 		| AccountCode       | IA_CC_UK                |
- 		| Region            | United Kingdom & Europe |
- 		| Password          | rapidtest7              |
- 		| AgentCode         | UIAW88                  |
- 		| AccountName       | IATS CC UK              |
+ 		| Key         | Value                   |
+ 		| GatewayType | Iats                    |
+ 		| AccountCode | IA_CC_UK                |
+ 		| Region      | United Kingdom & Europe |
+ 		| Password    | rapidtest7              |
+ 		| AgentCode   | UIAW88                  |
+ 		| AccountName | IATS CC UK              |
- 		| PaymentMethodType | Credit card             |
- 		| GLAccount         | 1-1020: VISA            |
- 	Then I verify credit card validation message is Card number is required.
+ 	Then I verify credit card validation message is Invalid card number.
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/GiftAid.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/Staff/Staff.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/UnitedStatesPaymentGateways.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |		
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |		
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount         | 1-1020: VISA                    |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| GLAccount         | 1-1060: Debit                    |
+ 		| GLAccount         | 1-1020: VISA                     |
- 		| GLAccount         | 1-1060: Debit                    |
+ 		| GLAccount         | 1-1020: VISA                     |
- 		| GLAccount         | 1-1060: Debit        |
+ 		| GLAccount         | 1-1020: VISA         |
- 		| GLAccount         | 1-1060: Debit        |
+ 		| GLAccount         | 1-1020: VISA         |
- 		| Key               | Value          |
- 		| GatewayType       | PayFlowPro     |
- 		| AccountCode       | PF_CC_US       |
- 		| Region            | United States  |
- 		| AccountName       | Pay Flow CC US |
- 		| Password          | qaperson1      |
- 		| UserName          | asicctest      |
- 		| Partner           | Verisign       |
- 		| Vendor            | asicctest      |
- 		| Environment       | Sandbox        |
- 		| PaymentMethodType | Credit card    |
+ 		| Key         | Value          |
+ 		| GatewayType | PayFlowPro     |
+ 		| AccountCode | PF_CC_US       |
+ 		| Region      | United States  |
+ 		| AccountName | Pay Flow CC US |
+ 		| Password    | qaperson1      |
+ 		| UserName    | asicctest      |
+ 		| Partner     | Verisign       |
+ 		| Vendor      | asicctest      |
+ 		| Environment | Sandbox        |
+ 		| GLAccount   | 1-1020: VISA   |
- 		| GLAccount         | 1-1020: VISA   |
- 		| Key               | Value          |
- 		| GatewayType       | PayFlowPro     |
- 		| AccountCode       | PF_CC_US       |
- 		| Region            | United States  |
- 		| AccountName       | Pay Flow CC US |
- 		| Password          | qaperson1      |
- 		| UserName          | asicctest      |
- 		| Partner           | Verisign       |
- 		| Vendor            | asicctest      |
- 		| Environment       | Sandbox        |
- 		| PaymentMethodType | Credit card    |
+ 		| Key         | Value          |
+ 		| GatewayType | PayFlowPro     |
+ 		| AccountCode | PF_CC_US       |
+ 		| Region      | United States  |
+ 		| AccountName | Pay Flow CC US |
+ 		| Password    | qaperson1      |
+ 		| UserName    | asicctest      |
+ 		| Partner     | Verisign       |
+ 		| Vendor      | asicctest      |
+ 		| Environment | Sandbox        |
+ 		| GLAccount   | 1-1020: VISA   |
- 		| GLAccount         | 1-1020: VISA   |
- 		| GLAccount         | 1-1060: Debit  |
+ 		| GLAccount         | 1-1020: VISA   |
- 		| GLAccount         | 1-1060: Debit  |
+ 		| GLAccount         | 1-1020: VISA   |
- 		| Key               | Value        |
- 		| GatewayType       | Vantiv       |
- 		| AccountCode       | VANTIV_US    |
- 		| AccountName       | Vantiv       |
- 		| MerchantId        | 1213807      |
- 		| PaymentMethodType | Credit card  |
+ 		| Key         | Value        |
+ 		| GatewayType | Vantiv       |
+ 		| AccountCode | VANTIV_US    |
+ 		| AccountName | Vantiv       |
+ 		| MerchantId  | 1213807      |
+ 		| GLAccount   | 1-1020: VISA |
- 		| GLAccount         | 1-1020: VISA |
- 		| Key               | Value        |
- 		| GatewayType       | Vantiv       |
- 		| AccountCode       | VANTIV_US    |
- 		| AccountName       | Vantiv       |
- 		| MerchantId        | 1213807      |
- 		| PaymentMethodType | Credit card  |
+ 		| Key         | Value        |
+ 		| GatewayType | Vantiv       |
+ 		| AccountCode | VANTIV_US    |
+ 		| AccountName | Vantiv       |
+ 		| MerchantId  | 1213807      |
+ 		| GLAccount   | 1-1020: VISA |
- 		| GLAccount         | 1-1020: VISA |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPassThrough                  |
- 		| AccountCode       | BB_CC_US                         |
- 		| Environment       | Sandbox                          |
- 		| AccountName       | Bambora CC US                    |
- 		| SpreedlyType      | Bambora NA                       |
- 		| MerchantId        | 300212633                        |
- 		| UserName          | johnasi                          |
- 		| Password          | FullAccess777!                   |
- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key          | Value                            |
+ 		| GatewayType  | ImisPassThrough                  |
+ 		| AccountCode  | BB_CC_US                         |
+ 		| Environment  | Sandbox                          |
+ 		| AccountName  | Bambora CC US                    |
+ 		| SpreedlyType | Bambora NA                       |
+ 		| MerchantId   | 300212633                        |
+ 		| UserName     | johnasi                          |
+ 		| Password     | FullAccess777!                   |
+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |
+ 		| GLAccount    | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPassThrough                  |
- 		| AccountCode       | BB_CC_US                         |
- 		| Environment       | Sandbox                          |
- 		| AccountName       | Bambora CC US                    |
- 		| SpreedlyType      | Bambora NA                       |
- 		| MerchantId        | 300212633                        |
- 		| UserName          | johnasi                          |
- 		| Password          | FullAccess777!                   |
- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key          | Value                            |
+ 		| GatewayType  | ImisPassThrough                  |
+ 		| AccountCode  | BB_CC_US                         |
+ 		| Environment  | Sandbox                          |
+ 		| AccountName  | Bambora CC US                    |
+ 		| SpreedlyType | Bambora NA                       |
+ 		| MerchantId   | 300212633                        |
+ 		| UserName     | johnasi                          |
+ 		| Password     | FullAccess777!                   |
+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |
+ 		| GLAccount    | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_US                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC US                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
- 		| PaymentMethodType | Credit card                                                      |
+ 		| Key          | Value                                                            |
+ 		| GatewayType  | ImisPassThrough                                                  |
+ 		| AccountCode  | EL_CC_US                                                         |
+ 		| Environment  | Sandbox                                                          |
+ 		| AccountName  | Elavon CC US                                                     |
+ 		| SpreedlyType | Elavon                                                           |
+ 		| MerchantId   | 0022579                                                          |
+ 		| UserName     | apiuser                                                          |
+ 		| Pin          | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |
+ 		| GLAccount    | 1-1020: VISA                                                     |
- 		| GLAccount         | 1-1020: VISA                                                     |
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_US                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC US                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
- 		| PaymentMethodType | Credit card                                                      |
+ 		| Key          | Value                                                            |
+ 		| GatewayType  | ImisPassThrough                                                  |
+ 		| AccountCode  | EL_CC_US                                                         |
+ 		| Environment  | Sandbox                                                          |
+ 		| AccountName  | Elavon CC US                                                     |
+ 		| SpreedlyType | Elavon                                                           |
+ 		| MerchantId   | 0022579                                                          |
+ 		| UserName     | apiuser                                                          |
+ 		| Pin          | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |
+ 		| GLAccount    | 1-1020: VISA                                                     |
- 		| GLAccount         | 1-1020: VISA                                                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/CanadaPaymentGateways.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_CA                         |
- 		| Region            | Canada                           |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033566                         |
- 		| AccountName       | IMIS Pay CC CA                   |
- 		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_CA                         |
+ 		| Region           | Canada                           |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033566                         |
+ 		| AccountName      | IMIS Pay CC CA                   |
+ 		| AuthorizationKey | rq5FjxL2nva2uubghavs3s2MfMdZktan |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_CA                         |
- 		| Region            | Canada                           |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033566                         |
- 		| AccountName       | IMIS Pay CC CA                   |
- 		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_CA                         |
+ 		| Region           | Canada                           |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033566                         |
+ 		| AccountName      | IMIS Pay CC CA                   |
+ 		| AuthorizationKey | rq5FjxL2nva2uubghavs3s2MfMdZktan |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| PaymentMethodType | Direct debit                    |
- 		| GLAccount         | 1-1060: Debit                   |
- 		| PaymentMethodType | Direct debit                    |
- 		| GLAccount         | 1-1060: Debit                   |
- 		| Key               | Value                |
- 		| GatewayType       | Iats                 |
- 		| AccountCode       | IA_CC_CA             |
- 		| Region            | United States/Canada |
- 		| AccountName       | IATS CC CA           |
- 		| Password          | Test88               |
- 		| AgentCode         | Test88               |
+ 		| Key         | Value                |
+ 		| GatewayType | Iats                 |
+ 		| AccountCode | IA_CC_CA             |
+ 		| Region      | United States/Canada |
+ 		| AccountName | IATS CC CA           |
+ 		| Password    | Test88               |
+ 		| AgentCode   | Test88               |
- 		| PaymentMethodType | Credit card          |
- 		| GLAccount         | 1-1020: VISA         |
- 		| Key               | Value                |
- 		| GatewayType       | Iats                 |
- 		| AccountCode       | IA_CC_CA             |
- 		| Region            | United States/Canada |
- 		| AccountName       | IATS CC CA           |
- 		| Password          | Test88               |
- 		| AgentCode         | Test88               |
+ 		| Key         | Value                |
+ 		| GatewayType | Iats                 |
+ 		| AccountCode | IA_CC_CA             |
+ 		| Region      | United States/Canada |
+ 		| AccountName | IATS CC CA           |
+ 		| Password    | Test88               |
+ 		| AgentCode   | Test88               |
- 		| PaymentMethodType | Credit card          |
- 		| GLAccount         | 1-1020: VISA         |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPassThrough                  |
- 		| AccountCode       | BB_CC_CA                         |
- 		| Environment       | Sandbox                          |
- 		| AccountName       | Bambora CC CA                    |
- 		| SpreedlyType      | Bambora NA                       |
- 		| MerchantId        | 300212633                        |
- 		| UserName          | johnasi                          |
- 		| Password          | FullAccess777!                   |
- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |
+ 		| Key          | Value                            |
+ 		| GatewayType  | ImisPassThrough                  |
+ 		| AccountCode  | BB_CC_CA                         |
+ 		| Environment  | Sandbox                          |
+ 		| AccountName  | Bambora CC CA                    |
+ 		| SpreedlyGatewayType | Bambora NA                       |
+ 		| MerchantId   | 300212633                        |
+ 		| UserName     | johnasi                          |
+ 		| Password     | FullAccess777!                   |
+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPassThrough                  |
- 		| AccountCode       | BB_CC_CA                         |
- 		| Environment       | Sandbox                          |
- 		| AccountName       | Bambora CC CA                    |
- 		| SpreedlyType      | Bambora NA                       |
- 		| MerchantId        | 300212633                        |
- 		| UserName          | johnasi                          |
- 		| Password          | FullAccess777!                   |
- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |
+ 		| Key          | Value                            |
+ 		| GatewayType  | ImisPassThrough                  |
+ 		| AccountCode  | BB_CC_CA                         |
+ 		| Environment  | Sandbox                          |
+ 		| AccountName  | Bambora CC CA                    |
+ 		| SpreedlyType | Bambora NA                       |
+ 		| MerchantId   | 300212633                        |
+ 		| UserName     | johnasi                          |
+ 		| Password     | FullAccess777!                   |
+ 		| ApiKey       | 1bb1e53329fD4009887fB123A7Ae91A2 |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_CA                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC CA                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
+ 		| Key          | Value                                                            |
+ 		| GatewayType  | ImisPassThrough                                                  |
+ 		| AccountCode  | EL_CC_CA                                                         |
+ 		| Environment  | Sandbox                                                          |
+ 		| AccountName  | Elavon CC CA                                                     |
+ 		| SpreedlyType | Elavon                                                           |
+ 		| MerchantId   | 0023010                                                          |
+ 		| UserName     | apiuser                                                          |
+ 		| Pin          | FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS |
- 		| PaymentMethodType | Credit card                                                      |
- 		| GLAccount         | 1-1020: VISA                                                     |
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_CA                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC CA                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
+ 		| Key          | Value                                                            |
+ 		| GatewayType  | ImisPassThrough                                                  |
+ 		| AccountCode  | EL_CC_CA                                                         |
+ 		| Environment  | Sandbox                                                          |
+ 		| AccountName  | Elavon CC CA                                                     |
+ 		| SpreedlyType | Elavon                                                           |
+ 		| MerchantId   | 0023010                                                          |
+ 		| UserName     | apiuser                                                          |
+ 		| Pin          | FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS |
- 		| PaymentMethodType | Credit card                                                      |
- 		| GLAccount         | 1-1020: VISA                                                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/UnitedKingdomPaymentGateways.feature)
- 		| Key               | Value                   |
- 		| GatewayType       | Iats                    |
- 		| AccountCode       | IA_CC_UK                |
- 		| AccountName       | IATS CC UK              |
- 		| Region            | United Kingdom & Europe |
- 		| Password          | rapidtest7              |
- 		| AgentCode         | UIAW88                  |
+ 		| Key         | Value                   |
+ 		| GatewayType | Iats                    |
+ 		| AccountCode | IA_CC_UK                |
+ 		| Region      | United Kingdom & Europe |
+ 		| Password    | rapidtest7              |
+ 		| AgentCode   | UIAW88                  |
+ 		| AccountName | IATS CC UK              |
- 		| PaymentMethodType | Credit card             |
- 		| GLAccount         | 1-1020: VISA            |
- 		| Key               | Value                   |
- 		| GatewayType       | Iats                    |
- 		| AccountCode       | IA_CC_UK                |
- 		| AccountName       | IATS CC UK              |
- 		| Region            | United Kingdom & Europe |
- 		| Password          | rapidtest7              |
- 		| AgentCode         | UIAW88                  |
+ 		| Key         | Value                   |
+ 		| GatewayType | Iats                    |
+ 		| AccountCode | IA_CC_UK                |
+ 		| Region      | United Kingdom & Europe |
+ 		| Password    | rapidtest7              |
+ 		| AgentCode   | UIAW88                  |
+ 		| AccountName | IATS CC UK              |
- 		| PaymentMethodType | Credit card             |
- 		| GLAccount         | 1-1020: VISA            |
- 		| Key               | Value                                |
- 		| GatewayType       | ImisPay                              |
- 		| AccountCode       | IP_CC_UK                             |
- 		| Region            | United Kingdom & Europe              |
- 		| AccountName       | IMIS Pay CC UK                       |
- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
- 		| AppKey            | wfENkB9cKTSftNoG                     |
- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |
+ 		| Key         | Value                                |
+ 		| GatewayType | ImisPay                              |
+ 		| AccountCode | IP_CC_UK                             |
+ 		| Region      | United Kingdom & Europe              |
+ 		| AccountName | IMIS Pay CC UK                       |
+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
+ 		| AppKey      | wfENkB9cKTSftNoG                     |
+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |
- 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
- 		| Key               | Value                                |
- 		| GatewayType       | ImisPay                              |
- 		| AccountCode       | IP_CC_UK                             |
- 		| Region            | United Kingdom & Europe              |
- 		| AccountName       | IMIS Pay CC UK                       |
- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
- 		| AppKey            | wfENkB9cKTSftNoG                     |
- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |
+ 		| Key         | Value                                |
+ 		| GatewayType | ImisPay                              |
+ 		| AccountCode | IP_CC_UK                             |
+ 		| Region      | United Kingdom & Europe              |
+ 		| AccountName | IMIS Pay CC UK                       |
+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
+ 		| AppKey      | wfENkB9cKTSftNoG                     |
+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |
- 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/AustraliaPaymentGateways.feature)
- 		| Key               | Value                                |
- 		| GatewayType       | ImisPay                              |
- 		| AccountCode       | IP_CC_AU                             |
- 		| Region            | Australia                            |
- 		| AccountName       | IMIS Pay CC AU                       |
- 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
+ 		| Key         | Value                                |
+ 		| GatewayType | ImisPay                              |
+ 		| AccountCode | IP_CC_AU                             |
+ 		| Region      | Australia                            |
+ 		| AccountName | IMIS Pay CC AU                       |
+ 		| DigitalKey  | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
- 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
- 		| Key               | Value                                |
- 		| GatewayType       | ImisPay                              |
- 		| AccountCode       | IP_CC_AU                             |
- 		| Region            | Australia                            |
- 		| AccountName       | IMIS Pay CC AU                       |
- 		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
+ 		| Key         | Value                                |
+ 		| GatewayType | ImisPay                              |
+ 		| AccountCode | IP_CC_AU                             |
+ 		| Region      | Australia                            |
+ 		| AccountName | IMIS Pay CC AU                       |
+ 		| DigitalKey  | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |
- 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
- 		| GLAccount         | 1-1060: Debit                        |
- 		| GLAccount         | 1-1060: Debit                        |
- 		| Key               | Value            |
- 		| GatewayType       | SecurePay        |
- 		| AccountCode       | SP_CC_AU         |
- 		| Password          | abc123           |
- 		| Environment       | Sandbox          |
- 		| AccountName       | Secure Pay CC AU |
- 		| MerchantId        | ABC0001          |
+ 		| Key         | Value            |
+ 		| GatewayType | SecurePay        |
+ 		| AccountCode | SP_CC_AU         |
+ 		| Password    | abc123           |
+ 		| Environment | Sandbox          |
+ 		| AccountName | Secure Pay CC AU |
+ 		| MerchantId  | ABC0001          |
- 		| PaymentMethodType | Credit card      |
- 		| GLAccount         | 1-1020: VISA     |
- 		| Key               | Value            |
- 		| GatewayType       | SecurePay        |
- 		| AccountCode       | SP_CC_AU         |
- 		| Password          | abc123           |
- 		| Environment       | Sandbox          |
- 		| AccountName       | Secure Pay CC AU |
- 		| MerchantId        | ABC0001          |
+ 		| Key         | Value            |
+ 		| GatewayType | SecurePay        |
+ 		| AccountCode | SP_CC_AU         |
+ 		| Password    | abc123           |
+ 		| Environment | Sandbox          |
+ 		| AccountName | Secure Pay CC AU |
+ 		| MerchantId  | ABC0001          |
- 		| PaymentMethodType | Credit card      |
- 		| GLAccount         | 1-1020: VISA     |
- 		| Key               | Value            |
- 		| GatewayType       | SecurePay        |
- 		| AccountCode       | SP_DD_AU         |
- 		| Password          | abc123           |
- 		| Environment       | Sandbox          |
- 		| AccountName       | Secure Pay DD AU |
- 		| MerchantId        | ABC0001          |
+ 		| Key				| Value            |
+ 		| GatewayType		| SecurePay        |
+ 		| AccountCode		| SP_DD_AU         |
+ 		| Password			| abc123           |
+ 		| Environment		| Sandbox          |
+ 		| AccountName		| Secure Pay DD AU |
+ 		| MerchantId		| ABC0001          |
- 		| GLAccount         | 1-1060: Debit    |
- 		| Key               | Value            |
- 		| GatewayType       | SecurePay        |
- 		| AccountCode       | SP_DD_AU         |
- 		| Password          | abc123           |
- 		| Environment       | Sandbox          |
- 		| AccountName       | Secure Pay DD AU |
- 		| MerchantId        | ABC0001          |
+ 		| Key				| Value            |
+ 		| GatewayType		| SecurePay        |
+ 		| AccountCode		| SP_DD_AU         |
+ 		| Password			| abc123           |
+ 		| Environment		| Sandbox          |
+ 		| AccountName		| Secure Pay DD AU |
+ 		| MerchantId		| ABC0001          |
- 		| GLAccount         | 1-1060: Debit    |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/NewZealandPaymentGateways.feature)
- 		| GLAccount         | 1-1020: VISA                         |
- 		| GLAccount         | 1-1020: VISA                         |
- 		| GLAccount         | 1-1060: Debit                        |
- 		| GLAccount         | 1-1060: Debit                        |
- Scenario: Adding Secure Pay NZ CC
+ Scenario: Adding Secure Pay NZ
- 		| Key               | Value                     |
- 		| GatewayType       | SecurePay                 |
- 		| AccountCode       | SP_NZ                     |
- 		| Password          | abc123                    |
- 		| Environment       | Sandbox                   |
- 		| AccountName       | Secure Pay NZ             |
- 		| MerchantId        | ABC0001                   |
+ 		| Key         | Value         |
+ 		| GatewayType | SecurePay     |
+ 		| AccountCode | SP_NZ         |
+ 		| Password    | abc123        |
+ 		| Environment | Sandbox       |
+ 		| AccountName | Secure Pay NZ |
+ 		| MerchantId  | ABC0001       |
- 		| PaymentMethodCode | SP_CC_NZ                  |
- 		| PaymentMethodName | Secure Pay CC New Zealand |
- 		| PaymentMethodType | Credit card               |
- 		| GLAccount         | 1-1020: VISA              |
- 		| Key               | Value                     |
- 		| GatewayType       | SecurePay                 |
- 		| AccountCode       | SP_NZ                     |
- 		| Password          | abc123                    |
- 		| Environment       | Sandbox                   |
- 		| AccountName       | Secure Pay NZ             |
- 		| MerchantId        | ABC0001                   |
+ 		| Key         | Value         |
+ 		| GatewayType | SecurePay     |
+ 		| AccountCode | SP_NZ         |
+ 		| Password    | abc123        |
+ 		| Environment | Sandbox       |
+ 		| AccountName | Secure Pay NZ |
+ 		| MerchantId  | ABC0001       |
- 		| PaymentMethodCode | SP_CC_NZ                  |
- 		| PaymentMethodName | Secure Pay CC New Zealand |
- 		| PaymentMethodType | Credit card               |
- 		| GLAccount         | 1-1020: VISA              |
- 	And I verify autopay
- 		| Key                 | Value |
- 		| RecurringDonation   | true  |
- 		| RenewingMemberships | true  |
- 
- Scenario: Adding Secure Pay NZ DD
- 	When I setup a gateway suite
- 		| Key               | Value                     |
- 		| GatewayType       | SecurePay                 |
- 		| AccountCode       | SP_NZ                     |
- 		| Password          | abc123                    |
- 		| Environment       | Sandbox                   |
- 		| AccountName       | Secure Pay NZ             |
- 		| MerchantId        | ABC0001                   |
- 		| PaymentMethodCode | SP_DD_NZ                  |
- 		| PaymentMethodName | Secure Pay DD New Zealand |
- 		| PaymentMethodType | Direct debit              |
- 		| GLAccount         | 1-1060: Debit             |
- 	And I setup autopay
- 		| Key                 | Value |
- 		| RecurringDonation   | true  |
- 		| RenewingMemberships | true  |
- 	Then I verify a gateway suite
- 		| Key               | Value                     |
- 		| GatewayType       | SecurePay                 |
- 		| AccountCode       | SP_NZ                     |
- 		| Password          | abc123                    |
- 		| Environment       | Sandbox                   |
- 		| AccountName       | Secure Pay NZ             |
- 		| MerchantId        | ABC0001                   |
- 		| PaymentMethodCode | SP_DD_NZ                  |
- 		| PaymentMethodName | Secure Pay DD New Zealand |
- 		| PaymentMethodType | Direct debit              |
- 		| GLAccount         | 1-1060: Debit             |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Advertising/MediaAsset/RateCardsDetails.feature)
- 
- Scenario: Verify Not able to update Rate card details matrix after deleting ad size(s) or Frequency 
- 	Given I am on the Staff site as designated user Staff
- 	When I update Rate card details matrix after deleting ad size(s) or Frequency for ACRP Online, ACRP23d and 4 Color 
- 	    | Ad size    | Frequency |
- 	    | Full Page  | 1         |
- 	    | Back Cover | 3         | 
- 	Then I verify message Select ad color, ad size and frequency in order to create rate card details matrix
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Finance/UKPayCentralSDKFinance.feature)
- 		| Key               | Value                                |
- 		| GatewayType       | ImisPay                              |
- 		| AccountCode       | IP_CC_UK                             |
- 		| Region            | United Kingdom & Europe              |
- 		| AccountName       | IMIS Pay CC UK                       |
- 		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
- 		| AppKey            | wfENkB9cKTSftNoG                     |
- 		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
- 		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |
+ 		| Key         | Value                                |
+ 		| GatewayType | ImisPay                              |
+ 		| AccountCode | IP_CC_UK                             |
+ 		| Region      | United Kingdom & Europe              |
+ 		| AccountName | IMIS Pay CC UK                       |
+ 		| AccountId   | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |
+ 		| AppKey      | wfENkB9cKTSftNoG                     |
+ 		| AppId       | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |
+ 		| MerchantId  | MER_7e3e2c7df34f42819b3edee31022ee3f |
- 		| PaymentMethodType | Credit card                          |
- 		| GLAccount         | 1-1020: VISA                         |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Finance/PayCentralSDKFinance.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| GLAccount         | 1-1060: Debit                    |
+ 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Finance/Finance.Feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 	And I start checking out items in the cart
+ 	And I checkout items in the cart
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 
- Scenario: Verify unapply payment
- 	Given I am on the Staff site as designated user System Administrator
- 	And I order product
- 		| Key       | Value                    |
- 		| Product   | Networking Your Business |
- 		| ClearCart | True                     |
- 	And I checkout items in the cart
- 		| Key           | Value                 |
- 		| PaymentMethod | Main Checking Account |
- 		| CheckNumber   | 1234                  |
- 	And I save available credit value before update
- 	When I adjust payment with Unapply adjustment type
- 	Then I verify that the credit is open
- 
- Scenario: Verify reversal payment
- 	Given I am on the Staff site as designated user System Administrator
- 	And I order product
- 		| Key       | Value                    |
- 		| Product   | Networking Your Business |
- 		| ClearCart | True                     |
- 	And I checkout items in the cart
- 		| Key           | Value                 |
- 		| PaymentMethod | Main Checking Account |
- 		| CheckNumber   | 1234                  |
- 	When I adjust payment with Reverse adjustment type
- 	Then I verify that payment is reversed
- 
- Scenario: Verify refund payment
- 	Given I am on the Staff site as designated user System Administrator
- 	And I order product
- 		| Key       | Value                    |
- 		| Product   | Networking Your Business |
- 		| ClearCart | True                     |
- 	And I create an event using existing event
- 		| Key       | Value             |
- 		| EventName | Annual Conference |
- 		| Status    | Active            |
- 	And I register myself for an event
- 		| Key                | Value                      |
- 		| RegistrationOption | Full Conference            |
- 		| Program-1          | Exhibit Hall Hours - Day 1 |
- 	And I checkout items in the cart
- 		| Key           | Value                 |
- 		| PaymentMethod | Main Checking Account |
- 		| CheckNumber   | 1234                  |
- 	When I adjust payment with Refund adjustment type and CASH payment method
- 		| Description              | Percentage From Amount To Refund |
- 		| Networking Your Business | 100                              |
- 		| Annual Conference        | 50                               |
- 	Then I verify that payment is refund
- 
- Scenario: Verify Posting of Batches
- 	Given I am on the Staff site as designated user Staff
- 	And I order product
- 		| Key     | Value                    |
- 		| Product | Networking Your Business |
- 	And I checkout items in the cart
- 		| Key           | Value                 |
- 		| PaymentMethod | Main Checking Account |
- 		| CheckNumber   | 1234                  |
- 	When I post the first batch
- 	Then I verify that the batch is posted
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment IMIS Pay CC US   
- 	Given I set system up with a gateway
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Environment       | Sandbox                          |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key           | Value            |
- 		| PaymentMethod | IMIS Pay CC US   |
- 		| CardNumber    | 4012888888881881 |
- 		| CardExpiry    | 05/29            |
- 		| PostalCode    | 123              |
- 		| CardCVC       | 787              |
- 	Then I verify successfully joined as a member Associate
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment IMIS Pay DD US
- 	Given I set system up with a gateway
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_DD_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80031389                         |
- 		| AccountName       | IMIS Pay DD US                   |
- 		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |
- 		| PaymentMethodType | Direct debit                     |
- 		| GLAccount         | 1-1060: Debit                    |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key               | Value          |
- 		| PaymentMethod     | IMIS Pay DD US |
- 		| RoutingNumber     | 026009593      |
- 		| AccountNumber     | 001221111221   |
- 		| PaymentMethodType | Direct debit   |
- 	Then I verify successfully joined as a member Associate
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment iATS CC US
- 	Given I set system up with a gateway
- 		| Key               | Value                |
- 		| GatewayType       | Iats                 |
- 		| AccountCode       | IA_CC_US             |
- 		| Region            | United States/Canada |
- 		| AccountName       | IATS CC US           |
- 		| Password          | Test88               |
- 		| AgentCode         | Test88               |
- 		| PaymentMethodType | Credit card          |
- 		| GLAccount         | 1-1020: VISA         |
- 		| Environment       | Sandbox              |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key           | Value            |
- 		| PaymentMethod | IATS CC US       |
- 		| CardNumber    | 4222222222222220 |
- 		| CardExpiry    | 05/29            |
- 		| PostalCode    | 90014            |
- 		| CardCVC       | 787              |
- 	Then I verify successfully joined as a member Associate
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment Payflow CC US
- 	Given I set system up with a gateway
- 		| Key               | Value          |
- 		| GatewayType       | PayFlowPro     |
- 		| AccountCode       | PF_CC_US       |
- 		| Region            | United States  |
- 		| AccountName       | Pay Flow CC US |
- 		| Password          | qaperson1      |
- 		| UserName          | asicctest      |
- 		| Partner           | Verisign       |
- 		| Vendor            | asicctest      |
- 		| Environment       | Sandbox        |
- 		| PaymentMethodType | Credit card    |
- 		| GLAccount         | 1-1020: VISA   |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key                    | Value            |
- 		| PaymentMethod          | Pay Flow CC US   |
- 		| CardNumber             | 5555555555554444 |
- 		| CardExpiry             | 05232025         |
- 		| CardCVC                | 123              |
- 		| PostalCode             | 78722            |
- 	Then I verify successfully joined as a member Associate
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment Bambora CC US
- 	Given I set system up with a gateway
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPassThrough                  |
- 		| AccountCode       | BB_CC_US                         |
- 		| Environment       | Sandbox                          |
- 		| AccountName       | Bambora CC US                    |
- 		| SpreedlyType      | Bambora NA                       |
- 		| MerchantId        | 300212633                        |
- 		| UserName          | johnasi                          |
- 		| Password          | FullAccess777!                   |
- 		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |
- 		| PaymentMethodType | Credit card                      |
- 		| GLAccount         | 1-1020: VISA                     |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key                    | Value            |
- 		| PaymentMethod          | Bambora CC US    |
- 		| CardNumber             | 5555555555554444 |
- 		| CardExpiry             | 05232025         |
- 		| CardCVC                | 123              |
- 		| PostalCode             | 78722            |
- 	Then I verify successfully joined as a member Associate
- 
- @QuickSweep
- @Payments
- Scenario: Verify if a public user can join a non recurring membership with payment Elavon CC US
- 	Given I set system up with a gateway
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_US                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC US                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
- 		| PaymentMethodType | Credit card                                                      |
- 		| GLAccount         | 1-1020: VISA                                                     |
- 	And I select Join Associate membership on MBRR
- 	When I add a new random MBRR contact and join Associate
- 	And I submit a payment for a product
- 		| Key                    | Value            |
- 		| PaymentMethod          | Elavon CC US     |
- 		| CardNumber             | 4012888888881881 |
- 		| CardExpiry             | 05/29            |
- 		| CardCVC                | 123              |
- 		| PostalCode             | 78722            |
- 	Then I verify successfully joined as a member Associate
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Staff/ContactSecurity.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Staff/LicenseManagement.feature)
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
- 		| Key               | Value                            |
- 		| GatewayType       | ImisPay                          |
- 		| AccountCode       | IP_CC_US                         |
- 		| Region            | United States                    |
- 		| XWebId            | 800000022538                     |
- 		| TerminalId        | 80033565                         |
- 		| AccountName       | IMIS Pay CC US                   |
- 		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
- 		| PaymentMethodType | Credit card                      |
+ 		| Key              | Value                            |
+ 		| GatewayType      | ImisPay                          |
+ 		| AccountCode      | IP_CC_US                         |
+ 		| Region           | United States                    |
+ 		| XWebId           | 800000022538                     |
+ 		| TerminalId       | 80033565                         |
+ 		| AccountName      | IMIS Pay CC US                   |
+ 		| AuthorizationKey | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |
+ 		| GLAccount        | 1-1020: VISA                     |
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Events/EventsStaffUser.feature)
- @BUG74350
- Scenario Outline: Verify the cancel button is greyed out after deleting an event
- 	Given I create an event
- 		| Key       | Value             |
- 		| EventName | SearchingForEvent |
- 		| Status    | Active            |
- 	When I cancel the event
- 	Then I delete the event but dont exit
- 	Then I verify the cancel button is greyed out
- Scenario: Verify digits are rounded properly on resource quantity
- 	Given I create an event using event template Webinar
- 		| Key       | Value         |
- 		| EventName | Testing Event |
- 		| Status    | Active        |
- 	When I add a resource with a quantity <NumberGiven>
- 	Then I verify the resource is <NumberExpected>
- Examples:
- 	| NumberGiven | NumberExpected |
- 	| 15.2345     | 15.2345        |
- 	| 15.2300     | 15.23          |
- 	| 15.0000     | 15             |
- 	| 15.24       | 15.24          |
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Membership/Billing.feature)
- Scenario: Verify a public user can apply a payment for a cash base renewal
+ Scenario: Verify a public user can apply a payment for a cash bash renewal
- 		| PostalCode             | 78722            |
- 
- @BillingFinanceQuickSweep
- Scenario: Verify join no payment promotion
- 	Given I am on the Staff site as designated user Staff
- 	And I add a new contact
- 		| Key       | Value   |
- 		| FirstName | Test    |
- 		| LastName  | Contact |
- 	When I join now as StudentMemberJoin
- 	And I checkout items in the cart
- 		| Key           | Value           |
- 		| PaymentMethod | Without payment |
- 		| PromoCode     | DVETERAN        |
- 	Then I verify order was submitted without payment
- 
- @BillingFinanceQuickSweep
- Scenario: Verify Accrual dues invoice cancellation no payment
- 	Given I am on the Staff site as designated user Staff
- 	When I cancel renewal for user with id 20804
- 	And I checkout items in the cart
- 		| Key           | Value           |
- 		| PaymentMethod | Without payment |
- 	Then I verify order was submitted without payment
- 
- @BillingFinanceQuickSweep
- Scenario: Verify Cash dues invoice cancellation no payment
- 	Given I am on the Staff site as designated user Staff
- 	When I cancel renewal for user with id 21566
- 	And I checkout items in the cart
- 		| Key           | Value           |
- 		| PaymentMethod | Without payment |
- 	Then I verify order was submitted without payment
- 
- @BillingFinanceQuickSweep
- Scenario: Verify Join No Payment Complimentary
- 	Given I am on the Staff site as designated user Staff
- 	And I add a new contact
- 		| Key       | Value   |
- 		| FirstName | Test    |
- 		| LastName  | Contact |
- 	When I join now as RetiredMembers
- 	And I checkout items in the cart
- 		| Key           | Value           |
- 		| PaymentMethod | Without payment |
- 	Then I verify order was submitted without payment
- @MBRR
- Scenario: Verify a public user can join for a non-dues product
- 	Given I am on the Mbrr site
- 	And I create a new contact
- 		| Key        | Value             |
- 		| FirstName  | Bob               |
- 		| LastName   | Smith             |
- 		| Country    | Zambia            |
- 		| Address1   | 123 Some Street   |
- 		| City       | Austin            |
- 		| PostalCode | 11111             |
- 		| Email      | test@imisdemo.com |
- 		| Password   | demo123           |
- 	When I join now as NonMemberSubscriptions on Mbrr site
- 		| Key       | Value   |
- 		| ItemNames | Journal |
- 	And I checkout items in the cart
- 		| Key                 | Value |
- 		| PurchaseOrderNumber | 123   |
- 	Then I verify a non-dues product is ordered
- 
- @BillingFinanceQuickSweep
- Scenario: Verify standard prorating works
- 	Given I am on the Staff site as designated user System Administrator
- 	And I change billing time to Annual for billing cycle Regular Membership Fees
- 	And I add a new contact
- 		| Key       | Value   |
- 		| FirstName | Test    |
- 		| LastName  | Contact |
- 	When I join now as RegularMembershipFees
- 	Then I verify Voluntary Contributions product price is 20.00
- 	And I verify the membership expires at the end of the fiscal year
- 
- @MBRR
- Scenario: Verify standard prorating works on Member site
- 	Given I am on the Staff site as designated user System Administrator
- 	And I change billing time to Annual for billing cycle Regular Membership Fees
- 	And I am on the Mbrr site
- 	And I logout on the current page
- 	And I create a new contact
- 		| Key       | Value   |
- 		| FirstName | Test    |
- 		| LastName  | Contact |
- 	When I join now as RegularMembershipFees on Mbrr site
- 		| Key       | Value            |
- 		| ItemNames | PAC Contribution |
- 		| AmountTo  | 120.00           |
- 	Then I verify Voluntary Contributions product price is 120.00
- 	And I verify the membership expires at the end of the fiscal year
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Features/Membership/Renewals.feature)
- Scenario: Verify renew in advance
- 	Given I am on the Staff site as designated user System Administrator
- 	When I renew membership for user with id 23220
- 	And I checkout items in the cart
- 		| Key           | Value                 |
- 		| PaymentMethod | Main Checking Account |
- 		| CheckNumber   | 1234                  |
- 	Then I verify membership for user with id 23220 was renewed
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/CartStepDef.cs)
+         private readonly IWebDriver _driver;
+             _driver = driver;
+             CartTestMethodsV10 = new CartTestMethodsV10(driver, context);
+         public CartTestMethodsV10 CartTestMethodsV10 { get; set; }
-         [Then(@"I verify the cart contains GstInc tax for the previously created item")]
-         public void VerifyCartContainsGstIncTaxForPrevCreatedItem()
+         [Then(@"I verify the cart contains GstInc tax for item (.*)")]
+         public void VerifyCartContainsGstIncTaxForItem(string itemId)
-             CartTestMethods.VerifyCartContainsGstIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });
+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];
+             CartTestMethodsV10.VerifyCartContainsGstIncTaxForItems(new List<string>() { itemId });
-         [Then(@"I verify the cart does not contain GstInc tax for the previously created item")]
-         public void VerifyCartDoesNotContainGstIncTaxForPrevCreatedItem()
+         [Then(@"I verify the cart does not contain GstInc tax for item (.*)")]
+         public void VerifyCartDoesNotContainGstIncTaxForItem(string itemId)
-             CartTestMethods.VerifyCartDoesNotContainGstIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });
+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];
+             CartTestMethodsV10.VerifyCartDoesNotContainGstIncTaxForItems(new List<string>() { itemId });
- 
-         [Then(@"I verify the cart contains VatInc tax for the previously created item")]
+         [Then(@"I verify the cart contains VatInc tax for item (.*)")]
+         public void VerifyCartContainsVatIncTaxForItem(string itemId)
-         public void VerifyCartContainsVatIncTaxForPrevCreatedItem()
-             CartTestMethods.VerifyCartContainsVatIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });
+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];
+             CartTestMethodsV10.VerifyCartContainsVatIncTaxForItems(new List<string>() { itemId });
-         [Then(@"I verify the cart does not contain VatInc tax for the previously created item")]
-         public void VerifyCartDoesNotContainVatIncTaxForItem()
+         [Then(@"I verify the cart does not contain VatInc tax for item (.*)")]
+         public void VerifyCartDoesNotContainVatIncTaxForItem(string itemId)
-             CartTestMethods.VerifyCartDoesNotContainVatIncTaxForItems(new[] { (string)_context.DataStorage["ItemCode"] });
+             if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];
+             CartTestMethodsV10.VerifyCartDoesNotContainVatIncTaxForItems(new List<string>() { itemId });
-         [Then(@"I verify the cart contains Canada tax")]
-         public void VerifyCartContainsCanadaTax()
-         {
-             CartTestMethods.VerifyCartContainsCanadaTax();
-         }
- 
-         [Then(@"I verify the cart does not contain Canada tax")]
-         public void VerifyCartDoesNotContainCanadaTax()
-         {
-             CartTestMethods.VerifyCartDoesNotContainCanadaTax();
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/OrderConfirmationStepDef.cs)
-         [Then(@"I verify the order confirmation contains Canada tax")]
-         public void VerifyOrderConfirmationContainsCanadaTax()
-         {
-             OrderConfirmationTestMethodsV10.VerifyOrderConfirmationContainsCanadaTax();
-         }
- 
-         [Then(@"I verify the order confirmation does not contain Canada tax")]
-         public void VerifyOrderConfirmationDoesNotContainCanadaTax()
-         {
-             OrderConfirmationTestMethodsV10.VerifyOrderConfirmationDoesNotContainCanadaTax();
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/InventoryReceiptsStepDef.cs)
-         public InventoryReceiptsStepDef(IWebDriver driver, IAsiWebContext context, ProductContext productContext)
+         public InventoryReceiptsStepDef(IWebDriver driver, IAsiWebContext context, SpecFlowContext scenarioContext)
-             InventoryReceiptsTestMethods = new InventoryReceiptsTestMethods(driver, context, productContext);
+             InventoryReceiptsTestMethods = new InventoryReceiptsTestMethods(driver, context, scenarioContext);
-         public void SaveProductDetailsBeforeUpdate(string productCode)
+         public void SaveInventoryDetailsBeforeUpdate(string productCode)
-             InventoryReceiptsTestMethods.SaveProductDetailsBeforeUpdate(productCode);
+             InventoryReceiptsTestMethods.SaveInventoryDetailsBeforeUpdate(productCode);
-         [When("I process inventory (Receipt|Adjustment) with (positive|negative) quantity")]
-         public void ProcessInventoryReceipt(string type, string quantityDirection)
+         [When("I process inventory (Receipt|Adjustment) for (.*) with (positive|negative) quantity")]
+         public void SelectInventoryReceiptsFromCommerce(string type, string productName, string quantityDirection)
-             InventoryReceiptsTestMethods.ProcessInventoryReceipt(type, quantityDirection == "positive");
+             InventoryReceiptsTestMethods.SelectInventoryReceiptsFromCommerce(type, productName, quantityDirection == "positive");
-         [Then("I verify inventory (Receipt|Adjustment) is applied")]
-         public void VerifyInventoryDetailsAreUpdated(string type)
+         [Then("I verify inventory (Receipt|Adjustment) for (.*) is applied")]
+         public void VerifyInventoryDetailsAreUpdated(string type, string productName)
-             InventoryReceiptsTestMethods.VerifyInventoryDetailsAreUpdated(type);
+             InventoryReceiptsTestMethods.VerifyInventoryDetailsAreUpdated(type, productName);
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Continuum/ReportWriterStepDef.cs)
-             var user = new ImisUser("ReportWriterUser",_context.Logger());
+             var user = new ImisUser("ReportWriterUser", new ConsoleLogger());
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/PaymentGateways/GatewaySetupStepDef.cs)
-         public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context, ScenarioContext scenarioContext)
+         public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context)
-             ScenarioContext = scenarioContext;
-         ScenarioContext ScenarioContext { get; }
-             if (ScenarioContext.ScenarioInfo.Tags.Contains("SkipSetGatewayStep"))
-                 return;
- 
- 
-         [Given(@"I fill out the following in a new gateway")]
-         public void GivenIFillOutTheFollowingInANewGateway(Table data)
-         {
-             GatewayTestMethods.EnsurePayCentralIsReady();
-             GatewayTestMethods.FillOutNewGateway(data.CreateInstance<GatewayData>());
-         }
- 
-         [When(@"I save and close the gateway dialogue")]
-         public void WhenISaveAndCloseTheGatewayDialogue()
-         {
-             GatewayTestMethods.AttemptToSaveAndCloseGateway();
-         }
- 
-         [Then(@"I should recieve a validation error")]
-         public void ThenIShouldRecieveAValidationError()
-         {
-             GatewayTestMethods.VerifyLinkValidationError();
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Advertising/MediaAsset/RateCardsDetailsStepDef.cs)
- 
-         [When(@"I update Rate card details matrix after deleting ad size\(s\) or Frequency for (.*), (.*) and (.*)")]
-         public void WhenIUpdateRateCardDetailsMatrixAfterDeletingAdSizeSOrFrequencyForACRPOnlineACRPdAndColor(string mediaAsset,string rateCard,string adColor, Table table)
-         {
-             RateCardDetailsTestMethod.UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(mediaAsset, rateCard, adColor, table);
-         }
- 
-         [Then(@"I verify message (.*)")]
-         public void ThenIVerifyMessage(string message)
-         {
-             RateCardDetailsTestMethod.VerifyMessage(message);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Marketing/MarketingStepDef.cs)
-             var user = new ImisUser("CommunicationTemplateUser", _context.Logger());
+             var user = new ImisUser("CommunicationTemplateUser", new ConsoleLogger());
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Finance/FinanceStepDef.cs)
-         [Given(@"I save available credit value before update")]
-         public void SaveAvailableCreditValueBeforeUpdate()
-         {
-             FinanceTestMethods.SaveAvailableCreditValue();
-         }
- 
-         [When($@"I adjust payment with (Unapply|Reverse) adjustment type")]
-         public void AdjustPaymentWithAdjustmentType(string adjustmentType)
-         {
-             FinanceTestMethods.AdjustPayment(adjustmentType);
-         }
- 
-         [When(@$"I adjust payment with Refund adjustment type and (DUMMYVISA|CASH2|CASH|PAYPAL) payment method")]
-         public void AdjustPaymentWithRefundAdjustmentType(string paymentMethod, Table data)
-         {
-             var refundDataSet = data.CreateSet<RefundData>();
-             FinanceTestMethods.RefundPayment(paymentMethod, refundDataSet);
-         }
- 
-         [Then(@"I verify that the credit is open")]
-         public void VerifyThatTheCreditIsOpen()
-         {
-             FinanceTestMethods.VerifyThatCreditIsOpen();
-         }
- 
-         [Then(@"I verify that payment is reversed")]
-         public void VerifyThatPaymentIsReversed()
-         {
-             FinanceTestMethods.VerifyThatPaymentIsReversed();
-         }
- 
-         [Then(@"I verify that payment is refund")]
-         public void VerifyThatPaymentIsRefund()
-         {
-             FinanceTestMethods.VerifyThatPaymentIsRefund();
-         }
- 
-         [When(@"I post the first batch")]
-         public void PostTheFirstBatch()
-         {
-             FinanceTestMethods.PostTheFirstBatch();
-         }
- 
-         [Then(@"I verify that the batch is posted")]
-         public void VerifyThatTheBatchIsPosted()
-         {
-             FinanceTestMethods.VerifyThatTheBatchIsPosted();
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Staff/OpenIdStepDef.cs)
-             catch (Exception)
+             catch (Exception e)
-                 throw;
+                 throw e;
-             catch (Exception)
+             catch (Exception e)
-                 throw;
+                 throw e;
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Staff/StaffStepDef.cs)
-         [When("I click on Account Area Batch Toggle icon")]
+     }
-         public void IClickOnAccountAreaBatchToggleIcon()
-         {
-             MiscNavigationTestMethods.ClickOnAccountAreaBatchToggleIcon();
-         [Then("I verify manual batch dropdown doesn't exist")]
-         public void ThenIVerifyElementContainsSelectTransactionDate()
-         {
-             MiscNavigationTestMethods.VerifyExistanceOfBatchSelectVisibilityPanelDiv();
-         }
-     }
- }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Events/EventStepDef.cs)
- 
-         [Then(@"I delete the event but dont exit")]
-         public void ThenIDeleteTheEventButDontExit()
-         {
-             EventTestMethods.DeleteTheEventButDontExit();
-         }
- 
-         [Then(@"I verify the cancel button is greyed out")]
-         public void ThenIVerifyTheCancelButtonIsGreyedOut()
-         {
-             EventTestMethods.VerifyTheCancelButtonIsGreyedOut();
-         }
- 
-         [When(@"I add a resource with a quantity (.*)")]
-         public void WhenIAddAResourceWithAQuantity(decimal quantity)
-         {
-             EventTestMethods.AddAResourceWithQuantity(quantity);
-         }
- 
- 
-         [Then(@"I verify the resource is (.*)")]
-         public void ThenIVerifyTheResourceIs(decimal expectedQuantity)
-         {
-             EventTestMethods.VerifyTheResourceIs(expectedQuantity);
-         }
- 
-         [Given(@"I add a pricing group to an event function")]
-         [When(@"I add a pricing group to an event function")]
-         public void IAddEventPricingGroup(Table data)
-         {
-             EventTestMethods.AddEventPricingGroup(data);
-         }
- 
-         [When(@$"I select existing event {StepRegex.SingleWord} and function {StepRegex.SingleWord} pricing group")]
-         public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey)
-         {
-             EventTestMethods.SelectExistingEventFunctionPricingGroup(eventKey, functionKey);
-         }
- 
-         [Then(@"I verify existing pricing group")]
-         public void SelectExistingPricingGroups()
-         {
-             EventTestMethods.SelectExistingPricingGroups();
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Community/ContactStepDef.cs)
- 
-         [Given(@"I add a new contact")]
-         [When(@"I add a new contact")]
-         public void WhenIAddNewContact(Table data)
-         {
-             ContactTestMethod.AddNewContact(data.CreateInstance<ContactData>());
-         }
- 
-         [Given(@"I add a new random contact")]
-         [When(@"I add a new random contact")]
-         public void WhenIAddNewRandomContact()
-         {
-             ContactTestMethod.AddNewRandomContact();
-         }
- 
-         [Given(@"I add a new duplicate contact from context")]
-         [When(@"I add a new duplicate contact from context")]
-         public void WhenIAddANewDuplicateContactFromContext()
-         {
-             ContactTestMethod.AddANewDuplicateContactFromContext();
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/RenewalsStepDefs.cs)
- 
-         [When($"I renew membership for user with id {StepRegex.AnyDigit}")]
-         public void RenewUserMembership(int userId)
-         {
-             RenewalsTestMethods.RenewUserMembership(userId);
-         }
- 
-         [Then($"I verify membership for user with id {StepRegex.AnyDigit} was renewed")]
-         public void VerifyUserMembershipWasRenewed(int userId)
-         {
-             RenewalsTestMethods.VerifyUserMembershipWasRenewed(userId);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/BillingFinanceStepDef.cs)
-         [Given(@"I pay for Join Now product")]
-         public void IClickJoinNowProduct(Table table)
+         public void WhenIClickJoinNowProduct(Table table)
-         [Given(@"I submit a billing order for a new contact")]
-         public void ISubmitABillingOrderForANewContact(Table billingTable)
+         public void WhenISubmitABillingOrderForANewContact(Table billingTable)
-         }
- 
-         [When($"I join now as {StepRegex.SingleWord}")]
-         public void JoinNowAs(string memberType)
-         {
-             BillingFinanceTestMethods.JoinNowAs(memberType);
-         }
- 
-         [When($"I cancel renewal for user with id {StepRegex.AnyDigit}")]
-         public void CancelRenewalForUser(int id)
-         {
-             BillingFinanceTestMethods.CancelRenewalForUser(id);
-         }
- 
-         [Then("I verify order was submitted without payment")]
-         public void VerifyOrderWasSubmittedWithoutPayment()
-         {
-             BillingFinanceTestMethods.VerifyOrderWasSubmittedWithoutPayment();
-         }
- 
-         [When(@$"I join now as {StepRegex.SingleWord} on (Mbrr|Staff) site")]
-         public void JoinNowAsOnSite(string memberType, string site, Table data)
-         {
-             var joinNowData = data.CreateInstance<JoinNowData>();
-             BillingFinanceTestMethods.JoinNowAs(memberType, site, joinNowData);
-         }
- 
-         [Then(@"I verify a non-dues product is ordered")]
-         public void VerifyANonDuesProductIsOrdered()
-         {
-             BillingFinanceTestMethods.VerifyANonDuesProductIsOrdered();
-         }
- 
-         [Given(@$"I change billing time to (Default|Annual|Anniversary) for billing cycle {StepRegex.OneOrMoreWord}")]
-         public void ChangeBillingTimeAnnualForBillingCycleRegular(string billingTime, string billingCycle)
-         {
-             BillingFinanceTestMethods.ChangeBillingTimeForBillingCycle(billingTime, billingCycle);
-         }
- 
-         [Then(@"I verify the membership expires at the end of the fiscal year")]
-         public void VerifyTheMembershipExpiresAtTheEndOfTheFiscalYear()
-         {
-             BillingFinanceTestMethods.VerifyTheMembershipPeriod();
-         [Then(@$"I verify {StepRegex.OneOrMoreWord} product price is {StepRegex.AnyDecimal}")]
-         public void VerifyProductPriceIs(string productName, string price)
-         {
-             BillingFinanceTestMethods.VerifyProductPriceIs(productName, price);
-         }
<> ../asi1/src/Asi.Test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/MemberResponsiveStepDef.cs)
-             MemberResponsiveTestMethods = new MemberResponsiveTestMethods(driver, context); ;
-             Authentication = new Authentication(driver, context); ;
-             SignInTestMethods = new SignInTestMethods(driver, context); ;
-             FinanceTestMethods = new FinanceTestMethods(driver, context); ;
-             NavigationTestMethods = new NavigationTestMethods(driver, context); ;
-         private MemberResponsiveTestMethods MemberResponsiveTestMethods { get; set; }
-         private Authentication Authentication { get; set; }
-         private SignInTestMethods SignInTestMethods { get; set; }
-         private FinanceTestMethods FinanceTestMethods { get; set; }
-         private NavigationTestMethods NavigationTestMethods { get; set; }
-             var user = new ImisUser("MemberUser",_context.Logger());
+             var user = new ImisUser("MemberUser", new ConsoleLogger());
-             var user = new ImisUser("MemberUser", _context.Logger());
+             var user = new ImisUser("MemberUser", new ConsoleLogger());
-         }
- 
-         [Given(@"I select (.*) membership on MBRR")]
-         [When(@"I select (.*) membership on MBRR")]
-         public void GivenISelectMembershipOnMBRR(string memberType)
-         {
-             SignInTestMethods.OnTheSite("MBRR");
-             NavigationTestMethods.NavigateTo("Membership");
-             MemberResponsiveTestMethods.SelectMembershipOnMBRR(memberType);
-         }
- 
-         [Given(@"I add a new random MBRR contact and join (.*)")]
-         [When(@"I add a new random MBRR contact and join (.*)")]
-         public void WhenIAddNewRandomMBRRContact(string joinType)
-         {
-             MemberResponsiveTestMethods.AddNewRandomMBRRContactAndJoin(joinType);
- 
-         [Then(@"I verify successfully joined as a member (.*)")]
-         public void ThenIVerifySuccessfullyJoinedAsAMember(string joinType)
-         {
-             MemberResponsiveTestMethods.VerifySuccessfullyJoinedAsAMember(joinType);
-             Authentication.LogOut();
-             SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");
-             FinanceTestMethods.VerifyPaymentPayCentralLive();
-         }
- 
- /Asi.Selenium.Web.V100/Asi.Selenium.Web.V100.csproj
- /Asi.Selenium.Web.V100/Interactions/Community/AddContact.cs
- /Asi.Selenium.Web.V100/Interactions/Membership/RedirectProfiles.cs
- /Asi.Selenium.Web.V100/Interactions/Membership/JoinNow.cs
- /Asi.Selenium.Web.V100/Interactions/Membership/AdjustClubStaff.cs
- /Asi.Selenium.Web.V100/Interactions/Membership/AdjustMember.cs
- /Asi.Selenium.Web.V100/TestMethods/Fundraising/ReceiptingTestMethods.cs
- /Asi.Selenium.Web.V100/TestMethods/Community/ManageDuplicatesTestMethods.cs
- /Asi.Selenium.Web.V100/TestMethods/Membership/ClubStaffTestMethods.cs
- /Asi.Selenium.Web.V100/Pages/Membership/HouseholdContactProfileStaffPage.cs
- /Asi.Selenium.Web.V100/Pages/Membership/ClubOrganizationStaffPage.cs
- /Asi.Selenium.Web.V100/Pages/Membership/AddContactPage.cs
- /Asi.Selenium.Web.V100/Pages/Membership/ClubCheckInPage.cs
- /Asi.Selenium.V100/Asi.Selenium.V100.csproj
- /Asi.Selenium.V100/Features/PaymentGateways/Stripe.feature
- /Asi.Selenium.V100/Features/Staff/LicenseManagement.feature
- /Asi.Selenium.V100/Features/Community/ManageDuplicates.feature
- /Asi.Selenium.V100/Steps/ClubStaff/MembershipStepDef.cs
- /Asi.Selenium.V100/Steps/Community/ManageDuplicatesStepDef.cs
+ /Asi.Selenium.Shared.V100/appsettings.json
+ /Asi.Selenium.Shared.V100/appsettings.AppService.json
+ /Asi.Selenium.Shared.V100/appsettings.Development.json
+ /Asi.Selenium.Web.V100/TestMethods/Fundraising/ReceiptingTestMethods.cs.txt
+ /Asi.Selenium.V100/Features/LicenseManagement.feature
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupGateway.cs)
-         private bool ShouldSaveGateway { get; set; } = true;
-         public SetupGateway AndDontSaveGateway()
-         {
-             ShouldSaveGateway = false;
-             return this;
-         }
- 
-             context.UpsertData("GatewayData", GatewayData);
-             //switch (based on settings) to stop
-             if (ShouldSaveGateway)
-             {
-                 //TODO: check it was added to the table
+ 
-             }
-                     break;
-                 case GatewayTypeEnum.GoCardless:
-                     SetGoCardless(user);
-                     break;
-                 case GatewayTypeEnum.Stripe:
-                     SetStripe(user);
-             }
-         }
- 
-         public void SetGoCardless(IActor user)
-         {
-             //Fill out fields
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessDialog.AccountName, GatewayData.AccountName));
-             user.AttemptsTo(SetWhenProvided.DropDown(GoCardlessDialog.Environment, GatewayData.Environment));
- 
-             if (!GatewayData.CompleteOnboarding)
-                 return;
- 
-             // Onboarding and OAuth completion
-             user.AttemptsTo(Click.On(GoCardlessDialog.GoCardlessOauthLink));
-             TestHelper.WaitForPageReload();
-             var goCardlessHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];
-             user.AttemptsTo(SwitchWindow.To(goCardlessHandle));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.SigninLink));
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.EmailInput, GatewayData.Email));
-             user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.PasswordInput, GatewayData.Password));
-             user.AttemptsTo(ScrollToElement.At(GoCardlessOAuth.ConnectAccountButton));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.ToSCheckBox));
-             user.AttemptsTo(Click.On(GoCardlessOAuth.ConnectAccountButton));
-             TestHelper.WaitForPageReload();
-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];
-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));
-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());
- 
-         public void SetStripe(IActor user)
-         {
-             //Fill out fields
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeDialog.AccountName, GatewayData.AccountName));
- 
-             if (!GatewayData.CompleteOnboarding)
-                 return;
- 
-             // Onboarding completion
-             user.AttemptsTo(Click.On(StripeDialog.StripeConnectLink));
-             for (int i = 0; i < 30; i++)
-             {
-                 int tabCount = user.Using<TestImis>().WebDriver.WindowHandles.Count;
-                 if (tabCount > 1)
-                     break;
-                 user.AttemptsTo(Waiting.InSeconds(1));
-             var stripeHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];
-             user.AttemptsTo(SwitchWindow.To(stripeHandle));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.EmailInputBox, GatewayData.Email));
-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.PasswordInputBox, GatewayData.Password));
-             user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));
-             string codeToEnter = MultiFactorAuthentication.Generate2FACode(GatewayData.MFACode);
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.VerificationCodeInputBox, codeToEnter));
-             //After entering the code, we should be redirected to the next page which allows you to continue.
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ContinueButton), IsEqualTo.True());
-             // Incase there are any saved credentials, we need to skip the first page which asks to use existing info
-             bool promptedToUseSavedInfo = user.AsksFor(Appearance.Of(StripeOnboarding.Span("Use your saved information")));
-             if (promptedToUseSavedInfo)
-                 user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton)); //Continue through onboarding wizard to get to starting page and create new business
- 
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Let’s start with some basics")), IsEqualTo.True());
-             //Let’s start with some basics
-             // We are just going to continue with a UK business location and Individual type of business, and fill out all data with dummy data.
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
- 
-             //Personal Details
-             // Name
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Verify your personal details")), IsEqualTo.True());
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("First name"), "Timmy"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Last name"), "Tester"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("you@example.com"), GatewayData.Email ?? "Somebody@advsol.com"));
-             // Date of birth
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("MM"), "05"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("DD"), "05"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("YYYY"), "1960"));
-             // Home address
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Address line 1"), "798 New Road"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Town or City"), "London"));
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Postal code"), "W49 3IX"));
- 
-             // Phone number
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("121 234 5678"), "121 234 5678"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Professional Details
-             // Industry
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Professional details")), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Please select your industry…")));
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Software")));
-             // Website
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("www.example.com"), "www.imis.com"));
-             // Product description
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.ProductDescriptionBox, "We test websites"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Add your bank to receive payouts
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add your bank to receive payouts")), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.Span("Use test account")));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Add public details for customers
-             // Shortened Descriptor
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add public details for customers")), IsEqualTo.True());
-             user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Business"), "iMIS"));
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Setting climate contribution
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.ClimateContributionLabel), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));
- 
-             //Agreeing and submitting all data
-             user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Review and finish up")), IsEqualTo.True());
-             user.AttemptsTo(Click.On(StripeOnboarding.AgreeAndSubmitButon));
-             user.WaitsUntil(Appearance.Of(ImisRedirectPage.returnSpan), IsEqualTo.True());
- 
-             // Return to iMIS
-             var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];
-             user.AttemptsTo(SwitchWindow.To(imisWebHandle));
-             user.AttemptsTo(SwitchFrame.ToPayCentralFrame());
-         }
- 
-             [Display(Name = "GoCardless")]
-             GoCardless,
-             [Display(Name = "Stripe")]
-             Stripe,
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupPaymentMethod.cs)
-                 user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.FinancialEntity.Control, GatewayData.FinancialEntity ?? "iMIS International"));
+                 user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.FinancialEntity.Control, GatewayData.FinancialEntity));
-             user.WaitsUntil(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(GatewayData.AccountName)), IsEqualTo.True());
+             user.AsksFor(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(GatewayData.AccountName))).Should().BeTrue();
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupAutoPay.cs)
-             user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("Settings successfully updated."));
+             var userMessage = user.AsksFor(UserMessageContents.First());
+             if (userMessage.Equals("Settings successfully updated.")) return;
+             else
+                 throw new Exception("Autopay settings were not saved.");
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/TestMethods/Settings/Finance/PayCentral/Gateway/GatewayTestMethods.cs)
- 
-         public void FillOutNewGateway(GatewayData gatewayData)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData).AndDontSaveGateway());
-         }
- 
-         public void VerifyLinkValidationError()
-         {
-             var user = LoggedInUser();
-             var gatewayData = _context.GetData<GatewayData>("GatewayData");
-             user.Verifies(ValidationForLink.WithGatewayData(gatewayData));
-         }
- 
-         public void AttemptToSaveAndCloseGateway()
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(SwitchFrame.ToGenericWindow());
-             user.AttemptsTo(ClickCommandButton.SaveAndClose());
-         }
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/TestMethods/Community/ContactTestMethods.cs)
- 
-         public void AddNewContact(ContactData contactData)
-         {
-             var user = LoggedInUser();
-             user.AttemptsTo(AddContact.AddIndividual(contactData));
-         }
- 
-         /// <summary>
-         /// Add a new contact with a random name
-         /// </summary>
-         public void AddNewRandomContact()
-         {
-             var user = LoggedInUser();
-             // create a new contact
-             var contact = new ContactData()
-             {
-                 FirstName = $"{TestHelper.GenerateRandomString(5)}First",
-                 MiddleName = $"{TestHelper.GenerateRandomString(5)}Middle",
-                 LastName = $"{TestHelper.GenerateRandomString(5)}Last",
-             };
-             contact.Email = $"{contact.LastName}@netfake.com";
-             user.AttemptsTo(AddContact.AddIndividual(contact));
-         }
- 
-         /// <summary>
-         /// Add a new duplicate contact from exisiting contact name saved in the context
-         /// </summary>
-         public void AddANewDuplicateContactFromContext()
-         {
-             var user = LoggedInUser();
-             // create a new dupe contact from context
-             var contact = new ContactData()
-             {
-                 FirstName = _context.GetData<string>("FirstName"),
-                 MiddleName = _context.GetData<string>("MiddleName"),
-                 LastName = _context.GetData<string>("LastName"),
-                 Email = _context.GetData<string>("Email"),
-             };
-             user.AttemptsTo(AddContact.AddIndividual(contact));
-         }
- 
- 
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.Web.V100/Pages/Fundraising/IssueReceiptsPage.cs)
-         public IWebLocator IssueReceiptsButton => LocatorByXPath("GenerateReceipts", "input");
-         public Lister SelectAQuery;
- 
-         private static Lister BuildLister()
-         {
-             var lister = new Lister("ResultsGrid");
-             lister.Queries.Add("All gifts elligible for receipting", BuildAllQuery());
-             return lister;
-         }
- 
-         private static ListerSheet BuildAllQuery()
-         {
-             var query = new ListerSheet();
-             query.Parameters.Add("Gift date between start", new QueryDateParameter());
-             query.Parameters.Add("Gift date between end", new QueryDateParameter());
-             query.Parameters.Add("Donor name contains", new QueryTextParameter());
-             query.Parameters.Add("Gift item contains", new QueryTextParameter());
-             return query;
-         }
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/Commerce/Products.feature)
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/ClubStaff/Membership.feature)
- Scenario: Verify club undo button works
- 	Given I am on the Club Staff site as designated user System Administrator
- 	When I select Copper Heights Club 
- 	* I verify I can check in/out member
- 		| ID     | Verification1 | Verification2 |
- 		| 123172 | Check in at   | Sofia Camp    |
- 	Then I verify Club Staff undo button works
- Scenario: Verify Club was selected
-     Given I am on the Club Staff site as designated user System Administrator
-     When I select Copper Heights Club
+ #More code will be written here by contractors 
+ Scenario: Tests logging in
+ Given I am on the ClubStaff site as designated user Staff
-     Then I verify Copper Heights Club club was selected
- 
- ###100_ClubStaff_Verify_JoinClubUnitPrice
- Scenario: Verify unit price after joining a club
-     Given I am on the Club Staff site as designated user System Administrator
-     When I create club contact
-         | FirstName | LastName  | Address1      | City       | PostalCode | State |
-         | Tri       | Carpenter | 1202 Rice Ave | Cedar Park | 78613      | Texas |
-     * I Join Now and pay for a new contact
-         | ClubName            | UnitAmount |
-         | Copper Heights Club | 5.00       |
-     Then I verify Join Now and pay for a new contact
-         | ClubName            | UnitAmount |
-         | Copper Heights Club | 5.00       |
- 
- Scenario: Verify club Staff redirector
- 	Given I am on the Club Staff site as designated user System Administrator
- 	When I am on Copper Heights Club club landing page
- 	* I redirect to different club staff profiles
- 		| Name              | Verification1 | Verification2      | Verification3 | Verification4       | Verification5     |
- 		| Alice Powers      | Household     | Emergency contacts | Relationships | Medical information | Membership        |
- 		| Oscar Cecil       | Volunteering  | Transactions       | Preferences   | Check-in history    | Oscar Cecil       |
- 		| Ms. Jasmine Singh | Clubs         | Volunteering       | Transactions  | Preferences         | Ms. Jasmine Singh |
- 	When I search item of Maria Powers
- 	Then I verify messages being displayed
- 		| message       |
- 		| Household     |
- 		| Relationships |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/Fundraising/EnterGifts.feature)
- 		| GLAccount         | 1-1020: VISA                     |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/Fundraising/GiftAid.feature)
- 		| GLAccount         | 1-1000-000                       |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/UnitedStatesPaymentGateways.feature)
- 		| GLAccount         | 1-1000-000                       |
- 		| FinancialEntity   | iMIS International               |
- 		| GLAccount         | 1-1000-000                       |
- 		| MerchantId        | 0022874                                                          |
+ 		| MerchantId        | 0022579                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
+ 		| Pin               | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |
- 		| MerchantId        | 0022874                                                          |
+ 		| MerchantId        | 0022579                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
+ 		| Pin               | T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/CanadaPaymentGateways.feature)
- Scenario: Adding Elavon CC CA
- 	When I setup a gateway suite
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_CA                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC CA                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
- 		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |
- 		| FinancialEntity   | iMIS International                                               |
- 		| GLAccount         | 1-1000-000                                                       |
- 	And I setup autopay
- 		| Key                     | Value |
- 		| RecurringDonation       | true  |
- 		| RenewingMemberships     | true  |
- 		| AllowDonorsChangeAmount | true  |
- 	Then I verify a gateway suite
- 		| Key               | Value                                                            |
- 		| GatewayType       | ImisPassThrough                                                  |
- 		| AccountCode       | EL_CC_CA                                                         |
- 		| Environment       | Sandbox                                                          |
- 		| AccountName       | Elavon CC CA                                                     |
- 		| SpreedlyType      | Elavon                                                           |
- 		| MerchantId        | 0022874                                                          |
- 		| UserName          | apiuser                                                          |
- 		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |
- 		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |
- 	And I verify autopay
- 		| Key                     | Value |
- 		| RecurringDonation       | true  |
- 		| RenewingMemberships     | true  |
- 		| AllowDonorsChangeAmount | true  |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/UnitedKingdomPaymentGateways.feature)
- 		| GLAccount         | 1-1000-000              |
- 		| GLAccount         | 1-1000-000              |
- 		| GLAccount         | 1-1000-000                           |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/NewZealandPaymentGateways.feature)
+ 		| PaymentMethodType | Credit card            |
+ 		| PaymentMethodType | Credit card            |
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Steps/PaymentGateways/GatewaySetupStepDef.cs)
-         [Given(@"I fill out the following in a new gateway")]
-         public void GivenIFillOutTheFollowingInANewGateway(Table data)
-         {
-             GatewayTestMethods.EnsurePayCentralIsReady();
-             GatewayTestMethods.FillOutNewGateway(data.CreateInstance<GatewayData>());
-         }
- 
-         [When(@"I save and close the gateway dialogue")]
-         public void WhenISaveAndCloseTheGatewayDialogue()
-         {
-             GatewayTestMethods.AttemptToSaveAndCloseGateway();
-         }
- 
-         [Then(@"I should recieve a validation error")]
-         public void ThenIShouldRecieveAValidationError()
-         {
-             GatewayTestMethods.VerifyLinkValidationError();
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/V100/Asi.Selenium.V100/Steps/Community/ContactStepDef.cs)
- 
-         [Given(@"I add a new contact")]
-         [When(@"I add a new contact")]
-         public void WhenIAddNewContact(Table data)
-         {
-             ContactTestMethod.AddNewContact(data.CreateInstance<ContactData>());
-         }
- 
-         [Given(@"I add a new random contact")]
-         [When(@"I add a new random contact")]
-         public void WhenIAddNewRandomContact()
-         {
-             ContactTestMethod.AddNewRandomContact();
-         }
- 
-         [Given(@"I add a new duplicate contact from context")]
-         [When(@"I add a new duplicate contact from context")]
-         public void WhenIAddANewDuplicateContactFromContext()
-         {
-             ContactTestMethod.AddANewDuplicateContactFromContext();
-         }
- 
- /SeleniumCore.csproj
- /StepContext/Commerce/ProductContext.cs
- /TestFiles/Sample_MP4_66MB.mp4
- /TestFiles/Sample_MP4_126MB.mp4
- /WebDriver/BrowserType.cs
- /WebDriver/WebDriverFactory.cs
- /WebDriver/ChromeDriverInstaller.cs
- /Helpers/Wait/Wait.cs
- /Helpers/MultiFactorAuthentication/MultiFactorAuthentication.cs
- /Interfaces/IWebDriverFactory.cs
- /DataClasses/Commerce/ProductItemData.cs
- /DataClasses/Commerce/PricingGroupTable.cs
- /DataClasses/Commerce/OrderData.cs
- /DataClasses/Commerce/OrderItemData.cs
- /DataClasses/Finance/RefundData.cs
+ /Helpers/Wait/Wait.cs.txt
+ /Interfaces/IWebDriverFactory.cs.txt
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DisplayStaticBase.cs)
-         /// Generates the predicate to find a function or attribute that contains or exactly matches a value
-         /// <br />
-         /// Predicates are the search terms in the square brackets of the XPath. I.E. a[contains(text(),'This is the text in the element')]
-         /// </summary>
-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>
-         /// <param name="expectedValue">The expected value to be found when searching</param>
-         /// <param name="exactMatch">Boolean to determine whether to check if the attribute or function contains or exactly matches the value</param>
-         /// <returns></returns>
-         public string Predicate(string searchIn, string expectedValue, bool exactMatch = false) => exactMatch ? ExactValuePredicate(searchIn, expectedValue) : ContainsValuePredicate(searchIn, expectedValue);
- 
-         /// <summary>
-         /// Predicate in XPath to detemine if an HTML attribute contains a value
-         /// </summary>
-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>
-         /// <param name="expectedValue">The expected value to be found when searching</param>
-         /// <returns></returns>
-         public string ContainsValuePredicate(string searchIn, string expectedValue)
-         {
-             bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');
-             if (searchWithFunction)
-                 return $"contains({searchIn},'{expectedValue}')";
-             else
-                 return $"contains(@{searchIn},'{expectedValue}')";
-         }
- 
-         /// <summary>
-         /// Predicate in XPath to determine if an HTML attribute is equal to a value
-         /// </summary>
-         /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>
-         /// <param name="expectedValue">The expected value to be found when searching</param>
-         /// <returns></returns>
-         public string ExactValuePredicate(string searchIn, string expectedValue)
-         {
-             bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');
-             if (searchWithFunction)
-                 return $"{searchIn}='{expectedValue}'";
-             else
-                 return $"@{searchIn}='{expectedValue}'";
-         }
- 
-         /// <summary>
-             return WebLocator.L($"XPath with double contains: //{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}", By.XPath($"//{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}"));
+             return WebLocator.L($"XPath with double {attribute}", By.XPath($"//{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}"));
-                 return WebLocator.L($"Custom XPath: ({xpath})[{index}]{postXpath}", By.XPath($"({xpath})[{index}]{postXpath}"));
-             return WebLocator.L($"Custom XPath: {xpath}", By.XPath(xpath));
+                 return WebLocator.L($"Custom XPath", By.XPath($"({xpath})[{index}]{postXpath}"));
+             return WebLocator.L($"Custom XPath", By.XPath(xpath));
-         /// <summary>
-         /// Identify the element by using CSS selector
-         /// </summary>
-         /// <param name="secondElement"></param>
-         /// <param name="attribute"></param>
-         /// <param name="value"></param>
-         /// <param name="firstElement"></param>
-         /// <returns></returns>
-         /// <summary>
-         /// Create a By of the element using CSS selector
-         /// </summary>
-         /// <param name="secondElement"></param>
-         /// <param name="attribute"></param>
-         /// <param name="value"></param>
-         /// <param name="firstElement"></param>
-         /// <returns></returns>
- 
-         /// <summary>
-         /// Identify the element by using name locator
-         /// </summary>
-         /// <param name="elementName"></param>
-         /// <returns></returns>
-         public static By ByName(string elementName)
-         {
-             return By.Name($"{elementName}");
-         }
- 
-         /// <summary>
-         /// Create a By of the element using Name
-         /// </summary>
-         /// <param name="elementName"></param>
-         /// <returns></returns>
-         public static IWebLocator LocatorByName(string elementName) =>
-             WebLocator.L($"XPath for \"{elementName}\"", ByName(elementName));
- 
-         public IWebLocator PartialLinkText(string linkName) =>
-          WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName));
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/PageObjects/Navigation/Staff/StaffPageObject.cs)
-             StringAssert.AreEqualIgnoringCase(selectedEnglishCulture, englishLanguageOptions.GetAttribute("value"));
+             StringAssert.Equals(selectedEnglishCulture.ToLower(), englishLanguageOptions.GetAttribute("value").ToLower());
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/PageObjects/Navigation/AnnualConference/AnnualConferencePageObject.cs)
-             StringAssert.AreEqualIgnoringCase("noindex", faviconTag.GetAttribute("content"));
+             StringAssert.Equals("noindex", faviconTag.GetAttribute("content").ToLower());
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/PageObjects/Finance/FinancePageObject.cs)
-                 Assert.True(decision);
+                 Assert.IsTrue(decision);
-                 Assert.True(decision);
+                 Assert.IsTrue(decision);
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/Utilities/Authentication.cs)
-             var user = new ImisUser(name, _context.Logger());
+             var user = new ImisUser(name, new ConsoleLogger());
-         public void LogOut(bool navigate = true, bool waitForDropDown = true)
+         public void LogOut(bool navigate = true)
-             if (waitForDropDown)
+             if (user.AsksFor(Appearance.Of(ProfileDropDown)))
-                 user.WaitsUntil(Existence.Of(ProfileDropDown),IsEqualTo.True());
-         }
- 
-         public void VerifyUserIsLoggedIn()
-         {
-             var user = User("LoggedInUser");
-             user.AttemptsTo(Waiting.InSeconds(3));
-             user.AttemptsTo(Click.On(ProfileDropDown));
-             user.AsksFor(Appearance.Of(SignOut)).Should().BeTrue();
-         public void VerifyLoggedInUserName(string expectedName)
-         {
-             var user = User("LoggedInUser");
-             user.AsksFor(Text.Of(ProfileDropDown)).Should().Contain(expectedName);
-         }
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/Utilities/ExtensionMethods.cs)
-         public static string GetFeatureDescription(this Enum enumValue)
-         {
-             var attr = enumValue.GetAttribute<FeatureAttribute>();
-             var description = attr.Description;
-             return description;
-         }
- 
-         public static LicensePlatformData[] GetFeaturePlatform(this Enum enumValue)
-         {
-             var attr = enumValue.GetAttribute<FeatureAttribute>();
-             var platformData = attr.Platform;
-             return platformData;
-         }
- 
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/AsiWebContext.cs)
-             Random = new Random();
-         public Uri LicenseUrl { get; set; }
+ 
-         public Random Random { get; set; }
-         public ILogger logger { get; set; }
-         public ILogger Logger() {
-             return logger?? new ConsoleLogger();
-         }
-         }
- 
-         /// <summary>
-         ///  This method is used to populate website, username and password by specifying a role.
-         ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for users whose role matches
-         /// </summary>
-         /// <param name="site"></param>
-         /// <param name="UserNameValue"></param>
-         /// <param name="role"></param>
-         public void SetContextByRole(string site, string UserRole)
-         {
-             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");
-             var userSelection = userList.Where(t => t.Role.Equals(UserRole));
-             var user = userSelection.ElementAt(Random.Next(userSelection.Count()));
- 
-             Website = site;
-             UserName = user.UserName;
-             Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";
- 
-         }
- 
-         /// <summary>
-         ///  This method is used to populate website, username and password by specifying a role.
-         ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for user whose name matches
-         /// </summary>
-         /// <param name="site"></param>
-         /// <param name="UserNameValue"></param>
-         /// <param name="name"></param>
-         public void SetContextByName(string site, string UserNameValue)
-         {
-             var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");
-             var usersWithName = userList.Where(t => t.UserName.Equals(UserNameValue));
-             var user = new UserData();
-             if (usersWithName.Count() != 0)
-             {
-                 user = usersWithName.ElementAt(0);
-             }
- 
-             Website = site;
-             UserName = !string.IsNullOrEmpty(user.UserName) ? user.UserName : UserNameValue;
-             Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";
- 
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/ClickCommandButton.cs)
-         public static ClickCommandButton Close() => new ClickCommandButton(CommandButtonBarButtons.CloseButton);
+ 
+             // jkh - added here, was missing some buttons. AsksFor does not wait by default.
+             user.WaitsUntil(Appearance.Of(button),IsEqualTo.True());
+                 // this is an extension to use Playwright rules of not forcing. Some Click.On's fail if we do this universally though.
+                 // todo: bring back the force false
-             FindButton,
+             FindButton
-             CloseButton
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/Browse.cs)
-         public static Browse InImis(ImisUrl url, string siteUrl) => new Browse ((SitesToBrowse)Enum.Parse(typeof(SitesToBrowse), siteUrl.Replace(" ", ""), true),url);
+         public static Browse InImis(ImisUrl url, string siteUrl) => new Browse((SitesToBrowse)Enum.Parse(typeof(SitesToBrowse), siteUrl.Replace(" ", ""), true), url);
-                     return $"{Url}/Staff";
+                     return $"{Url}Staff";
-                     return $"{Url}/MBRR";
+                     return $"{Url}MBRR";
-                     return $"{Url}/imisdonor";
+                     return $"{Url}imisdonor";
-                     return $"{Url}/iMISAnnualConference";
+                     return $"{Url}iMISAnnualConference";
-                     if(context.IsV10)
+                     if (context.IsV10)
-                     return $"{Url}/imisclub";
+                     return $"{Url}imisclub";
-                     return $"{Url}/ClubStaff";
+                     return $"{Url}ClubStaff";
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/Waiting.cs)
-                     TimeModifier(1);
+                     TimeModifier(100);
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/SetWhenProvided.cs)
+ /* jkh 3/11/2023
+ We need to change this to mean Set when there is a value to set. This will no doubt break lots of tests since this is a substantial change in semantics. But there is a fundamental race condition currently that must be addressed:
+ 1. SetWhenProvided("fubar","value") 
+ 2. Program looks, there is no fubar, so carries on.
+ 3. fubar shows up, but now it will get no value
+ 4. Test crashes because of missing values
+ 
+ Sprinkling waits through this will not fix the bug since no wait will be "correct".
+ The change in semantics is that if there is a value wh
+ */
+ 
+ namespace Asi.Selenium.Core.WebDriver
-             if (string.IsNullOrEmpty(locatorValue))
+             // jkh: remove the idea of skipping boxes that don't exist.
+             // if (string.IsNullOrEmpty(locatorValue) || !user.AsksFor(Existence.Of(WebLocator)))
+             //     return;
+ 
+             // jkh:  new semantic is to ignore this value if value we are trying to set is ""
+             // we use the value ~~~~ to indicate that we actually want to set "".
+             if (locatorValue=="" || locatorValue==null ){
- 
-             user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True());
+             } 
+             if (locatorValue=="~~~~"){
+                 locatorValue="";
+             }
-             user.AttemptsTo(Waiting.InSeconds(1));
+            // jkh: remove waiting
+            //user.AttemptsTo(Waiting.InSeconds(1));
-             user.AttemptsTo(Waiting.InSeconds(1));
+             //user.AttemptsTo(Waiting.InSeconds(1));
-             if (string.IsNullOrEmpty(locatorValue))
+             if (string.IsNullOrEmpty(locatorValue) || !user.AsksFor(Existence.Of(WebLocator)))
- 
-             user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True());
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Questions/UserMessageState.cs)
-             user.AttemptsTo(Waiting.ForPageReload());
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/WebDriver/Boa/Questions/FocusState.cs)
- {
-     public class FocusState : Boa.AsiAbstractWebQuestion<bool>
+ namespace Asi.Selenium.Core.WebDriver.Boa {
+ public class FocusState : AsiAbstractWebQuestion<bool>
-         private bool LocatorInFocus(IWebLocator x,IWebDriver driver) {
-             var targetElement = x.FindElement(driver);
+     private bool LocatorInFocus(IWebLocator locator, IWebDriver driver)
+     {
+         // BUGBUG - ??
+         var targetElement = driver.FindElement(By.Id(""));
-             return LocatorInFocus(Locator,driver);
+         return LocatorInFocus(Locator, driver);
+ 
- 
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/Helpers/Navigation/Navigation.cs)
-                     return $"{Url}/Staff";
+                     return $"{Url}Staff";
-                     return $"{Url}/MBRR";
+                     return $"{Url}MBRR";
-                     return $"{Url}/imisdonor";
+                     return $"{Url}imisdonor";
-                     return $"{Url}/iMISAnnualConference";
+                     return $"{Url}iMISAnnualConference";
-                     return $"{Url}/imisclub";
+                     return $"{Url}imisclub";
-                     return $"{Url}/ClubStaff";
+                     return $"{Url}ClubStaff";
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/Interfaces/IAsiWebContext.cs)
-         Uri LicenseUrl { get; set; }
-         /// <summary>
-         /// access logger for test
-         /// </summary>
-         public ILogger Logger();
- 
-         /// <summary>
-         /// This method is used to populate website, username and password by specifying a role
-         /// </summary>
-         /// <param name="site"></param>
-         /// <param name="UserRole"></param>
-         public void SetContextByRole(string site, string UserRole);
- 
-         /// <summary>
-         ///  This method is used to populate website, username and password by specifying username
-         /// </summary>
-         /// <param name="site"></param>
-         /// <param name="UserName"></param>
-         public void SetContextByName(string site, string UserName);
- 
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/BillingList.cs)
-         public bool PayNow { get; set; }
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/UserData.cs)
-         [JsonPropertyName("password")]
-         public string Password { get; set; }
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Commerce/CartData.cs)
-         /// <summary>
-         /// This is an internal enum that dictates how to check out when performing in CheckOut.cs
-         /// <br /><br />
-         /// Not to be confused with CartData.PaymentMethod, which will fill the payment method drop down.
-         /// This should be specified as the same payment method in the gateway
-         /// </summary>
-         public int Quantity { get; set; } = 1;
-         public string PromoCode { get; set; }
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Commerce/CreateProductData.cs)
- 
-         public bool PriceIsTotal { get; set; }
-         public decimal? StandardPrice { get; set; }
-         public decimal? DiscountPrice { get; set; }
-         public string Status { get; set; }
+         public decimal StandardPrice { get; set; }
+         public decimal DiscountPrice { get; set; }
+         public string Status {get;set; }
+         public string FinancialEntity {get;set; }
-         public string FinancialEntity { get; set; }
-         public bool IsTaxable { get; set; }
-         public bool IsPstEnabled { get; set; }
-         public bool IsGstHstEnabled { get; set; }
-         public bool IncursShipping { get; set; }
+         public bool? IsTaxable { get; set; }
+         public bool? IncursShipping { get; set; }
+         public bool? IncursHandling { get; set; }
+         public bool? InventoryItem { get; set; }
-         public bool IncursHandling { get; set; }
-         public bool InventoryItem { get; set; }
-         public DateTime? Beginning { get; set; }
-         public DateTime? Ending { get; set; }
-         public bool HasAccountingInformation => !string.IsNullOrEmpty(FinancialEntity) || IsTaxable || IsPstEnabled || IsGstHstEnabled || IncursHandling || IncursShipping || InventoryItem;
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Commerce/GatewayData.cs)
-         /// <summary>
-         /// Multi-Factor Auth key for getting MFA access to third party applications
-         /// </summary>
-         public string MFACode { get; set; }
-         /// <summary>
-         /// This is the text set in the Payment Method type drop down.
-         /// <br />
-         /// Not to be confused with PaymentMethodType in CartData.
-         /// </summary>
-         public string Email { get; set; }
-         public bool CompleteOnboarding { get; set; } = true;
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Events/CreateEventData.cs)
-         public string TaxCode { get; set; }
-         public bool TaxByAddress { get; set; }
-         public string VatExceptionRule { get; set; }
-         public double RegistrationOptionDefaultRegularPrice { get; set; }
-         public bool IsRegistrationOptionTaxable { get; set; }
-         public bool IsRegistrationOptionPstEnabled { get; set; }
-         public bool IsRegistrationOptionGstHstEnabled { get; set; }
-         public string RegistrationOptionTaxCode { get; set; }
-         public double ProgramItemDefaultRegularPrice { get; set; }
-         public bool IsProgramItemTaxable { get; set; }
-         public bool IsProgramItemPstEnabled { get; set; }
-         public bool IsProgramItemGstHstEnabled { get; set; }
-         public string ProgramItemTaxCode { get; set; }
- 
-         public bool HasPricingData => !string.IsNullOrEmpty(TaxCode) || TaxByAddress || !string.IsNullOrEmpty(VatExceptionRule) || HasRegistrationOptionData;
-         public bool HasRegistrationOptionData => RegistrationOptionDefaultRegularPrice != 0 || HasRegistrationOptionTax || !string.IsNullOrEmpty(RegistrationOptionTaxCode);
-         public bool HasProgramItemData => ProgramItemDefaultRegularPrice != 0 || HasProgramItemTax || !string.IsNullOrEmpty(ProgramItemTaxCode);
-         public bool HasRegistrationOptionTax => IsRegistrationOptionTaxable || IsRegistrationOptionPstEnabled || IsRegistrationOptionGstHstEnabled;
-         public bool HasProgramItemTax => IsProgramItemTaxable || IsProgramItemPstEnabled || IsProgramItemGstHstEnabled;
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Events/EventData.cs)
-         public bool AddFirstProgram { get; set; }
-         public new string EventCode { get; set; }
+         public string EventCode { get; set; }
+ 
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/RiSE/PanelPropertyData.cs)
-             prop.Type = specificType.IsNullOrEmpty() ? _allTypes.ElementAt(_random.Next(_allTypes.Count)) : specificType;
+             prop.Type = specificType is {Length:>0} ? _allTypes.ElementAt(_random.Next(_allTypes.Count)) : specificType;
-             if (!Coords.IsNullOrEmpty())
+             if (!(Coords is {Length:>0}))
-             if (!specificPreDefType.IsNullOrEmpty() || TestHelper.CoinFlip())
+             if (!(specificPreDefType is {Length:>0}) || TestHelper.CoinFlip())
-                 if (preDefinedValuesType.IsNullOrEmpty())
+                 if (preDefinedValuesType is {Length:>0})
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Membership/JoinNowData.cs)
-         public string ClubName { get; set; }
-         public string[] ItemNames { get; set; }
+         public string ItemName1 { get; set; }
+         public string ItemAmount1 { get; set; }
+         public string ItemName2 { get; set; }
+         public string ItemAmount2 { get; set; }
<> ../asi1/src/Asi.Test/Selenium/SeleniumCore/DataClasses/Membership/ContactData.cs)
-         public string PrefixString => PrefixToStringDic[Prefix];
-         public Dictionary<PrefixEnum, string> PrefixToStringDic = new Dictionary<PrefixEnum, string>
-         {
-             {PrefixEnum.None, "(None)"},
-             {PrefixEnum.Dr, "Dr." },
-             {PrefixEnum.Hon, "Hon." },
-             {PrefixEnum.LtCol, "Lt.Col." },
-             {PrefixEnum.Miss, "Miss" },
-             {PrefixEnum.Mr, "Mr." },
-             {PrefixEnum.Mrs, "Mrs." },
-             {PrefixEnum.Ms, "Ms." },
-             {PrefixEnum.Pastor, "Pastor"},
-             {PrefixEnum.Rev, "Rev."},
-         };
-         public bool ExpectError { get; set; }
-         public string ContactType { get; set; }
-         public string Gender { get; set; }
-         public string Birthday { get; set; }
-         public string MaritalStatus { get; set; }
- 
- 
