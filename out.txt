Hello, World!
- /Pages/Finance/Batches.cs
- /Pages/Membership/ProductDisplayPage.cs
+ /Asi.Selenium.Web.csproj
+ /GlobalUsings.cs
+ /Interactions/PayCentral/ValidationForLink.cs
+ /Interactions/Finance/FindPayment.cs
+ /iParts/Commerce/OrderDetailsTotalSection.cs
+ /iParts/Commerce/OrderSelector.cs
+ /iParts/Commerce/OrderDetailsBillingDetails.cs
+ /iParts/Commerce/ItemCreator/AddItemDialog.cs
+ /iParts/Common/DynamicContentCollectionOrganizer.cs
+ /iParts/Common/BigButtonPanel/BigButtonPanelEdit.cs
+ /iParts/Membership/ClubStaffCheckInOut.cs
+ /Pages/Commerce/ProcessOrders/GenerateInvoicesPage.cs
+ /Pages/Commerce/ProcessOrders/IssueQuotesPage.cs
+ /Pages/Commerce/ProcessOrders/PrintShippingPapersPage.cs
+ /Pages/Commerce/ProcessOrders/ShipOrdersPage.cs
+ /Pages/Commerce/ProcessOrders/ConvertQuotesPage.cs
+ /Pages/Commerce/ProcessOrders/ReleaseBackordersPage.cs
+ /Pages/Settings/Finance/PayCentral/Gateway/ImisRedirectPage.cs
+ /Pages/Settings/Finance/PayCentral/Gateway/GoCardless/GoCardlessDialog.cs
+ /Pages/Settings/Finance/PayCentral/Gateway/GoCardless/GoCardlessOAuth.cs
+ /Pages/Settings/Finance/PayCentral/Gateway/Stripe/StripeDialog.cs
+ /Pages/Settings/Finance/PayCentral/Gateway/Stripe/StripeOnboarding.cs
+ /Pages/Contacts/AdjustMembershipFeesPage.cs
+ /Pages/Shop/PayPalCheckOutPage.cs
+ /Pages/LicenseServer/LicenseServerPage.cs
+ /Pages/LicenseServer/UpsertLicenseIssuedModal.cs
+ /Pages/LicenseServer/UpsertLicenseModal.cs
+ /Pages/Finance/BatchesPage.cs
+ /Pages/Finance/BatchDetailPage.cs
+ /Pages/Finance/PayCentral/FindPaymentsPage.cs
+ /Pages/Events/EventProgramDetails/EventStaffFunctionDialog.cs
+ /Pages/Events/EventProgramDetails/EventStaffFunctionDisplayPage.cs
+ /Pages/Community/FindContactsPage.cs
+ /Pages/RiSE/Maintenance/PublishServersListPage.cs
+ /Pages/MemberResponsive/ContactManagement/MemberResponsiveMembershipPage.cs
Diff(EQUAL,"{¶    public class CreateProduct : AsiAbstractWebTask¶    {¶        #region Constructor¶¶        private CreateProduct(CreateProductData createProductData, ProductTypeEnum productType")
Diff(DELETE,")¶        {¶            CreateProductData = createProductData;¶            AddProductPage = new AddProductPage();¶            ItemPage = new ItemPage();¶")
Diff(INSERT,", ProductContext productContext,¶            IEnumerable<ProductItemData> productItemsData = null)¶        {¶            AddProductPage = new AddProductPage();¶            ItemPage = new ItemPage();¶            CreateProductData = createProductData;¶            ProductType = productType;¶            ProductContext = productContext;¶            ProductItemsData = productItemsData;")
Diff(EQUAL,"¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        #endregion¶¶        #region Properties¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        private ")
Diff(INSERT,"Add")
Diff(EQUAL,"Product")
Diff(DELETE,"TypeEnum ")
Diff(INSERT,"Page Add")
Diff(EQUAL,"Product")
Diff(DELETE,"Typ")
Diff(INSERT,"Pag")
Diff(EQUAL,"e { get; ")
Diff(DELETE,"s")
Diff(INSERT,"}¶        private ItemPage ItemPage { g")
Diff(EQUAL,"et; }¶        private CreateProductData CreateProductData { get; ")
Diff(DELETE,"s")
Diff(INSERT,"}¶        private ProductTypeEnum ProductType { g")
Diff(EQUAL,"et; }¶        private ")
Diff(DELETE,"Add")
Diff(EQUAL,"Product")
Diff(DELETE,"Page AddProductPage { get; set; }¶        private ItemPage ItemPage")
Diff(INSERT,"Context ProductContext { get; }¶        private IEnumerable<ProductItemData> ProductItemsData")
Diff(EQUAL," { get; ")
Diff(DELETE,"set; ")
Diff(EQUAL,"}")
Diff(INSERT,"¶")
Diff(EQUAL,"¶        #endregion¶¶        #region Builder Methods¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public static CreateProduct SimpleItem(CreateProductData createProductData")
Diff(DELETE,") =>")
Diff(INSERT,", ProductContext productContext) =>¶           ")
Diff(EQUAL," new CreateProduct(createProductData, ProductTypeEnum.SimpleItem")
Diff(DELETE,");")
Diff(INSERT,", productContext);¶¶        public static CreateProduct CollectionOfItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData, ProductContext productContext) =>¶            new CreateProduct(createProductData, ProductTypeEnum.CollectionOfItems, productContext, productItemsData);¶")
Diff(EQUAL,"¶        #endregion¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(AddProductPage.BaseUrl));¶            switch (ProductType)¶            {¶                case ProductTypeEnum.SimpleItem:¶                    user.AttemptsTo(Click.On(AddProductPage.ItemCreator.SimpleRadioButton));¶                    ")
Diff(DELETE,"CreateProductHelper(user, driver, context")
Diff(INSERT,"EntryProductData(user, context);¶                    SaveProductData(user);¶                    break;¶                case ProductTypeEnum.CollectionOfItems:¶                    user.AttemptsTo(Click.On(AddProductPage.ItemCreator.CollectionRadioButton));¶                    EntryProductData(user, context);¶                    EntryItemsToCollection(user);¶                    SaveProductData(user")
Diff(EQUAL,");¶                    break;¶                default:¶                    throw new NotImplementedException();¶            }¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new NotImplementedException();¶        }¶¶        #region Methods¶¶        /// <summary>¶        /// ")
Diff(DELETE,"Creates the")
Diff(INSERT,"Entry")
Diff(EQUAL," product ")
Diff(INSERT,"data ")
Diff(EQUAL,"based on what the user provides¶        /// </summary>¶        /// <param name="user"></param>¶        public void ")
Diff(DELETE,"Create")
Diff(INSERT,"Entry")
Diff(EQUAL,"Product")
Diff(DELETE,"Helper")
Diff(INSERT,"Data")
Diff(EQUAL,"(IActor user,")
Diff(DELETE," IWebDriver driver,")
Diff(EQUAL," IAsiWebContext context)¶        {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            var itemCreator = AddProductPage.ItemCreator;¶¶            ")
Diff(DELETE,"string item")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Code = TestHelper.GenerateRandomString(1")
Diff(DELETE,"0")
Diff(INSERT,"4")
Diff(EQUAL,");¶            ")
Diff(DELETE,"string item")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Name = string.IsNullOrEmpty(CreateProductData.Name) ? ")
Diff(DELETE,"item")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Code : CreateProductData.Name;¶            ")
Diff(DELETE,"string item")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Class = string.IsNullOrEmpty(CreateProductData.Class) ? "Sales" : CreateProductData.Class;")
Diff(INSERT,"¶            ProductContext.Description = string.IsNullOrEmpty(CreateProductData.Description) ? "DESC " + ProductContext.Code : CreateProductData.Description;")
Diff(EQUAL,"¶¶            // class first as it causes a postback¶            user.AttemptsTo(Select.ByText(itemCreator.ProductClassDropDown, ")
Diff(DELETE,"item")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Class));¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            user.AttemptsTo(SendKeys.To(itemCreator.TxtItemCode, ")
Diff(DELETE,"itemCode).UsingClearMethod());¶            user.AttemptsTo(SendKeys.To(itemCreator.TxtName, itemName).UsingClearMethod());¶")
Diff(INSERT,"ProductContext.Code));¶            user.AttemptsTo(SendKeys.To(itemCreator.TxtName, ProductContext.Name));¶            user.AttemptsTo(SendKeys.To(itemCreator.TxtDescription.TextArea, ProductContext.Description));¶            if (CreateProductData.PriceIsTotal)¶            {¶                user.AttemptsTo(Check.On(itemCreator.PriceIsTotalCheckBox));¶            }¶            else¶            {¶    ")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.TextBox(")
Diff(DELETE,"AddProductPage.I")
Diff(INSERT,"i")
Diff(EQUAL,"temCreator.TxtStandardPrice, CreateProductData.StandardPrice")
Diff(DELETE,"));¶")
Diff(INSERT," ?? TestHelper.GenerateRandomNumber(1, 1000)));¶¶                // trigger the script that defaults the discount price¶    ")
Diff(EQUAL,"            user.AttemptsTo(Click.On(")
Diff(DELETE,"AddProductPage.I")
Diff(INSERT,"i")
Diff(EQUAL,"temCreator.TxtDiscountPrice));")
Diff(DELETE,"   // trigger the script that defaults the d")
Diff(INSERT,"¶                user.AttemptsTo(SetWhenProvided.TextBox(itemCreator.TxtDiscountPrice, CreateProductData.D")
Diff(EQUAL,"iscount")
Diff(DELETE," p")
Diff(INSERT,"P")
Diff(EQUAL,"rice")
Diff(INSERT,"));¶            }¶")
Diff(EQUAL,"¶            user.AttemptsTo(SetWhenProvided.TextBox(")
Diff(DELETE,"AddProductPage.ItemCreator")
Diff(INSERT,"itemCreator.PublishStartDate.TextBox, CreateProductData.Beginning?.Date.ToString("dd/MM/yyyy")));¶            user.AttemptsTo(SetWhenProvided")
Diff(EQUAL,".T")
Diff(INSERT,"e")
Diff(EQUAL,"xt")
Diff(DELETE,"DiscountPrice, CreateProductData.DiscountPrice));¶")
Diff(INSERT,"Box(itemCreator.PublishStartTime.TextBox, CreateProductData.Beginning?.Date.ToString("hh:mm tt")));¶¶            if (CreateProductData.HasAccountingInformation)¶            {¶    ")
Diff(EQUAL,"            user.AttemptsTo(Click.On(itemCreator.TabStripControl.GetTab("Accounting")));¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.")
Diff(DELETE,"WaitsUntil(Appearance")
Diff(INSERT,"AttemptsTo(Select.ByText(itemCreator.FinancialEntityDropDownList, CreateProductData.FinancialEntity ?? "Default"));¶¶                if (CreateProductData.IsTaxable)¶                    user.AttemptsTo(Check")
Diff(EQUAL,".O")
Diff(DELETE,"f")
Diff(INSERT,"n")
Diff(EQUAL,"(itemCreator.TaxInfo.TaxableCheckBox)")
Diff(DELETE,", IsEqualTo.True());¶")
Diff(INSERT,");¶¶    ")
Diff(EQUAL,"            if (CreateProductData.Is")
Diff(DELETE,"Taxable ?? false")
Diff(INSERT,"GstHstEnabled")
Diff(EQUAL,")¶     ")
Diff(DELETE," ")
Diff(DELETE,"      {¶")
Diff(EQUAL,"               ")
Diff(DELETE," //")
Diff(EQUAL,"user.AttemptsTo(")
Diff(DELETE,"SetWhenProvided.")
Diff(EQUAL,"Check")
Diff(DELETE,"Box")
Diff(INSERT,".On")
Diff(EQUAL,"(itemCreator.TaxInfo.")
Diff(DELETE,"Taxable")
Diff(EQUAL,"CheckBox")
Diff(DELETE,", ")
Diff(INSERT,"GstHst));¶¶                if (")
Diff(EQUAL,"CreateProductData.Is")
Diff(DELETE,"Taxable));¶")
Diff(INSERT,"PstEnabled)¶    ")
Diff(EQUAL,"                user.AttemptsTo(C")
Diff(DELETE,"li")
Diff(INSERT,"he")
Diff(EQUAL,"ck.On(itemCreator.TaxInfo.")
Diff(DELETE,"Taxable")
Diff(EQUAL,"CheckBox")
Diff(INSERT,"Pst")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶                if (!string.IsNullOrEmpty(CreateProductData.TaxCode))¶    ")
Diff(EQUAL,"                user.AttemptsTo(SetWhenProvided.DropDown(itemCreator.TaxInfo.TaxAuthorityDropDown, CreateProductData.TaxCode));¶")
Diff(DELETE,"       ")
Diff(INSERT,"¶")
Diff(EQUAL,"     ")
Diff(DELETE,"}¶")
Diff(EQUAL,"           ")
Diff(DELETE," ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.IncursShippingCheckBox, CreateProductData.IncursShipping));¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.IncursHandlingCheckBox, CreateProductData.IncursHandling));¶            ")
Diff(INSERT,"   ")
Diff(INSERT," ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.CheckBox(itemCreator.InventoryItemCheckBox, CreateProductData.InventoryItem));¶")
Diff(DELETE,"¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(Click.On(")
Diff(DELETE,"AddProductPage.I")
Diff(INSERT,"i")
Diff(EQUAL,"temCreator.TabStripControl.GetTab("Summary")));¶            ")
Diff(DELETE,"user.AttemptsTo(ClickCommandButton.Save());¶¶            user.AsksFor(Text.Of(")
Diff(INSERT,"}¶¶            context.UpsertData("ItemCode", ProductContext.Code);¶        }¶¶        /// <summary>¶        /// Adds items to the product based on what the user provides¶        /// </summary>¶        /// <param name="user"></param>¶        public void EntryItemsToCollection(IActor user)¶        {¶            var itemDialog = AddProductPage.AddItemDialog;¶            var itemCreator = AddProductPage.ItemCreator;¶            var row = 1;¶¶            foreach (var productItem in ProductItemsData)¶            {¶                user.AttemptsTo(Click.On(itemCreator.AddLinkButton));¶                user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶                var parameterName = string.IsNullOrEmpty(productItem.Title)¶                    ? "Product Code Starts With"¶                    : "Product Title";¶¶                var searchProductTextBox = ((QueryTextParameter)itemDialog.Lister.GetParameter("Add Item", parameterName)).Textbox;¶                var searchProductText = string.IsNullOrEmpty(productItem.Title) ? productItem.Code : productItem.Title;¶¶                user.AttemptsTo(SendKeys.To(searchProductTextBox, searchProductText).ThenHitEnter());¶                user.WaitsUntil(itemDialog.Lister.GetRowCount(), IsEqualTo.Value(1));¶                user.AttemptsTo(Click.On(itemDialog.Lister.FirstCellLink));¶                user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶¶                user.WaitsUntil(Text.Of(itemCreator.CollectionItemsGrid.Cells(row)), IsNotEqualTo.Value("There are no set items."));¶                if (productItem.Quantity > 1)¶                {¶                    user.AttemptsTo(SendKeys.To(itemCreator.CollectionItemsGrid.Cell(row, 4, tableSection: "tbody", postXPath: "//input"),¶                        productItem.Quantity.ToString()));¶                }¶¶                row++;¶            }¶        }¶¶        /// <summary>¶        /// Saves the product¶        /// </summary>¶        /// <param name="user"></param>¶        public void SaveProductData(IActor user)¶        {¶            user.AttemptsTo(ClickCommandButton.Save());¶¶            var productDisplay = ")
Diff(EQUAL,"ItemPage.GeneralProductDisplay.DynamicProductDisplay.")
Diff(INSERT,"Simple")
Diff(EQUAL,"Product")
Diff(DELETE,"Title)).Should().Be(itemName")
Diff(INSERT,"Display;¶            user.WaitsUntil(Text.Of(productDisplay.ProductTitle), IsEqualTo.Value(ProductContext.Name));¶            if (user.AsksFor(Existence.Of(productDisplay.InventoryDetailsButton)))¶            {¶                user.AttemptsTo(Click.On(productDisplay.InventoryDetailsButton)")
Diff(EQUAL,");¶")
Diff(DELETE,"¶")
Diff(INSERT,"  ")
Diff(EQUAL,"            ")
Diff(DELETE,"context.UpsertData("ItemCode", itemCode);¶")
Diff(INSERT,"  ProductContext.LastCost = user.WaitsUntil(Text.Of(productDisplay.TotalCostValueLabel), IsNotEqualTo.Value(""));¶                ProductContext.ContainsInventory = true;¶            }")
Diff(EQUAL,"¶        }¶¶        #endregion¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public enum ProductTypeEnum¶        {¶            SimpleItem")
Diff(INSERT,",¶            CollectionOfItems,")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Commerce/CreateProduct.cs)
Diff(INSERT,"#pragma warning disable CS0169, CS0414¶/* future work¶warning CS0169: The field 'CheckOut.Random' is never used ¶warning CS0414: The field 'CheckOut.SkipCart' is assigned but its value is never used¶*/¶¶namespace Asi.Selenium.Web.Interactions.Shop¶")
Diff(EQUAL,"{¶    public class CheckOut : AsiAbstractWebTask¶    {¶        #region Constructors¶        private CheckOut(CheckOutPaymentMethodType paymentMethodType)¶        {¶            PaymentMethodType = paymentMethodType;¶            Cart = new Cart();¶            DonateNowPage = new DonateNowPage();¶")
Diff(INSERT,"            PayPalCheckOutPage = new PayPalCheckOutPage();¶")
Diff(EQUAL,"            OrderConfirmation = new OrderConfirmation();¶        }¶¶        private CheckOut(CheckOutPaymentMethodType paymentMethodType, CartData cartData)¶        {¶            PaymentMethodType = paymentMethodType;¶            CartData = cartData;¶            Cart = new Cart();¶            DonateNowPage = new DonateNowPage();¶")
Diff(INSERT,"            PayPalCheckOutPage = new PayPalCheckOutPage();¶")
Diff(EQUAL,"            OrderConfirmation = new OrderConfirmation();¶        }¶        #endregion¶¶        #region Properties¶        private Cart Cart { get;")
Diff(DELETE," set;")
Diff(EQUAL," }¶        private DonateNowPage DonateNowPage { get; ")
Diff(DELETE,"s")
Diff(INSERT,"}¶        private PayPalCheckOutPage PayPalCheckOutPage { g")
Diff(EQUAL,"et; }¶        private CartData CartData { get;")
Diff(DELETE," set;")
Diff(EQUAL," }¶        private OrderConfirmation OrderConfirmation { get;")
Diff(DELETE," set;")
Diff(EQUAL," }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        private CheckOutPaymentMethodType PaymentMethodType { get; ")
Diff(DELETE,"set; }")
Diff(INSERT,"}¶¶        private const string _payPalUserEmail = "USA_Pers@advsol.com";¶        private const string _payPalUserPassword = "qaperson123";¶")
Diff(EQUAL,"¶        private bool Random;¶        private bool SkipCart;¶        private bool SkipSubmittingOrder;¶        private bool Angular;¶        private bool IsRandom;¶        private bool IsDonateNowPayment;¶¶        #endregion¶¶        #region Builder Methods¶¶        /// <summary>¶        /// Selects Main Checking Account from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <returns></returns>¶        public static CheckOut WithMainCheckingAccount() => new CheckOut(CheckOutPaymentMethodType.MainCheckingAccount);¶¶        /// <summary>¶        /// Selects Default payment from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithDefaultPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.DefaultPayment, cartData);¶¶        /// <summary>¶        /// Selects Default payment from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <returns></returns>¶        public static CheckOut WithDefaultPayment() => new CheckOut(CheckOutPaymentMethodType.DefaultPayment);¶        /// <summary>¶        /// Selects Main Checking Account from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithMainCheckingAccount(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.MainCheckingAccount, cartData);¶        /// <summary>¶        /// Selects a payment type credit card from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithCreditCardPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.CreditCard, cartData);¶        /// <summary>¶        /// Selects a payment type debit card from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithDebitCardPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.DebitCard, cartData);¶        /// <summary>¶        /// Selects In Kind from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithInKindPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.InKind, cartData);¶        /// <summary>¶        /// Selects Foundation Checking Account from payment method dropdown then proceeds to pay for the items¶        /// </summary>¶        /// <param name="cartData"></param>¶        /// <returns></returns>¶        public static CheckOut WithFoundationCheckingAccountPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.FoundationCheckingAccount, cartData);¶¶")
Diff(INSERT,"        /// <summary>¶        /// Proceeds to pay for the items with PayPal button¶        /// </summary>¶        /// <returns></returns>¶        public static CheckOut WithPayPal() => new CheckOut(CheckOutPaymentMethodType.PayPal).SkipSubmitOrderButton();¶¶        /// <summary>¶        /// Proceeds to submit the zero dollar order without providing a payment¶        /// </summary>¶        /// <returns></returns>¶        public static CheckOut WithoutPayment(CartData cartData) => new CheckOut(CheckOutPaymentMethodType.WithoutPayment, cartData);¶¶")
Diff(EQUAL,"        /// <summary>¶        /// If you would like to send to the UI a random char into the Order Number payment textbox ¶        /// </summary>¶        /// <returns></returns>¶        public CheckOut WithRandomPurchaseOrder()¶        {¶            IsRandom = true;¶            return this;¶        }¶¶        /// <summary>¶        /// If on gift entry donation page. This is required in order for you to pay for gifts, pledges, etc.¶        /// </summary>¶        /// <returns></returns>¶        public CheckOut DonationPayment()¶        {¶            IsDonateNowPayment = true;¶            return this;¶        }¶¶        public CheckOut SkipCartNavigation()¶        {¶            SkipCart = true;¶            return this;¶        }¶¶        public CheckOut SkipSubmitOrderButton()¶        {¶            SkipSubmittingOrder = true;¶            return this;¶        }¶¶        public CheckOut IsAngular()¶        {¶            Angular = true;¶            return this;¶        }¶        #endregion¶¶        #region Methods¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            //Determines if your on the gift entry page to make the cart payment. If not then goes to the cart page¶            if (!IsDonateNowPayment)¶                user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶")
Diff(INSERT,"¶            if (!string.IsNullOrEmpty(CartData?.PromoCode))¶            {¶                user.AttemptsTo(SendKeys.To(Cart.PromotionManagerDisplay.PromotionalCode, CartData.PromoCode));¶                user.AttemptsTo(ClickCommandButton.WithWebLocator(Cart.PromotionManagerDisplay.ApplyPromotionalCodeButton));¶            }¶¶")
Diff(EQUAL,"            SetPayment(user, context);¶            //Submits the payment¶            if (!SkipSubmittingOrder)¶            {¶")
Diff(DELETE,"                user.WaitsUntil(Appearance.Of(Cart.SubmitOrderButtonLink.SubmitCartOrderButton), IsEqualTo.True());¶")
Diff(EQUAL,"                user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶                user.WaitsUntil(Appearance.Of(Cart.SubmitOrderButtonLink.SubmitCartOrderButton), IsEqualTo.False());¶            }¶        }¶¶        /// <summary>¶        /// Sets the desired payment ¶        /// </summary>¶        /// <param name="user"></param>¶        private void SetPayment(IActor user, IAsiWebContext context)¶        {¶            PaymentCreator paymentCreator = IsDonateNowPayment ? DonateNowPage.PaymentCreator : Cart.PaymentDetails;¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            user.")
Diff(DELETE,"WaitsUntil(Appearance.Of(paymentCreator.PaymentAmount), IsEqualTo.True(")
Diff(INSERT,"AttemptsTo(Waiting.InSeconds(1")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            switch (PaymentMethodType)¶            {¶                case CheckOutPaymentMethodType.MainCheckingAccount:¶                case CheckOutPaymentMethodType.Check:¶                    PayWithChecking(user, context, paymentCreator);¶                    break;¶                case CheckOutPaymentMethodType.FoundationCheckingAccount:¶                    user.AttemptsTo(Select.ByText(paymentCreator.PaymentMethodDropDown, "Foundation Checking Account"));¶                    break;¶                case CheckOutPaymentMethodType.InKind:¶                    user.AttemptsTo(Select.ByText(paymentCreator.PaymentMethodDropDown, "In Kind"));¶                    break;¶                case CheckOutPaymentMethodType.CreditCard:¶                    PayWithCard(user, context, paymentCreator);¶                    break;¶                case CheckOutPaymentMethodType.DebitCard:¶                    PayWithCard(user, context, paymentCreator, false);¶                    break;¶")
Diff(INSERT,"                case CheckOutPaymentMethodType.PayPal:¶                    PayWithPayPal(user, paymentCreator);¶                    break;¶                case CheckOutPaymentMethodType.WithoutPayment:¶                    return;¶")
Diff(EQUAL,"                case CheckOutPaymentMethodType.DefaultPayment:¶                    if (user.AsksFor(Appearance.Of(Cart.PaymentDetails.PurchaseOrder)))¶                        if (IsRandom)¶                            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.PurchaseOrder, TestHelper.GenerateRandomString(5)));¶                        else¶                            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.PurchaseOrder, CartData.PurchaseOrderNumber));¶                    else if (CartData.PaymentMethod")
Diff(DELETE,"Type")
Diff(EQUAL,".Contains("Check"")
Diff(INSERT,", StringComparison.OrdinalIgnoreCase) || (CartData.PaymentMethodType.Contains("Check", StringComparison.OrdinalIgnoreCase)")
Diff(EQUAL,"))¶                        PayWithChecking(user, context, paymentCreator);¶                    else if (CartData.PaymentMethodType.Contains("Credit"")
Diff(INSERT,", StringComparison.OrdinalIgnoreCase")
Diff(EQUAL,"))¶                        PayWithCard(user, context, paymentCreator);¶                    else¶                        PayWithCard(user, context, paymentCreator, false);¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Pays with checking ¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="paymentCreator"></param>¶        public void PayWithChecking(IActor user, IAsiWebContext context, PaymentCreator paymentCreator)¶        {¶            if")
Diff(INSERT," ")
Diff(EQUAL,"(context.IsV10)¶                user.AttemptsTo(Select.ByText(paymentCreator.PaymentMethodDropDown, "Main Checking Account"));¶            else¶                user.AttemptsTo(Select.ByText(paymentCreator.PaymentMethodDropDown, "Check"));¶            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, TestHelper.GenerateRandomString(5)));¶            user.AttemptsTo(SetWhenProvided.TextBox(Cart.PaymentDetails.PaymentAmount, CartData?.PaymentAmount));¶        }¶¶        /// <summary>¶        /// Pays with a credit card if creditCard field is left empty¶        /// </summary>¶        /// <param name="user">Screenplay user</param>¶        /// <param name="creditCard">Determins if it's credit or debit card</param>¶        public void PayWithCard(IActor user, IAsiWebContext context, PaymentCreator paymentCreator, bool creditCard = true)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(paymentCreator.BillToPartyDropDown, CartData.CompanyName).WaitAfterInput(2));¶            if (Angular)¶            {¶                user.AttemptsTo(SetWhenProvided.DropDown(paymentCreator.AngularPaymentMethodDropDown, CartData.PaymentMethod).WaitAfterInput(1));¶                user.AttemptsTo(SwitchFrame.ToGiftEntryFrame());¶            }¶            else¶            {¶                user.AttemptsTo(SetWhenProvided.DropDown(paymentCreator.PaymentMethodDropDown, CartData.PaymentMethod).WaitAfterInput(2));¶                if (context.IsV10)¶                    user.AttemptsTo(!CartData.IsPayCentralSdkOn ? SwitchFrame.ToFrameByXpath("//iFrame[contains(@id,'iFrame')]")¶                        : SwitchFrame.ToPayCentralSDKFrame());¶                else¶                    user.AttemptsTo(SwitchFrame.ToFrameByXpath("//iFrame[contains(@name,'iFrame-PayCentral')]"));¶")
Diff(DELETE,"                ¶")
Diff(EQUAL,"            }¶¶            if (creditCard)¶            {¶                user.WaitsUntil(Appearance.Of(paymentCreator.CCNumber), IsEqualTo.True());¶                user.AttemptsTo(SendKeys.To(paymentCreator.CCNumber, CartData.CardNumber));¶                user.AttemptsTo(SendKeys.To(paymentCreator.CCExpiration, DateTime.Today.AddYears(1).ToString("MM/yy")));¶                user.AttemptsTo(SendKeys.To(paymentCreator.CCSecurityCode, CartData.CardCVC));¶            }¶            else¶            {¶                user.WaitsUntil(Appearance.Of(paymentCreator.AccountNumber), IsEqualTo.True());¶                user.AttemptsTo(SendKeys.To(paymentCreator.AccountNumber, CartData.AccountNumber));¶                user.AttemptsTo(SendKeys.To(paymentCreator.RoutingNumber, CartData.RoutingNumber));¶            }¶¶            if (!")
Diff(DELETE,"(")
Diff(EQUAL,"CartData.PostalCode")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty(")
Diff(EQUAL,") && creditCard)¶")
Diff(INSERT,"                if (user.AsksFor(Appearance.Of(paymentCreator.CCPostalCode)))¶    ")
Diff(EQUAL,"                user.AttemptsTo(SendKeys.To(paymentCreator.CCPostalCode, CartData.PostalCode));¶¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(SetWhenProvided.TextBox(Cart.PaymentDetails.CardHolderName, CartData.BillTo).Clear());¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Pays with PayPal¶        /// </summary>¶        /// <param name="user">Screenplay user</param>¶        /// <param name="paymentCreator">Payment creator page</param>¶        public void PayWithPayPal(IActor user, PaymentCreator paymentCreator)¶        {¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(paymentCreator.CheckoutWithPayPalButton));¶¶            user.WaitsUntil(Existence.Of(PayPalCheckOutPage.EmailInput), IsEqualTo.True());¶            user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.EmailInput, _payPalUserEmail));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.NextButton));¶¶            user.WaitsUntil(Existence.Of(PayPalCheckOutPage.PasswordInput), IsEqualTo.True());¶            user.AttemptsTo(SendKeys.To(PayPalCheckOutPage.PasswordInput, _payPalUserPassword));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.LoginButton));¶¶            user.WaitsUntil(Existence.Of(PayPalCheckOutPage.CompletePurchaseButton), IsEqualTo.True());¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PayPalCheckOutPage.CompletePurchaseButton));¶        }¶¶")
Diff(EQUAL,"        /// <summary>¶        /// I verify order confirmation details from context data¶        /// </summary>¶        public void VerifyOrderConfirmationDetails(IActor user, IAsiWebContext context)¶        {¶            // verify Order Confirmation page title¶            user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");¶            string orderDate = DateTime.Parse(context.GetData<string>("OrderDate")).ToLongDateString();¶            // confirm details from saved context data¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.OrderDate)).Should().Be(orderDate);¶            if")
Diff(INSERT," ")
Diff(EQUAL,"(string.IsNullOrEmpty(context.GetData<string>("FullName")))¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.BillTo)).Should().Contain(context.GetData<string>("FullName"));¶            if (string.IsNullOrEmpty(context.GetData<string>("InvoiceTotal")))¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.InvoiceTotal)).Should().Be(context.GetData<string>("InvoiceTotal"));¶            if (string.IsNullOrEmpty(context.GetData<string>("BalanceDue")))¶                user.AsksFor(ValueAttribute.Of(OrderConfirmation.OrderConfirmationDisplay.BalanceDue)).Should().Be(context.GetData<string>("BalanceDue"));¶            if (string.IsNullOrEmpty(context.GetData<string>("GrandTotal")))¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be(context.GetData<string>("GrandTotal"));¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        }¶¶        /// <summary>¶        /// Checks if this interaction is equal to another interaction.¶        /// </summary>¶        /// <param name="obj">The other object.</param>¶        public override bool Equals(object obj) =>¶            obj is CheckOut joinNow && PaymentMethodType == joinNow.PaymentMethodType;¶¶        /// <summary>¶        /// Gets a unique hash code for this interaction.¶        /// </summary>¶        /// <returns></returns>¶        public override int GetHashCode() => HashCode.Combine(GetType(), PaymentMethodType);¶¶        /// <summary>¶        /// Returns a description of the Task.¶        /// </summary>¶        /// <returns></returns>¶        public override string ToString() => $"CheckOut with '{Enum.GetName(typeof(CheckOutPaymentMethodType), PaymentMethodType)}'";¶¶        /// <summary>¶        /// To verify the payment was made. Still more to write off¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="driver"></param>¶        /// <param name="context"></param>¶        /// <exception cref="NotImplementedException"></exception>¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            if (user.AsksFor(CurrentUrl.FromBrowser()).Contains("Donation"))¶                user.AsksFor(Appearance.Of(PageBase.UIText("Thank you for your support!"))).Should().BeTrue();¶            else if (user.AsksFor(CurrentUrl.FromBrowser()).Contains("OrderConfirmation"))¶                VerifyOrderConfirmationDetails(user, context);¶        }¶        #endregion¶¶        /// <summary>¶        /// List of values the user has to choose from for making iMIS payments¶        /// </summary>¶        private enum CheckOutPaymentMethodType¶        {¶            DefaultPayment,¶            MainCheckingAccount,¶            Check,¶            FoundationCheckingAccount,¶            InKind,¶            CreditCard,¶            DebitCard")
Diff(INSERT,",¶            PayPal,¶            WithoutPayment,")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Shop/CheckOut.cs)
Diff(EQUAL,"{¶    public class SignIn : AsiAbstractWebTask¶    {¶¶        #region Constructor¶        private SignIn(LogInType logInType, string userNameValue)¶        {¶            SignInPage = new SignInPage();¶            PublicSignInPage = new PublicSignInPage();¶            LogInTypeValue = logInType;¶            UserNameValue = userNameValue;¶            AccountArea = new AccountArea("AccountArea");¶            Random = new Random();¶")
Diff(INSERT,"            LicenseServerPage = new LicenseServerPage();¶")
Diff(EQUAL,"        }¶        #endregion¶¶        #region Properties¶        private string QueryName;¶")
Diff(DELETE,"        private string Password;¶")
Diff(EQUAL,"        private LogInType LogInTypeValue { get; set; }¶        private SignInPage SignInPage { get; set; }¶        private PublicSignInPage PublicSignInPage { get; set; }¶        private string UserNameValue { get; set; }¶        private string AccountName { get; set; }¶        private string OBOFirstName { get; set; }¶        private string OBOLastName { get; set; }¶        private bool OnBehalfUser { get; set; }¶        private AccountArea AccountArea { get; set; }¶        private Random Random { get; set; }¶        private OBOToggleDialog OBOToggleDialog { get; set; }")
Diff(INSERT,"¶        private LicenseServerPage LicenseServerPage { get; set; }")
Diff(EQUAL,"¶¶        #endregion¶¶        #region BuilderMethods¶        public static SignIn WithUserName(string userName) => new SignIn(LogInType.UserName, userName);¶        public static SignIn WithUserID(string userId) => new SignIn(LogInType.UserId, userId);¶        public static SignIn WithUserRole(string userRole) => new SignIn(LogInType.UserRole, userRole);¶")
Diff(INSERT,"        public static SignIn ToLicenseServer(string userRole ="License Administrator") => new SignIn(LogInType.UserRole, userRole);¶")
Diff(EQUAL,"        #endregion¶¶        #region Methods¶¶        public SignIn AndOnBehalfUser(string oBOFirstNameValue, string oBOLastNameValue)¶        {¶            OnBehalfUser = true;¶            OBOFirstName = oBOFirstNameValue;¶            OBOLastName = oBOLastNameValue;¶            return this;¶        }¶¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            OBOToggleDialog = new OBOToggleDialog(context);¶            ")
Diff(DELETE,"context.Website = Site.ToString();¶            context.UserName = LogInTypeValue.Equals(LogInType.UserRole) ? SelectUser() :")
Diff(INSERT,"if(LogInTypeValue.Equals(LogInType.UserRole))¶                context.SetContextByRole(Site.ToString(), UserNameValue);¶            else¶                context.SetContextByName(Site.ToString(),")
Diff(EQUAL," UserNameValue")
Diff(DELETE,";")
Diff(INSERT,");¶")
Diff(EQUAL,"¶            ")
Diff(DELETE,"Password = "demo123";¶")
Diff(INSERT,"if(UserNameValue != "License Administrator") ¶            {¶    ")
Diff(EQUAL,"            user.AttemptsTo(Browse.InImis(Site));¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            //TODO allow for the password to also be sent via the interaction and default to this one when it's not¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            if (user.AsksFor(CurrentUrl.FromBrowser()).Contains("Staff_Sign"))¶            ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶    ")
Diff(EQUAL,"                user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInUserName, context.UserName));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(SignInPage.ContactSignIn.SignInPassword, ")
Diff(INSERT,"context.")
Diff(EQUAL,"Password));¶            ")
Diff(INSERT,"  ")
Diff(DELETE,"}¶")
Diff(INSERT,"  }¶    ")
Diff(EQUAL,"            else if (user.AsksFor(CurrentUrl.FromBrowser()).Contains("ClubStaff"))¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"{¶                ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInUserName, context.UserName));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(SignInPage.ClubStaffContactSignIn.SignInPassword, ")
Diff(INSERT,"context.")
Diff(EQUAL,"Password));¶            ")
Diff(DELETE,"}¶")
Diff(INSERT,"    }¶   ")
Diff(EQUAL,"            ")
Diff(INSERT," ")
Diff(EQUAL,"else¶            ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶    ")
Diff(EQUAL,"                user.AttemptsTo(Browse.InImis(PublicSignInPage.BaseUrl));¶                ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInUserName, context.UserName));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(PublicSignInPage.ContactSignIn.SignInPassword, ")
Diff(INSERT,"context.")
Diff(EQUAL,"Password));¶            ")
Diff(DELETE,"}¶")
Diff(INSERT,"    }¶    ")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.Submit());¶")
Diff(INSERT,"                user.AttemptsTo(Waiting.ForPageReload()); // Wait for iMIS to fully authenticate¶    ")
Diff(EQUAL,"            user.AttemptsTo(Browse.InImis(Site));¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(Waiting.ForPageReload());¶            ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"var partyName = AccountArea.PartyName;¶¶            ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"if (user.AsksFor(CurrentUrl.FromBrowser()).Contains("Donor"))¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                partyName = AccountArea.DonorPartyName;¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(Waiting.ForPageReload());¶            ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"if (user.AsksFor(Existence.Of(partyName)))¶            ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶    ")
Diff(EQUAL,"                AccountName = user.AsksFor(Text.Of(partyName));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"context.UpsertData("FullName", AccountName);¶            ")
Diff(DELETE,"}¶¶")
Diff(INSERT,"    }¶¶   ")
Diff(EQUAL,"            ")
Diff(INSERT," ")
Diff(EQUAL,"if (OnBehalfUser)¶            ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶    ")
Diff(EQUAL,"                user.AttemptsTo(Click.On(AccountArea.OBOToggle));¶                ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"user.AttemptsTo(SwitchFrame.ToObjectBrowser());¶         ¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                if (context.IsV10)¶                    ")
Diff(INSERT,"    ")
Diff(EQUAL,"QueryName = "People By Common Criteria";¶                ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"else¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                    QueryName = "Default";¶¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                user.AttemptsTo(SendKeys.To(((QueryTextParameter)OBOToggleDialog.SelectAQuery.GetParameter(QueryName, "First name starts with")).Textbox, OBOFirstName));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SendKeys.To(((QueryTextParameter)OBOToggleDialog.SelectAQuery.GetParameter(QueryName, "Last name starts with")).Textbox, OBOLastName).ThenHitEnter());¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.WaitsUntil(Appearance.Of(OBOToggleDialog.SelectAQuery.FirstCell), IsEqualTo.True());¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                user.AttemptsTo(Click.On(OBOToggleDialog.SelectAQuery.FirstCellLink));¶")
Diff(INSERT,"                    user.WaitsUntil(Appearance.Of(AccountArea.PartyName), IsEqualTo.True());¶    ")
Diff(EQUAL,"                AccountName = user.AsksFor(Text.Of(AccountArea.PartyName));¶                ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"AccountName.Should().Contain(OBOFirstName);¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                AccountName.Should().Contain(OBOLastName);¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"context.UpsertData("OBOFullName", AccountName);     ¶")
Diff(INSERT,"                }¶            }¶            //condition to access license server site. "License Administrator" role value is provided in feature file and saved in Users.json¶            else¶            {¶                user.AttemptsTo(Browse.ToUrl(context.LicenseUrl.ToString()));¶                user.AttemptsTo(SendKeys.To(LicenseServerPage.User, context.UserName));¶                user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));¶                user.AttemptsTo(SendKeys.To(LicenseServerPage.Password, context.Password));¶                user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));¶                user.AttemptsTo(ClickCommandButton.WithWebLocator(LicenseServerPage.SubmitButton));¶")
Diff(EQUAL,"            }¶        }¶¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Be(LogInTypeValue.ToString());¶        }¶¶")
Diff(DELETE,"        private string SelectUser()¶        {        ¶            var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");¶            var userSelection = userList.Where(t => t.Role.Equals(UserNameValue));¶            int userCount = userSelection.Count();¶            var user = userSelection.ElementAt(Random.Next(userSelection.Count()));¶            return user.UserName;¶        }¶¶")
Diff(EQUAL,"        #endregion¶¶        private enum LogInType¶        {¶            UserName,¶            UserId,¶            UserRole¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/User/SignIn.cs)
Diff(EQUAL,"{¶    public class SelectDefaultCountryCurrency : AsiAbstractWebTask¶    {¶        #region Contructors¶        private SelectDefaultCountryCurrency(CountryCurrencyType currencyType)¶        {¶            CurrencyType = currencyType;¶            FinanceGeneralSettingsPage = new FinanceGeneralSettingsPage();¶        }¶        #endregion¶¶        #region Properties¶        private CountryCurrencyType CurrencyType { get; set; }¶        private bool IsVerifyOnly { get; set; }¶        private FinanceGeneralSettingsPage FinanceGeneralSettingsPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        public static SelectDefaultCountryCurrency ToOther() => new SelectDefaultCountryCurrency(CountryCurrencyType.Other);¶        public static SelectDefaultCountryCurrency ToAustralianDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.AustralianDollar);¶        public static SelectDefaultCountryCurrency ToBrazilianReal() => new SelectDefaultCountryCurrency(CountryCurrencyType.BrazilianReal);¶        public static SelectDefaultCountryCurrency ToCanadianDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.CanadianDollar);¶        public static SelectDefaultCountryCurrency ToCzechKoruna() => new SelectDefaultCountryCurrency(CountryCurrencyType.CzechKoruna);¶        public static SelectDefaultCountryCurrency ToDanishKrone() => new SelectDefaultCountryCurrency(CountryCurrencyType.DanishKrone);¶        public static SelectDefaultCountryCurrency ToEuro() => new SelectDefaultCountryCurrency(CountryCurrencyType.Euro);¶        public static SelectDefaultCountryCurrency ToHongKongDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.HongKongDollar);¶        public static SelectDefaultCountryCurrency ToHungarianForint() => new SelectDefaultCountryCurrency(CountryCurrencyType.HungarianForint);¶        public static SelectDefaultCountryCurrency ToIsraeliNewShekel() => new SelectDefaultCountryCurrency(CountryCurrencyType.IsraeliNewShekel);¶        public static SelectDefaultCountryCurrency ToJapaneseYen() => new SelectDefaultCountryCurrency(CountryCurrencyType.JapaneseYen);¶        public static SelectDefaultCountryCurrency ToMalaysianRinggit() => new SelectDefaultCountryCurrency(CountryCurrencyType.MalaysianRinggit);¶        public static SelectDefaultCountryCurrency ToMexicanPeso() => new SelectDefaultCountryCurrency(CountryCurrencyType.MexicanPeso);¶        public static SelectDefaultCountryCurrency ToNewTaiwanDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.NewTaiwanDollar);¶        public static SelectDefaultCountryCurrency ToNewZealandDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.NewZealandDollar);¶        public static SelectDefaultCountryCurrency ToNorwegianKrone() => new SelectDefaultCountryCurrency(CountryCurrencyType.NorwegianKrone);¶        public static SelectDefaultCountryCurrency ToPhilippinePeso() => new SelectDefaultCountryCurrency(CountryCurrencyType.PhilippinePeso);¶        public static SelectDefaultCountryCurrency ToPolishZOty() => new SelectDefaultCountryCurrency(CountryCurrencyType.PolishZOty);¶        public static SelectDefaultCountryCurrency ToPoundSterling() => new SelectDefaultCountryCurrency(CountryCurrencyType.PoundSterling);¶        public static SelectDefaultCountryCurrency ToRussianRuble() => new SelectDefaultCountryCurrency(CountryCurrencyType.RussianRuble);¶        public static SelectDefaultCountryCurrency ToSingaporeDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.SingaporeDollar);¶        public static SelectDefaultCountryCurrency ToSwedishKrona() => new SelectDefaultCountryCurrency(CountryCurrencyType.SwedishKrona);¶        public static SelectDefaultCountryCurrency ToSwissFranc() => new SelectDefaultCountryCurrency(CountryCurrencyType.SwissFranc);¶        public static SelectDefaultCountryCurrency ToThaiBaht() => new SelectDefaultCountryCurrency(CountryCurrencyType.ThaiBaht);¶        public static SelectDefaultCountryCurrency ToUnitedStatesDollar() => new SelectDefaultCountryCurrency(CountryCurrencyType.UnitedStatesDollar);¶¶        public SelectDefaultCountryCurrency OnlyVerify()¶        {¶            IsVerifyOnly = true;¶            return this;¶        }¶¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(FinanceGeneralSettingsPage.PageTitle)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e("Accounting settings")")
Diff(INSERT,")")
Diff(EQUAL,";¶            if (!IsVerifyOnly)¶            {¶                user.AttemptsTo(Select.ByText(FinanceGeneralSettingsPage.DefaultCountryCurrency, CurrencyType.GetDisplayName()));¶")
Diff(DELETE,"                if(CurrencyType.ToString()=="Other")¶                {¶                    user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox,"CRC").UsingClearMethod());¶                }¶")
Diff(EQUAL,"                user.AttemptsTo(ClickCommandButton.Save().AndUseJavaScript().AndExpectMessage());¶            }¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedOptionText.Of(FinanceGeneralSettingsPage.DefaultCountryCurrency)")
Diff(DELETE,").Should().B")
Diff(INSERT,",¶                IsEqualTo.Valu")
Diff(EQUAL,"e(CurrencyType.GetDisplayName())")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new System.NotImplementedException();¶        }¶¶        #endregion¶¶        private enum CountryCurrencyType¶        {¶            [Display(Name = "Other")]¶            Other,¶            [Display(Name = "Australian dollar (AUD)")]¶            AustralianDollar,¶            [Display(Name = "Brazilian real (BRL)")]¶            BrazilianReal,¶            [Display(Name = "Canadian dollar (CAD)")]¶            CanadianDollar,¶            [Display(Name = "Czech koruna (CZK)")]¶            CzechKoruna,¶            [Display(Name = "Danish krone (DKK)")]¶            DanishKrone,¶            [Display(Name = "Euro (EUR)")]¶            Euro,¶            [Display(Name = "Hong Kong dollar (HKD)")]¶            HongKongDollar,¶            [Display(Name = "Hungarian forint (HUF)")]¶            HungarianForint,¶            [Display(Name = "Israeli new shekel (ILS)")]¶            IsraeliNewShekel,¶            [Display(Name = "Japanese yen (JPY)")]¶            JapaneseYen,¶            [Display(Name = "Malaysian ringgit (MYR)")]¶            MalaysianRinggit,¶            [Display(Name = "Mexican peso (MXN)")]¶            MexicanPeso,¶            [Display(Name = "New Taiwan dollar (TWD)")]¶            NewTaiwanDollar,¶            [Display(Name = "New Zealand dollar (NZD)")]¶            NewZealandDollar,¶            [Display(Name = "Norwegian krone (NOK)")]¶            NorwegianKrone,¶            [Display(Name = "Philippine peso (PHP)")]¶            PhilippinePeso,¶            [Display(Name = "Polish złoty (PLN)")]¶            PolishZOty,¶            [Display(Name = "Pound sterling (GBP)")]¶            PoundSterling,¶            [Display(Name = "Russian ruble (RUB)")]¶            RussianRuble,¶            [Display(Name = "Singapore dollar (SGD)")]¶            SingaporeDollar,¶            [Display(Name = "Swedish krona (SEK)")]¶            SwedishKrona,¶            [Display(Name = "Swiss franc (CHF)")]¶            SwissFranc,¶            [Display(Name = "Thai baht (THB)")]¶            ThaiBaht,¶            [Display(Name = "United States dollar (USD)")]¶            UnitedStatesDollar¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Finance/Settings/SelectDefaultCountryCurrency.cs)
Diff(EQUAL,"{¶    public class SelectDefaultCountry : AsiAbstractWebTask¶    {¶        #region Contructors¶        private SelectDefaultCountry(string countryName)¶        {¶            CountryName = countryName;¶            ContactGeneralSettingsPage = new ContactGeneralSettingsPage();¶        }¶        #endregion¶¶        #region Properties¶        private string CountryName { get; set; }¶        private ContactGeneralSettingsPage ContactGeneralSettingsPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        public static SelectDefaultCountry ByText(string countryName) => new SelectDefaultCountry(countryName);¶¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(ContactGeneralSettingsPage.BaseUrl));¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(ContactGeneralSettingsPage.PageTitle)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e("Contact settings")")
Diff(INSERT,")")
Diff(EQUAL,";¶            user.AttemptsTo(Select.ByText(ContactGeneralSettingsPage.DefaultCountry, CountryName));¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(CountryName)")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(ContactGeneralSettingsPage.BaseUrl));¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(ContactGeneralSettingsPage.PageTitle)")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e("Contact settings")")
Diff(INSERT,")")
Diff(EQUAL,";¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedOptionText.Of(ContactGeneralSettingsPage.DefaultCountry)")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e(CountryName)")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Finance/Settings/SelectDefaultCountry.cs)
Diff(EQUAL,"{¶    public class RegisterSomeoneElse : AsiAbstractWebTask¶    {¶        #region Constructors¶        private RegisterSomeoneElse(EventData eventData)¶        {¶            EventData = eventData;¶            EventDisplayPage = new EventDisplayPage();¶            FindEventsPage = new FindEventsPage();¶            RegisterSomeoneElseDialog = new RegisterSomeoneElseDialog();¶            RSEType = RegisterSomeoneElseType.ExistingContact;¶        }¶¶        private RegisterSomeoneElse(EventData eventData, ContactData contact)¶        {¶            EventData = eventData;¶            Contact = contact;¶            EventDisplayPage = new EventDisplayPage();¶            FindEventsPage = new FindEventsPage();¶            RegisterSomeoneElseDialog = new RegisterSomeoneElseDialog();¶            RSEType = RegisterSomeoneElseType.NewContact;¶        }¶        #endregion¶¶        #region Properties¶        private ContactData Contact { get; set; }¶        private EventData EventData { get; set; }¶        private RegisterSomeoneElseType RSEType { get; set; }¶        private EventDisplayPage EventDisplayPage { get; set; }¶        private FindEventsPage FindEventsPage { get; set; }¶        private RegisterSomeoneElseDialog RegisterSomeoneElseDialog { get; set; }¶        #endregion¶¶        public static RegisterSomeoneElse ToEventWithExistingContact(EventData eventData) => new RegisterSomeoneElse(eventData);¶        public static RegisterSomeoneElse ToEventWithNewContact(EventData eventData, ContactData contact) => new RegisterSomeoneElse(eventData, contact);¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(INSERT,"            if (context.IsV10)¶            {¶    ")
Diff(EQUAL,"            if (string.IsNullOrEmpty(context.GetData<string>("Event Code")))¶")
Diff(INSERT,"    ")
Diff(EQUAL,"                context.UpsertData("Event Code", EventData.EventCode);¶¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(context.GetData<string>("Event Code"))));¶")
Diff(INSERT,"            }")
Diff(EQUAL,"¶            if (user.AsksFor(Appearance.Of(EventDisplayPage.EventDisplay.AttendeeRegistrationStatusCaption)))¶            {¶                var containsRegistrant = user.AsksFor(Text.Of(EventDisplayPage.EventDisplay.AttendeeRegistrationStatusCaption)).Contains(EventData.Registrant);¶                var isRegistered = user.AsksFor(Text.Of(EventDisplayPage.EventDisplay.RegistrationStatusData)).Contains("Registered on");¶                if (containsRegistrant && isRegistered)¶                    return;¶            }¶            user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegisterSomeoneElseButton));¶            user.AttemptsTo(SwitchFrame.ToObjectBrowser());¶            user.WaitsUntil(Existence.Of(RegisterSomeoneElseDialog.NewContactPanel), IsEqualTo.True());¶            switch (RSEType)¶            {¶                case RegisterSomeoneElseType.ExistingContact:¶                    RegisterExistingContact(user, context);¶                    break;¶                case RegisterSomeoneElseType.NewContact:¶                    RegisterNewContact(user);¶                    break;¶            }¶            context.UpsertData("FullName", EventData.BillTo);¶            if (!string.IsNullOrEmpty(EventData.RegistrationOption))¶                user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.Cell")
Diff(DELETE,"Inpu")
Diff(INSERT,"AnyElemen")
Diff(EQUAL,"tWithText(EventData.RegistrationOption)));¶            foreach (var program in EventData.Programs)¶            {¶                //Need to wait since clicking programs is causing flakiness in tests¶                user.AttemptsTo(Waiting.InSeconds(1));¶                if (user.AsksFor(Appearance.Of(EventDisplayPage.EventProgramDisplay.AddProgram(program))))¶                    user.AttemptsTo(Click.On(EventDisplayPage.EventProgramDisplay.AddProgram(program)));¶                //TODO: add functionality for when there are options or questions¶            }¶            user.AttemptsTo(SetWhenProvided.CheckBox(EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion), true));¶            user.AttemptsTo(SetWhenProvided.DropDown(EventDisplayPage.EventDisplay.HowDidYouHearDropdown, EventData.HowDidYouHear));¶            //TODO: add  functionality for Add on Fees¶¶            context.UpsertData("CheckOut", true);¶        }¶¶        private void RegisterNewContact(IActor user)¶        {¶            if (user.AsksFor(Existence.Of(RegisterSomeoneElseDialog.RegistrantTypePanel)))¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.AddContact));¶¶            if (Contact.Prefix != PrefixEnum.None)¶            {¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactAccountCreator.Prefix));¶                user.AttemptsTo(Click.On(ContactAccountCreator.SelectPrefix(Contact.Prefix)));¶            }¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.FirstName, Contact.FirstName));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.MiddleName, Contact.MiddleName));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.LastName, Contact.LastName));¶            if (Contact.Suffix != SuffixEnum.None)¶            {¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactAccountCreator.Suffix));¶                user.AttemptsTo(Click.On(ContactAccountCreator.SelectSuffix(Contact.Suffix)));¶            }¶            if (!string.IsNullOrEmpty(Contact.Designation))¶            {¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactAccountCreator.DesignationMultiSelect.SearchField));¶                user.AttemptsTo(SendKeys.To(RegisterSomeoneElseDialog.ContactAccountCreator.DesignationMultiSelect.SearchField, Contact.Designation));¶                user.AttemptsTo(SendKeys.To(RegisterSomeoneElseDialog.ContactAccountCreator.DesignationMultiSelect.SearchField, Keys.Enter));¶            }¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.InformalName, Contact.InformalName));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.PrimaryTitle, Contact.Title));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.OrganizationName, Contact.Organization));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.Email, Contact.Email));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.Phone, Contact.Phone));¶            if (!string.IsNullOrEmpty(Contact.Country))¶            {¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactAccountCreator.CountrySelect));¶                user.AttemptsTo(SendKeys.To(RegisterSomeoneElseDialog.ContactAccountCreator.CountrySelect, Contact.Country));¶            }¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.Address1, Contact.Address1));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.Address2, Contact.Address2));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.Address3, Contact.Address3));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.City, Contact.City));¶¶            if (user.AsksFor(Existence.Of(RegisterSomeoneElseDialog.ContactAccountCreator.SubEntityTextField)))¶                user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.SubEntityTextField, Contact.State));¶            else¶            {¶                user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactAccountCreator.SelectSubEntityCode));¶                user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.SubEntityTextField, Contact.State));¶            }¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactAccountCreator.PostalCode, Contact.PostalCode));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        private void RegisterExistingContact(IActor user, IAsiWebContext context)¶        {¶            user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.SelectContact));¶            user.AttemptsTo(Click.On(RegisterSomeoneElseDialog.ContactComboBox.TextBox));¶            user.AttemptsTo(SetWhenProvided.TextBox(RegisterSomeoneElseDialog.ContactComboBox.TextBox, EventData.Registrant));¶            user.AttemptsTo(JavaScriptClick.On(RegisterSomeoneElseDialog.ContactComboBoxResult(EventData.Registrant)));¶            if(context.IsV10)¶                if (user.AsksFor(UserMessageState.HasWarnings().WithMessage("has a pending registration")))¶                {¶                    user.AttemptsTo(ClickCommandButton.Cancel().AndUseJavaScript());¶                }¶                else¶                {¶                    user.AttemptsTo(Wait.Until(Appearance.Of(RegisterSomeoneElseDialog.RegistrantInfo.AddressEdit.FullName), IsEqualTo.True()));¶                    user.AsksFor(Text.Of(RegisterSomeoneElseDialog.RegistrantInfo.AddressEdit.FullName)).Should().Contain(EventData.Registrant);¶                    user.AttemptsTo(ClickCommandButton.SaveAndClose());¶                }¶            else¶                user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶                NavigateToEvent(user, context);¶¶¶            user.AsksFor(Text.Of(EventDisplayPage.Alerts.AlertContainer(EventData.Registrant))).Should().Contain(EventData.Registrant);¶¶            if(context.IsV10)¶                foreach (var program in EventData.Programs)¶                {¶                    user.AsksFor(Appearance.Of(EventDisplayPage.EventProgramDisplay.RemoveProgram(program))).Should().Be(true);¶                }¶        }¶¶¶        /// <summary>¶        /// Navigate to the event (V100 mainly)¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="context"></param>¶        public void NavigateToEvent(IActor user, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InImis(FindEventsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(FindEventsPage.Search.SearchBox, context.GetData<string>("Event Name")).ThenHitEnter());¶            user.AttemptsTo(Click.On(FindEventsPage.Search.SearchResults.CellSpanLinkWithText(context.GetData<string>("Event Name"))));¶        }¶¶        internal enum RegisterSomeoneElseType¶        {¶            ExistingContact,¶            NewContact¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Events/RegisterSomeoneElse.cs)
Diff(EQUAL,"{¶    public class GoToStarterEvent : AsiAbstractWebTask¶    {¶        #region Constructors¶¶        private GoToStarterEvent(StarterEventName eventName)¶        {¶            EventName = eventName;¶            EventDashboardPage = new EventDashboardPage();¶        }¶¶        #endregion¶¶        #region Properties¶¶        private StarterEventName EventName { get; set; }¶¶        private ")
Diff(INSERT,"new ")
Diff(EQUAL,"SitesToBrowse Site { get; set; }¶¶        private EventDashboardPage EventDashboardPage { get; set; }¶¶        #endregion¶¶        #region BuilderMethods¶¶        public static GoToStarterEvent RandomEvent() => new GoToStarterEvent((StarterEventName)TestHelper.GenerateRandomNumber(0,9));¶        public static GoToStarterEvent LeadershipSummit() => new GoToStarterEvent(StarterEventName.LeadershipSummit);¶        public static GoToStarterEvent CharityGolfTournament() => new GoToStarterEvent(StarterEventName.CharityGolfTournament);¶        public static GoToStarterEvent AnnualConference() => new GoToStarterEvent(StarterEventName.AnnualConference);¶        public static GoToStarterEvent AnnualGala() => new GoToStarterEvent(StarterEventName.AnnualGala);¶        public static GoToStarterEvent ChapterMeeting() => new GoToStarterEvent(StarterEventName.ChapterMeeting);¶        public static GoToStarterEvent PolicySymposium() => new GoToStarterEvent(StarterEventName.PolicySymposium);¶        public static GoToStarterEvent MusicEducatorsConference() => new GoToStarterEvent(StarterEventName.MusicEducatorsConference);¶        public static GoToStarterEvent SectionMeeting() => new GoToStarterEvent(StarterEventName.SectionMeeting);¶        public static GoToStarterEvent WebinarSeriesBestPractices() => new GoToStarterEvent(StarterEventName.WebinarSeriesBestPractices);¶¶        public GoToStarterEvent InImis() => SetSite(SitesToBrowse.NotSet);¶        public GoToStarterEvent InStaffSite() => SetSite(SitesToBrowse.Staff);¶        public GoToStarterEvent InMemberSite() => SetSite(SitesToBrowse.Mbrr);¶        public GoToStarterEvent InDonorSite() => SetSite(SitesToBrowse.Donor);¶        public GoToStarterEvent InAnnualConferenceSite() => SetSite(SitesToBrowse.AnnualConference);¶¶        private GoToStarterEvent SetSite(SitesToBrowse site)¶        {¶            Site = site;¶            return this;¶        }¶¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            string eventKey = string.Empty;¶            switch (EventName)¶            {¶                case StarterEventName.LeadershipSummit:¶                    eventKey = context.IsV10 ? "LDC11" : "bd824011-d8bb-40f4-a39e-c0d11cbcef63";¶                    break;¶                case StarterEventName.CharityGolfTournament:¶                    eventKey = context.IsV10 ? "MELGOLF" : "704D3DC3-05FD-4E57-A617-DD99F690B99A";¶                    break;¶                case StarterEventName.AnnualConference:¶                    eventKey = context.IsV10 ? "ANNCONF" : "0BCE6079-A7A9-48D8-BDEC-0BE75F9075F8";¶                    break;¶                case StarterEventName.AnnualGala:¶                    eventKey = context.IsV10 ? "GALA" : "32BCFF20-04D0-43E7-9957-D7622745B8D4";¶                    break;¶                case StarterEventName.ChapterMeeting:¶                    eventKey = context.IsV10 ? "CHAPDEC" : "F628AC14-5549-4C0B-9B64-E7D221FF1910a";¶                    break;¶                case StarterEventName.PolicySymposium:¶                    eventKey = context.IsV10 ? "SPR08" : "C195A8B1-0ABB-41B9-9EA8-0239E4581B54";¶                    break;¶                case StarterEventName.MusicEducatorsConference:¶                    eventKey = context.IsV10 ? "TEACHCONF" : "46D0685E-58FC-4E81-8883-18B58DB122FC";¶                    break;¶                case StarterEventName.SectionMeeting:¶                    eventKey = context.IsV10 ? "CHAPFEB" : "4243d9e2-e91e-468c-97c2-2046d70c1e1a";¶                    break;¶                case StarterEventName.WebinarSeriesBestPractices:¶                    eventKey = context.IsV10 ? "WEBMAR" : "3F8FBF08-8E30-4BB3-8FE1-492AEED19EFA";¶                    break;¶            }¶¶            switch (Site)¶            {¶                case SitesToBrowse.NotSet:¶                    user.AttemptsTo(Browse.InImis(EventDashboardPage.Url(eventKey)));¶                    break;¶                case SitesToBrowse.Staff:¶                    user.AttemptsTo(Browse.InStaffSite(EventDashboardPage.Url(eventKey)));¶                    break;¶                case SitesToBrowse.Mbrr:¶                    user.AttemptsTo(Browse.InMemberSite(EventDashboardPage.Url(eventKey)));¶                    break;¶                case SitesToBrowse.Donor:¶                    user.AttemptsTo(Browse.InDonorSite(EventDashboardPage.Url(eventKey)));¶                    break;¶                case SitesToBrowse.AnnualConference:¶                    user.AttemptsTo(Browse.InAnnualConferenceSite(EventDashboardPage.Url(eventKey)));¶                    break;¶            }¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new System.NotImplementedException();¶        }¶        #endregion¶¶        public enum StarterEventName¶        {¶            LeadershipSummit,¶            CharityGolfTournament,¶            AnnualConference,¶            AnnualGala,¶            ChapterMeeting,¶            PolicySymposium,¶            MusicEducatorsConference,¶            SectionMeeting,¶            WebinarSeriesBestPractices¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Events/GoToStarterEvent.cs)
Diff(EQUAL,"{¶    public class CreateEvent : AsiAbstractWebTask¶    {¶        #region Constructor¶¶        private CreateEvent(CreateEventData createEventData, NewEventType eventType, string template = "")¶        {¶            Template = template;¶            CreateEventData = createEventData;¶            EventType = eventType;¶            CreateEventsPage = new CreateEventsPage();¶            EditEventPage = new EditEventPage();¶            EventDashboardPage = new EventDashboardPage();¶            ManageTemplatePage = new ManageTemplatePage();¶        }¶        #endregion¶¶        #region Properties¶        private string Template { get; set; }¶        private NewEventType EventType { get; set; }¶        private CreateEventData CreateEventData { get; set; }¶        private CreateEventsPage CreateEventsPage { get; set; }¶        private EditEventPage EditEventPage { get; set; }¶        private EventDashboardPage EventDashboardPage { get; set; }¶        private ManageTemplatePage ManageTemplatePage { get; set; }¶¶        #endregion¶¶        #region Builder Methods¶        public static CreateEvent AsNewEvent(CreateEventData createEventData) => new CreateEvent(createEventData, NewEventType.NewEvent);¶        public static CreateEvent AsTemplate(CreateEventData createEventData, string template = "") => new CreateEvent(createEventData, NewEventType.Template, template);¶        public static CreateEvent AsNewTemplate(CreateEventData createEventData) => new CreateEvent(createEventData, NewEventType.NewTemplate);¶        public static CreateEvent AsCopyExistingEvent(CreateEventData createEventData) => new CreateEvent(createEventData, NewEventType.ExistingCopyOfEvent);¶¶        #endregion¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(CreateEventsPage.BaseUrl));¶            switch (EventType)¶            {¶                case NewEventType.NewEvent:¶                    user.AttemptsTo(Click.On(CreateEventsPage.EventAdd.RadioBlank));¶                    user.AttemptsTo(ClickCommandButton.Next());¶                    CreateEventHelper(user, context);¶                    break;¶                case NewEventType.Template:¶                    user.AttemptsTo(Click.On(CreateEventsPage.EventAdd.RadioTemplate));¶                    if (user.WaitsUntil(Appearance.Of(CreateEventsPage.EventAdd.SelectTemplate), IsEqualTo.True()))¶                    {¶                        user.AttemptsTo(Select.ByText(CreateEventsPage.EventAdd.SelectTemplate, Template));¶                        EnterTextCode(user, context);¶                        VerifyEventExists(user, context, EventType);¶                    }¶                    break;¶                case NewEventType.ExistingCopyOfEvent:¶                    user.AttemptsTo(Click.On(CreateEventsPage.EventAdd.RadioEvent));¶                    user.AttemptsTo(SendKeys.To(CreateEventsPage.EventAdd.SelectEvent.TextBox, CreateEventData.EventName).UsingClearMethod());¶                    context.UpsertData("Event Name", "Copy of " + CreateEventData.EventName);¶                    EnterTextCode(user, context, CreateEventData.EventCode);¶                    VerifyEventExists(user, context, EventType);¶                    break;¶                case NewEventType.NewTemplate:¶                    user.AttemptsTo(Browse.InStaffSite(ManageTemplatePage.BaseUrl));¶                    user.AttemptsTo(Click.On(ManageTemplatePage.TemplateManager.TemplateGrid.AddToGrid));¶                    CreateEventHelper(user, context);¶                    break;¶            }¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            //TODO Add other verification points to make sure event was created correctly¶            user.AsksFor(Text.Of(EventDashboardPage.EventDisplay.TitleText)).Should().Contain(context.GetData<string>("Event Name"));¶            if")
Diff(INSERT," ")
Diff(EQUAL,"(context.IsV10)¶                VerifyEventStatus(user);¶        }¶¶        #region Methods¶¶        /// <summary>¶        /// Verifies the event was created¶        /// </summary>¶        /// <param name="user">User being passed in</param>¶        public void VerifyEventStatus(IActor user)¶        {¶            if (!string.IsNullOrEmpty(CreateEventData.Status))¶            {¶                switch (CreateEventData.Status)¶                {¶                    case "Pending":¶                        user.AsksFor(UserMessageState.HasWarnings().WithMessage("Event has a status of Pending")).Should().BeTrue();¶                        break;¶                    case "Frozen":¶                        user.AsksFor(UserMessageState.HasWarnings().WithMessage("Event has a status of Frozen")).Should().BeTrue(); ;¶                        break;¶                }¶            }¶        }¶¶        /// <summary>¶        /// Select event dates but only if they aren't null¶        /// </summary>¶        /// <param name="startDate"></param>¶        /// <param name="endDate"></param>¶        public void EnterEventDate(IActor user, string startDate, string endDate)¶        {¶            if (!string.IsNullOrEmpty(startDate) && !string.IsNullOrEmpty(endDate))¶            {¶                user.AttemptsTo(SendKeys.To(CreateEventsPage.EventAdd.EndDatePicker.TextBox, endDate));¶                user.AttemptsTo(SendKeys.To(CreateEventsPage.EventAdd.StartDatePicker.TextBox, startDate));¶            }¶        }¶¶        /// <summary>¶        /// Enter random Event Code, or existing code if provided¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="context"></param>¶        /// <param name="eventCode"></param>¶        public void EnterTextCode(IActor user, IAsiWebContext context, string eventCode = null)¶        {¶            string code = string.IsNullOrEmpty(eventCode) ? TestHelper.GenerateRandomString(5) : eventCode;¶            context.UpsertData("Event Code", code);¶            if (context.IsV10)¶                user.AttemptsTo(SendKeys.To(CreateEventsPage.EventAdd.TextCode, code));¶            user.AttemptsTo(ClickCommandButton.Next());¶        }¶¶        /// <summary>¶        /// Verifies if the event code is unique. If it is then recreates another and goes through¶        /// the same process again¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="EventType"></param>¶        public void VerifyEventExists(IActor user, IAsiWebContext context, NewEventType EventType)¶        {¶            if (user.AsksFor(UserMessageState.HasErrors().WithMessage("Event codes must be unique.")))¶            {¶                switch (EventType)¶                {¶                    case NewEventType.Template:¶                        user.AttemptsTo(Select.ByText(CreateEventsPage.EventAdd.SelectTemplate, Template));¶                        EnterTextCode(user, context);¶                        CreateEventHelper(user, context);¶                        break;¶                    case NewEventType.ExistingCopyOfEvent:¶                        user.AttemptsTo(SendKeys.To(CreateEventsPage.EventAdd.SelectEvent.TextBox, CreateEventData.EventName));¶                        EnterTextCode(user, context);¶                        CreateEventHelper(user, context);¶                        break;¶                }¶            }¶            else¶            {¶                CreateEventHelper(user, context);¶            }¶        }¶¶        /// <summary>¶        /// Creates the event based on what the user provides¶        /// </summary>¶        /// <param name="user"></param>¶        public void CreateEventHelper(IActor user, IAsiWebContext context)¶        {¶            //TODO add Calendar Start/End time and date options¶            ")
Diff(DELETE,"string randNumber")
Diff(INSERT,"if (context.IsV10)¶            {¶                var eventCode")
Diff(EQUAL," = TestHelper.GenerateRandomString(5);¶")
Diff(DELETE,"            if (context.IsV10)¶")
Diff(EQUAL,"                user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.Code, ")
Diff(DELETE,"randNumber))")
Diff(INSERT,"eventCode));¶                context.UpsertData("ItemCode", eventCode);¶            }¶¶            var eventName = $"Copy of {CreateEventData.EventName}"")
Diff(EQUAL,";¶            user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventName, ")
Diff(DELETE,""Copy of " + CreateEventData.E")
Diff(INSERT,"e")
Diff(EQUAL,"ventName).UsingClearMethod());¶            context.UpsertData("Event Name", ")
Diff(DELETE,""Copy of " + CreateEventData.E")
Diff(INSERT,"e")
Diff(EQUAL,"ventName);¶            user.AttemptsTo(SetWhenProvided.DropDown(EditEventPage.EventEdit.Status, CreateEventData.Status));¶¶            EnterEventDate(user, CreateEventData.StartDate, CreateEventData.EndDate);¶¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.VirtualMeetingUrl, CreateEventData.VirtualMeetingURL).Clear());¶            user.AttemptsTo(SetWhenProvided.DropDown(EditEventPage.EventEdit.SelectCountry, CreateEventData.Country));¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.Address1, CreateEventData.Address).Clear());¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.City, CreateEventData.City).Clear());¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.PostalCode, CreateEventData.PostalCode).Clear());¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.TextDirections, CreateEventData.Directions).Clear());¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.TextNotes, CreateEventData.Notes).Clear());¶            user.AttemptsTo(SetWhenProvided.TextBox(EditEventPage.EventEdit.TextNotes, CreateEventData.Notes).Clear());¶            ")
Diff(DELETE,"user.AttemptsTo(ClickCommandButton.SaveAndClos")
Diff(INSERT,"if (CreateEventData.HasPricingData)¶            {¶                user.AttemptsTo(Click.On(EditEventPage.EventEdit.Tabs.GetTab("Pricing")));¶                user.WaitsUntil(UserMessageState.HasAny().WithMessage("The event has been saved"), IsEqualTo.True());¶                if (CreateEventData.TaxByAddress)¶                    user.AttemptsTo(Check.On(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxByAddressCheckBox));¶¶                if (!string.IsNullOrEmpty(CreateEventData.TaxCode))¶                    user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.TaxAuthorityDropDown, CreateEventData.TaxCode));¶¶                if (!string.IsNullOrEmpty(CreateEventData.VatExceptionRule))¶                    user.AttemptsTo(Select.ByText(EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo.VatRuleSetDropDown, CreateEventData.VatExceptionRule));¶¶                if (CreateEventData.HasRegistrationOptionData)¶                {¶                    CreateEventFunction(user, EventDashboardPage.FunctionEdit.AddNewRegistrationOptionLink,¶                        CreateEventData.RegistrationOptionDefaultRegularPrice,¶                        CreateEventData.IsRegistrationOptionTaxable,¶                        CreateEventData.IsRegistrationOptionPstEnabled,¶                        CreateEventData.IsRegistrationOptionGstHstEnabled,¶                        CreateEventData.RegistrationOptionTaxCode);¶                }¶            }¶¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶¶            if (CreateEventData.HasProgramItemData)¶            {¶                CreateEventFunction(user, EventDashboardPage.EventProgramDisplay.AddNewProgramItemLink,¶                    CreateEventData.ProgramItemDefaultRegularPrice,¶                    CreateEventData.IsProgramItemTaxable,¶                    CreateEventData.IsProgramItemPstEnabled,¶                    CreateEventData.IsProgramItemGstHstEnabled,¶                    CreateEventData.ProgramItemTaxCode);¶            }¶        }¶¶        /// <summary>¶        /// Creates event function such as program item or registration option¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="addFunctionLink"></param>¶        /// <param name="defaultRegularPrice"></param>¶        /// <param name="isTaxable"></param>¶        /// <param name="isPstEnabled"></param>¶        /// <param name="isGstHstEnabled"></param>¶        /// <param name="taxCode"></param>¶        private void CreateEventFunction(IActor user, IWebLocator addFunctionLink, double defaultRegularPrice, bool isTaxable, bool isPstEnabled, bool isGstHstEnabled, string taxCode)¶        {¶            user.AttemptsTo(Click.On(addFunctionLink));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextCode, TestHelper.GenerateRandomString(5)));¶            user.AttemptsTo(SendKeys.To(EventDashboardPage.FunctionEdit.TextName, TestHelper.GenerateRandomString(5)));¶¶            if (defaultRegularPrice != 0)¶            {¶                user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Pricing")));¶                user.AttemptsTo(SendKeys.To(EditEventPage.EventEdit.EventFunctionPricing.TextPriceStandardRegular, defaultRegularPrice.ToString()));¶            }¶¶            if (isTaxable || isPstEnabled || isGstHstEnabled || !string.IsNullOrEmpty(taxCode))¶            {¶                user.AttemptsTo(Click.On(EventDashboardPage.FunctionEdit.Tabs.GetTab("Accounting")));¶¶                var taxInfo = EventDashboardPage.FunctionEdit.AccountInfo.TaxInfo;¶                if (isTaxable)¶                    user.AttemptsTo(Check.On(taxInfo.TaxableCheckBox));¶¶                if (isGstHstEnabled)¶                    user.AttemptsTo(Check.On(taxInfo.CheckBoxGstHst));¶¶                if (isPstEnabled)¶                    user.AttemptsTo(Check.On(taxInfo.CheckBoxPst));¶¶                if (!string.IsNullOrEmpty(taxCode))¶                    user.AttemptsTo(SetWhenProvided.DropDown(taxInfo.TaxAuthorityDropDown, taxCode));¶            }¶¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.WaitsUntil(Appearance.Of(EventDashboardPage.FunctionEdit.TextCode), IsEqualTo.False());¶            user.AttemptsTo(SwitchFrame.ToDefaultFram")
Diff(EQUAL,"e());¶        }¶¶        #endregion¶        public enum NewEventType¶        {¶            NewEvent,¶            NewTemplate,¶            Template,¶            ExistingCopyOfEvent¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Events/CreateEvent.cs)
Diff(EQUAL,"{¶    public class RegisterForAnEvent : AsiAbstractWebTask¶    {¶        #region Constructors¶        private RegisterForAnEvent(EventData eventData)¶        {¶            EventData = eventData;¶            EventDisplayPage = new EventDisplayPage();¶            FindEventsPage = new FindEventsPage();¶        }¶¶        #endregion¶        #region Properties¶        private EventData EventData { get; set; }¶        private EventDisplayPage EventDisplayPage { get; set; }¶        private FindEventsPage FindEventsPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        public static RegisterForAnEvent ToEvent(EventData eventData) => new")
Diff(DELETE," ")
Diff(EQUAL,"(eventData);¶¶        #endregion¶¶        #region Methods¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            if (EventData.EventCode != null)¶                user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(EventData.EventCode)));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegisterButton));¶            if (!string.IsNullOrEmpty(EventData.RegistrationOption))¶                user.AttemptsTo(Click.On(EventDisplayPage.EventDisplay.RegistrationOptionsGrid.Cell")
Diff(DELETE,"Inpu")
Diff(INSERT,"AnyElemen")
Diff(EQUAL,"tWithText(EventData.RegistrationOption)));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            if")
Diff(INSERT," ")
Diff(EQUAL,"(EventData.")
Diff(DELETE,"Programs.Count >= 1")
Diff(INSERT,"AddFirstProgram)¶                EventData.Programs = new List<string> { user.WaitsUntil(Text.Of(EventDisplayPage.EventProgramDisplay.FirstProgramName), IsNotEqualTo.Value("")) };¶¶            if (EventData.Programs.Any()")
Diff(EQUAL,")¶                foreach (var program in EventData.Programs)¶                {¶                    ")
Diff(DELETE,"if (user.AsksFor(Appearance.Of(")
Diff(INSERT,"var itemProgram = ")
Diff(EQUAL,"EventDisplayPage.EventProgramDisplay.AddProgram(program)")
Diff(DELETE,")))¶    ")
Diff(INSERT,";¶")
Diff(EQUAL,"                    user.")
Diff(DELETE,"AttemptsTo(Click.On(EventDisplayPage.EventProgramDisplay.AddProgram(program")
Diff(INSERT,"WaitsUntil(Appearance.Of(itemProgram), IsEqualTo.True(")
Diff(EQUAL,"))")
Diff(DELETE,")")
Diff(EQUAL,";¶                    ")
Diff(DELETE,"else¶                        throw new ElementNotVisibleException(")
Diff(INSERT,"user.AttemptsTo(Click.On(itemProgram)")
Diff(EQUAL,");¶")
Diff(INSERT,"¶")
Diff(EQUAL,"                    //TODO: add functionality for when there are options or questions¶                }¶¶            ")
Diff(DELETE,"user.AttemptsTo(SetWhenProvided.CheckBox(")
Diff(INSERT,"var yesNoQuestion = ")
Diff(EQUAL,"EventDisplayPage.EventDisplay.YesNoQuestion(EventData.YesNoQuestion)")
Diff(DELETE,", true")
Diff(INSERT,";¶            if (user.AsksFor(Existence.Of(yesNoQuestion)))¶                user.AttemptsTo(Check.On(yesNoQuestion")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.DropDown(EventDisplayPage.EventDisplay.HowDidYouHearDropdown, EventData.HowDidYouHear));¶            context.UpsertData("CheckOut", true);¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            string eventCode = context.GetData<string>("Event Code");¶            if (context.IsV10)¶                if (string.IsNullOrEmpty(eventCode))¶                    user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(EventData.EventCode)));¶                else¶                    user.AttemptsTo(Browse.InImis(EventDisplayPage.Url(eventCode)));¶            else¶                NavigateToEvent(user,")
Diff(INSERT," ")
Diff(EQUAL,"context);¶¶            user.AsksFor(Text.Of(EventDisplayPage.EventDisplay.RegistrationStatusData)).Should().Contain("Registered on");¶            foreach (var program in EventData.Programs)¶            {¶                user.AsksFor(Appearance.Of(EventDisplayPage.EventProgramDisplay.RemoveProgram(program))).Should().Be(true);¶            }¶        }¶¶        /// <summary>¶        /// Navigate to the event (V100 mainly)¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="context"></param>¶        public void NavigateToEvent(IActor user, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InImis(FindEventsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(FindEventsPage.Search.SearchBox, context.GetData<string>("Event Name")).ThenHitEnter());¶            user.AttemptsTo(Click.On(FindEventsPage.Search.SearchResults.CellSpanLinkWithText(context.GetData<string>("Event Name"))));¶        }¶        #endregion¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Events/RegisterForAnEvent.cs)
Diff(EQUAL,"{¶    public class JoinNow : AsiAbstractWebTask¶    {¶        #region Constructors¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶")
Diff(DELETE,"        private JoinNow(JoinBillingCyclesType billingCycleType)¶        {¶            BillingCycleType = billingCycleType;¶            AccountPageStaff = new AccountPageStaff();¶            JoinNowPage = new JoinNowPage();¶        }¶¶")
Diff(EQUAL,"        private JoinNow(JoinBillingCyclesType billingCycleType, JoinNowData joinNowData")
Diff(INSERT," = null")
Diff(EQUAL,")¶        {¶            BillingCycleType = billingCycleType;¶            AccountPageStaff = new AccountPageStaff();¶            JoinNowPage = new JoinNowPage();¶            JoinNowData = joinNowData;¶")
Diff(INSERT,"            JoinBillingCyclesTypesCodes = InitializeJoinBillingCyclesTypesCodes();¶")
Diff(EQUAL,"        }¶        #endregion¶¶        #region Properties¶        private JoinBillingCyclesType BillingCycleType { get; set; }¶        private AccountPageStaff AccountPageStaff { get; set; }¶        private JoinNowPage JoinNowPage { get; set; }¶        private JoinNowData JoinNowData { get; set; }¶")
Diff(INSERT,"        private Dictionary<JoinBillingCyclesType, string> JoinBillingCyclesTypesCodes { get; }¶")
Diff(EQUAL,"        #endregion¶¶        #region Builder Methods¶¶        /// <summary>¶        /// Constructs the Task object with passed Membership types.¶        /// </summary>¶")
Diff(INSERT,"        /// <param name="joinBillingType"></param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public static JoinNow WithMembership(string joinBillingType) => new JoinNow((JoinBillingCyclesType)Enum.Parse(typeof(JoinBillingCyclesType), joinBillingType));¶¶        /// <summary>¶        /// Constructs the Task object with Associate Membership fees.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithAssociateMembership() => new JoinNow(JoinBillingCyclesType.AssociateMembershipFees);¶¶        /// <summary>¶        /// Constructs the Task object with Chapter Membership fees.¶        /// </summary>¶")
Diff(INSERT,"        /// <param name="joinNowData">JoinNowData is required for this type</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public static JoinNow WithChapterMembership(JoinNowData joinNowData) => new JoinNow(JoinBillingCyclesType.ChapterMembershipFees, joinNowData);¶¶        /// <summary>¶        /// Constructs the Task object with Community Partner Membership.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithCommunityPartnerMembership() => new JoinNow(JoinBillingCyclesType.CommunityPartnerMembership);¶¶        /// <summary>¶        /// Constructs the Task object with Company Regular Membership.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithCompanyRegularMembership() => new JoinNow(JoinBillingCyclesType.CompanyRegularMembership);¶¶        /// <summary>¶        /// Constructs the Task object with Part Time Professional.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithPartTimeProfessional() => new JoinNow(JoinBillingCyclesType.PartTimeProfessional);¶¶        /// <summary>¶        /// Constructs the Task object with Professional Membership.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithProfessionalMembership() => new JoinNow(JoinBillingCyclesType.ProfessionalMembership);¶¶        /// <summary>¶        /// Constructs the Task object with Regular Membership fees.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithRegularMembership() => new JoinNow(JoinBillingCyclesType.RegularMembershipFees);¶¶        /// <summary>¶        /// Constructs the Task object with Retired Members.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithRetiredMembers() => new JoinNow(JoinBillingCyclesType.RetiredMembers);¶¶        /// <summary>¶        /// Constructs the Task object with Student Member Join.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithStudentMemberJoin() => new JoinNow(JoinBillingCyclesType.StudentMemberJoin);¶¶        /// <summary>¶        /// Constructs the Task object with Young Professional Membership.¶        /// </summary>¶        /// <returns></returns>¶        public static JoinNow WithYoungProfessionalMembership() => new JoinNow(JoinBillingCyclesType.YoungProfessionalMembership);")
Diff(INSERT,"¶¶        /// <summary>¶        /// Initialization with JoinNowData¶        /// </summary>¶        /// <param name="data"></param>¶        /// <returns></returns>¶        public JoinNow WithJoinNowData(JoinNowData data)¶        {¶            JoinNowData = data;¶            return this;¶        }")
Diff(EQUAL,"¶        #endregion¶¶        #region Methods¶¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            if (context.SelectedPartyId == null)")
Diff(DELETE," ")
Diff(EQUAL,"¶                ClientContext.FillClientContext(user, context);¶            user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(context.SelectedPartyId)));¶            string memberType;¶            ")
Diff(DELETE,"if (user.AsksFor(Appearance.Of(AccountPageStaff.ContactProfile.ContactStatus.MemberType)))")
Diff(INSERT,"try¶            {¶                var memberTypeLocator = AccountPageStaff.ContactProfile.ContactStatus.MemberType;¶                user.WaitsUntil(Appearance.Of(memberTypeLocator), IsEqualTo.True(), timeout: 5);")
Diff(EQUAL,"¶                memberType = user.Ask")
Diff(DELETE,"ing")
Diff(INSERT,"s")
Diff(EQUAL,"For(Text.Of(")
Diff(DELETE,"AccountPageStaff.ContactProfile.ContactStatus.MemberType));¶            else")
Diff(INSERT,"memberTypeLocator));¶            }¶            catch (WaitingException)¶            {¶               ")
Diff(EQUAL," memberType = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("Type")));¶")
Diff(INSERT,"            }¶¶")
Diff(EQUAL,"            context.UpsertData("MemberType", memberType);¶            var name = user.AskingFor(Text.Of(AccountPageStaff.ContactProfile.ContactName.FullName));¶            context.UpsertData("FullName", name);¶            if (memberType.Equals("Non Member"))¶            {¶")
Diff(INSERT,"                if (Site == SitesToBrowse.Mbrr)¶                {¶                    SelectBillingCycleInMemberSite(user);¶                }¶                else¶                {¶    ")
Diff(EQUAL,"                user.AttemptsTo(Click.On(AccountPageStaff.RenewalButton.JoinNowButton));¶                ")
Diff(INSERT,"    ")
Diff(EQUAL,"ClickBillingCycle(user);¶")
Diff(INSERT,"                }¶¶                if (JoinNowData?.ItemNames?.Any() ?? false)¶                    SetupItems(user);¶¶")
Diff(EQUAL,"                // If it's a Chapter membership then select chapter and check if theres a unit price ¶                if (BillingCycleType == JoinBillingCyclesType.ChapterMembershipFees)¶                {¶                    // now lets test the error first by adding to cart without a product selected¶                    user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));¶                    // verify error message¶                    user.AsksFor(UserMessageState.HasErrors().WithMessage("At least one item must be selected for " + JoinNowData.ProductName));¶                    // now do it correctly - select a Chapter product¶                    user.AttemptsTo(SetWhenProvided.TextBox(JoinNowPage.MOO.DynamicProductDisplay.PickList(0, 0), JoinNowData.ProductCode + Keys.Enter));¶                    // wait until page unit amounts have been updated before verifying it¶                    ")
Diff(DELETE,"// jkh ¶                    for (var i=0; i<10; i++)")
Diff(INSERT,"bool finishedUpdating = false;¶                    do")
Diff(EQUAL,"¶                    {¶                        if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) > 0) ")
Diff(DELETE,"break;¶                        if (i==10) {¶                            throw new Exception("Unit price is 0");¶                        }¶                        System.Threading.Thread.Sleep(1000);¶                    }")
Diff(INSERT,"finishedUpdating = true;¶                    } while (finishedUpdating == false)")
Diff(EQUAL,";¶                    if (double.Parse(JoinNowData.UnitAmount) > 0)¶                    {¶                        // verify unit amount¶                        user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0))).Should().Be(JoinNowData.UnitAmount);¶                        // verify quanity¶                        user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.QuantityLabel(0, 0))).Should().Be("1");¶                        // verify total amount¶                        user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.AmountLabel(0, 0))).Should().Be(JoinNowData.UnitAmount);¶                        // verify subtotal at bottom of page¶                        user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.SubtotalValueLabel)).Should().Be(JoinNowData.UnitAmount);¶                    }¶                }¶                user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));¶                // verify success message - added both messages so test is rerunable¶                ")
Diff(DELETE,"string message = user.AsksFor")
Diff(INSERT,"user.WaitsUntil")
Diff(EQUAL,"(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel)")
Diff(DELETE,");¶                if (message!=")
Diff(INSERT,", IsNotEqualTo.Value(""))¶                    .Should().BeOneOf(")
Diff(EQUAL,""This item has been added to your cart"")
Diff(INSERT,",")
Diff(EQUAL," ")
Diff(DELETE,"&& message!=")
Diff(EQUAL,""Your cart has been updated")")
Diff(DELETE," throw new InvalidElementStateException()")
Diff(EQUAL,";")
Diff(INSERT,"¶")
Diff(EQUAL,"¶                context.UpsertData("CheckOut", true);¶            }¶            else¶            {¶                context.UpsertData("CheckOut", false);¶            }¶        }¶¶        private void ClickBillingCycle(IActor user)¶        {¶            switch (BillingCycleType)¶            {¶                case JoinBillingCyclesType.AssociateMembershipFees:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.AssociateMembershipFees));¶                    break;¶                case JoinBillingCyclesType.ChapterMembershipFees:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.ChapterMembershipFees));¶                    break;¶                case JoinBillingCyclesType.CommunityPartnerMembership:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.CommunityPartnerMembership));¶                    break;¶                case JoinBillingCyclesType.CompanyRegularMembership:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.CompanyRegularMembership));¶                    break;¶                case JoinBillingCyclesType.PartTimeProfessional:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.PartTimeProfessional));¶                    break;¶                case JoinBillingCyclesType.ProfessionalMembership:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.ProfessionalMembership));¶                    break;¶                case JoinBillingCyclesType.RegularMembershipFees:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.RegularMembershipFees));¶                    break;¶                case JoinBillingCyclesType.RetiredMembers:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.RetiredMembers));¶                    break;¶                case JoinBillingCyclesType.StudentMemberJoin:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.StudentMemberJoin));¶                    break;¶                case JoinBillingCyclesType.YoungProfessionalMembership:¶                    user.AttemptsTo(Click.On(JoinBillingCycles.YoungProfessionalMembership));¶                    break;¶            }¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Navigate billing cycle on Member site¶        /// </summary>¶        /// <param name="user"></param>¶        private void SelectBillingCycleInMemberSite(IActor user)¶        {¶            user.AttemptsTo(Browse.InMemberSite(JoinNowPage.GetUrl(JoinBillingCyclesTypesCodes[BillingCycleType])));¶        }¶¶        /// <summary>¶        /// Setup Items when place your order¶        /// </summary>¶        /// <param name="user"></param>¶        private void SetupItems(IActor user)¶        {¶            var dynamicProductDisplay = JoinNowPage.MOO.DynamicProductDisplay;¶¶            foreach (var item in JoinNowData.ItemNames)¶            {¶                user.AttemptsTo(Check.On(dynamicProductDisplay.GetItemCheckBoxByText(item)));¶                if (!string.IsNullOrEmpty(JoinNowData.AmountTo))¶                    user.AttemptsTo(SendKeys.To(dynamicProductDisplay.GetAmountTextBoxByText(item), JoinNowData.AmountTo));¶            }¶        }¶¶        /// <summary>¶        /// Initialize ProductCodes for JoinBillingCyclesTypes¶        /// </summary>¶        private static Dictionary<JoinBillingCyclesType, string> InitializeJoinBillingCyclesTypesCodes()¶        {¶            return new Dictionary<JoinBillingCyclesType, string>¶            {¶                { JoinBillingCyclesType.RegularMembershipFees, "REGULAR_MEMBERSHIP_FEES" },¶                { JoinBillingCyclesType.NonMemberSubscriptions, "Non-Member_Subscriptions" },¶            };¶        }¶¶")
Diff(EQUAL,"        /// <summary>¶        /// Checks if this interaction is equal to another interaction.¶        /// </summary>¶        /// <param name="obj">The other object.</param>¶        public override bool Equals(object obj) =>¶            obj is JoinNow joinNow && BillingCycleType == joinNow.BillingCycleType;¶¶        /// <summary>¶        /// Gets a unique hash code for this interaction.¶        /// </summary>¶        /// <returns></returns>¶        public override int GetHashCode() => HashCode.Combine(GetType(), BillingCycleType);¶¶        /// <summary>¶        /// Returns a description of the Task.¶        /// </summary>¶        /// <returns></returns>¶        public override string ToString() => $"JoinNow with '{Enum.GetName(typeof(JoinBillingCyclesType), BillingCycleType)}'";¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new NotImplementedException();¶        }¶¶        #endregion¶¶        public enum JoinBillingCyclesType¶        {¶            AssociateMembershipFees,¶            ChapterMembershipFees,¶            CommunityPartnerMembership,¶            CompanyRegularMembership,¶            PartTimeProfessional,¶            ProfessionalMembership,¶            RegularMembershipFees,¶            RetiredMembers,¶            StudentMemberJoin,¶            YoungProfessionalMembership")
Diff(INSERT,",¶            NonMemberSubscriptions,")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Interactions/Membership/JoinNow.cs)
Diff(EQUAL,"{¶    public class MembershipPanel : DisplayStaticBase¶    {¶        public MembershipPanel()¶        {¶        }¶        public IWebLocator MemberTypeEdit => LocatorByXPath("MemberType", "select");¶        public IWebLocator MemberType => LocatorByXPath("MemberType");¶        public IWebLocator MemberStatus => LocatorByXPath("MemberStatus");¶        public IWebLocator Chapter => LocatorByXPath("Chapter");¶        public ")
Diff(DELETE,"BusinessCalendar2 JoinDate => new BusinessCalendar2("JoinDate");¶        public BusinessCalendar2 PaidThrough => new BusinessCalendar2("PaidThrough");¶        public BusinessCalendar2 RENEWED_THRU => new BusinessCalendar2")
Diff(INSERT,"IWebLocator JoinDate => LocatorByXPath("JoinDate");¶        public IWebLocator PaidThrough => LocatorByXPath("PaidThrough");¶        public IWebLocator RenewedThru => LocatorByXPath")
Diff(EQUAL,"("RENEWED_THRU");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/PanelDefinition/MembershipPanel.cs)
Diff(EQUAL,"{¶    public class ListView : DisplayIPartBase¶    {¶        public ListView(string name) : base(name)¶        {¶        }¶¶        public IWebLocator Item(int index, string id) => GetLocatorById($"ctrl{index}_{id}");¶¶        public IWebLocator Item(string prefix, int index, string id)¶        {¶            prefix = string.IsNullOrEmpty(prefix) ? "" : $"{prefix}_";¶            return LocatorByXPath($"{prefix}{Name}_ctrl{index}_{id}");¶        }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Controls/Basic/ListView.cs)
Diff(EQUAL,"{¶    //what makes the angular controls different is that¶    //some are not uniquely identifiable and need to be id'ed by their parent element¶    //there isn't always an id to rely on¶    //ids aren't concatenated like webforms so a more precise xpath is build from parent selectors¶¶    public class AsiMessage : AngularControl¶    {¶        public AsiMessage(string parentXPath) : base("asi-message", parentXPath)¶        {¶        }¶¶        public new IWebLocator GetLocator(string message) => LocatorForRelativeXPath($"//{Tag}//li[contains(text(),'{message}')]");¶        public new IWebLocator GetLocator() => LocatorForRelativeXPath($"//{Tag}//li[1]");¶    }¶¶")
Diff(INSERT,"    public class ReceiptMessage: AngularControl¶    {¶        public ReceiptMessage(string parentXPath): base("div", parentXPath)¶        {¶¶        }¶¶        public new IWebLocator GetLocator(string message) => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage'][contains(text(),'{message}')]");¶        public new IWebLocator GetLocator() => LocatorForRelativeXPath($"//{Tag}[@id='receiptVoidMessage']");¶    }¶¶")
Diff(EQUAL,"    public class AngularLabel : AngularControl¶    {¶        private string _forId;¶        public AngularLabel(string parentXPath, string forId) : base("label", parentXPath)¶        {¶            _forId = forId;¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}[@forId='{_forId}']");¶    }¶¶    public class AngularInput : AngularControl¶    {¶        public string ID;¶        public string Type;¶        public AngularInput(string parentXPath, string type, string id) : base("input", parentXPath)¶        {¶            Type = type;¶            ID = id;¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}[@id='{ID}'][@type='{Type}']");¶        public IWebLocator ReadOnlyLocator => LocatorForRelativeXPath($"//{Tag}[@id='{ID}'][@type='{Type}'][@readonly]");¶    }¶¶    public class AngularCheckbox : AngularInput¶    {¶        public AngularCheckbox(string parentXPath, string id) : base(parentXPath, "checkbox", id)¶        {¶¶        }¶        public IWebLocator Checked(bool isChecked) => LocatorForRelativeXPath($"//{Tag}[@id='{ID}'][@type='{Type}'][@ng-reflect-model='{isChecked}']");¶    }¶¶    public class AngularDateInput : AngularInput¶    {¶        public AngularDateInput(string parentXPath, string id) : base(parentXPath, "date", id)¶        {¶¶        }¶    }¶¶    public class AngularButton : AngularInput¶    {¶        public AngularButton(string parentXPath, string value) : base(parentXPath, "button", value)¶        {¶¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}[@value='{ID}'][@type='{Type}']");¶    }¶¶    public class AngularTextButton : AngularControl¶    {¶        public string ButtonText { get; set; }¶        ¶        public AngularTextButton(string parentXPath, string text) : base("button", parentXPath)¶        {¶            ButtonText = text;¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}[@type='button'][contains(text(),'{ButtonText}')]");¶    }¶¶    public class AngularSelect : AngularControl¶    {¶        private string _id;¶        public AngularSelect(string parentXPath, string id) : base("select", parentXPath)¶        {¶            _id = id;¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}[@id='{_id}']");¶    }¶¶    public class AngularRadio : AngularControl¶    {¶        private string _id;¶        public AngularRadio(string parentXPath, string id) : base("input", parentXPath)¶        {¶            _id = id;¶        }¶¶        public IWebLocator OptionByIndex(int index) => LocatorForRelativeXPath($"//input[@id='{_id}{index}'][@type='radio']");¶        public IWebLocator OptionByValue(string value) => LocatorForRelativeXPath($"//label[contains(@for,'{_id}')][text()='{value}']//preceding-sibling::input[contains(@id,'{_id}')][@type='radio']");¶    }¶¶¶    public class AngularLink : AngularControl¶    {¶        private string _linkTextSelector;¶¶        public AngularLink(string parentXPath, string linkText = null) : base("a", parentXPath)¶        {¶            _linkTextSelector = (linkText == null) ? "": $"[contains(text(),'{linkText}')]";¶        }¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//a{_linkTextSelector}");¶    }¶¶    public class AngularTextArea : AngularControl¶    {¶        private string _id; ¶        public AngularTextArea(string parentXPath, string id = null) : base("textarea", parentXPath)¶        {¶            _id = id;¶        }¶¶        public string IdSelector => _id == null ? "" : $"[@id='{_id}']";¶¶        public new IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}{IdSelector}");¶    }¶¶    //attempts to account for the fact that the angular elements don't use concatenated ids like the webforms ones when building a more precise xpath¶    public class AngularControl : DisplayStaticBase¶    {¶        public string Tag { get; set; }¶        public string ParentXPath { get; set; }¶¶        public AngularControl(string tag, string parentXPath)¶        {¶            Tag = tag;¶            ParentXPath = parentXPath;¶        }¶¶        public string PrependRelativeXPath(string xpath) => $"{ParentXPath}{xpath}";¶¶        public IWebLocator LocatorForRelativeXPath(string xpath) => LocatorForXpath(PrependRelativeXPath(xpath));¶¶        public IWebLocator GetLocator => LocatorForRelativeXPath($"//{Tag}");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Controls/Angular/AngularControl.cs)
Diff(EQUAL,"{¶    public class AngularRadGrid: RadGrid¶    {¶        public AngularRadGrid(string className): base(className)¶        {¶            GridIdSuffix = "";¶        }¶        public new IWebLocator Grid => GetLocatorById(null, "*","class");¶        public new IWebLocator FirstCell { get => Cell(1, 1, false, "", "class"); }¶        public new IWebLocator FirstCellLink { get => Cell(1, 1, false, "//div/a", "class"); }¶        public new IWebLocator FirstCellInput { get => Cell(1, 1, false, "//input", "class"); }¶¶        public new IWebLocator Rows { get => WebLocator.L($"XPath for RadGrid Rows", GetTableRowsXPath(GetId(GridIdSuffix))); }¶        public new IWebLocator Cells(int row) => WebLocator.L($"XPath for RadGrid Cells", GetTableCellsXPath(GetId(GridIdSuffix), row));¶    }¶¶    public class RadGrid : DisplayIPartBase¶    {¶        public string GridIdSuffix = "ctl00";¶        public RadGrid(string name) : base(name)¶        {¶        }¶¶        public IWebLocator Grid => GetLocatorById("");¶        public IWebLocator AddNew => GetLocatorDoubleContains("AddButton");¶        public IWebLocator EditSelected => GetLocatorDoubleContains("btnEditSelected");¶        public IWebLocator DeleteSelected => GetLocatorDoubleContains("DeleteButton");¶¶        public IWebLocator SaveHeaderButton => GetLocatorDoubleContains("SaveButton");¶        public IWebLocator EditCancelButton => GetLocatorDoubleContains("btnCancel");¶        public IWebLocator SaveNewButton => GetLocatorDoubleContains("PerformInsertButton");¶        public IWebLocator SaveUpdateButton => GetLocatorDoubleContains("UpdateButton");¶        public IWebLocator TemplateCancelButton => GetLocatorDoubleContains("CancelButton");¶        public IWebLocator SubmitButton => GetLocatorDoubleContains("SubmitButton");¶        public IWebLocator ShowAllLink => GetLocatorDoubleContains("ShowAll", "a");¶¶        public IWebLocator FirstCell { get => Cell(1, 1); }¶        public IWebLocator FirstCellLink { get => Cell(1, 1, true); }¶        public IWebLocator FirstCellInput { get => Cell(1, 1, postXPath: "//input"); }¶        public IWebLocator FirstCellSpan { get => Cell(1, 1, postXPath: "//span"); }¶¶        public IWebLocator Rows { get => WebLocator.L($"XPath for RadGrid Rows", GetTableRowsXPath(GetId(GridIdSuffix))); }¶        public IWebLocator Cells(int row) => WebLocator.L($"XPath for RadGrid Cells", GetTableCellsXPath(GetId(GridIdSuffix), row));¶¶        public Count GetRowCount() => Count.Of(Rows);¶¶        /// <summary>¶        /// Returns the nested cell with the provided data¶        /// </summary>¶        /// <param name="parentRow">the row number for the main row that will be expanded</param>¶        /// <param name="nestedRow">the row number for the nested table</param>¶        /// <param name="nestedColumn">the column number for the nested table</param>¶        /// <param name="postXPath">post pends xpath to the end of the found nested cell</param>¶        public IWebLocator NestedCell(int parentRow, int nestedRow, int nestedColumn, string postXPath = "") =>¶            WebLocator.L($"XPath for RadGrid Cell", GetNestedTableXPath(GetId(GridIdSuffix), parentRow, nestedRow, nestedColumn, postXPath: postXPath));¶¶        /// <summary>¶        /// Returns the first link of a nested cell with the provided data¶        /// </summary>¶        /// <param name="parentRow">the row number for the main row that will be expanded</param>¶        /// <param name="nestedRow">the row number for the nested table</param>¶        /// <param name="nestedColumn">the column number for the nested table</param>¶        public IWebLocator NestedCellLink(int parentRow, int nestedRow, int nestedColumn) =>¶            WebLocator.L($"XPath for RadGrid Cell", GetNestedTableXPath(GetId(GridIdSuffix), parentRow, nestedRow, nestedColumn, true));¶¶        /// <summary>¶        /// Returns the first input of a nested cell with the provided data¶        /// </summary>¶        /// <param name="parentRow">the row number for the main row that will be expanded</param>¶        /// <param name="nestedRow">the row number for the nested table</param>¶        /// <param name="nestedColumn">the column number for the nested table</param>¶        public IWebLocator NestedCellInput(int parentRow, int nestedRow, int nestedColumn) =>¶            WebLocator.L($"XPath for RadGrid Cell", GetNestedTableXPath(GetId(GridIdSuffix), parentRow, nestedRow, nestedColumn, postXPath: "//input"));¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="row">the row number</param>¶        /// <param name="column">the column number</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="tableSection">tbody, thead, tfoot</param>¶        public IWebLocator Cell(int row, int column, bool link = false, string postXPath = "", string tag = "id", string tableSection = "tbody") =>¶            WebLocator.L($"XPath for RadGrid Cell", GetTableXPath(GetId(GridIdSuffix), row, column, link, postXPath, tag, tableSection));¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">the text the column should contain, allows for empty string</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="tableSection">tbody, thead, tfoot</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator Cell(string text, bool link = false, string postXPath = "", string tag =")
Diff(INSERT," ")
Diff(EQUAL,""id", string tableSection = "tbody"")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,") =>¶            WebLocator.L("SelectedItem locator", GetTableXPath(GetId(GridIdSuffix), ")
Diff(DELETE,"$"contains(")
Diff(INSERT,"Predicate("")
Diff(EQUAL,"text()")
Diff(DELETE,",'{")
Diff(INSERT,"", ")
Diff(EQUAL,"text")
Diff(DELETE,"}')"")
Diff(INSERT,", exactMatch)")
Diff(EQUAL,", link, postXPath, tag, tableSection));¶¶        /// <summary>¶        /// Returns a weblocator of cells which ")
Diff(DELETE,"contain")
Diff(INSERT,"matches")
Diff(EQUAL," the given text¶        /// </summary>¶        /// <param name="text">text to search for</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator TextInTable(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,") => Cell(text")
Diff(INSERT,", exactMatch")
Diff(EQUAL,");¶¶        /// <summary>¶        /// Returns a weblocator of cells with a link containing the given text¶        /// </summary>¶        /// <param name="text">text to search for</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator LinkInTable(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,") => Cell(string.Empty, true, $"[")
Diff(DELETE,"contains(")
Diff(INSERT,"{Predicate("")
Diff(EQUAL,"text()")
Diff(INSERT,""")
Diff(EQUAL,",")
Diff(DELETE,"'{")
Diff(EQUAL,"text")
Diff(DELETE,"}')")
Diff(INSERT,",exactMatch)}")
Diff(EQUAL,"]");¶¶        /// <summary>¶        /// Returns the IWebLocator of the delete button for a specific row in the Rad Grid which¶        /// contains the specified link text.¶        /// </summary>¶        /// <param name="linkText">Link text to find row to delete</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator DeleteButtonByLink(string linkText")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,") => LocatorForXpath($"//tr[td[a[")
Diff(DELETE,"contains(")
Diff(INSERT,"{Predicate("text()",linkText,exactMatch)}]]]//td//input");¶¶        /// <summary>¶        /// Returns the IWebLocator of the edit button for a specific row in the Rad Grid which¶        /// contains the specified link text.¶        /// </summary>¶        /// <param name="linkText">Link text to find row to edit</param>¶        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶        /// <returns></returns>¶        public IWebLocator EditButtonByLink(string linkText, bool exactMatch = false) => LocatorForXpath($"//tr[td[a[{Predicate("")
Diff(EQUAL,"text()")
Diff(DELETE,",'{")
Diff(INSERT,"", ")
Diff(EQUAL,"linkText")
Diff(DELETE,"}')")
Diff(INSERT,", exactMatch)}")
Diff(EQUAL,"]]]//td//input");¶¶        /// <summary>¶        /// Returns the IWebLocator of any delete buttons for cells in the Rad Grid¶        /// </summary>¶        /// <param name="row">Row of grid cell</param>¶        /// <param name="col">Column of grid cell</param>¶        /// <returns></returns>¶        public IWebLocator DeleteButtonByRowCol(int row,int col) => LocatorForXpath($"//td[@rowid='{row}' and @colid='{col}']//div[contains(@style,'display:block')]//input[contains(@id,'ColumnDelete')]");¶        /// <summary>¶        /// Returns the IWebLocator of any delete buttons for cells in the Rad Grid¶        /// </summary>¶        /// <param name="row">Row of grid cell</param>¶        /// <param name="col">Column of grid cell</param>¶        /// <returns></returns>¶        public IWebLocator HiddenGridCell(int row, int col) => LocatorForXpath($"//td[@rowid='{row}' and @colid='{col}']//div[contains(@style,'display: none;') or contains(@style,'display:none;')]");¶        /// <summary>¶        /// Returns a weblocator of a cell with a link found with the given text¶        /// </summary>¶        /// <param name="text">text to search for</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator SpanInTable(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,") => Cell(string.Empty, postXPath: $"//span[")
Diff(DELETE,"contains(")
Diff(INSERT,"{Predicate("")
Diff(EQUAL,"text()")
Diff(INSERT,""")
Diff(EQUAL,",")
Diff(DELETE,"'{")
Diff(EQUAL,"text")
Diff(DELETE,"}')")
Diff(INSERT,",exactMatch)}")
Diff(EQUAL,"]");¶¶        /// <summary>¶        /// Returns the ")
Diff(DELETE,"IWebLocator of the edit button for a specific row in the Rad Grid which¶        /// conta")
Diff(INSERT,"cell with the provided data¶        /// </summary>¶        /// <param name="text">f")
Diff(EQUAL,"in")
Diff(INSERT,"d")
Diff(EQUAL,"s the ")
Diff(DELETE,"specified link text.¶        /// </summary>¶        /// <param name="linkText">Link text to find row to edit</param>¶        /// <returns></returns>¶        public IWebLocator EditButtonByLink(string linkText) => LocatorForXpath($"//tr[td[a[contains(text(),'{linkText}')]]]//td//input");")
Diff(INSERT,"text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>¶        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶        /// <returns></returns>¶        public IWebLocator CellAnyElementWithText(string text, bool exactMatch = false)¶        {¶            return Cell(string.Empty, false, $"//*[{Predicate("text()", text, exactMatch)}]//parent::*//input");¶        }")
Diff(EQUAL,"¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>¶")
Diff(INSERT,"        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator Cell")
Diff(DELETE,"Input")
Diff(EQUAL,"WithText(string text")
Diff(INSERT,", string postXPath = "", bool exactMatch = false")
Diff(EQUAL,")¶        {¶            return Cell(string.Empty, false, $"//*[")
Diff(DELETE,"contains(")
Diff(INSERT,"{Predicate("")
Diff(EQUAL,"text()")
Diff(DELETE,",'{")
Diff(INSERT,"", ")
Diff(EQUAL,"text")
Diff(DELETE,"}')]//parent::*//input")
Diff(INSERT,", exactMatch)}]{postXPath}")
Diff(EQUAL,"");¶        }¶¶        /// <summary>¶        /// Returns the cell with the provided data")
Diff(INSERT," in the provided element type")
Diff(EQUAL,"¶        /// </summary>¶        /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>¶        /// <param name="")
Diff(DELETE,"postXPath">post pends xpath to the default table row/column")
Diff(INSERT,"element">The element you want to search with, for example "input"</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match")
Diff(EQUAL,"</param>¶        /// <returns></returns>¶        public IWebLocator Cell")
Diff(INSERT,"Input")
Diff(EQUAL,"WithText(string text, string postXPath = """)
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,")¶        {¶            return Cell(string.Empty, false, $"//")
Diff(DELETE,"*[contains(text(),'{text}')")
Diff(INSERT,"input[{Predicate("value", text, exactMatch)}")
Diff(EQUAL,"]{postXPath}");¶        }¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">finds the text and returns the link associated with it.</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator CellLinkWithText(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,")¶        {¶            return Cell(string.Empty, false, $"//a[")
Diff(DELETE,"contains(text(),'{text}')")
Diff(INSERT,"{Predicate("text()", text, exactMatch)}")
Diff(EQUAL,"]");¶        }¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">finds the text and returns the link associated with it.</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator CellSpanLinkWithText(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,")¶        {¶            return Cell(string.Empty, false, $"//span[")
Diff(DELETE,"contains(text(),'{text}')")
Diff(INSERT,"{Predicate("text()", text, exactMatch)}")
Diff(EQUAL,"]");¶        }¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">finds the text and returns the input associated with it. Used for radio buttons, checkboxes or textboxes</param>¶")
Diff(INSERT,"        /// <param name="exactMatch">Determines whether XPath will use contains method or searches for exact match</param>¶")
Diff(EQUAL,"        /// <returns></returns>¶        public IWebLocator SelectLinkWithRowText(string text")
Diff(INSERT,", bool exactMatch = false")
Diff(EQUAL,")¶        {¶            return Cell(string.Empty, false, $"//*[")
Diff(DELETE,"contains(")
Diff(INSERT,"{Predicate("")
Diff(EQUAL,"text()")
Diff(DELETE,",'{")
Diff(INSERT,"", ")
Diff(EQUAL,"text")
Diff(DELETE,"}')")
Diff(INSERT,", exactMatch)}")
Diff(EQUAL,"]//ancestor::tr//a");¶        }¶¶        /// <summary>¶        /// Returns the cell with the provided data¶        /// </summary>¶        /// <param name="text">finds the text and returns a link associated with it occuring before the text.</param>¶        /// <returns></returns>¶        public IWebLocator SelectLinkBeforeWithRowText(string text)¶        {¶            return Cell(text, false, $"//preceding-sibling::*//a");¶        }¶¶        /// <summary>¶        /// Returns the RadGrid pagination anchor¶        /// </summary>¶        /// <param name="pageNumber">Page number to access</param>¶        /// <param name="tableSection">tbody, thead, tfooter</param>¶        /// <returns></returns>¶        public IWebLocator Pager(int pageNumber = 1, string tableSection = "thead") =>¶            WebLocator.L("RadGrid Pager", GetTableXPath(GetId(GridIdSuffix), "", false, $"//div[")
Diff(DELETE,"contains(@")
Diff(INSERT,"{Predicate("")
Diff(EQUAL,"class")
Diff(DELETE,",'")
Diff(INSERT,"", "")
Diff(EQUAL,"rgNumPart")
Diff(DELETE,"')")
Diff(INSERT,"")}")
Diff(EQUAL,"]/a[{pageNumber}]", "id", tableSection));¶    }¶}")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadGrid.cs)
Diff(EQUAL,"{¶    public class RadTab : DisplayIPartBase¶    {¶        private ")
Diff(INSERT,"readonly ")
Diff(EQUAL,"int _index;¶")
Diff(INSERT,"        private readonly string _tabName;¶¶")
Diff(EQUAL,"        public RadTab(int index, string ")
Diff(DELETE,"n")
Diff(INSERT,"tabStripName, string tabN")
Diff(EQUAL,"ame) : base(")
Diff(DELETE,"n")
Diff(INSERT,"tabStripN")
Diff(EQUAL,"ame)¶        {¶            _index = index;¶")
Diff(INSERT,"            _tabName = tabName;¶")
Diff(EQUAL,"        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public IWebLocator Tab => GetLocatorById("", postXPath: $"/div/ul/li[{_index}]/a/span/span/span");¶        public IWebLocator TabByName => GetLocatorById("", postXPath: $"/div/ul/li/a/span/span/span[text()='{")
Diff(INSERT,"_tab")
Diff(EQUAL,"Name}']");¶    }¶¶    public class RadTabCollection : DisplayCollectionBase<RadTab>¶    {¶        private int _i = 1;¶¶        public RadTabCollection(string name) : base(name)¶        {¶        }¶¶        public RadTabCollection(string name, IEnumerable<string> tabNames) : this(name)¶        {¶            foreach (var tabName in tabNames)¶                base.Add(tabName, new RadTab(_i++, Name")
Diff(INSERT,", tabName")
Diff(EQUAL,"));¶        }¶¶        public void Add(string key)¶        {¶")
Diff(DELETE,"")
Diff(EQUAL,"            base.Add(key, new RadTab(_i++, Name")
Diff(INSERT,", key")
Diff(EQUAL,"));¶        }¶¶        public override void Add(string key, RadTab value)¶        {¶            base.Add(key, value);¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadTab.cs)
Diff(EQUAL,"{¶    public class RadTabStrip : DisplayIPartBase¶    {¶        public RadTabStrip(string name): base(name)¶        {¶            Tabs = new RadTabCollection(name);¶        }¶¶        public RadTabStrip(string name, IEnumerable<string> tabNames) : this(name)¶        {¶            Tabs = new RadTabCollection(name, tabNames);¶        }¶¶        public RadTabCollection Tabs;¶¶        public IWebLocator GetTab(string tabName)¶        {¶            return Tabs.Get(tabName).Tab;¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public IWebLocator GetTabByName(string tabName)¶        {¶            return Tabs.Get(tabName).TabByName;¶        }¶¶")
Diff(INSERT,"        public IWebLocator GetDynamicTab(string tabName)¶        {¶            return new RadTab(0, Name, tabName).TabByName;¶        }¶¶")
Diff(EQUAL,"        public void AddTab(string tabName)¶        {¶            Tabs.Add(tabName);¶        }¶¶        public void AddTab(string key, RadTab value)¶        {¶            Tabs.Add(key, value);¶        }¶¶        public void AddTabs(IEnumerable<string> tabNames)¶        {¶            foreach (var tabName in tabNames)¶                Tabs.Add(tabName);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Controls/Telerik/RadTabStrip.cs)
Diff(EQUAL,"{¶    public class TestMethodBase¶    {¶        protected readonly IWebDriver _driver;¶        protected readonly IAsiWebContext _context;¶¶        public TestMethodBase(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶        }¶¶        public ImisUser User(string name)¶        {¶            var user = new ImisUser(name, ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶            return user;¶        }¶¶        public ImisUser RestUser()¶        {¶            return RestUser(_context.UserName);¶        }¶¶        public ImisUser RestUser(string name)¶        {¶            var user = new ImisUser(name, ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶            user.Can(CallRestApi.Using(new RestClient(_context.BaseUrl)));¶            return user;¶        }¶¶        public ImisUser RestUser(string name, string baseUrl)¶        {¶            var user = new ImisUser(name, ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶            user.Can(CallRestApi.Using(new RestClient(baseUrl)));¶            return user;¶        }¶¶        public ImisUser LoggedInUser()¶        {¶            return User(_context.UserName);¶        }¶¶        public ImisUser SelectedPartyIdUser()¶        {¶            return User(_context.SelectedPartyId);¶        }¶¶        public T Deserialize<T>(string content)¶        {¶            JsonSerializerSettings settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };¶            return JsonConvert.DeserializeObject<T>(content, settings);¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/TestMethodBase.cs)
Diff(EQUAL,"{¶    public class NavigationTestMethods : TestMethodBase¶    {¶        public NavigationTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            ¶        }¶¶        public void NavigateTo(string navName, string navClassName, string firstLevel, string secondLevel)¶        {¶            var user = LoggedInUser();¶            var classes = user.AsksFor(Classes.Of(SideNavBase.ParentMenuSpanWebLocator(navClassName)));¶            if (!classes.Contains(SideNavBase._expandedClass))¶            {¶                user.AttemptsTo(ScrollToElement.At(SideNavBase.ParentMenuWebLocator(navClassName, navName)));¶                user.AttemptsTo(Click.On(SideNavBase.ParentMenuWebLocator(navClassName, navName)));¶                user.AttemptsTo(Waiting.ForPageReload());¶            }¶            if (!string.IsNullOrEmpty(firstLevel))¶            {¶                var childSpanClasses = user.AsksFor(Classes.Of(SideNavBase.FirstChildMenuSpanWebLocator(navClassName, firstLevel)));¶                if (!childSpanClasses.Contains(SideNavBase._expandedClass))¶                {¶                    user.AttemptsTo(ScrollToElement.At(SideNavBase.FirstChildMenuWebLocator(navClassName, firstLevel)));¶                    user.AttemptsTo(Click.On(SideNavBase.FirstChildMenuWebLocator(navClassName, firstLevel)));¶                    user.AttemptsTo(Waiting.ForPageReload());¶                }¶                if (!string.IsNullOrEmpty(secondLevel))¶                {¶                    user.AttemptsTo(ScrollToElement.At(SideNavBase.SecondNestedMenuWebLocator(navClassName, firstLevel, secondLevel)));¶                    user.AttemptsTo(Click.On(SideNavBase.SecondNestedMenuWebLocator(navClassName, firstLevel, secondLevel)));¶                    user.AttemptsTo(Waiting.ForPageReload());¶                }¶            }¶        }¶¶        public void NavigateTo(string navName)¶        {¶            var user = LoggedInUser();¶            var classes = user.AsksFor(Classes.Of(TopNavigation.ParentMenuWebLocator(navName)));¶            if (!classes.Contains(TopNavigation._expandedClass))¶            {¶                user.AttemptsTo(Click.On(TopNavigation.ParentMenuWebLocator(navName)));¶                user.AttemptsTo(Waiting.ForPageReload());¶            }¶        }¶¶        public void NavigateTo(string navName, string firstLevel, string secondLevel)¶        {¶            var user = LoggedInUser();¶            var classes = user.AsksFor(Classes.Of(TopNavigation.ParentMenuWebLocator(navName)));¶            if (!classes.Contains(TopNavigation._expandedClass))¶            {¶                user.AttemptsTo(Hover.Over(TopNavigation.ParentMenuWebLocator(navName)));¶                user.AttemptsTo(Waiting.ForPageReload());¶            }¶            if (!string.IsNullOrEmpty(firstLevel))¶            {¶                if (!user.AsksFor(Appearance.Of(TopNavigation.FirstChildMenuWebLocator(navName, firstLevel))))¶                    user.AttemptsTo(ScrollToElement.At(TopNavigation.FirstChildMenuWebLocator(navName, firstLevel)));¶                var childSpanClasses = user.AsksFor(Classes.Of(TopNavigation.FirstChildMenuWebLocator(navName, firstLevel)));¶                if (childSpanClasses.Contains(TopNavigation._expandedClass))¶                {¶                    user.AttemptsTo(Waiting.ForPageReload());¶                    user.AttemptsTo(Hover.Over(TopNavigation.FirstChildMenuWebLocator(navName, firstLevel)));¶                    user.AttemptsTo(Waiting.ForPageReload());¶                }¶                if (string.IsNullOrEmpty(secondLevel))¶                {¶                    user.AttemptsTo(Waiting.ForPageReload());¶                    user.AttemptsTo(Click.On(TopNavigation.FirstChildMenuWebLocator(navName, firstLevel)));¶                    user.AttemptsTo(Waiting.ForPageReload());¶                }¶                else¶                {¶                    user.AttemptsTo(Waiting.ForPageReload());¶                    user.AttemptsTo(Click.On(TopNavigation.SecondNestedMenuWebLocator(navName, firstLevel, secondLevel)));¶                    user.AttemptsTo(Waiting.ForPageReload());¶                }¶            }¶        }¶¶        public void VerifyExpectedPage(string expectedPage)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);¶        }¶¶        public void VerifyExpectedPageInNewTab(string expectedPage)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Waiting.ForPageReload());¶            var windowHandles = _driver.WindowHandles;¶            ")
Diff(DELETE,"user.AttemptsTo(Waiting.ForRecaptcha());¶            //")
Diff(EQUAL,"user.AttemptsTo(SwitchWindow.To(windowHandles[1]));¶            ")
Diff(DELETE,"//")
Diff(EQUAL,"user.AsksFor(CurrentUrl.FromBrowser()).Should().Contain(expectedPage);¶        }¶¶        public void ServerErrorNotOnScreen()¶        {¶            LoggedInUser().AsksFor(Existence.Of(PageBase.LocatorByTextXPath("Server Error", contains: true))).Should().BeFalse();¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/NavigationTestMethods.cs)
Diff(EQUAL,"{¶    public class ProductTestMethods : TestMethodBase¶    {¶        public ProductTestMethods(IWebDriver driver, IAsiWebContext context")
Diff(INSERT,", ProductContext productContext")
Diff(EQUAL,") : base(driver, context)¶")
Diff(DELETE,"")
Diff(EQUAL,"        {¶            AccountPage = new AccountPage();¶            FindProductsPage = new FindProductsPage();¶")
Diff(DELETE,"            ProductDisplayPage = new ProductDisplayPage();¶")
Diff(EQUAL,"            ItemPage = new ItemPage("FR004", "PUB");¶            Cart = new Cart();¶            OrderConfirmation = new OrderConfirmation();¶")
Diff(DELETE,"            OrderConfirmation = new OrderConfirmation();¶")
Diff(EQUAL,"            CartTestMethods = new CartTestMethods(driver,")
Diff(INSERT," ")
Diff(EQUAL,"context);¶")
Diff(INSERT,"            ProductContext = productContext;¶")
Diff(EQUAL,"        }¶¶        public AccountPage AccountPage { get; set; }¶")
Diff(DELETE,"        public AddProductPage AddProductPage { get; set; }¶")
Diff(EQUAL,"        public FindProductsPage FindProductsPage { get; set; }¶")
Diff(DELETE,"        public ProductDisplayPage ProductDisplayPage { get; set; }¶")
Diff(EQUAL,"        public ItemPage ItemPage { get; set; }¶        public Cart Cart { get; set; }¶        public OrderConfirmation OrderConfirmation { get; set; }¶        public CartTestMethods CartTestMethods { get; set; }")
Diff(INSERT,"¶        public ProductContext ProductContext { get; set; }")
Diff(EQUAL,"¶¶        public void CreateSimpleProduct(CreateProductData createProductData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(CreateProduct.SimpleItem(createProductData")
Diff(INSERT,", ProductContext));¶        }¶¶        public void CreateProductWithItems(CreateProductData createProductData, IEnumerable<ProductItemData> productItemsData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(CreateProduct.CollectionOfItems(createProductData, productItemsData, ProductContext));¶        }¶¶        public void VerifyProductWasAdded()¶        {¶            var user = LoggedInUser();¶            var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;¶¶            user.AsksFor(Text.Of(productDisplay.ProductTitle)).Should().Be(ProductContext.Name);¶            user.AsksFor(Text.Of(productDisplay.ProductDescription)).Should().Be(ProductContext.Description);¶            if (ProductContext.ContainsInventory)¶                user.AsksFor(Text.Of(productDisplay.InventoryLabel)).Should().Be("This item is not currently available.");¶        }¶¶        public void VerifyProductIsAvailable()¶        {¶            var user = LoggedInUser();¶            var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;¶¶            user.AttemptsTo(Browse.InImis(ItemPage.WithBaseUrlParameters(ProductContext.Code).BaseUrl));¶            user.WaitsUntil(Text.Of(productDisplay.InventoryLabel), IsNotEqualTo.Value("This item is not currently available."")
Diff(EQUAL,"));¶        }¶¶        public void OrderProduct(CartData cartData)¶        {¶            var user = LoggedInUser();¶            if (cartData.ClearCart)¶                CartTestMethods.EmptyCart();¶            for (int count = 0; count < cartData.NumOfProducts; count++)¶            {¶                user.AttemptsTo(Browse.InImis(FindProductsPage.BaseUrl));¶                user.AttemptsTo(SendKeys.To(FindProductsPage.ProductSearch.SearchBox, cartData.Product).ThenHitEnter());¶                user.AttemptsTo(Waiting.InSeconds(1));¶                user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText(cartData.Product)));¶")
Diff(INSERT,"                var simpleProductDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;¶                user.AttemptsTo(SendKeys.To(simpleProductDisplay.QuantityTextBox, cartData.Quantity.ToString()));¶")
Diff(EQUAL,"                user.AttemptsTo(Click.On(")
Diff(INSERT,"simple")
Diff(EQUAL,"ProductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".AddToCart));¶            }¶        }¶¶        public void CompareSimilarProduct(CartData cartData)¶        {¶            var user = LoggedInUser();¶¶            for (int count = 0; count < cartData.NumOfProducts; count++)¶            {¶                user.AttemptsTo(Browse.InImis(ItemPage.BaseUrl));¶                TestHelper.WaitForPageReload();¶                user.AsksFor(Text.Of(ItemPage.SimilarProducts.SelectSimilarItem(cartData.SimilarProduct)));¶            }¶        }¶¶        public void VerifyOrderedProduct(CartData cartData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Wait.Until(Existence.Of(OrderConfirmation.OrderConfirmationDisplay.OrderDate), IsEqualTo.True()));¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.FirstCell)).Should().Contain(cartData.Product);¶        }¶¶        public void VerifyCartButtonIsDisabled()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶            user.AsksFor(EnabledState.Of(Cart.SubmitOrderButtonLink.SubmitCartOrderButton)).Should().BeFalse();")
Diff(DELETE,"  ")
Diff(EQUAL,"¶        }¶¶        public void VerifyCompanyOrderedProduct(CartData cartData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(AccountPage.BaseUrl));¶            user.AttemptsTo(Click.On(AccountPage.ContactProfile.ContactName.InstituteNameLink));¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.AttemptsTo(Click.On(AccountPage.Tab("Transactions")));")
Diff(DELETE," ")
Diff(EQUAL,"¶            user.AsksFor(Text.Of(AccountPage.TransactionsTab.Invoices.ResultsGrid.Cell(1, 3))).Contains(cartData.Product);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Commerce/ProductTestMethods.cs)
Diff(EQUAL,"{¶    public class CartTestMethods : TestMethodBase¶    {¶        public CartTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            Cart = new Cart();¶        }¶¶        public Cart Cart { get; set; }¶¶        public void Checkout(CartData cartData")
Diff(INSERT,", bool shouldSubmitCart = true")
Diff(EQUAL,")¶")
Diff(DELETE,"")
Diff(EQUAL,"        {¶            var user = User("Checkout");¶            ")
Diff(DELETE,"user.AttemptsTo(CheckOut.WithDefaultPayment(cartData)")
Diff(INSERT,"var checkOut = cartData.PaymentMethod switch¶            {¶                "PayPal" => CheckOut.WithPayPal(),¶                "Main Checking Account" => CheckOut.WithMainCheckingAccount(cartData),¶                "Without payment" => CheckOut.WithoutPayment(cartData),¶                _ => CheckOut.WithDefaultPayment(cartData),¶            };¶            checkOut = shouldSubmitCart ? checkOut : checkOut.SkipSubmitOrderButton();¶¶            user.AttemptsTo(checkOut")
Diff(EQUAL,");¶        }¶¶        public void CheckoutConditionally(CartData cartData)¶        {¶            var user = User("Checkout");¶            if (_context.GetData<bool>("CheckOut"))¶                user.AttemptsTo(CheckOut.WithDefaultPayment(cartData));¶        }¶¶        /// <summary>¶        /// I verify order confirmation details from context data¶        /// </summary>¶        public void VerifyOrderConfirmationDetails()¶        {¶            var user = User("VerifyOrderConfirmationDetails");¶            user.Verifies(CheckOut.WithDefaultPayment());¶        }¶¶        public void VerifyCartItems(Table cartTable)¶        {¶            var user = User("VerifyCartItems");¶            var cartList = cartTable.CreateSet<CartData>().ToList();¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶            foreach (CartData cList in cartList)¶            {¶                user.AsksFor(Appearance.Of(Cart.ShoppingCart.ItemGrid.Cell")
Diff(DELETE,"Inpu")
Diff(INSERT,"AnyElemen")
Diff(EQUAL,"tWithText(cList.CartItem))).Should().BeTrue();¶            }¶        }¶¶        public void EmptyCart()¶        {¶            var user = User("EmptyCart");¶            user.AttemptsTo(RemoveFromCart.Everything());¶        }¶¶        public void ViewCart()¶        {¶            var user = User("ViewCart");¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Commerce/CartTestMethods.cs)
Diff(EQUAL,"{¶    public class LicenseManagementTestMethods : TestMethodBase¶    {¶        p")
Diff(DELETE,"ublic LicenseManagementTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {")
Diff(INSERT,"rivate LicenseServerPage LicenseServerPage { get; set; }¶        private UpsertLicenseModal UpsertLicenseModal { get; set; }¶        private UpsertLicenseIssuedModal UpsertLicenseIssuedModal { get; set; }¶        public LicenseManagementTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            LicenseServerPage = new LicenseServerPage();¶            UpsertLicenseModal = new UpsertLicenseModal();¶            UpsertLicenseIssuedModal = new UpsertLicenseIssuedModal();")
Diff(EQUAL,"¶        }¶¶        public void UpdateAndSync(string licenseKey)¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.UpdateAndSync(licenseKey));¶        }¶¶        public void UpdateAndSync(string licenseKey, string accessCode)¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.UpdateAndSync(licenseKey, accessCode));¶        }¶¶        public void Resync()¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.Resync());¶        }¶¶        public void CheckLicenseName(string licenseName)¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.CheckLicenseName(licenseName));¶        }¶¶        public void ResetLicense()¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.ResetLicense());¶        }¶¶        public void CheckLicensedProductName(string productName)¶        {¶            var user = User("LicenseManager");¶            user.AttemptsTo(ManageLicense.CheckLicensedProductName(productName));¶        }")
Diff(INSERT,"¶¶        public void VerifyLicenseServerPageTitle()¶        {¶            var user = User("LicenseManager");¶            user.AsksFor(Title.OfPage()).Should().Be("Index - Asi License Server");¶        }¶¶        public void CreateNewLicense(string licenseProduct, string licenseType)¶        {¶            var user = User("LicenseManager");          ¶            var clientName = licenseProduct + " " + TestHelper.GenerateRandomString(3);¶            //Storing the randomly generated value to the data storage and use it  the test method later ¶            _context.DataStorage.Add("ClientName",clientName);¶            _context.DataStorage.Add("LicenseProduct", licenseProduct);¶¶            user.AttemptsTo(Click.On(LicenseServerPage.AddClientButton));¶            user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientName, clientName));¶            user.AttemptsTo(SendKeys.To(UpsertLicenseModal.ClientID, TestHelper.GenerateRandomNumber(10,1000).ToString()));¶            user.AttemptsTo(SendKeys.To(UpsertLicenseModal.SerialNumber, TestHelper.GenerateRandomNumber(100,5000).ToString()));¶            user.AttemptsTo(Select.ByText(UpsertLicenseModal.Region,"United States"));¶            if (licenseProduct == "iMIS EMS")¶                user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseProduct));¶            else if(licenseProduct == "iMIS 100")                ¶                user.AttemptsTo(Click.On(UpsertLicenseModal.ProfessionalProduct));¶            else¶                user.AttemptsTo(Click.On(UpsertLicenseModal.EnterpriseOnPremiseProduct));¶            //Select License Type¶            if (licenseType == "Production")¶                user.AttemptsTo(Click.On(UpsertLicenseModal.ProductionLicense));¶            else if( licenseType == "Test")¶                user.AttemptsTo(Click.On(UpsertLicenseModal.TestLicense));¶            else¶                user.AttemptsTo(Click.On(UpsertLicenseModal.DemoLicense));¶            user.AttemptsTo(Click.On(UpsertLicenseModal.SaveAndCloseButton));¶¶        }¶¶        public void VerifyLicenseCreation(string licenseProduct, string licenseType)¶        {¶            var user = LoggedInUser();¶            var clientName = _context.DataStorage["ClientName"].ToString();¶            user.AsksFor(Text.Of(LicenseServerPage.LicenseNameLocator(clientName))).Should().Be(clientName);¶            user.AsksFor(Text.Of(LicenseServerPage.LicenseProductLocator)).Should().Be(licenseProduct);¶            user.AsksFor(Text.Of(LicenseServerPage.LicenseUseLocator)).Should().Be(licenseType);¶        }¶¶        public void DeleteLicense()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(LicenseServerPage.EditButton));¶            user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteButton));¶            user.AttemptsTo(Click.On(UpsertLicenseModal.DeleteConfirmationButton));¶¶        }¶¶        public void VerifyLicenseDeletion()¶        {¶            var user = LoggedInUser();¶            var clientName = _context.DataStorage["ClientName"].ToString();¶            user.WaitsUntil(Appearance.Of(LicenseServerPage.SuccessfulDeleteAlert(clientName)), IsEqualTo.True());¶        }¶¶        public void AddLicenseFeatures()¶        {¶            var user = LoggedInUser();¶            var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();¶¶            user.AttemptsTo(Click.On(UpsertLicenseModal.AddNewLicenseButton));¶            foreach (var feature in UpsertLicenseIssuedModal.LegacyAndCommonFeatures(licenseProduct))¶            {¶                user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());¶                user.AttemptsTo(Click.On(feature));¶            }¶            user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.SelectAllPackage));¶            user.AttemptsTo(Click.On(UpsertLicenseIssuedModal.AddAndCloseButton));¶        }¶¶        public void VerifyActiveLicenseCreation()¶        {¶            var user = LoggedInUser();¶            var licenseProduct = _context.DataStorage["LicenseProduct"].ToString();¶¶            user.WaitsUntil(Existence.Of(UpsertLicenseModal.ActiveLicense), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(UpsertLicenseModal.LicensedFeatures), IsEqualTo.True());¶            foreach (var feature in UpsertLicenseModal.SelectAllFeatures(licenseProduct))¶            {¶                user.WaitsUntil(Existence.Of(feature), IsEqualTo.True());¶            }¶¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Settings/LicenseManagementTestMethods.cs)
Diff(EQUAL,"{¶    public class SettingsTestMethods : TestMethodBase¶    {¶        public SettingsTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            AboutiMIS = new AboutiMIS();¶        }¶¶        private AboutiMIS AboutiMIS { get; set; }¶        public SystemOptionsConfigPage SystemOptionsConfigPage { get; set; }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        public void NavigateToAboutiMISPage()¶        {¶            var user = User("AboutiMISUser");¶            user.AttemptsTo(Browse.InStaffSite(AboutiMIS.BaseUrl));¶        }¶¶        public void NavigateToSystemConfigPage(string pageName)¶        {¶            var user = LoggedInUser();¶            if (pageName.Equals("SMTPEmailSettings", StringComparison.InvariantCultureIgnoreCase)) ¶                pageName = "SMTP.EmailSettings";¶¶            SystemOptionsConfigPage = new SystemOptionsConfigPage(pageName);¶            user.AttemptsTo(Browse.InStaffSite(SystemOptionsConfigPage.BaseUrl));¶        }¶¶        public void VerifySystemConfigFields(Table table)¶        {¶            var user = LoggedInUser();¶¶            foreach (var row in table.Rows) ¶            {¶                string fieldType, label, controlNumber;¶                row.TryGetValue("FieldType", out fieldType);¶                row.TryGetValue("Label", out label);¶                row.TryGetValue("ControlNumber", out controlNumber);¶¶                if (fieldType.Equals("TextField", StringComparison.InvariantCultureIgnoreCase))¶                    user.AsksFor(Appearance.Of(SystemOptionsConfigPage.TextField(Convert.ToInt32(controlNumber)).Control));¶¶                if (fieldType.Equals("Dropdown", StringComparison.InvariantCultureIgnoreCase))¶                    user.AsksFor(Appearance.Of(SystemOptionsConfigPage.Dropdown(Convert.ToInt32(controlNumber)).Control));¶¶                if (fieldType.Equals("CheckBox", StringComparison.InvariantCultureIgnoreCase))¶                    user.AsksFor(Appearance.Of(SystemOptionsConfigPage.CheckBox(Convert.ToInt32(controlNumber)).Control));¶¶                if (fieldType.Equals("PasswordField", StringComparison.InvariantCultureIgnoreCase))¶                    user.AsksFor(Appearance.Of(SystemOptionsConfigPage.PasswordField(Convert.ToInt32(controlNumber)).Control));¶            }¶        }¶    }¶}")
Diff(DELETE,"¶¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Settings/SettingsTestMethods.cs)
Diff(EQUAL,"{¶    public class FinanceSettingsTestMethods : TestMethodBase¶    {¶        public FinanceSettingsTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            FinancialEntitiesPage = new FinancialEntitiesPage();¶            FinanceGeneralSettingsPage = new FinanceGeneralSettingsPage();¶        }¶¶        public FinancialEntitiesPage FinancialEntitiesPage { get; set; }¶        public FinanceGeneralSettingsPage FinanceGeneralSettingsPage { get; set; }¶        public void SetDefaultCountryCurrency(string country)¶        {¶            var user = User("SetDefaultCountryCurrency");¶            switch (country)¶            {¶                case "United States":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToUnitedStatesDollar());¶                    break;¶                case "United Kingdom":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToPoundSterling());¶                    break;¶                case "Canada":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToCanadianDollar());¶                    break;¶                case "New Zealand":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToNewZealandDollar());¶                    break;¶                case "Australia":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToAustralianDollar());¶                    break;¶                case "Empty":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToOther());¶                    user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, ""));¶                    user.AttemptsTo(SendKeys.To(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBox, Keys.")
Diff(DELETE,"Enter")
Diff(INSERT,"Tab));¶                    user.WaitsUntil(Text.Of(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBoxRequiredValidator), ContainsSubstring.Text("currency"")
Diff(EQUAL,"));¶                    break;¶            }¶        }¶¶¶        public void VerifyDefaultCurrencyValidationMessage(string validationMessage)¶        {¶            var user = User("SetDefaultCountryCurrency");¶            user.AskingFor(Text.Of(FinanceGeneralSettingsPage.DefaultCurrencyCodeTextBoxRequiredValidator)).Should().Contain(validationMessage);¶        }¶¶        public void VerificationOfCountryCurrency(string country)¶        {¶            var user = User("VerificationCountryCurrencySetupUser");¶            switch (country)¶            {¶                case "United States":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToUnitedStatesDollar().OnlyVerify());¶                    break;¶                case "United Kingdom":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToPoundSterling().OnlyVerify());¶                    break;¶                case "Canada":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToCanadianDollar().OnlyVerify());¶                    break;¶                case "New Zealand":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToNewZealandDollar().OnlyVerify());¶                    break;¶                case "Australia":¶                    user.AttemptsTo(SelectDefaultCountryCurrency.ToAustralianDollar().OnlyVerify());¶                    break;¶            }¶        }¶¶        public void SetOrganizationDefaultCulture(OrganizationDefaultCultureData organizationDefaultCultureData)¶        {¶            var user = User("SetOrganizationDefaultCulture");¶            user.AttemptsTo(SetOrganization.WithOrgDefaultCultureData(organizationDefaultCultureData));¶        }¶¶        public void VerifyOrganizationDefaultCulture(OrganizationDefaultCultureData organizationDefaultCultureData)¶        {¶            var user = User("SetOrganizationDefaultCulture");¶            user.Verifies(SetOrganization.WithOrgDefaultCultureData(organizationDefaultCultureData));¶        }¶¶        /// <summary>¶        /// Change the default financial entity if it is not already set how we want it.¶        /// If we detect that the financial entity is already set correctly then we do not bother¶        /// to check/change any of the other settings such as currency, country etc.¶        /// </summary>¶        public void SetUpFinancialEntitiesIfNotAlready(FinancialEntityData financialEntityData, OrganizationDefaultCultureData organizationDefaultCultureData)¶        {¶¶            // Try and establish if the existing default entity is already set as we want it¶            var user = User("SetUpFinancialEntities");¶            user.AttemptsTo(Browse.InStaffSite(FinancialEntitiesPage.BaseUrl));¶            if (user.AsksFor(Existence.Of(FinancialEntitiesPage.EntitiesGrid.DefaultRow)))¶            {¶                if (int.TryParse(user.AsksFor(FinancialEntitiesPage.EntitiesGrid.DefaultRowIndex()), out var rowIndex))¶                {¶                    var code = user.AsksFor(Text.Of(FinancialEntitiesPage.EntitiesGrid[rowIndex].CodeLink));¶                    if (string.Equals(code, financialEntityData.Code, StringComparison.OrdinalIgnoreCase))¶                        return;¶                }¶            }¶¶            SetUpFinancialEntities(financialEntityData, organizationDefaultCultureData);¶        }¶¶        public void SetUpFinancialEntities(FinancialEntityData financialEntityData, OrganizationDefaultCultureData organizationDefaultCultureData)¶        {¶            var user = User("SetUpFinancialEntities");¶            user.AttemptsTo(SetFinancialEntity.ByCode(financialEntityData, organizationDefaultCultureData.Country));¶            SetDefaultCountryCurrency(organizationDefaultCultureData.Country);¶            SetOrganizationDefaultCulture(organizationDefaultCultureData);¶        }¶¶        public void VerifyFinancialEntities(FinancialEntityData financialEntityData, OrganizationDefaultCultureData organizationDefaultCultureData)¶        {¶            var user = User("VerifyFinancialEntities");¶            user.Verifies(SetFinancialEntity.ByCode(financialEntityData, organizationDefaultCultureData.Country));¶            user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));¶            VerificationOfCountryCurrency(organizationDefaultCultureData.Country);¶            VerifyOrganizationDefaultCulture(organizationDefaultCultureData);¶        }")
Diff(INSERT,"¶¶        public void SelectBatchMode(string BatchModeSelection)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(FinanceGeneralSettingsPage.BaseUrl));¶            user.AttemptsTo(SetWhenProvided.DropDown(FinanceGeneralSettingsPage.BatchModeSelectorDropDownList, BatchModeSelection));¶            user.AttemptsTo(ClickCommandButton.Save());¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Settings/Finance/FinanceSettingsTestMethods.cs)
Diff(EQUAL,"{¶    public class FormTestMethods : TestMethodBase¶    {¶¶        #region Properties¶")
Diff(DELETE,"        ")
Diff(EQUAL,"¶        private FormDesignerPage FormDesignerPage { get; set; }¶        public FormsLibraryPage FormsLibraryPage { get; set; }¶        public FormApprovalReviewPage FormApprovalReviewPage { get; set; }¶        public FormApprovalDetail FormApprovalDetail { get; set; }¶        public FormsDisplay FormsDisplay { get; set; }¶        public ContentGallery ContentGallery { get; set; }¶")
Diff(INSERT,"        public ContactData NewestContact { get; set; }¶")
Diff(EQUAL,"        #endregion¶¶        #region Constructors¶        public FormTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            FormDesignerPage = new FormDesignerPage();¶            FormsLibraryPage = new FormsLibraryPage();¶            FormsDisplay = new FormsDisplay();¶            ContentGallery = new ContentGallery("");¶            FormApprovalReviewPage = new FormApprovalReviewPage("ciFormApprovalReview");¶            FormApprovalDetail = new FormApprovalDetail();¶")
Diff(INSERT,"            NewestContact = new ContactData();¶")
Diff(EQUAL,"        }¶        #endregion¶¶        #region Form Creation¶        /// <summary>¶        /// Add a field to a form¶        /// </summary>¶        /// <param name="category"></param>¶        /// <param name="field"></param>¶        public void AddFieldInForm(string category, string field)¶        {¶            var user = LoggedInUser();¶¶            //expand the menus¶            if (string.IsNullOrWhiteSpace(category) || string.IsNullOrWhiteSpace(field)) return;¶            var nestedMenus = category.Split(".");¶¶            string currentMenuItemXPath = "";¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            foreach (var nestedMenu in nestedMenus)¶            {¶                //get the expander¶                //slightly different for top level¶                IWebLocator currentExpander = String.IsNullOrEmpty(currentMenuItemXPath) ?¶                    FormDesignerPage.FormManagerDragAndDrop.FormsElementTopLevelMenuItemExpander(nestedMenu)")
Diff(INSERT," ")
Diff(EQUAL,":¶                    FormDesignerPage.FormManagerDragAndDrop.FormsElementNestedMenuItemExpander(currentMenuItemXPath, nestedMenu);¶¶                user.AttemptsTo(ScrollToElement.At(currentExpander));¶¶                //check if the current expander needs expanding¶                if (user.AsksFor(HtmlAttribute.Of(currentExpander, "class")) == "rtPlus")¶                {¶                    //need to expand so do it¶                    user.AttemptsTo(Click.On(currentExpander));¶                }¶                user.AttemptsTo(Waiting.ForPageReload());//I guess we need a delay for the menu to expand¶                currentMenuItemXPath = FormDesignerPage.FormManagerDragAndDrop.FormsElementNestedMenuItemXPath(nestedMenu);¶            }¶¶            var fieldItem = FormDesignerPage.FormManagerDragAndDrop.FormsElementDraggableMenuItem(currentMenuItemXPath, field);¶            user.AttemptsTo(Hover.Over(fieldItem));¶            user.AttemptsTo(Drag.AndDrop(fieldItem, FormDesignerPage.FormManagerDragAndDrop.DropAreaPosition("1")));¶        }¶¶        /// <summary>¶        /// ")
Diff(DELETE,"Create a new form¶        /// </summary>¶        /// <param name="formName">")
Diff(INSERT,"Navigate to Forms in RiSE and add a form and fields.¶        /// Helpful note: the field in this case is whatever the title attribute is of the menu item¶        /// </summary>¶        /// <param name="formName"></param>¶        /// <param name="elements"></param>¶        /// <param name="requireApproval"></param>¶        /// <param name="groupName">Create form in provided group, or General by default. Create group if not exists.")
Diff(EQUAL,"</param>¶        public void ")
Diff(INSERT,"NavigateAnd")
Diff(EQUAL,"CreateForm(string formName,")
Diff(INSERT," Table elements,")
Diff(EQUAL," bool requireApproval = false")
Diff(INSERT,", string groupName = null")
Diff(EQUAL,")¶        {¶            var user = LoggedInUser();¶            ")
Diff(DELETE,"¶")
Diff(INSERT,"user.AttemptsTo(Browse.InStaffSite(FormsLibraryPage.BaseUrl));¶¶            if (!string.IsNullOrEmpty(groupName))¶            {¶                var groupTab = FormsLibraryPage.FormLibrary.FormGroupsTabStrip.GetDynamicTab(groupName);¶                if (!user.AsksFor(Existence.Of(groupTab)))¶                {¶        ")
Diff(EQUAL,"            user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.")
Diff(DELETE,"RadGrid1.AddNew));¶")
Diff(INSERT,"FormGroupsTabStrip.GetTabByName("+")));¶        ")
Diff(EQUAL,"            user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.")
Diff(DELETE,"Form")
Diff(INSERT,"Group")
Diff(EQUAL,"NameInput, ")
Diff(DELETE,"form")
Diff(INSERT,"group")
Diff(EQUAL,"Name));¶         ")
Diff(DELETE,"   if (requireApproval)¶            {¶")
Diff(EQUAL,"           ")
Diff(DELETE,"     ")
Diff(EQUAL,"user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.")
Diff(DELETE,"FormApprovalCheckBox")
Diff(INSERT,"AddGroupButton")
Diff(EQUAL,"));¶            ")
Diff(DELETE,"}¶")
Diff(INSERT,"    }¶¶    ")
Diff(EQUAL,"            user.AttemptsTo(Click.On(")
Diff(DELETE,"FormsLibraryPage.FormLibrary.AddFormButton));¶        }¶¶        /// <summary>¶        /// Navigate to Forms in RiSE and add a form and fields.¶        /// Helpful note: the field in this case is whatever the title attribute is of the menu item¶        /// </summary>¶        /// <param name="formName"></param>¶        /// <param name="elements"></param>¶        public void NavigateAndCreateForm(string formName, Table elements, bool requireApproval = false)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(FormsLibraryPage.BaseUrl));¶¶            // create form¶            CreateForm(formName, requireApproval")
Diff(INSERT,"groupTab));¶            }¶¶            // create form¶            user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.RadGrid1.AddNew));¶            user.AttemptsTo(SendKeys.To(FormsLibraryPage.FormLibrary.FormNameInput, formName));¶            if (!string.IsNullOrEmpty(groupName))¶                user.AsksFor(ValueAttribute.Of(FormsLibraryPage.FormLibrary.FormGroupCombobox)).Should().Be(groupName);¶¶            if (requireApproval)¶                user.AttemptsTo(Check.On(FormsLibraryPage.FormLibrary.FormApprovalCheckBox));¶¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsLibraryPage.FormLibrary.AddFormButton)")
Diff(EQUAL,");¶¶            //add fields¶            foreach (var row in elements.Rows)¶            {¶")
Diff(DELETE,"                string category, field;¶")
Diff(EQUAL,"                row.TryGetValue("Category", out ")
Diff(INSERT,"var ")
Diff(EQUAL,"category);¶                row.TryGetValue("Field", out ")
Diff(INSERT,"var ")
Diff(EQUAL,"field);¶                AddFieldInForm(category, field);¶            }¶¶            // save the form ¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SaveFormButton));¶            user.AttemptsTo(Waiting.InSeconds(3)); //this is necessary because otherwise the form doesn't finish saving before the test tries to progress and it will fail.¶        }¶        #endregion¶¶        #region Form Approval¶        public void NavigateAndApproveForm()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(FormApprovalReviewPage.BaseUrl));¶            user.AttemptsTo(Waiting.InSeconds(3));¶¶            var queryComboBox = (QueryComboBoxParameter)FormApprovalReviewPage.QueryMenu.ResultsGrid.GetParameter("Main", "Submission status");¶            user.AttemptsTo(Click.On(queryComboBox.ComboBox));¶            user.AttemptsTo(SendKeys.To(queryComboBox.ComboBoxTextBox, "Submitted"));¶            user.AttemptsTo(ClickCommandButton.Submit());¶¶            user.AttemptsTo(Wait.Until(Appearance.Of(FormApprovalReviewPage.QueryMenu.ResultsGrid.FirstCellLink), IsEqualTo.True()).ForAnAdditional(30));¶¶            user.AttemptsTo(Click.On(FormApprovalReviewPage.QueryMenu.ResultsGrid.FirstCellLink));¶¶            user.AttemptsTo(Wait.Until(Appearance.Of(FormApprovalDetail.ApprovalSubmitButton), IsEqualTo.True()).ForAnAdditional(30));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(FormApprovalDetail.ApprovalSubmitButton));¶            user.AttemptsTo(Waiting.ForPageReload());¶        }¶¶        public void VerifyApprovalSubmitter(string name)¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Text.Of(FormApprovalDetail.SubmitterName)).Should().Be(name);¶        }¶        #endregion¶¶        #region Form Element Editing¶        /// <summary>¶        /// Click on an element that's been added to a form and set the setting value¶        /// </summary>¶        /// <param name="elementText"></param>¶        /// <param name="option"></param>¶        /// <param name="value"></param>¶        public void EditElementOption(string elementText, string option, string value, string uniqueId = null)¶        {¶            var user = LoggedInUser();¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(elementText, uniqueId)));¶¶            //Pause wait for loader refresh¶            user.AttemptsTo(Waiting.ForPageReload());¶¶            if (option.StartsWith("tb"))¶            {¶                //this generally means a text box¶                user.AttemptsTo(SendKeys.To(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.GetElementTextOption(option), value));¶            }¶¶            if (option.Equals("checkbox"))¶            {¶                //checkbox¶                user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionInputLocator(option, value)));¶            }¶¶            if (option.Equals("radio"))¶            {¶                //radio button¶                user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionInputLocatorById(option, value)));¶            }¶¶            if (option.StartsWith("ddl")")
Diff(INSERT," || option.StartsWith("dd")")
Diff(EQUAL,")¶            {¶                //drop down select¶                user.AttemptsTo(Select.ByText(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionSelectLocator(option), value));¶            }¶        }¶¶        /// <summary>¶        /// Set the settings for elements that have been added to a form¶        /// </summary>¶        /// <param name="element"></param>¶        /// <param name="options"></param>¶        public void EditElements(string element, Table options, string uniqueId = null)¶        {¶            foreach (var row in options.Rows)¶            {¶                string option, value;¶                row.TryGetValue("Option", out option);¶                row.TryGetValue("Value", out value);¶                EditElementOption(element, option, value, uniqueId);¶            }¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.SettingsSave));¶")
Diff(DELETE,"           ")
Diff(EQUAL,"¶            user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.SaveFormButton), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SaveFormButton));¶            //Pause wait for loader refresh, save parent form with added element setting¶            user.AttemptsTo(Waiting.ForPageReload());¶        }¶        #endregion¶¶        #region Form Element Property Verification¶        /// <summary>¶        /// Click an element and verify that a setting is enabled¶        /// </summary>¶        /// <param name="inputType"></param>¶        /// <param name="optionName"></param>¶        /// <param name="element"></param>¶        /// <param name="enabled"></param>¶        public void VerifyElementOptionEnabled(string inputType, string optionName, string element, bool enabled)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(element)));¶            user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ModalWindow), IsEqualTo.True()).ForAnAdditional(30));¶¶            (enabled == user.AsksFor(EnabledState.Of(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionInputLocator(inputType, optionName)))).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Click an element and verify a option setting value.¶        /// </summary>¶        /// <param name="inputType"></param>¶        /// <param name="optionName"></param>¶        /// <param name="element"></param>¶        /// <param name="checked"></param>¶        public void VerifyElementOptionValue(string inputType, string optionName, string element, bool? isChecked)¶        {¶            var user = LoggedInUser();¶            //Pause wait for page refresh¶            user.AttemptsTo(Waiting.InSeconds(3));¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(element)));¶¶            if (isChecked != null && inputType.Equals("checkbox"))¶            {¶                if ((bool)isChecked)¶                    user.AttemptsTo(Check.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionInputLocator(inputType, optionName)));¶                else¶                    user.AttemptsTo(Check.Off(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.OptionInputLocator(inputType, optionName)));¶            }¶¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.SettingsCancel));¶        }¶¶        /// <summary>¶        /// Verify element contains value.¶        /// </summary>¶        /// <param name="inputType">checkbox, select, input, etc.</param>¶        /// <param name="element"></param>¶        /// <param name="value"></param>¶        public void VerifyElementContainsValue(string inputType, string element, string value)")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶¶            if (inputType.Equals("select"))¶            {¶                user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.InputFieldLocator(inputType, element)), IsEqualTo.True()).ForAnAdditional(30));¶                user.AttemptsTo(Select.ByValue(FormDesignerPage.FormManagerDragAndDrop.InputFieldLocator(inputType, element), value));¶¶                if (value.Equals("Other"))¶                {¶                    user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.InputFieldLocator("input", element)), IsEqualTo.True()).ForAnAdditional(30));¶                    user.AttemptsTo(SendKeys.To(FormDesignerPage.FormManagerDragAndDrop.InputFieldLocator("input", element), "Other text option"));¶                }¶            }¶        }¶¶        /// <summary>¶        /// Verify if element is require or not.¶        /// </summary>¶        /// <param name="inputType">checkbox, select, input, etc.</param>¶        /// <param name="element"></param>¶        /// <param name="_required">required|notrequired</param>¶        public void VerifyElementRequiredOption(string inputType, string element, string _required)")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶¶            if (!string.IsNullOrEmpty(inputType) && inputType.Equals("select"))¶            {¶                user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.InputFieldLocator(inputType, element)), IsEqualTo.True()).ForAnAdditional(30));¶                user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.SubmitButton));¶                if (!string.IsNullOrEmpty(_required) && _required.Equals("required"))¶                {¶                    user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.RequiredLabel), IsEqualTo.True()));¶                    user.AsksFor(Text.Of(FormDesignerPage.FormManagerDragAndDrop.RequiredLabel)).Should().Contain("Required");¶                }")
Diff(DELETE,"         ")
Diff(EQUAL,"¶            }")
Diff(DELETE,"           ")
Diff(EQUAL,"¶        }¶¶        #endregion¶¶        #region Form Verification¶¶        /// <summary>¶        /// Verifies the field name appears in the expected places in the html string¶        /// </summary>¶        /// <param name="htmlString"></param>¶        /// <param name="field"></param>¶        /// <returns></returns>¶        public bool VerifyFieldInHTML(string htmlString, string field)¶        {¶¶            if (field.Contains("StateProvince"))¶            {¶                //special case where we need to verify existence of both input and select options¶                return (htmlString.Contains("<option>" + field) && htmlString.Contains("value=\"" + field));¶            }¶            else¶            {¶                //usually we'll have either or¶                return (htmlString.Contains("<option>" + field) || htmlString.Contains("value=\"" + field));¶            }¶¶        }¶¶        /// <summary>¶        /// Copy the html string to the clipboard and locate the expected field name in the string contents¶        /// </summary>¶        /// <param name="elements"></param>¶        public void VerifyFormHTMLElements(Table elements)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.ViewHTMLButton));¶            user.AttemptsTo(Wait.Until(Appearance.Of(FormDesignerPage.FormManagerDragAndDrop.CopyHTMLButton), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(FormDesignerPage.FormManagerDragAndDrop.CopyHTMLButton));¶            var htmlarea = _driver.FindElement(By.XPath("//textarea[contains(@id,'copyHTML')]"));¶            var htmlString = System.Net.WebUtility.HtmlDecode(htmlarea.GetAttribute("value"));¶¶            foreach (var row in elements.Rows)¶            {¶                string field;¶                row.TryGetValue("Field", out field);¶                VerifyFieldInHTML(htmlString, field).Should().BeTrue();¶            }¶        }¶        #endregion¶¶        #region PageCreation¶")
Diff(DELETE,"        ")
Diff(EQUAL,"¶        /// <summary>¶        /// Add form content to a page¶        /// </summary>¶        /// <param name="formName"></param>¶        public void AddFormContent(string formName")
Diff(INSERT,", bool createContact = false")
Diff(EQUAL,")¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddContent));¶¶            // Select the form ¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));¶")
Diff(DELETE,"            //user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));¶")
Diff(EQUAL,"            user.WaitsUntil(Existence.Of(ContentGallery.ContentType("Forms")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ContentGallery.ContentType("Forms")));¶            user.AttemptsTo(ClickCommandButton.Ok());¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            //there is so far no other way to ensure the frame with the form selections is fully loaded¶            //that doesn't fail on half of the test runs¶            user.AttemptsTo(Waiting.InSeconds(1));¶¶            // Configure¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Click.On(FormsConfigEdit.ConfigureFormSelector.Control));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(FormsConfigEdit.ConfigureFormSelector.ComboBoxControl.DropDownValueContains(formName)));¶            ")
Diff(DELETE,"user.AttemptsTo(ClickCommandButton.Save(")
Diff(INSERT,"if (createContact)¶                user.AttemptsTo(Click.On(FormsConfigEdit.NewContactRecordCheckbox.Control")
Diff(EQUAL,"));¶            user.AttemptsTo(")
Diff(DELETE,"SwitchFrame.ToParentFram")
Diff(INSERT,"ClickCommandButton.Sav")
Diff(EQUAL,"e());¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            ")
Diff(DELETE,"// TODO!! jkh This cannot save and close because it is not give the publishing name, maybe other reasons?")
Diff(INSERT,"user.AttemptsTo(SwitchFrame.ToParentFrame());¶")
Diff(EQUAL,"¶            // Save and Publish¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶¶            //a delay to make sure page is published before attempting to navigate to it¶            user.AttemptsTo(Waiting.InSeconds(3));¶        }¶¶        /// <summary>¶        /// Form save as¶        /// </summary>¶        /// <param name="saveAsType">existing|unique</param>¶        public void AttemptToSaveAs(string formSaveAsName, string saveAsType)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Click.On(FormDesignerPage.SaveAsButton));¶¶            //jQuery element fadein delay¶            user.AttemptsTo(Waiting.InSeconds(3));¶¶            if (saveAsType.Equals("existing", StringComparison.OrdinalIgnoreCase))¶            {¶                user.AttemptsTo(SendKeys.To(FormDesignerPage.SaveAsNewFormName, formSaveAsName));¶                user.AttemptsTo(Click.On(FormDesignerPage.SaveAsFormButton));¶            }¶            else¶            {¶                user.AttemptsTo(SendKeys.To(FormDesignerPage.SaveAsNewFormName, TestHelper.GenerateRandomName(formSaveAsName)));¶                user.AttemptsTo(Click.On(FormDesignerPage.SaveAsFormButton));¶            }¶        }¶¶        /// <summary>¶        /// Verify validation message state¶        /// </summary>¶        /// <param name="displayState">visible|hidden</param>¶        public void VerifyValidationMessage(string displayState)¶        {¶            var user = LoggedInUser();¶¶            //Pause wait for page refresh¶            user.AttemptsTo(Waiting.ForPageReload());¶¶            if (displayState.Equals("visible", StringComparison.OrdinalIgnoreCase))¶            {¶                user.AsksFor(Existence.Of(FormDesignerPage.SaveAsValidationMessage)).Should().BeTrue();¶            }¶            else¶            {¶                user.AsksFor(Existence.Of(FormDesignerPage.SaveAsValidationMessage)).Should().BeFalse();¶            }¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Verify form elements¶        /// </summary>¶        /// <param name="table"></param>¶        public void VerifyFormHasElements(Table table)¶        {¶            var user = LoggedInUser();¶¶            foreach (var row in table.Rows)¶            {¶                if (row.TryGetValue("Field", out var field))¶                    user.AsksFor(Existence.Of(FormDesignerPage.FormManagerDragAndDrop.SettingsModalHelper.ElementDropAreaLocator(field))).Should().BeTrue();¶            }¶        }¶¶")
Diff(EQUAL,"        public void ConvertFormToAdvancedMode(string formName)")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(FormsLibraryPage.BaseUrl));¶¶            user.AsksFor(Appearance.Of(FormsLibraryPage.FormLibraryGrid.RadGrid1.LinkInTable(formName))).Should().BeTrue();¶            user.AttemptsTo(Click.On(FormsLibraryPage.FormLibraryGrid.RadGrid1.EditButtonByLink(formName)));¶¶            //Pause wait for page refresh¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.ConvertToAdvancedModeLink));¶¶            user.AsksFor(Appearance.Of(FormsLibraryPage.FormLibrary.ProceedButton)).Should().BeTrue();¶            user.AttemptsTo(Click.On(FormsLibraryPage.FormLibrary.ProceedButton));¶¶            user.AsksFor(Appearance.Of(FormDesignerPage.SaveFormButton)).Should().BeTrue();¶            user.AttemptsTo(Click.On(FormDesignerPage.SaveFormButton));¶        }¶¶        #endregion¶¶        #region In-Page Form Interaction¶¶        /// <summary>¶        /// Set a single text box value¶        /// </summary>¶        /// <param name="field"></param>¶        /// <param name="value"></param>¶        public void SetTextInputValue(string field, string value)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SendKeys.To(FormsDisplay.TextInputField(field), value));¶        }¶¶        /// <summary>¶        /// Set a single drop down selection¶        /// </summary>¶        /// <param name="field"></param>¶        /// <param name="value"></param>¶        public void SetDropDownValue(string field, string value)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Select.ByText(FormsDisplay.DropDownField(field), value));¶        }¶¶        /// <summary>¶        /// Submit the form¶        /// </summary>¶        /// <param name="field"></param>¶        /// <param name="value"></param>¶        public void SubmitForm()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(FormsDisplay.SubmitButton));¶        }¶¶        /// <summary>¶        /// Set values for form fields¶        /// </summary>¶        /// <param name="fieldType"></param>¶        /// <param name="fields"></param>¶        public void SetFieldValues(string fieldType, Table fields")
Diff(INSERT,", string randomizedString = null")
Diff(EQUAL,")¶        {¶            //get fields and values to set¶            foreach (var row in fields.Rows)¶            {¶                string field, value;¶                row.TryGetValue("Field", out field);¶                row.TryGetValue("Value", out value);¶")
Diff(INSERT,"                if (value.Contains("Random") && randomizedString != null)¶                {¶                    value = value.Replace("Random", randomizedString);¶                }¶")
Diff(EQUAL,"                if (fieldType == "DropDown")¶                {¶                    SetDropDownValue(field, value);¶                }¶                else¶                {¶                    SetTextInputValue(field, value);¶                }¶")
Diff(INSERT,"                //clunky but sometimes we need to keep track of these¶                if (field.ToLowerInvariant().Contains("email")) NewestContact.Email = value;¶                if (field.ToLowerInvariant().Contains("lastname")) NewestContact.LastName = value;¶                if (field.ToLowerInvariant().Contains("firstname")) NewestContact.FirstName = value;¶")
Diff(EQUAL,"            }¶        }¶¶        /// <summary>¶        /// Set values for form fields, various types¶        /// </summary>¶        /// <param name="fields"></param>¶        public void SetFieldValues(Table fields)¶        {¶            //get fields and values to set¶            foreach (var row in fields.Rows)¶            {¶                string field, value, fieldType;¶                row.TryGetValue("Field", out field);¶                row.TryGetValue("Value", out value);¶                row.TryGetValue("Type", out fieldType);¶                if (fieldType == "DropDown")¶                {¶                    SetDropDownValue(field, value);¶                }¶                else¶                {¶                    SetTextInputValue(field, value);¶                }¶            }¶        }¶¶        /// <summary>¶        /// Navigate to a page with form content¶        /// </summary>¶        /// <param name="pageName"></param>¶        public void NavigateToContent(string pageName)¶        {¶            // Navigate to page¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(new ImisUrl(pageName + ".aspx")));¶        }¶¶")
Diff(INSERT,"        public void NavigateToMBRRContent(string pageName)¶        {¶            // Navigate to page¶            var user = User("Unauthenticated MBRR User");¶            user.AttemptsTo(Browse.InMemberSite(new ImisUrl(pageName + ".aspx")));¶        }¶¶")
Diff(EQUAL,"        public void CheckForRuntimeMessage()")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Existence.Of(FormsDisplay.FormRuntimeErrorMessage)).Should().BeFalse();¶        }¶¶        public void VerifyMultiInstanceAddButtonExists()")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Existence.Of(FormsDisplay.AddLinkButton)).Should().BeTrue();¶        }¶¶        public void ModifyFormValuesAndSave(Table table)")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Existence.Of(FormsDisplay.SubmitButton)).Should().BeTrue();¶¶            SetFieldValues(table);¶            SubmitForm();¶¶            TestHelper.WaitForPageReload();¶        }¶¶        public void VerifyFormSubmitterLinkLoadsProfile()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(FormApprovalReviewPage.BaseUrl));¶            user.AttemptsTo(Click.On(FormApprovalReviewPage.QueryMenu.ResultsGrid.FirstCellLink));¶            //user.AttemptsTo(Click.On(FormApprovalDetail.SubmittedByLink));¶            user.AttemptsTo(Click.On(FormApprovalDetail.SubmitterName));¶¶            TestHelper.WaitForPageReload();¶¶            user.AsksFor(Existence.Of(FormsDisplay.FormRuntimeErrorMessage)).Should().BeFalse();¶        }¶¶")
Diff(INSERT,"        public void VerifyValuesWithElements(Table table)¶        {¶            var user = LoggedInUser();¶            foreach (var row in table.Rows) {¶                string given, expected;¶                string field = "AStaticTestSource_Curr";¶                given = row["Given"];¶                expected = row["Expected"];¶                user.AttemptsTo(SendKeys.To(FormsDisplay.TextInputField(field), given));¶¶                user.AttemptsTo(Click.On(FormsDisplay.TextBoxLabelField(field))); //we need to get out of the box so the waits until works¶                user.WaitsUntil(HtmlAttribute.Of(FormsDisplay.ClientStateTextInputField(field), "value"), ContainsSubstring.Text(expected));¶¶                user.AttemptsTo(Click.On(FormsDisplay.SubmitButton));¶            }¶        }¶¶        public void VerifyElementLabelLocation(string inputType, string section, string location) ¶        {¶            var user = LoggedInUser();¶            if (inputType.Equals("checkbox"))¶                user.AsksFor(Existence.Of(FormsDisplay.LabelLocation(section, location))).Should().BeTrue();¶        }¶")
Diff(EQUAL,"        #endregion¶¶        #region In-Page Form Verification¶¶        /// <summary>¶        /// Verify that a field either exists or doesn't exist in the DOM¶        /// </summary>¶        /// <param name="field"></param>¶        /// <param name="shouldExist"></param>¶        /// <returns></returns>¶        private bool VerifyFieldExistState(IWebLocator field, bool shouldExist)¶        {¶            var user = LoggedInUser();¶            return (shouldExist == user.AsksFor(Existence.Of(field)));¶        }¶¶        /// <summary>¶        /// Verify that fields do or don't exist in the DOM¶        /// </summary>¶        /// <param name="fields"></param>¶        /// <param name="fieldType"></param>¶        /// <param name="exists"></param>¶        public void VerifyFieldsExistState(Table fields, string fieldType, bool exists)¶        {¶            foreach (var row in fields.Rows)¶            {¶                string fieldId;¶                row.TryGetValue("ID", out fieldId);¶                VerifyFieldExistState(FormsDisplay.GetLocatorByFieldType(fieldType, fieldId), exists).Should().BeTrue();¶            }¶        }¶¶        /// <summary>¶        /// Verify that a field either is or isn't visible¶        /// </summary>¶        /// <param name="field"></param>¶        /// <param name="isVisible"></param>¶        /// <returns></returns>¶        private bool VerifyFieldVisibility(IWebLocator field, bool isVisible)¶        {¶            var user = LoggedInUser();¶            return (isVisible == user.AsksFor(Appearance.Of(field)));¶        }¶¶        /// <summary>¶        /// Verify that fields are or aren't visible¶        /// </summary>¶        /// <param name="fields"></param>¶        /// <param name="fieldType"></param>¶        /// <param name="isVisible"></param>¶        public void VerifyFieldsVisibility(Table fields, string fieldType, bool isVisible)¶        {¶            foreach (var row in fields.Rows)¶            {¶                string fieldId;¶                row.TryGetValue("ID", out fieldId);¶                VerifyFieldVisibility(FormsDisplay.GetLocatorByFieldType(fieldType, fieldId), isVisible).Should().BeTrue();¶            }¶        }¶¶        public void VerifyFieldsValues(Table table, string fieldType)¶        {¶            var user = LoggedInUser();¶            foreach (var row in table.Rows)¶            {¶                string fieldId, fieldValue;¶                row.TryGetValue("ID", out fieldId);¶                row.TryGetValue("Value", out fieldValue);¶                user.AsksFor(Text.Of(FormsDisplay.GetLocatorByFieldType(fieldType, fieldId))).Should().Be(fieldValue);¶            }¶        }¶¶")
Diff(INSERT,"        public void VerifyCurrentUrl(string url)¶        {¶            _driver.Url.Should().Contain(url.ToString());¶        }¶¶")
Diff(EQUAL,"        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Forms/FormTestMethods.cs)
Diff(EQUAL,"{¶    public class EnterGiftsTestMethods : TestMethodBase¶    {¶        public EnterGiftsPage GiftEntryPage { get; }¶        public FindGiftsPage FindGiftsPage { get; }¶        public InvoicesPage InvoicesPage { get; set; }¶        public AdjustmentLogsPage AdjustmentLogsPage { get; set; }¶        public GiftInformationPage GiftInformationPage { get; set; }¶        public UserMessageTestMethods UserMessageTestMethods { get; }¶        public GiftData PersistedGiftInfo { get; set; }¶        public PaymentDetails PaymentDetails { get; set; }¶¶        public EnterGiftsTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            GiftEntryPage = new EnterGiftsPage();¶            FindGiftsPage = new FindGiftsPage();¶            InvoicesPage = new InvoicesPage();¶            GiftInformationPage = new GiftInformationPage();¶            UserMessageTestMethods = new UserMessageTestMethods(driver, context);¶            AdjustmentLogsPage = new AdjustmentLogsPage();¶            PaymentDetails = new PaymentDetails("");¶        }¶¶        //helpers for shorthand¶        public AsiGiftEntry GiftEntryAppMain¶        {¶            get { return GiftEntryPage.GiftEntryApp; }¶        }¶        public AppGiftList GiftEntryFormMain¶        {¶            get { return GiftEntryAppMain.AppGiftEntryForm.AppGiftList; }¶        }¶¶        public AppSingleGift GiftEntryPanelContent¶        {¶            get { return GiftEntryFormMain.GiftEntryAccordionPanel.Content; }¶        }¶¶        public AppAdjustmentTemplate GiftAdjustmentPanelContent¶        {¶            get { return GiftEntryAppMain.AppGiftEntryForm.AppAdjustmentList.AdjustmentAppAccordionPanel.Content; }¶        }¶¶        public FindInvoiceModal FindInvoiceModal¶        {¶            get { return GiftAdjustmentPanelContent.AppAdjustmentGiftFinder.FindInvoiceModal; }¶        }¶¶¶        public void SelectGiftEntryOption(string giftEntryType)¶        {¶            var user = User("View Gift Adjustment User");¶            user.AttemptsTo(Browse.InImis(GiftEntryPage.BaseUrl));¶            user.AttemptsTo(Select.ByText(GiftEntryAppMain.SelectedBatch.GetLocator, giftEntryType));¶        }¶¶        public void AdjustGift(AdjustGiftBatchData data)¶        {¶            var user = User("View Gift Adjustment User");¶            user.AttemptsTo(Browse.InImis(GiftEntryPage.BaseUrl));¶            user.AttemptsTo(Select.ByText(GiftEntryAppMain.SelectedBatch.GetLocator, "New adjustment batch"));¶            user.AttemptsTo(SendKeys.To(GiftEntryAppMain.BatchDate.Locator, ConvertDateKeyword(data.BatchDate)));¶        }¶¶        private string ConvertDateKeyword(string date)¶        {¶            switch (date)¶            {¶                case "TODAY":¶                    {¶                        return DateTime.Now.ToString("M/d/yyyy");¶                    }¶                case "YESTERDAY":¶                    {¶                        return DateTime.Now.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("M/d/yyyy");¶                    }¶                default:¶                    return date;¶            }¶        }¶¶        public void SaveGiftAdjustment()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(GiftAdjustmentPanelContent.AppSingleGift.SaveButton));¶        }¶¶        public void VerifySoftCreditValues(SoftCreditData softCredit, int row)¶        {¶            var user = User("View Gift Adjustment User");¶¶            user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SearchBox)).Should().Be(softCredit.SoftCredit);¶            user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.SoftCreditGrid.SoftCreditAmount(row))).Should().Be(softCredit.Amount);¶            user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.SoftCreditGrid.SoftCreditPercentage(row))).Should().Be(softCredit.Percentage);¶        }¶¶        public void EnterSoftCreditAdjustments(SoftCreditData softCredit, int row)¶        {¶            var user = User("Enter Gift Adjustment User");¶            if (!(string.IsNullOrEmpty(softCredit.SoftCredit) && string.IsNullOrEmpty(softCredit.Percentage) && string.IsNullOrEmpty(softCredit.Amount)))¶            {¶                    SetFinderSelection(user, GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row), softCredit.SoftCredit);¶                    user.AttemptsTo(Click.On(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SearchBox));¶                    user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SearchBox, softCredit.SoftCredit));¶                if (!string.IsNullOrEmpty(softCredit.Amount))¶                {¶                    user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditAmount(row), ""));¶                    user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditAmount(row), softCredit.Amount));¶                }¶                if (!string.IsNullOrEmpty(softCredit.Percentage))¶                {¶                    user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditPercentage(row), ""));¶                    user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditPercentage(row), softCredit.Percentage));¶                }¶            }¶        }¶¶        public void EnterGiftAdjustment(AdjustmentData data)¶        {¶            var user = User("Enter Gift Adjustment User");¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftAdjustmentPanelContent.AppSingleGift.Amount.Locator, data.Amount));¶            if (data.SourceCode != null)¶            {¶                SetFinderSelection(user, GiftAdjustmentPanelContent.AppSingleGift.SourceCode, data.SourceCode);¶            }¶            if (data.GiftItem != null)¶            {¶                SetFinderSelection(user, GiftAdjustmentPanelContent.AppSingleGift.GiftItem, data.GiftItem);¶            }¶¶            user.AttemptsTo(SetWhenProvided.TextBox(ListAs.ListAsNameTextbox, data.ListAs));¶            if (data.ListAsAnonymous)¶                user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.ListAsAnonymous.GetLocator, data.ListAsAnonymous));¶¶            user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.DoNotReceipt.GetLocator, data.DoNotReceipt));¶¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.Details.Locator, data.Details));¶            if (data.Request != null)¶                SetFinderSelection(user, GiftEntryPanelContent.Request, data.Request);¶            if (data.SoftCredit != null)¶                SetFinderSelection(user, GiftEntryPanelContent.SoftCredit, data.SoftCredit);¶            if (data.MovesManager != null)¶                SetFinderSelection(user, GiftEntryPanelContent.MovesManager, data.MovesManager);¶¶            user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.Tribute.GetLocator, data.Tribute));¶            if (data.Tribute)¶                EnterTributeData(user, data.TributeType, data.TributeeName, data.TributeMessage, data.NotifyContact);¶¶            //to switch focus away from finders¶            user.AttemptsTo(Click.On(GiftAdjustmentPanelContent.AppSingleGift.Amount.Locator));¶¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftAdjustmentPanelContent.AppSingleGift.AdjustmentDate.Locator, ConvertDateKeyword(data.GiftDate)));¶            ")
Diff(INSERT,"user.AttemptsTo(Waiting.InSeconds(2));")
Diff(EQUAL,"¶")
Diff(DELETE,"")
Diff(EQUAL,"        }¶¶        /// <summary>¶        /// Enters the data for Gifts¶        /// </summary>¶        /// <param name="giftType">Type of gift (installment, pledge, etc.)</param>¶        /// <param name="giftData">Gift data being passed in from feature</param>¶        /// <param name="cartData">Cart data being passed in from feature to pay for items</param>¶        /// <param name="giftIndex"></param>¶        public void EnterGift(string giftType, GiftData giftData, CartData cartData, int giftIndex = 0)¶        {¶            var user = User("View GiftItem Entry User");¶¶            user.AttemptsTo(Browse.InImis(GiftEntryPage.BaseUrl));¶            user.AttemptsTo(Click.On(GiftEntryAppMain.CreateBatchButton.GetLocator));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultAmount.Locator, giftData.DefaultAmount));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultGiftItem.Locator, giftData.DefaultGiftItem));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultSourceCode.Locator, giftData.DefaultSourceCode));¶¶            user.AttemptsTo(Select.ByText(GiftEntryPanelContent.DonationType.Locator, giftType));¶            for (int cycle = 0; cycle < giftData.NumGifts; cycle++)¶            {¶                EnterGiftTypeInfo(user, giftType, giftData);¶¶                if (!string.IsNullOrEmpty(cartData.CardNumber))¶                { ¶                    user.AttemptsTo(CheckOut.WithCreditCardPayment(cartData).DonationPayment().SkipSubmitOrderButton().IsAngular());¶                }¶                user.AttemptsTo(Waiting.InSeconds(1));¶                PersistedGiftInfo = GetGiftInfo(true);¶                user.AttemptsTo(Click.On(GiftEntryPanelContent.SaveButton));¶                //Need to wait for changes to take place¶                user.AttemptsTo(Waiting.InSeconds(3));¶            }¶            user.AttemptsTo(Click.On(GiftEntryAppMain.ProcessBatchButton.GetLocator));¶        }¶¶        /// <summary>¶        /// Just create the gift, don't save it.¶        /// </summary>¶        /// <param name="giftType"></param>¶        /// <param name="giftData"></param>¶        /// <param name="cartData"></param>¶        public void CreateSingleGift(string giftType, GiftData giftData, CartData cartData)¶        {¶            var user = User("View GiftItem Entry User");¶¶            user.AttemptsTo(Browse.InImis(GiftEntryPage.BaseUrl));¶            user.AttemptsTo(Click.On(GiftEntryAppMain.CreateBatchButton.GetLocator));¶            ¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultAmount.Locator, giftData.DefaultAmount));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultGiftItem.Locator, giftData.DefaultGiftItem));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryFormMain.DefaultSourceCode.Locator, giftData.DefaultSourceCode));¶¶            user.AttemptsTo(Select.ByText(GiftEntryPanelContent.DonationType.Locator, giftType));¶¶            EnterGiftTypeInfo(user, giftType, giftData);¶¶            if (!string.IsNullOrEmpty(cartData.CardNumber))¶            {¶                user.AttemptsTo(CheckOut.WithCreditCardPayment(cartData).DonationPayment().SkipSubmitOrderButton().IsAngular());¶            }¶            user.AttemptsTo(Waiting.InSeconds(1));¶            PersistedGiftInfo = GetGiftInfo(true);¶        }¶¶        public class SoftCreditData¶        {¶            public string SoftCredit { get; set; }¶            public string Percentage { get; set; }¶            public string Amount { get; set; }¶        }¶¶        public List<SoftCreditData> PersistedSoftCreditData { get; set; }¶¶        public void ExpandSoftCreditEntry()¶        {¶            var user = User("View GiftItem Entry User");¶            //expand grid¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.ShowSoftCreditDetails.GetLocator));¶        }¶¶        public void EnterSoftCreditData(SoftCreditData softCreditData, int row)¶        {¶            var user = User("View GiftItem Entry User");¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SearchBox));¶            user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SearchBox, softCreditData.SoftCredit));¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.SoftCreditGrid.SoftCreditID(row).SelectGridRowByIndex(1)));¶            if (!string.IsNullOrEmpty(softCreditData.Amount))¶            {¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditAmount(row), ""));¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditAmount(row), softCreditData.Amount));¶            }¶            if (!string.IsNullOrEmpty(softCreditData.Percentage))¶            {¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditPercentage(row), ""));¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.SoftCreditGrid.SoftCreditPercentage(row), softCreditData.Percentage));¶            }¶            //click outside to make sure value changes¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));¶        }¶¶        public void SaveGiftEntry(bool multiSoftCredit)¶        {¶            var user = User("View GiftItem Entry User");¶            PersistedGiftInfo = GetGiftInfo(true, multiSoftCredit);¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.SaveButton));¶        }¶¶        /// <summary>¶        /// Enters the Gift details¶        /// </summary>¶        /// <param name="user">User performing the action</param>¶        /// <param name="giftType">Type of gift (installment, pledge, etc.)</param>¶        /// <param name="giftData">Gift data being passed in from feature</param>¶        public void EnterGiftTypeInfo(IActor user, string giftType, GiftData giftData)¶        {¶            if (giftData.Donor.Equals("New Contact"))¶            {¶                user.AttemptsTo(Click.On(GiftEntryPage.DonorAddNewContact));¶                user.AttemptsTo(Click.On(GiftEntryPage.AddPersonButton));¶                user.AttemptsTo(SendKeys.To(GiftEntryPage.FirstName, giftData.FirstName));¶                user.AttemptsTo(SendKeys.To(GiftEntryPage.LastName, giftData.LastName));¶                ")
Diff(DELETE,"Waiting.ForPageReload(")
Diff(INSERT,"user.AttemptsTo(Waiting.InSeconds(2)")
Diff(EQUAL,");¶                user.AttemptsTo(Click.On(GiftEntryPage.NewContactSave));¶                ")
Diff(DELETE,"Waiting.ForPageReload(")
Diff(INSERT,"user.AttemptsTo(Waiting.InSeconds(2)")
Diff(EQUAL,");¶                _context.UpsertData("FirstName", giftData.FirstName);¶                _context.UpsertData("LastName", giftData.LastName);¶")
Diff(DELETE,"                Waiting.ForPageReload();¶")
Diff(EQUAL,"            }¶            else if (giftData.Donor.Equals("New Organization"))¶            {¶                user.AttemptsTo(Click.On(GiftEntryPage.DonorAddNewContact));¶                user.AttemptsTo(Click.On(GiftEntryPage.AddOrgButton));¶                user.AttemptsTo(SendKeys.To(GiftEntryPage.OrgName, giftData.OrgName));¶                user.AttemptsTo(SendKeys.To(GiftEntryPage.Email, giftData.Email));¶                user.AttemptsTo(Click.On(GiftEntryPage.NewContactSave));¶                _context.UpsertData("Organization", giftData.OrgName);¶                _context.UpsertData("Email", giftData.Email);¶            }¶            else¶            {¶                //convoluted way we seem to have to deal with angular finders¶                user.AttemptsTo(Click.On(GiftEntryPanelContent.Donor.SearchBox));¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.Donor.SearchBox, giftData.Donor));¶                user.AttemptsTo(Click.On(GiftEntryPanelContent.Donor.SelectRowByIndex(1)));¶            }¶¶            user.AttemptsTo(SetWhenProvided.TextBox(ListAs.ListAsNameTextbox, giftData.ListAs));¶            if (giftData.ListAsAnonymous)¶                user.AttemptsTo(SetWhenProvided.CheckBox(ListAs.ListAsAnonymousCheckBox, giftData.ListAsAnonymous));¶            if (giftData.Amount.Contains("Random"))¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.Amount.Locator, TestHelper.GenerateRandomNumber(1, 1000).ToString()).UsingClearMethod());¶            else¶                user.AttemptsTo(SendKeys.To(GiftEntryPanelContent.Amount.Locator, giftData.Amount).UsingClearMethod());¶            user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.DoNotReceipt.GetLocator, giftData.DoNotReceipt));¶¶            //Removed Pledge Payment because the common data entering is extracted already¶            switch (giftType)¶            {¶                case "Gift":¶                    EnterMainGiftData(user, giftData);¶                    //to change focus¶                    user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));¶                    break;¶                case "Pledge":¶                    EnterMainGiftData(user, giftData);¶                    user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));¶                    break;¶                case "Installment Pledge":¶                    EnterMainGiftData(user, giftData);¶                    user.AttemptsTo(SetWhenProvided.DropDown(Installment.FrequencyDropdown, giftData.Frequency));¶                    user.AttemptsTo(SetWhenProvided.TextBox(Installment.NumberOfPaymentsTextbox, giftData.NumberOfInstallments).Clear());¶                    user.AttemptsTo(SetWhenProvided.TextBox(Installment.FirstInstallmentDateTextbox, giftData.FirstIntallment).Clear());¶                    //the installment table doesn't update until focus leaves the above textbox¶                    user.AttemptsTo(Click.On(Installment.NumberOfPaymentsTextbox));¶                    user.AttemptsTo(Waiting.InSeconds(1));¶                    break;¶                default:¶                    break;¶            }¶        }¶¶        public void SetFinderSelection(IActor user, AsiCommonFinder finder, string value)¶        {¶            user.AttemptsTo(Click.On(finder.SearchBox));¶            user.AttemptsTo(SendKeys.To(finder.SearchBox, value));¶            user.AttemptsTo(Click.On(finder.SelectRowByIndex(1)));¶        }¶¶        public void EnterMainGiftData(IActor user, GiftData giftData)¶        {¶            SetFinderSelection(user, GiftEntryPanelContent.GiftItem, giftData.GiftItem);¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.Details.Locator, giftData.Details));¶            if (giftData.Request != null)¶                SetFinderSelection(user, GiftEntryPanelContent.Request, giftData.Request);¶            if (giftData.SourceCode != null)¶                SetFinderSelection(user, GiftEntryPanelContent.SourceCode, giftData.SourceCode);¶            if (giftData.SoftCredit != null)¶                SetFinderSelection(user, GiftEntryPanelContent.SoftCredit, giftData.SoftCredit);¶            if (giftData.MovesManager != null)¶                SetFinderSelection(user, GiftEntryPanelContent.MovesManager, giftData.MovesManager);¶            //Need to wait a bit¶            user.AttemptsTo(Waiting.InSeconds(5));¶            user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPanelContent.Tribute.GetLocator, giftData.Tribute));¶            if (giftData.Tribute)¶                EnterTributeData(user, giftData);¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.Details.Locator, giftData.Details));¶            user.AttemptsTo(SetWhenProvided.CheckBox(GiftEntryPage.AddGiftAid, giftData.GiftAid));¶            user.AttemptsTo(SetWhenProvided.DropDown(GiftEntryPage.GiftAidDeclarationSelection, giftData.GiftAidDeclaration));¶        }¶¶        public void EnterTributeData(IActor user, string type, string name, string message, string notifyContact)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(GiftEntryPanelContent.TributeType.GetLocator, type));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.TributeeName.GetLocator, name));¶            user.AttemptsTo(SetWhenProvided.TextBox(GiftEntryPanelContent.TributeMessage.GetLocator, message));¶            if (notifyContact != null)¶                SetFinderSelection(user, GiftEntryPanelContent.NotifyContact, notifyContact);¶        }¶¶        public void EnterTributeData(IActor user, GiftData giftData)¶        {¶            EnterTributeData(user, giftData.TributeType, giftData.TributeeName, giftData.TributeMessage, giftData.NotifyContact);¶        }¶¶        public void ClickCreateBatch()¶        {¶            var user = User("Click Create Batch User");¶            user.AttemptsTo(Click.On(GiftEntryAppMain.CreateBatchButton.GetLocator));¶            user.AttemptsTo(Waiting.ForPageReload());¶        }¶¶        public void VerifyGiftAppMessage(string message)¶        {¶            var user = LoggedInUser();¶            var ")
Diff(DELETE,"t")
Diff(INSERT,"m")
Diff(EQUAL,"es")
Diff(INSERT,"sageElemen")
Diff(EQUAL,"t = GiftEntryPage.GiftEntryApp.UserMessage.GetLocator(message);¶            user.AttemptsTo(Wait.Until(Appearance.Of(")
Diff(DELETE,"tes")
Diff(INSERT,"messageElement), IsEqualTo.True()));¶        }¶¶        public void VerifyGiftAppReceiptMessage(string message)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(GiftEntryPanelContent.Amount.Locator));//need to make sure focus isn't on date for message to appear¶            var messageElement = GiftEntryPage.GiftEntryApp.ReceiptMessage.GetLocator(message);¶            user.AttemptsTo(Wait.Until(Appearance.Of(messageElemen")
Diff(EQUAL,"t), IsEqualTo.True()));¶        }¶¶        public void VerifyGiftAppDateMessage(string message, bool isDisplayed = true)¶        {¶            var user = LoggedInUser();¶            if (!isDisplayed)¶            {¶                user.AsksFor(Existence.Of(GiftEntryAppMain.DateMessage(message))).Should().BeFalse();¶            }¶            else¶            {¶                user.AsksFor(Existence.Of(GiftEntryAppMain.DateMessage(message))).Should().BeTrue();¶            }¶        }¶¶        public void VerifyField(string fieldName, bool disabled, bool required, string fieldValue)¶        {¶            var user = User("View Gift Entry User");¶            switch (fieldName)¶            {¶                case "BatchDate":¶                    {¶                        user.AsksFor(Existence.Of(GiftEntryAppMain.BatchDate.RequiredLocator)).Should().Be(required);¶                        user.AsksFor(Existence.Of(GiftEntryAppMain.BatchDate.DisabledLocator)).Should().Be(disabled);¶                        user.AsksFor(Text.Of(GiftEntryAppMain.BatchDate.Locator)).Should().Be(fieldValue);¶                    }¶                    break;¶            }¶        }¶¶        public void VerifyReadOnlyGiftItem()¶        {¶            var user = User("View Gift Item User");¶            user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.GiftItemDisplayValue.ReadOnlyLocator));¶        }¶¶        public void VerifyReadOnlyAdjustedDate(string expectedDate)¶        {¶            var user = User("Verify read only date user");¶            user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.GiftDateText.Locator)).Should().BeFalse();¶            user.AsksFor(Text.Of(GiftAdjustmentPanelContent.AppSingleGift.ReadOnlyPledgeDate.Locator)).Should().Be(ConvertDateKeyword(expectedDate));¶        }¶¶        public void VerifyGiftDates(string originalDate, string adjustedDate, string giftType)¶        {¶            var user = User("Verify gift dates user");¶            user.AsksFor(Text.Of(GiftAdjustmentPanelContent.AppSingleGift.ReadOnlyPledgeDate.Locator)).Should().Be(ConvertDateKeyword(originalDate));¶            user.AsksFor(ValueAttribute.Of(GiftAdjustmentPanelContent.AppSingleGift.AdjustmentDateEditable.GetLocatorForQuestion())).Should().Be(ConvertDateKeyword(adjustedDate));¶        }¶¶        public GiftData GetGiftInfo(bool originalGift, bool setSoftCredit = true)¶        {¶            var user = User("View invoice number user");¶            var giftInfo = new GiftData() {¶                ListAs = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.ListAs.GetLocator)),¶                ListAsAnonymous = user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.ListAsAnonymous.Checked(true))),¶                Amount = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.Amount.Locator)),¶                Request = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.Request.GetLocatorForQuestion())),¶                GiftItem = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.GiftItem.GetLocatorForQuestion())),¶                SourceCode = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.SourceCode.GetLocatorForQuestion())),¶                MovesManager = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.MovesManager.GetLocatorForQuestion())),¶                Donor = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.Donor.GetLocatorForQuestion())),¶                Tribute = user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.Tribute.Checked(true))),¶                DoNotReceipt = user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.DoNotReceipt.Checked(true)))¶            };¶            if (setSoftCredit) //if this is false it means we have multiple soft credits and will set that data separately¶                giftInfo.SoftCredit = user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.SoftCredit.GetLocatorForQuestion()));¶            if (!originalGift)¶                giftInfo.InvoiceNumber = user.AsksFor(Text.Of(GiftAdjustmentPanelContent.AppSingleGift.InvoiceNumberLink.Locator));¶            return giftInfo;¶        }¶¶        public void VerifyGiftInfo(GiftData expectedInfo)¶        {¶            var giftInfo = GetGiftInfo(String.IsNullOrEmpty(expectedInfo.InvoiceNumber));¶            giftInfo.MovesManager.Should().Be(expectedInfo.MovesManager);¶            giftInfo.SoftCredit.Should().Be(expectedInfo.SoftCredit);¶            giftInfo.Tribute.Should().Be(expectedInfo.Tribute);¶        }¶¶        public void NavigateToAdjustmentLogs()¶        {¶            var user = User("Find Adjustment Logs User");¶            user.AttemptsTo(Browse.InImis(AdjustmentLogsPage.BaseUrl));¶        }¶¶        public void VerifyAdjustmentLogs(AdjustmentLogData logData)¶        {¶            var user = User("Find Adjustment Logs User");¶            var query = AdjustmentLogsPage.SelectAQuery.Queries.Get("Gift Adjustment Logs");¶            var invoice = query.Parameters.Get("Invoice") as QueryTextParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(invoice.Textbox, logData.Invoice));¶¶            var property = query.Parameters.Get("Property contains") as QueryTextParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(property.Textbox, logData.Property));¶¶            user.AttemptsTo(Click.On(AdjustmentLogsPage.SelectAQuery.Queries.Get("Gift Adjustment Logs").Find));¶            //takes a while to load sometimes¶            user.AttemptsTo(Waiting.ForPageReload());¶¶            user.AsksFor(Text.Of(AdjustmentLogsPage.OldValue)).Should().Be(logData.OldValue);¶            user.AsksFor(Text.Of(AdjustmentLogsPage.NewValue)).Should().Be(logData.NewValue);¶        }¶¶        public void VerifyAdjustmentLogInvoiceNumberChange(AdjustmentLogData logData, bool changed = true)¶        {¶            //get top row which by default should be from the most recent adjustment¶            //verify the invoice¶            var user = User("Find Adjustment Logs User");¶            user.AttemptsTo(Browse.InImis(AdjustmentLogsPage.BaseUrl));¶            var query = AdjustmentLogsPage.SelectAQuery.Queries.Get("Gift Adjustment Logs");¶            var invoice = query.Parameters.Get("Invoice") as QueryTextParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(invoice.Textbox, logData.Invoice));¶            user.AttemptsTo(Click.On(AdjustmentLogsPage.SelectAQuery.Queries.Get("Gift Adjustment Logs").Find));¶            //takes a while to load sometimes¶            user.AttemptsTo(Waiting.ForPageReload());¶            var oldInvoice = user.AsksFor(Text.Of(AdjustmentLogsPage.Invoice));¶            oldInvoice.Should().Be(logData.Invoice);¶            if (changed)¶                user.AsksFor(Text.Of(AdjustmentLogsPage.NewInvoice)).Should().NotBe(oldInvoice);¶            else¶                String.IsNullOrWhiteSpace(user.AsksFor(Text.Of(AdjustmentLogsPage.NewInvoice))).Should().BeTrue();¶        }¶¶        public void FindGiftToAdjust(GiftSearchData giftSearchData)¶        {¶            var user = User("Find Gift To Adjust User");¶            user.AttemptsTo(Click.On(FindInvoiceModal.FindGiftsButton.GetLocator));¶            user.AttemptsTo(Click.On(FindInvoiceModal.DonorIdFinder.SearchBox));¶            if (!String.IsNullOrEmpty(giftSearchData.Donor))¶                user.AttemptsTo(SendKeys.To(FindInvoiceModal.DonorIdFinder.SearchBox, giftSearchData.Donor));¶            else¶                user.AttemptsTo(SendKeys.To(FindInvoiceModal.DonorIdFinder.SearchBox, $"{giftSearchData.FirstName} {giftSearchData.LastName}"));¶            user.AttemptsTo(Click.On(FindInvoiceModal.DonorIdFinder.SelectRowByIndex(1)));¶            user.AttemptsTo(Select.ByText(FindInvoiceModal.GiftType.GetLocator, giftSearchData.Type));¶            user.AttemptsTo(Click.On(FindInvoiceModal.FindButton.GetLocator));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(Click.On(FindInvoiceModal.ResultsGrid.FirstCellLink));¶        }¶¶        public void ClickProcessBatch()¶        {¶            var user = User("Click Process Batch User");¶            Waiting.ForPageReload();¶            user.AttemptsTo(Click.On(GiftEntryAppMain.ProcessBatchButton.GetLocator));¶        }¶¶        public void FindGift(GiftSearchData giftSearchData)¶        {¶            var user = User("Find Gift User");¶            user.AttemptsTo(Browse.InImis(FindGiftsPage.BaseUrl));¶            if (giftSearchData.Type == "Pledge")¶            {¶                user.AttemptsTo(Select.ByText(FindGiftsPage.FindGiftsSelect, "Pledges"));¶                var query = FindGiftsPage.SelectAQuery.Queries.Get("By common giving criteria");¶                var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;¶                user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, $"{giftSearchData.FirstName} {giftSearchData.LastName}"));¶                user.AttemptsTo(Click.On(FindGiftsPage.FindButton));¶            }¶            else¶            {¶                var query = FindGiftsPage.SelectAQuery.Queries.Get("By common giving criteria");¶                var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;¶                var giftAmount = query.Parameters.Get("Gift amount greater than or equal to") as QueryTextParameter;¶                var sourceCode = query.Parameters.Get("Source code contains") as QueryTextParameter;¶                user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, $"{giftSearchData.FirstName} {giftSearchData.LastName}"));¶                user.AttemptsTo(SetWhenProvided.TextBox(giftAmount.Textbox, giftSearchData.Amount));¶                user.AttemptsTo(SetWhenProvided.TextBox(sourceCode.Textbox, giftSearchData.SourceCode));¶                user.AttemptsTo(Click.On(query.Find));¶            }¶        }¶¶        public void VerifyGiftResultCount(int resultCount)¶        {¶            var user = User("Find Gift User");¶            user.WaitsUntil(Appearance.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.True());¶            user.AsksFor(FindGiftsPage.SelectAQuery.GetRowCount()).Should().Be(resultCount);¶        }¶¶        public void VerifyGiftDetails(Table table, string giftType)¶        {¶            var user = User("Find Gift User");¶            user.WaitsUntil(Appearance.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.True());¶            if (giftType == "Gift")¶                user.AttemptsTo(Click.On(FindGiftsPage.ViewDetails(1)));¶            else¶                user.AttemptsTo(Click.On(FindGiftsPage.ViewPledgeDetails(1)));¶            user.AttemptsTo(Waiting.ForPageReload());¶¶            foreach (var row in table.Rows)¶            {¶                string section, key, val;¶                row.TryGetValue("Section", out section);¶                row.TryGetValue("Key", out key);¶                row.TryGetValue("Value", out val);¶                if (section == "Gift Details")¶                {¶                    user.AsksFor(Text.Of(GiftInformationPage.GiftDetails.QueryType(key))).Should().Be((key == "Transactiondate") ? ConvertDateKeyword(val) : val);¶                }¶                else if (section == "Pledge Details")¶                {¶                    user.AsksFor(Text.Of(GiftInformationPage.PledgeDetails.QueryType(key))).Should().Be((key == "Pledgedate") ? ConvertDateKeyword(val) : val);¶                }¶                else if (section == "Accounting")¶                {¶                    user.AsksFor(Text.Of(GiftInformationPage.Accounting.QueryType(key))).Should().Be(val);¶                }¶            }¶        }¶¶        public void GetInvoiceCount(GiftData giftData, int expectedCount)¶        {¶            var user = User("Find Invoice User");¶            FindInvoice(giftData);¶            user.AsksFor(InvoicesPage.SelectAQuery.GetRowCount()).Should().Be(expectedCount);¶        }¶¶        public void FindInvoice(GiftData giftData)¶        {¶            var user = User("Find Invoice User");¶            user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶            var query = InvoicesPage.SelectAQuery.Queries.Get("All invoices");¶            var billToName = query.Parameters.Get("Bill to name contains") as QueryTextParameter;¶            var giftType = query.Parameters.Get("Type") as QueryComboBoxParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(billToName.Textbox, $"{giftData.FirstName} {giftData.LastName}"));¶            user.AttemptsTo(Click.On(query.Find));¶            user.AttemptsTo(Waiting.InSeconds(2));¶        }¶¶        public void FindAndViewInvoice(GiftData giftData)¶        {¶            var user = User("Find Invoice User");¶            FindInvoice(giftData);¶            user.WaitsUntil(Appearance.Of(InvoicesPage.SelectAQuery.FirstCell), IsEqualTo.True());¶            user.AttemptsTo(Click.On(InvoicesPage.SelectAQuery.FirstCellLink));¶        }¶¶        public void FindAndPayPledge(GiftData giftData, CartData cartData)¶        {¶            var user = User("Find Invoice User");¶            FindInvoice(giftData);¶            user.WaitsUntil(Appearance.Of(InvoicesPage.SelectAQuery.FirstCell), IsEqualTo.True());¶            user.AttemptsTo(Click.On(InvoicesPage.SelectAQuery.FirstCellLink)); //should be the one dated the most recent for this person¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(InvoicesPage.InvoiceDetailPage.NewInvoiceDetailCommon.PayInvoiceButton));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(CheckOut.WithMainCheckingAccount(cartData));¶        }¶¶        public void VerifyDefaultAdjustGiftRequestValue(GiftData expectedGiftData)¶        {¶            var giftData = GetGiftInfo(false);¶            (expectedGiftData.Request == giftData.Request).Should().BeTrue();¶        }¶¶        public void Verify(string expected, string actual)¶        {¶            if (expected != null)¶                expected.Should().Be(actual);¶        }¶¶        public void VerifyDefaultAdjustGiftValues(GiftData expectedGiftData)¶        {¶            var user = LoggedInUser();¶            var giftData = GetGiftInfo(false);¶            //only verify string fields if present¶            Verify(expectedGiftData.Donor, giftData.Donor);¶            Verify(expectedGiftData.ListAs, giftData.ListAs);¶            Verify(expectedGiftData.Amount, giftData.Amount);¶            if (!string.IsNullOrEmpty(expectedGiftData.AmountPaid))¶            {¶                user.AsksFor(ValueAttribute.Of(GiftEntryPanelContent.AmountPaid.Locator)).Should().Be(expectedGiftData.AmountPaid);¶            }¶            Verify(expectedGiftData.GiftItem, giftData.GiftItem);¶            Verify(expectedGiftData.SourceCode, giftData.SourceCode);¶            Verify(expectedGiftData.SoftCredit, giftData.SoftCredit);¶            Verify(expectedGiftData.MovesManager, giftData.MovesManager);¶            (expectedGiftData.Tribute == giftData.Tribute).Should().BeTrue();¶        }¶¶        public void VerifyHiddenAdjustGiftFields(int level)¶        {¶            var user = LoggedInUser();¶¶            if (level == 3)¶            {¶                //verify the payment fields are hidden¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.PaymentMethod.GetLocatorForQuestion())).Should().BeFalse();¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.CheckNumber.GetLocatorForQuestion())).Should().BeFalse();¶                //to add: credit card locators¶¶                //verify the gift aid fields are hidden¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.GiftAid.GetLocator)).Should().BeFalse();¶            }¶        }¶¶        public void VerifyReadOnlyAdjustGiftFields(int level, string type = "gift")¶        {¶            var user = LoggedInUser();¶            ¶            if (level == 3)¶            {¶                //verify donor and gift item are read only¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.GiftItem.ReadOnlyLocator)).Should().Be(true);¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.Donor.ReadOnlyLocator)).Should().Be(true);¶            }¶            if (level == 4)¶            {¶                user.AsksFor(Existence.Of(GiftEntryPanelContent.Donor.ReadOnlyLocator)).Should().Be(true);¶            }¶        }¶¶        public void VerifyReadOnlyAdjustRequestFields()¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Existence.Of(GiftEntryPanelContent.Request.ReadOnlyLocator)).Should().Be(true);¶        }¶¶        public void VerifyReadOnlyListAsField()¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.ListAsAnonymous.Checked(true))).Should().BeTrue();¶            user.AsksFor(ValueAttribute.Of(GiftAdjustmentPanelContent.AppSingleGift.ListAs.GetLocator)).Should().Be("ANONYMOUS");¶            user.AsksFor(Existence.Of(GiftAdjustmentPanelContent.AppSingleGift.ListAs.ReadOnlyLocator)).Should().Be(true);¶        }¶¶        public void VerifyBalance(string balance)¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be(balance);¶        }¶¶        public void VerifyCreditAmount(string amount)¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceAdjustmentsGrid.Cell(1, 3))).Should().Be("Credit");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceAdjustmentsGrid.Cell(1, 5))).Should().Be(amount);¶        }¶¶        public void VerifyDebitAmount(string amount)¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceAdjustmentsGrid.Cell(1, 3))).Should().Be("Debit");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.InvoiceAdjustmentsGrid.Cell(1, 5))).Should().Be(amount);¶        }¶¶        public void ViewInvoicePayment()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsGrid.FirstCellLink));¶        }¶¶        public void ReversePayment()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.AdjustPaymentButton));¶            Waiting.ForPageReload();¶            user.AttemptsTo(Select.ByText(PaymentDetails.RefundDisplay.AdjustmentType, "Reverse the payment"));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));¶        }")
Diff(INSERT,"¶¶        public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)¶        {¶            var user = LoggedInUser();¶¶            user.WaitsUntil(FindGiftsPage.SelectAQuery.GetRowCount(), IsEqualTo.Value(1));¶            user.WaitsUntil(Text.Of(FindGiftsPage.SelectAQuery.FirstCell), IsEqualTo.Value(id));¶        }")
Diff(EQUAL,"¶    }¶}")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Fundraising/EnterGiftsTestMethods.cs)
Diff(EQUAL,"{¶    public class GiftAidTestMethods : GiftAidProcessClaimsTestMethods¶    {¶        public GiftAidTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            GiftAidPage = new GiftAidPage();¶            ManageGiftAidClaimsPage = new ManageGiftAidClaimsPage();¶            ManageContentPage = new ManageContentPage();¶            ManageShortcutsPage = new ManageShortcutsPage();¶            ManageSiteMaps = new ManageSiteMapsPage();¶            DonateNowPage = new DonateNowPage("_Gift_Aid");¶            DonorThankYouPage = new DonorThankYouPage();¶            RiseTestMethods = new RiseTestMethods(driver, context);¶        }¶        private GiftAidPage GiftAidPage { get; set; }¶        private ManageGiftAidClaimsPage ManageGiftAidClaimsPage { get; set; }¶        private ManageContentPage ManageContentPage { get; set; }¶        private ManageShortcutsPage ManageShortcutsPage { get; set; }¶        private ManageSiteMapsPage ManageSiteMaps { get; set; }¶        private DonateNowPage DonateNowPage { get; set; }¶        public DonorThankYouPage DonorThankYouPage { get; set; }¶        public RiseTestMethods RiseTestMethods { get; set; }¶¶        /// <summary>¶        ///Doesn't seem to be necessary for the page to be automated. Was able to access the page ¶        ///from a fresh VM¶        /// </summary>¶        public void ActivateManageGiftAidClaimsPage()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(GiftAidPage.BaseUrl));¶            if (_context.IsV10)¶                user.AttemptsTo(SetWhenProvided.CheckBox(GiftAidPage.CheckBox().Control, true));¶            else¶                user.AttemptsTo(SetWhenProvided.CheckBox(GiftAidPage.CheckBox(14).Control, true));¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(Browse.InStaffSite(ManageGiftAidClaimsPage.BaseUrl));¶            user.AsksFor(Text.Of(ManageGiftAidClaimsPage.PageTitle)).Should().Contain("Manage Gift Aid Claims");¶        }¶¶        /// <summary>¶        /// Activates the content through Site Maps¶        /// </summary>¶        /// <param name="site"></param>¶        /// <param name="address"></param>¶        /// <param name="content"></param>¶        public void ActivateGiftAidThroughSiteMaps(string site, string address, string content)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageSiteMaps.BaseUrl));¶            user.AttemptsTo(Select.ByText(ObjectBrowserComponents.SiteRootList, site));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, address).UsingClearMethod().ThenHitEnter());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.EditMenuItem));¶            user.AttemptsTo(SwitchFrame.To("ObjectBrowserDialog"));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            ////Cannot enter the address since it is blanked out, so will need to select through root list¶            user.AttemptsTo(Click.On(ManageSiteMaps.DocumentPathSelector.Select));¶            user.AttemptsTo(SwitchFrame.To("ObjectBrowser").AndSkipDefault());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Shared Content")));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Fundraising")));¶            user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.ContentItem(content, "div")));¶            user.AttemptsTo(SwitchFrame.To("ObjectBrowserDialog"));¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(ClickCommandButton.Cancel());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            RiseTestMethods.PublishItems();¶            user.AttemptsTo(Refresh.Browser());¶            user.AttemptsTo(Waiting.InSeconds(1));¶        }¶¶        /// <summary>¶        /// Creates out of box gift aid content. This is currently static since¶        /// these items are required for this method¶        /// </summary>¶        public void CreateOutOfBoxGiftAidDeclaration()¶        {¶            CopyAndPasteContentItemToShared("Fundraising", "Gift Detail with Gift Aid");¶            CopyAndPasteContentItemToShared("Fundraising", "Give Now With Gift Aid");¶            if (_context.IsV10)¶                CopyAndPasteContentItemToShared("Fundraising", "Give Now Dynamic With Gift Aid", "Donate");¶            else¶                CopyAndPasteContentItemToShared("Fundraising", "Give Now Dynamic With Gift Aid");¶            RiseTestMethods.PublishItems();¶            AddAShortcut("All Sites", "GiveNowDynamic", "Fundraising", "Give Now Dynamic With Gift Aid");¶            AddAShortcut("All Sites", "Gift", "Fundraising", "Gift Detail with Gift Aid");¶            AddAShortcut("All Sites", "GiveNow", "Fundraising", "Give Now With Gift Aid");¶            ActivateGiftAidThroughSiteMaps("Member Responsive", "~/GiveNow", "Give Now With Gift Aid");¶        }¶¶        /// <summary>¶        /// Verifies if it has been added. If it has then it skips adding¶        /// </summary>¶        public bool VerifyIfGiftAidDeclarationWasAdded()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InMemberSite(DonateNowPage.BaseUrl));¶            if (user.AsksFor(Appearance.Of(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox)))¶                return true;¶            else¶                return false;¶        }¶¶        /// <summary>¶        /// Verifies the gift aid checkbox in the UI¶        /// </summary>¶        public void VerifyGiftAidCheckBox()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InMemberSite(DonateNowPage.BaseUrl));¶            user.AsksFor(Appearance.Of(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox)).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Verifies the gift aid text in the UI¶        /// </summary>¶        /// <param name="userType">User type to verify if it's unaunthenticated or authenticated</param>¶        public void VerifyGiftAidText(bool isAuthenticated)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InMemberSite(DonateNowPage.BaseUrl));¶            string authText = "If you are a UK taxpayer, the value of your gift can increase by 25% under the Gift Aid scheme at no extra cost to you!";¶            string unAuthText = "Until I notify you otherwise please treat all my donations, including all donations I have made in the past 4 years, as Gift Aid donations.";¶¶            string expectedText = isAuthenticated ? authText : unAuthText;¶            user.AsksFor(Appearance.Of(DonateNowPage.UIText(expectedText))).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Navigates to folder and copies the content item to past it into a shared content folder¶        /// This method only goes 1 folder deep¶        /// </summary>¶        /// <param name="folder">The main folder for the content item</param>¶        /// <param name="subFolder">The subfolder for the content item</param>¶        /// <param name="contentItem">Content item</param>¶        public void CopyAndPasteContentItemToShared(string folder, string contentItem, string subFolder = "")¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, $"@/iCore/{folder}/{subFolder}").UsingClearMethod());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.ContentItem(contentItem, "div")));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.OrganizeMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.CopyMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            //So the Object Browser menu goes away¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.RefreshMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            SendBrowserPathAddress(folder);¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.OrganizeMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.PasteMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            if (user.AskingFor(Appearance.Of(ObjectBrowserDialog.ObjectBrowserDialogTitle)))¶                if (user.AsksFor(Text.Of(ObjectBrowserDialog.ObjectBrowserDialogTitle)).Contains("Document Exists"))¶                    user.AttemptsTo(Refresh.Browser());¶        }¶¶        /// <summary>¶        /// Selects the website to add a shortcut to a content item¶        /// </summary>¶        /// <param name="site">Site from dropdown</param>¶        /// <param name="shortcutName">Name of shortcut item</param>¶        /// <param name="browserPath">iMIS browser path to content item</param>¶        public void AddAShortcut(string site, string shortcutName, string browserPath, string contentItem)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageShortcutsPage.BaseUrl));¶            user.AttemptsTo(Select.ByText(ManageShortcutsPage.WebsiteFilterDropDownList, site));¶            user.AttemptsTo(SendKeys.To(ManageShortcutsPage.ShortcutFilterTextBox, shortcutName).UsingClearMethod());¶            user.AttemptsTo(Click.On(ManageShortcutsPage.RadGrid1.Cell(1, 5)));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(Click.On(ManageShortcutsPage.URLSelector.Select));¶            user.AttemptsTo(SwitchFrame.ToObjectBrowser());¶            SearchContent(browserPath);¶            user.AttemptsTo(")
Diff(INSERT,"¶                ")
Diff(EQUAL,"DoubleClick.On(ObjectBrowserComponents.ContentItem(contentItem)));¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(DoubleClick.On(ManageShortcutsPage.RadGrid1.SaveUpdateButton));¶            user.AttemptsTo(Waiting.InSeconds(2));¶        }¶¶        /// <summary>¶        /// Sends address into the address bar¶        /// </summary>¶        /// <param name="browserPath"></param>¶        public void SearchContent(string browserPath)¶        {¶            var user = LoggedInUser();¶            SendBrowserPathAddress(browserPath);¶            //Wait slightly for the results to display¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶        }¶¶        /// <summary>¶        /// Reviews and Verifies if the donation created is availble for claims under GiftAid Claim Review Tab¶        /// </summary>¶        public void ReviewGiftsToBeClaimed(CartData cartData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageGiftAidClaimsPage.Url("Available Gifts for Gift Aid Claims")));¶            int nestedRow = 1;¶            var giftdate = DateTime.Today.ToShortDateString();¶            var giftAidGrid = ManageGiftAidClaimsPage.GiftsToBeClaimedTab.GiftsToBeClaimed.ResultsGrid;¶            var rows = user.AskingFor(giftAidGrid.GetRowCount());¶            int row = rows;¶            user.AttemptsTo(Click.On(giftAidGrid.Cell(row, 1)));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            while (user.AskingFor(Existence.Of(giftAidGrid.NestedCell(row, nestedRow, 1))))¶            {¶                nestedRow++;¶            }¶            int nestedRowCount = nestedRow - 1;¶            user.Logger.Info($"row count: {nestedRowCount}");¶            if (_context.IsV10)¶            {¶                user.AsksFor(Text.Of(ManageGiftAidClaimsPage.GiftsToBeClaimedTab.GiftsToBeClaimed.ResultsGrid.NestedCell(row, nestedRowCount, 1))).Should().Contain(giftdate);¶                user.AsksFor(Text.Of(ManageGiftAidClaimsPage.GiftsToBeClaimedTab.GiftsToBeClaimed.ResultsGrid.NestedCell(row, nestedRowCount, 2))).Should().Contain(cartData.PaymentAmount);¶            }¶            else¶            {¶                user.AsksFor(Text.Of(ManageGiftAidClaimsPage.GiftsToBeClaimedTab.GiftsToBeClaimed.ResultsGrid.NestedCell(row, nestedRowCount, 2))).Should().Contain(giftdate);¶                user.AsksFor(Text.Of(ManageGiftAidClaimsPage.GiftsToBeClaimedTab.GiftsToBeClaimed.ResultsGrid.NestedCell(row, nestedRowCount, 3))).Should().Contain(cartData.PaymentAmount);¶            }¶        }¶¶        /// <summary>¶        /// Sends the designated address into the ObjectBrowser path¶        /// </summary>¶        public void SendBrowserPathAddress(string address)¶        {¶            var user = LoggedInUser();¶            if (_context.IsV10)¶                user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, $"@/Shared_Content/" + address).UsingClearMethod());¶            else¶                user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, $"@/SharedContent/" + address).UsingClearMethod());¶        }¶        /// <summary>¶        /// Submits Gift Aid Donation¶        /// </summary>¶        /// <param name="giftData">Gift Data from feature file</param>¶        /// <param name="cartData">Cart Data from feature file</param>¶        public void SubmitGiftAidDonation(GiftData giftData, CartData cartData, ContactData contactData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Donate.GiftAid(contactData, cartData, 50).OnGiftAidPage().SkipPayment());¶")
Diff(INSERT,"            user.AttemptsTo(Waiting.ForPageReload());")
Diff(EQUAL,"¶            //Submit Gift Aid data¶            ")
Diff(DELETE,"if (!")
Diff(EQUAL,"user.A")
Diff(DELETE,"sksFor(SelectedState")
Diff(INSERT,"ttemptsTo(Check")
Diff(EQUAL,".O")
Diff(DELETE,"f")
Diff(INSERT,"n")
Diff(EQUAL,"(DonateNowPage.GiftAidDeclaration.GiftAidCheckbox))")
Diff(DELETE,")")
Diff(INSERT,";")
Diff(EQUAL,"¶            ")
Diff(DELETE,"    user.AttemptsTo(Click")
Diff(INSERT,"// Checking for an existing Declaration - Confirmation message if one exists ¶            if (!user.AsksFor(Appearance.Of(DonateNowPage.GiftAidConfirmationMessage)))¶            {¶                user.WaitsUntil(Existence")
Diff(EQUAL,".O")
Diff(DELETE,"n")
Diff(INSERT,"f")
Diff(EQUAL,"(DonateNowPage.GiftAidDeclaration.GiftAid")
Diff(DELETE,"Checkbox")
Diff(INSERT,"StaffControls.MethodOfDeclaration), IsEqualTo.True(")
Diff(EQUAL,"));¶            ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.DropDown(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.MethodOfDeclaration, giftData.GiftAidDeclaration));¶            ")
Diff(INSERT,"   ")
Diff(INSERT," ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.CheckBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.Covers.Button(0), giftData.PastDonations));¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.CheckBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.Covers.Button(1), giftData.FutureDonations));¶            ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.DeclarationReceivedDate.TextBox, giftData.DeclarationRecieved));¶            ")
Diff(INSERT,"   ")
Diff(INSERT," ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.ConfirmationDate.TextBox, giftData.ConfirmationLetterSent));¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.TextBox(DonateNowPage.GiftAidDeclaration.GiftAidStaffControls.DeclarationNotes, giftData.DeclarationNotes));¶")
Diff(INSERT,"            }")
Diff(EQUAL,"¶            //Pay for item¶            user.AttemptsTo(CheckOut.WithDefaultPayment(cartData).DonationPayment().SkipSubmitOrderButton());¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.Verifies(CheckOut.WithDefaultPayment(cartData));¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Fundraising/GiftAidTestMethod.cs)
Diff(EQUAL,"{¶    public class FinanceTestMethods : TestMethodBase¶    {¶")
Diff(INSERT,"        private const string _creditValueKey = "creditValue";¶        private const string _totalRefundKey = "totalRefund";¶        private const string _availableCreditAlertText = "Available credit:";¶¶")
Diff(EQUAL,"        public FinanceTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            ContactsSettingsTestMethod = new ContactsSettingsTestMethod(driver, context);¶            FinanceSettingsTestMethods = new FinanceSettingsTestMethods(driver, context);¶            InvoicesPage = new InvoicesPage();¶            CashInvoiceDetailReportWriterPage = new CashInvoiceDetailReportWriterPage();¶            ItemizedRenewal = new ItemizedRenewal();¶            InvoiceWriteOffsPage = new InvoiceWriteOffsPage();¶            CreditInvoicePage = new CreditInvoicesPage();¶            InvoiceDetailPage = new InvoiceDetailPage();¶            EventDashboardPage = new EventDashboardPage();¶            CartPage = new Cart();¶            FindProductsPage = new FindProductsPage();¶            ")
Diff(DELETE,"ProductDisplayPage = new ProductDisplay")
Diff(INSERT,"ItemPage = new Item")
Diff(EQUAL,"Page();¶            AccountPageStaff = new AccountPageStaff();¶            AccountArea = new AccountArea("AccountArea");¶")
Diff(INSERT,"            PaymentDetails = new PaymentDetails("TemplateBody");¶            BatchesPage = new BatchesPage();¶            BatchDetailPage = new BatchDetailPage();¶            PayCentralLivePage = new PayCentralLivePage();¶")
Diff(EQUAL,"        }¶¶        ContactsSettingsTestMethod ContactsSettingsTestMethod { get; set; }¶        FinanceSettingsTestMethods FinanceSettingsTestMethods { get; set; }¶        private InvoicesPage InvoicesPage { get; set; }¶        private CashInvoiceDetailReportWriterPage CashInvoiceDetailReportWriterPage { get; set; }¶        private ItemizedRenewal ItemizedRenewal { get; set; }¶        private InvoiceWriteOffsPage InvoiceWriteOffsPage { get; set; }¶        private CreditInvoicesPage CreditInvoicePage { get; set; }¶        private AccountPageStaff AccountPageStaff { get; set; }¶        private AccountArea AccountArea { get; set; }¶¶        public List<BillingLookUpTable> BillingLookupTableList;¶¶        public InvoiceDetailPage InvoiceDetailPage;¶        public EventDashboardPage EventDashboardPage;¶        private Cart CartPage { get; set; }¶        private FindProductsPage FindProductsPage { get; set; }¶        private ")
Diff(DELETE,"ProductDisplayPage ProductDisplay")
Diff(INSERT,"ItemPage ItemPage { get; }¶        private PaymentDetails PaymentDetails { get; }¶        private BatchesPage BatchesPage { get; }¶        private BatchDetailPage BatchDetailPage { get; }¶        private PayCentralLivePage PayCentralLive")
Diff(EQUAL,"Page { get;")
Diff(INSERT," set;")
Diff(EQUAL," }¶¶        public void AmendCountryCurrency(string gateway)¶        {")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            FinanceSettingsTestMethods.SetDefaultCountryCurrency(gateway);¶            if (!gateway.Equals("Empty"))¶                ContactsSettingsTestMethod.SetDefaultCountry(gateway);¶        }¶¶        public void VerifyCountryCurrency(string gateway)¶        {")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            FinanceSettingsTestMethods.VerificationOfCountryCurrency(gateway);¶            ContactsSettingsTestMethod.VerifyDefaultCountry(gateway);¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Save available credit value to context¶        /// </summary>¶        public void SaveAvailableCreditValue()¶        {¶            var user = User("AdjustPaymentUser");¶¶            GotoAccountArea(user);¶            _context.AddData(_creditValueKey, GetAvailableCreditValue(user));¶        }¶¶        /// <summary>¶        /// Adjust payment based on what the user provides¶        /// </summary>¶        /// <param name="adjustmentType">Must be Unapply, Reverse. For Refund use RefundPayment method</param>¶        public void AdjustPayment(string adjustmentType)¶        {¶            var user = User("AdjustPaymentUser");¶¶            FindPaymentAndStartAdjustment(user, adjustmentType);¶            if (adjustmentType == "Unapply")¶            {¶                var totalAmount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.TotalAmountValueLabel), IsNotEqualTo.Value("")));¶                var creditValue = _context.GetData<double>(_creditValueKey);¶                _context.UpsertData(_creditValueKey, creditValue + totalAmount);¶            }¶¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));¶¶            user.WaitsUntil(UserMessageState.HasAny().WithMessage("Payment successfully"), IsEqualTo.True());¶        }¶¶        /// <summary>¶        /// Refund payment based on what the user provides¶        /// </summary>¶        /// <param name="paymentMethod"></param>¶        /// <param name="refundDataSet"></param>¶        public void RefundPayment(string paymentMethod, IEnumerable<RefundData> refundDataSet)¶        {¶            var user = User("AdjustPaymentUser");¶¶            FindPaymentAndStartAdjustment(user, "Refund");¶            user.AttemptsTo(Select.ByValue(PaymentDetails.RefundDisplay.PaymentMethod, paymentMethod));¶¶            foreach (var refundData in refundDataSet)¶            {¶                var amount = double.Parse(user.WaitsUntil(Text.Of(PaymentDetails.RefundDisplay.GetAmountTextbox(refundData.Description)),¶                    IsNotEqualTo.Value("")));¶¶                var amountToRefund = (refundData.PercentageFromAmountToRefund / 100) * amount;¶¶                user.AttemptsTo(SendKeys.To(PaymentDetails.RefundDisplay.GetAmountToRefundLabel(refundData.Description),¶                    amountToRefund.ToString("F2")));¶            }¶¶            // update the total refund after the last value has been entered¶            user.AttemptsTo(Click.On(PaymentDetails.TotalAmountValueLabel));¶¶            var totalRefund = double.Parse(user.AsksFor(Text.Of(PaymentDetails.TotalAmountValueLabel)));¶            _context.AddData(_totalRefundKey, totalRefund);¶¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.SubmitAdjustmentButton));¶        }¶¶        /// <summary>¶        /// Verify available credit on account page¶        /// </summary>¶        public void VerifyThatCreditIsOpen()¶        {¶            var user = User("AdjustPaymentUser");¶¶            user.AttemptsTo(Click.On(PaymentDetails.PayerLink));¶            GetAvailableCreditValue(user).Should().Be(_context.GetData<double>(_creditValueKey));¶        }¶¶        /// <summary>¶        /// Verify that payment get status reversed¶        /// </summary>¶        public void VerifyThatPaymentIsReversed()¶        {¶            var user = User("AdjustPaymentUser");¶¶            user.WaitsUntil(Text.Of(PaymentDetails.Status), IsEqualTo.Value("Reversed"));¶        }¶¶        /// <summary>¶        /// Verify that payment is refunded¶        /// </summary>¶        public void VerifyThatPaymentIsRefund()¶        {¶            var user = User("AdjustPaymentUser");¶            var totalRefund = _context.GetData<double>(_totalRefundKey);¶¶            user.WaitsUntil(UserMessageState.HasAny().WithMessage($"Refund successfully recorded in iMIS for {totalRefund:F2}"),¶                IsEqualTo.True());¶        }¶¶")
Diff(EQUAL,"        /// <summary>¶        /// Verify A Renewals Billing Run Can Be Reversed¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void VerifyARenewalsBillingRunCanBeReversed(Table billingTable)¶        {¶            var user = User("VerifyReversalBillingCycleUser");¶            ¶            // cycle through given list ¶            BillingLookupTableList = billingTable.CreateSet<BillingLookUpTable>().ToList();¶            foreach (BillingLookUpTable bList in BillingLookupTableList)¶            {¶                // navigate straight to Generate Renewals page¶                user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶                // choose invoice to reverse¶                var query = InvoicesPage.SelectAQuery.Queries.Get("All invoices");¶                var billToNameContains = query.Parameters.Get("Bill to name contains") as QueryTextParameter;¶                user.AttemptsTo(SendKeys.To(billToNameContains.Textbox, bList.BillToName));¶                user.AttemptsTo(Click.On(query.Find));¶                // wait until grid results appear¶                user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 3)), ContainsSubstring.Text(bList.BillToName));¶                // validate results in grid ¶                // compare bill date from context¶                var Date1 = _context.GetData<string>("BillDate");¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(Date1);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 3))).Should().Contain(bList.BillToName);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 4))).Should().Contain(bList.ProductDescription);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 8))).Should().Contain(bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 9))).Should().Contain(bList.Amount);¶                // click on newest¶                user.AttemptsTo(Click.On(InvoicesPage.Grid1.Cell(1, 1, true)));¶                // now adjust the invoice¶                user.AttemptsTo(Click.On(CashInvoiceDetailReportWriterPage.InvoiceSummary.AdjustInvoiceButton));¶                user.AsksFor(ValueAttribute.Of(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentTypeList)).Should().Be("REVERSEINVOICE");¶                user.AsksFor(SelectedState.Of(InvoicesPage.InvoiceDetail.SummaryControl.ReverseOnlyRadioButton)).Should().BeTrue();¶                user.AttemptsTo(JavaScriptClick.On(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentAreaSubmitButton));¶                // verify completed message¶                user.AttemptsTo(Wait.Until(Appearance.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue), IsEqualTo.True()));¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Invoice successfully reversed")).Should().BeTrue();¶                // validated amounts¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TotalChargesValue)).Should().Be(bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be("-" + bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be("-" + bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustedTotalChargesValue)).Should().Be("0.00");¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsValue)).Should().Be("0.00");¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be("0.00");¶            }¶        }¶        /// <summary>¶        /// Verify a dues renewal can adjust line items¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void VerifyADuesRenewalCanAdjustLineItems(Table billingTable)¶        {¶            var user = User("VerifyReversalBillingCycleUser");¶            ¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // navigate straight to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶            // choose invoice to reverse¶            var query = InvoicesPage.SelectAQuery.Queries.Get("All invoices");¶            var billToNameContains = query.Parameters.Get("Bill to name contains") as QueryTextParameter;¶            user.AttemptsTo(SendKeys.To(billToNameContains.Textbox, bList.BillToName));¶            user.AttemptsTo(Click.On(query.Find));¶            // wait until grid results appear¶            user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 3)), ContainsSubstring.Text(bList.BillToName));¶            // validate results in grid ¶            // compare bill date from context¶            var Date1 = _context.GetData<string>("BillDate");¶            user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(Date1);¶            user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 3))).Should().Contain(bList.BillToName);¶            user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 4))).Should().Contain(bList.ProductDescription);¶            user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 8))).Should().Contain(bList.Amount);¶            user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 9))).Should().Contain(bList.Amount);¶            // click on newest¶            user.AttemptsTo(Click.On(InvoicesPage.Grid1.Cell(1, 1, true)));¶            // now adjust the invoice¶            user.AttemptsTo(Click.On(CashInvoiceDetailReportWriterPage.InvoiceSummary.AdjustInvoiceButton));¶            user.AttemptsTo(Select.ByText(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentTypeList, "Adjust line items"));¶            user.AttemptsTo(JavaScriptClick.On(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentAreaSubmitButton));¶            user.AsksFor(SelectedState.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(0, 0))).Should().BeTrue();¶            // check balance original value¶            user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.BalanceLabel(0, 0))).Should().Be(bList.AmountFrom);¶            // change Unit Price ¶            user.AttemptsTo(SendKeys.To(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.OverridePricing(0, 0), bList.AmountTo + Keys.Enter));¶            user.AttemptsTo(Wait.Until(Appearance.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.RevertPrice(0, 0)), IsEqualTo.True()));¶            // check new balance ¶            user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.BalanceLabel(0, 0))).Should().Be(bList.AmountTo);¶            user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubmitAdjustmentButton));¶            // verify completed message¶            user.AsksFor(UserMessageState.HasAny().WithMessage("Successfully submitted adjustments.")).Should().BeTrue();¶            // validated modified amounts¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TotalChargesValue)).Should().Be(bList.Amount);¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be(bList.AmountAdjusted);¶            string AdjustedAmount = (double.Parse(bList.Amount) + double.Parse(bList.AmountAdjusted)).ToString("N2");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustedTotalChargesValue)).Should().Be(AdjustedAmount); ¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsValue)).Should().Be("0.00");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be(AdjustedAmount); ¶        }¶¶        /// <summary>¶        /// Validates Credit Card Details¶        /// </summary>¶        public void ValidateCardDetails()¶        {¶            var user = User("StaffSite User");¶¶            user.AttemptsTo(SwitchFrame.To("iFrame"));¶            user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.CCNumber), IsEqualTo.True());¶            user.AsksFor(ValueAttribute.Of(CartPage.PaymentDetails.CCExpiration)).Should().Contain("/");¶        }¶¶        /// <summary>¶        /// Submits a payments for a product in the cart¶        /// </summary>¶        /// <param name="cartData"></param>¶        public void SubmitPaymentForProduct(CartData cartData)¶        {¶            var user = User("StaffSite User");¶")
Diff(INSERT,"            user.AttemptsTo(Waiting.InSeconds(1));")
Diff(EQUAL,"¶            //Enter payment details¶            user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.PaymentMethodDropDown), IsEqualTo.True());¶            user.AttemptsTo(ScrollToElement.At(CartPage.PaymentDetails.PaymentMethodDropDown));¶            user.AttemptsTo(SetWhenProvided.DropDown(CartPage.PaymentDetails.PaymentMethodDropDown, cartData.PaymentMethod));¶            user.AsksFor(Text.Of(CartPage.PaymentDetails.PaymentMethodDropDown)).Should().Contain(cartData.PaymentMethod);¶")
Diff(DELETE,"¶            user.AttemptsTo(SwitchFrame.To("iFrame"));¶")
Diff(INSERT,"            // fill in different payment method types¶            switch (cartData.PaymentMethodType) {¶                case "Direct debit":¶                    user.AttemptsTo(SwitchFrame.To("iFrame"));¶                    user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.RoutingNumber), IsEqualTo.True());¶                    user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.RoutingNumber, cartData.RoutingNumber));¶                    user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.AccountNumber, cartData.AccountNumber));¶                    break;¶¶                default:¶                    user.AttemptsTo(SwitchFrame.To("iFrame"));¶        ")
Diff(EQUAL,"            user.WaitsUntil(Existence.Of(CartPage.PaymentDetails.CCNumber), IsEqualTo.True());¶            ")
Diff(INSERT," ")
Diff(INSERT,"       ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCNumber, cartData.CardNumber));¶")
Diff(DELETE,"¶")
Diff(INSERT,"        ")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCExpiration, cartData.CardExpiry));¶            ")
Diff(INSERT,"        ")
Diff(EQUAL,"user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCSecurityCode, cartData.CardCVC));¶")
Diff(INSERT,"                    // check if postal code exists before adding a value to it¶                    if (user.AsksFor(Existence.Of(CartPage.PaymentDetails.CCPostalCode)))¶            ")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.TextBox(CartPage.PaymentDetails.CCPostalCode, cartData.PostalCode));¶")
Diff(INSERT,"                    break;¶            };")
Diff(EQUAL,"¶            //Submit Payment¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(Click.On(CartPage.SubmitOrderButtonLink.SubmitCartOrderButton));¶        }¶¶        /// <summary>¶        /// Adds a single product to the staff cart¶        /// </summary>¶        public void AddProductToStaffCart()¶        {¶            var user = User("StaffSite User");¶¶            //Add product to cart¶            user.AttemptsTo(Browse.InImis(FindProductsPage.BaseUrl));¶            user.WaitsUntil(Text.Of(FindProductsPage.PageTitle), ContainsSubstring.Text("Find products"));¶            user.AttemptsTo(SendKeys.To(FindProductsPage.ProductSearch.SearchBox, "Building a Strong Team"));¶            user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.GoButton));¶            user.WaitsUntil(Text.Of(FindProductsPage.PageTitle), ContainsSubstring.Text("Find products"));¶            user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText("Building a Strong Team")));¶            user.AttemptsTo(Click.On(")
Diff(DELETE,"ProductDisplayPage.AddToCart));¶            user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart")
Diff(INSERT,"ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));¶            user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton")
Diff(EQUAL,"));¶        }¶¶        /// <summary>¶        /// Verify an accrual dues invoice renewal can be adjusted¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void VerifyAnAccrualDuesInvoiceRenewalCanBeAdjusted(Table billingTable)¶        {¶            var user = User("VerifyAdjustAccuralDuesUser");¶            ¶            // cycle through given list ¶            BillingLookupTableList = billingTable.CreateSet<BillingLookUpTable>().ToList();¶            foreach (BillingLookUpTable bList in BillingLookupTableList)¶            {¶                // navigate straight to Invoices page¶                user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶                // choose invoice to reverse¶                var query = InvoicesPage.SelectAQuery.Queries.Get("All invoices");¶                var billToNameContains = query.Parameters.Get("Bill to name contains") as QueryTextParameter;¶                user.AttemptsTo(SendKeys.To(billToNameContains.Textbox, bList.BillToName).ThenHitEnter());¶                // wait until grid results appear¶                if (bList.Date == "Today") user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 2)), ContainsSubstring.Text(DateTime.Now.ToShortDateString()));¶                user.WaitsUntil(Text.Of(InvoicesPage.Grid1.Cell(1, 3)), ContainsSubstring.Text(bList.BillToName));¶                // validate results in grid ¶                if (bList.Date == "Today") user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(DateTime.Now.ToShortDateString());¶                else user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 2))).Should().Contain(bList.Date);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 3))).Should().Contain(bList.BillToName);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 4))).Should().Contain(bList.ProductName);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 8))).Should().Contain(bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.Grid1.Cell(1, 9))).Should().Contain(bList.Amount);¶                // click on newest¶                user.AttemptsTo(Click.On(InvoicesPage.Grid1.Cell(1, 1, true)));¶                // now adjust the invoice¶                user.AttemptsTo(Click.On(CashInvoiceDetailReportWriterPage.InvoiceSummary.AdjustInvoiceButton));¶                user.AsksFor(ValueAttribute.Of(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentTypeList)).Should().Be("REVERSEINVOICE");¶                user.AsksFor(SelectedState.Of(InvoicesPage.InvoiceDetail.SummaryControl.ReverseOnlyRadioButton)).Should().BeTrue();¶                user.AttemptsTo(JavaScriptClick.On(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentAreaSubmitButton));¶                // verify completed message¶                user.AttemptsTo(Wait.Until(Appearance.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue), IsEqualTo.True()));¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Invoice successfully reversed")).Should().BeTrue();¶                // validated amounts¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TotalChargesValue)).Should().Be(bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be("-" + bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be("-" + bList.Amount);¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustedTotalChargesValue)).Should().Be("0.00");¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsValue)).Should().Be("0.00");¶                user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be("0.00");¶            }¶        }¶¶        /// <summary>¶        /// Verify an event registration invoice can be adjusted¶        /// </summary>¶        public void VerifyAnEventRegistrationInvoiceCanBeAdjusted(EventData eventData)¶        {¶            var user = User("VerifyAdjustEventInvoiceUser");¶            ¶            // now adjust the invoice¶            user.AttemptsTo(Click.On(CashInvoiceDetailReportWriterPage.InvoiceSummary.AdjustInvoiceButton));¶            user.AsksFor(ValueAttribute.Of(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentTypeList)).Should()¶                .Be("ADJUSTREGISTRATION");¶            user.AttemptsTo(JavaScriptClick.On(InvoicesPage.InvoiceDetail.SummaryControl.AdjustmentAreaSubmitButton));¶            // verify navigate to event registration page¶            user.AsksFor(Text.Of(EventDashboardPage.EventDisplay.TitleText)).Should().Be(eventData.EventName);¶            user.AsksFor(Text.Of(EventDashboardPage.EventDisplay.RegistrantNameLabel)).Should().Be(eventData.Registrant);¶        }¶¶        /// <summary>¶        /// WhenIIssueAnInvoiceWriteOff()¶        /// </summary>¶        public void WhenIIssueAnInvoiceWriteOff()¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶            ¶            // navigate straight to Mass Write Offs page¶            user.AttemptsTo(Browse.InImis(InvoiceWriteOffsPage.BaseUrl));¶            // change max amount to $10¶            user.AttemptsTo(SendKeys.To(InvoiceWriteOffsPage.MaxAmount, "10"));¶            // find invoices that match¶            user.AttemptsTo(ClickCommandButton.Find());¶            // select 1st match on list to write off¶            user.AttemptsTo(Click.On(InvoiceWriteOffsPage.WriteOffsGrid.Cell(1, 1)));¶            // verify record write offs button name changes¶            user.AsksFor(ValueAttribute.Of(InvoiceWriteOffsPage.RecordWriteOffsButton)).Should().Be("Record Write-Offs : 1");¶            // click on record write offs button¶            user.AttemptsTo(Click.On(InvoiceWriteOffsPage.RecordWriteOffsButton));¶            // accept the alert to confirm write off¶            user.AttemptsTo(AcceptImisAlert.Ok());¶            user.AsksFor(UserMessageState.HasAny().WithMessage("1 invoice was successfully written off.")).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Issue a refund through Credit Invoices¶        /// </summary>¶        public void IssueARefundThroughCreditInvoices()¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶            ¶            // navigate straight to Credit Invoice page¶            user.AttemptsTo(Browse.InImis(CreditInvoicePage.BaseUrl));¶            // click find button to get current list¶            user.AttemptsTo(ClickCommandButton.Find());¶            // select 1st on list¶            user.AttemptsTo(Click.On(CreditInvoicePage.RefundsGrid.Cell(1, 1)));¶            // store info of refund amount for later verifying¶            _context.UpsertData("Amount", user.AsksFor(Text.Of(CreditInvoicePage.RefundsGrid.Cell(1, 6))));¶            // check that button text changes correctly¶            user.AsksFor(ValueAttribute.Of(CreditInvoicePage.CreateExportButton)).Should().Be("Record Refunds : 1");¶            // click the button to record the refund¶            user.AttemptsTo(Click.On(CreditInvoicePage.CreateExportButton));¶            // click ok on the alert dialog that appears¶            user.AttemptsTo(AcceptImisAlert.Ok());¶            // wait till download processing dialog ok button is enabled¶            ")
Diff(DELETE,"bool finishedProcessing = false;¶            do¶            {¶                if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;¶            } while (finishedProcessing == false")
Diff(INSERT,"user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60")
Diff(EQUAL,");¶            // download file now ready so click on ok button¶            user.AttemptsTo(Click.On(CreditInvoicePage.DownloadOkButton));¶        }¶¶        /// <summary>¶        /// Verify a refund of a Credit Invoice¶        /// </summary>¶        public void VerifyRefundOfCreditInvoice()¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶            ¶            // navigate straight to Credit Invoice page¶            user.AttemptsTo(Browse.InImis(CreditInvoicePage.BaseUrl));¶            // go to logs page ¶            user.AttemptsTo(Click.On(CreditInvoicePage.CreditInvoiceRadTabStrip.GetTab("Logs")));¶            // validate processed refund from data stored in context¶            var ")
Diff(DELETE,"A")
Diff(INSERT,"a")
Diff(EQUAL,"mount = _context.GetData<string>("Amount");¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(CreditInvoicePage.PastExportsGrid.Cell(1, 3))")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e(")
Diff(DELETE,"A")
Diff(INSERT,"a")
Diff(EQUAL,"mount)")
Diff(INSERT,")")
Diff(EQUAL,";¶            // click on the download button for the 1st item¶            user.AttemptsTo(Click.On(CreditInvoicePage.PastExportsGrid.Cell(1, 5)));¶            // wait till download processing dialog ok button is enabled¶            ")
Diff(DELETE,"bool finishedProcessing = false;¶            do¶            {¶                if (user.AsksFor(EnabledState.Of(CreditInvoicePage.DownloadOkButton)) == true) finishedProcessing = true;¶            } while (finishedProcessing == false")
Diff(INSERT,"user.WaitsUntil(EnabledState.Of(CreditInvoicePage.DownloadOkButton), IsEqualTo.True(), timeout: 60")
Diff(EQUAL,");¶            // download file now ready so click on ok button¶            user.AttemptsTo(Click.On(CreditInvoicePage.DownloadOkButton));¶        }¶¶        /// <summary>¶        /// Access an invalid Invoice Detail¶        /// </summary>¶        public void AccessAInvalidEventInvoice(Table table) ¶        {¶            var user = User("InvoiceDetailUser");            ¶¶            foreach (var i in table.Rows) ¶            {¶                user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶¶                var url = InvoiceDetailPage.BaseUrl;¶                url.AddParameter(((string[])i.Values)[0], ((string[])i.Values)[1]);¶                user.AttemptsTo(Browse.InImis(url));¶                url.Parameters.Clear();¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Required parameter not found")).Should().BeTrue();¶            }¶        }¶¶        /// <summary>¶        /// Access an missing Invoice Detail¶        /// </summary>¶        public void AccessAMissingInvoiceDetail(Table table) ¶        {¶            var user = User("InvoiceDetailUser");            ¶            foreach (var i in table.Rows)¶            {¶                user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶¶                var url = InvoiceDetailPage.BaseUrl;¶                url.AddParameter(((string[])i.Values)[0], ((string[])i.Values)[1]);¶                user.AttemptsTo(Browse.InImis(url));¶                url.Parameters.Clear();¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Invoice not found")).Should().BeTrue();¶            }¶        }¶¶        /// <summary>¶        /// Access an valid Invoice Detail¶        /// </summary>¶        public void AccessAValidInvoiceDetail(Table table) ¶        {¶            var user = User("InvoiceDetailUser");            ¶¶            foreach (var i in table.Rows)¶            {¶                user.AttemptsTo(Browse.InImis(InvoicesPage.BaseUrl));¶¶                var url = InvoiceDetailPage.BaseUrl;¶                url.AddParameter(((string[])i.Values)[0], ((string[])i.Values)[1]);¶                user.AttemptsTo(Browse.InImis(url));¶                url.Parameters.Clear();¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Required parameter not found")).Should().BeFalse();¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Invoice not found")).Should().BeFalse();¶            }¶        }¶¶        /// <summary>¶        /// Add new payment option¶        /// </summary>¶        /// <param name="paymentOption"></param>¶        public void AddNewPaymentOption()¶        {¶            var user = User("AddNewPaymentOptionUser");¶            ")
Diff(DELETE,"// goto account area¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.MyAccountLink)")
Diff(INSERT,"GotoAccountArea(user")
Diff(EQUAL,");¶            // goto to contacts preferences tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Preferences")));¶            user.AttemptsTo(Click.On(AccountPageStaff.PreferencesTab.PaymentOptionGrid.AddToGrid));¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            user.AttemptsTo(Wait.Until(Appearance.Of(AccountPageStaff.PreferencesTab.PaymentCreator1.CCName), IsEqualTo.True()));¶            // switch to credit card iFrame¶            user.AttemptsTo(SwitchFrame.ToFrameByXpath("//iframe[contains(@id,'iFrame')]"));¶            user.AttemptsTo(SendKeys.To(AccountPageStaff.PreferencesTab.PaymentCreator1.CCNumber, "4111111111111111"));¶            // create 2 digit year credit card exp date¶            string expDate = "02/" + DateTime.Now.AddYears(1).Year.ToString().Substring(2);¶            user.AttemptsTo(SendKeys.To(AccountPageStaff.PreferencesTab.PaymentCreator1.CCExpiration, expDate));¶            user.AttemptsTo(SendKeys.To(AccountPageStaff.PreferencesTab.PaymentCreator1.CCSecurityCode, "123"));¶            user.WaitsUntil(ValueAttribute.Of(AccountPageStaff.PreferencesTab.PaymentCreator1.CCExpiration), ContainsSubstring.Text(expDate));¶            user.WaitsUntil(ValueAttribute.Of(AccountPageStaff.PreferencesTab.PaymentCreator1.CCSecurityCode), ContainsSubstring.Text("123"));¶            // wait for the very slow credit data fields to be ready before continuing¶            user.AttemptsTo(Waiting.InSeconds(4));¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            //Need to wait before¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Refresh.Browser());¶            // create 4 digit year version of exp date¶            expDate = "02/" + DateTime.Now.AddYears(1).Year.ToString();¶            var lastRow = user.AskingFor(AccountPageStaff.PreferencesTab.PaymentOptionGrid.GetRowCount());¶            user.AsksFor(Text.Of(AccountPageStaff.PreferencesTab.PaymentOptionGrid.Cell(lastRow, 2))).Should().Contain(expDate);¶        }¶¶        /// <summary>¶        /// Amend expiration date¶        /// </summary>¶        public void AmendCreditCardExpirationDate()¶        {¶            var user = User("AmendExpirationDateUser");¶            AddNewPaymentOption();¶            ")
Diff(DELETE,"// goto account area¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.MyAccountLink)")
Diff(INSERT,"GotoAccountArea(user")
Diff(EQUAL,");¶            // goto to contacts preferences tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Preferences")));¶            user.AttemptsTo(Hover.Over(AccountPageStaff.PreferencesTab.PaymentOptionGrid.Cell(1, 3)));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(AccountPageStaff.PreferencesTab.PaymentOptionGrid.Cell(1, 3, postXPath: "/input")));¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            user.AttemptsTo(Select.ByValue(AccountPageStaff.PreferencesTab.PaymentOptions.PaymentCreator1.CCExpiryMonthDropDown, "2"));¶            // create new exp date¶            string expDate = DateTime.Now.AddYears(2).Year.ToString();¶            user.AttemptsTo(Select.ByValue(AccountPageStaff.PreferencesTab.PaymentOptions.PaymentCreator1.CCExpiryYearDropDown, expDate));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(Refresh.Browser());¶            user.AsksFor(Text.Of(AccountPageStaff.PreferencesTab.PaymentOptionGrid.Cell(1, 2))).Should().Contain(expDate);¶            // store date in context for later verification¶            expDate = "02/" + DateTime.Now.AddYears(2).Year.ToString();¶            _context.UpsertData("CCExpDate", expDate);¶        }¶¶        /// <summary>¶        /// Verify contacts automatic payments credit expiry date¶        /// </summary>¶        /// <param name="paymentOption"></param>¶        public void VerifyContactsAutomaticPaymentsCreditExpiryDate()¶        {¶            var user = User("VerifyContactsAutomaticPaymentsCreditExpiryDateUser");¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            ")
Diff(DELETE,"// goto account area¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.MyAccountLink)")
Diff(INSERT,"GotoAccountArea(user")
Diff(EQUAL,");¶            // goto to contacts preferences tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Preferences")));¶            // verify exp date from context¶            string expDate = _context.GetData<string>("CCExpDate");¶            user.AsksFor(Text.Of(AccountPageStaff.PreferencesTab.PaymentOptionGrid.Cell(1, 2))).Should().Contain(expDate);¶        }¶¶        /// <summary>¶        /// Verify 3DS challenge window is showing up on the screen¶        /// </summary>¶        public void VerifyThreeDSChallengeWindowIsDisplayed()¶        {¶            var user = User("VerifyThreeDSChallengeWindowIsDisplayedUser");¶            user.AttemptsTo(Wait.Until(Existence.Of(CartPage.ThreeDsPaymentModal.ThreeDSChallengeWindow), IsEqualTo.True()));¶            //Try to access the modal quickly to make sure it is a 3DS Challenge¶            user.AttemptsTo(SwitchFrame.ToFrameByXpath("//iframe[contains(@id,'PayCentral-3DSecure-ChallengeWindow')]"));¶            user.AsksFor(Appearance.Of(CartPage.ThreeDsPaymentModal.PayCentralOKButton)).Should().BeTrue();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶        }¶")
Diff(INSERT,"¶        /// <summary>¶        /// Post the first batch from grid¶        /// </summary>¶        public void PostTheFirstBatch()¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InImis(BatchesPage.BaseUrl));¶¶            user.AttemptsTo(Click.On(BatchesPage.BatchList.SelectAQuery.Cell(1, 2, link: true)));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.SetReadyOrOpenButton));¶¶            user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Ready for review"));¶¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(BatchDetailPage.BatchSummary.PostBatchButton));¶            user.AttemptsTo(AcceptAlert.ThatMustExist());¶¶            user.WaitsUntil(UserMessageState.HasAny().WithMessage("Batch submitted for posting."), IsEqualTo.True());¶        }¶¶        /// <summary>¶        /// Verify batch is posted¶        /// </summary>¶        public void VerifyThatTheBatchIsPosted()¶        {¶            var user = LoggedInUser();¶¶            // Refresh page to update status¶            user.AttemptsTo(Refresh.Browser());¶            user.WaitsUntil(Text.Of(BatchDetailPage.BatchSummary.Status), IsEqualTo.Value("Closed"));¶        }¶¶        private void GotoAccountArea(ImisUser user)¶        {¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountArea.PartyName), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.MyAccountLink));¶        }¶¶        private void FindPaymentAndStartAdjustment(IActor user, string adjustmentType)¶        {¶            var payerName = _context.GetData<string>("FullName");¶¶            user.AttemptsTo(FindPayment.ByPayerName(payerName).WithStatus("Paid"));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(PaymentDetails.AdjustPaymentButton));¶            user.AttemptsTo(Select.ByText(PaymentDetails.RefundDisplay.AdjustmentType, $"{adjustmentType} the payment"));¶        }¶¶        private double GetAvailableCreditValue(IActor user)¶        {¶            var alert = AccountPageStaff.AlertDisplay.AlertContainer(_availableCreditAlertText);¶            try¶            {¶                user.WaitsUntil(Appearance.Of(alert), IsEqualTo.True(), timeout: 5);¶            }¶            catch (WaitingException)¶            {¶                return 0; // user doesn't have available credit¶            }¶¶            return double.Parse(user.AsksFor(Text.Of(alert))¶                .Replace(_availableCreditAlertText, "")¶                .Trim());¶        }¶¶        /// <summary>¶        /// Verify Pay Central Live payment exists from context last name and total amount¶        /// </summary>¶        public void VerifyPaymentPayCentralLive()¶        {¶            var user = LoggedInUser();¶            // get data to verify from context¶            var lastName = _context.GetData<string>("LastName");¶            var totalAmount = _context.GetData<string>("TotalAmount");¶            // navigate to Pay Central Live page¶            user.AttemptsTo(Browse.InImis(PayCentralLivePage.BaseUrl));¶            // find the payment via last name from context¶            user.WaitsUntil(Existence.Of(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox), IsEqualTo.True());¶            user.AttemptsTo(SendKeys.To(PayCentralLivePage.DataVaultLiveDisplay.SearchNameTextBox, lastName));¶            user.AttemptsTo(Click.On(PayCentralLivePage.DataVaultLiveDisplay.SearchButton));¶            //user.AttemptsTo(Waiting.InSeconds(2));¶            // verify Pay Central Live payment from context data exists. Date is assumed to be today¶            user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 2)), ContainsSubstring.Text(lastName));¶            user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 4)), ContainsSubstring.Text(DateTime.Now.ToShortDateString()));¶            user.WaitsUntil(Text.Of(PayCentralLivePage.DataVaultLiveDisplay.DataVaultLiveGrid.Cell(1, 5)), ContainsSubstring.Text(totalAmount));¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Finance/FinanceTestMethods.cs)
Diff(EQUAL,"{¶    public class CreateNewEventTestMethods : TestMethodBase¶    {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        public CreateNewEventTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶        }¶¶        /// <summary>¶        /// Creates a new event ¶        /// </summary>¶        /// <param name="createEventData"></param>¶        public void AddNewEvent(CreateEventData createEventData)¶        {¶            var user = User("AddNewEvent");¶            user.AttemptsTo(CreateEvent.AsNewEvent(createEventData));¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Events/CreateNewEventTestMethods.cs)
Diff(EQUAL,"{¶    public class ContactTestMethods : TestMethodBase¶    {¶        public ContactTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            AddContactPage = new AddContactPage();¶            ContactGeneralSettingsPage = new SystemOptionsConfigPage("ContactsGeneral");¶            AccountArea = new AccountArea("AccountArea");¶            AccountPage = new AccountPage();¶            AccountPageStaff = new AccountPageStaff();¶")
Diff(INSERT,"            AdjustMembershipFeesPage = new AdjustMembershipFeesPage();¶")
Diff(EQUAL,"            CreateAccountPage = new CreateAccountPage();¶            VolunteerPanel = new VolunteerPanel("VolunteerSkillsandInterestsc086ad782c1745b4becfd1e2be67910f");¶            VolunteeringTab = new VolunteeringTab();¶            ProfilePanel = new ProfilePanel();¶            Authentication = new Core.Utilities.Authentication(driver, context);¶            PanelDesignerPage = new PanelDesignerPage();¶            ContactAddressEditor = new ContactAddressEditor("ContactAddress");¶            PersonalInformationProfilePanel = new PersonalInformationProfilePanel();¶            SignInTestMethods = new SignInTestMethods(driver, context);¶        ")
Diff(INSERT,"    FindContactsPage = new FindContactsPage();¶        }¶¶        public FindContactsPage FindContactsPage { get; set; ")
Diff(EQUAL,"}")
Diff(DELETE,"¶")
Diff(EQUAL,"¶        public AddContactPage AddContactPage { get; set; }¶        public SystemOptionsConfigPage ContactGeneralSettingsPage { get; set; }¶        private AccountArea AccountArea { get; set; }¶        public AccountPage AccountPage { get; set; }¶        public AccountPageStaff AccountPageStaff { get; set; }¶")
Diff(INSERT,"        public AdjustMembershipFeesPage AdjustMembershipFeesPage { get; set; }¶")
Diff(EQUAL,"        public CreateAccountPage CreateAccountPage { get; set; }¶        public VolunteerPanel VolunteerPanel { get; set; }¶        public VolunteeringTab VolunteeringTab { get; set; }¶        public ProfilePanel ProfilePanel { get; set; }¶        public Core.Utilities.Authentication Authentication { get; set; }¶        public PanelDesignerPage PanelDesignerPage { get; set; }¶        public ContactAddressEditor ContactAddressEditor { get; set; }¶        public PersonalInformationProfilePanel PersonalInformationProfilePanel { get; set; }¶        public SignInTestMethods SignInTestMethods { get; set; }¶¶        public void AddContact(ContactData contactData)¶        {¶            //TODO this will need to be converted into an interaction with more fields to enter¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(AddContactPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.FirstName, contactData.FirstName));¶            user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.LastName, contactData.LastName));¶            user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.PrimaryOrganizationSelector.PrimaryOrganization.TextBox, ¶                contactData.Organization));¶            if (!string.IsNullOrEmpty(contactData.Email))¶            {¶                string randNumber = TestHelper.GenerateRandomString(5);¶                user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.Email, randNumber + contactData.Email));¶            }¶            if (!string.IsNullOrEmpty(contactData.Password))¶            {¶                user.AttemptsTo(SetWhenProvided.CheckBox(AddContactPage.ContactAccountCreator.CreateAnAccountCheckBox, true));¶                user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.Password, contactData.Password));¶                user.AttemptsTo(SetWhenProvided.TextBox(AddContactPage.ContactAccountCreator.ConfirmPassword, contactData.Password));¶            }¶            user.AttemptsTo(ClickCommandButton.Save());¶")
Diff(INSERT,"            if (!contactData.ExpectError)¶            {¶    ")
Diff(EQUAL,"            user.WaitsUntil(Appearance.Of(AccountPageStaff.ContactProperties.QueryType("ID")), IsEqualTo.True());¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            _context.UpsertData("ID", user.AskingFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID"))));¶")
Diff(INSERT,"            }")
Diff(EQUAL,"¶        }¶¶        public void DeleteContact()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(AccountPageStaff.ContactProfile.EditButton));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(AccountPage.ContactProfile.ProceedContactErasureDialog.ButtonEraseContact));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(SwitchFrame.ToFrameByXpath("//iframe[contains(@name,'GenericWindow')]"));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(SendKeys.To(AccountPage.ContactProfile.ProceedContactErasureDialog.TextBoxContactId, _context.GetData<string>("ID")).ThenHitEnter());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AsksFor(Appearance.Of(AccountPage.ContactProfile.ProceedContactErasureDialog.ButtonRequestContactErasure)).Should().BeTrue();¶            user.AttemptsTo(DoubleClick.On(AccountPage.ContactProfile.ProceedContactErasureDialog.ButtonRequestContactErasure));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶        }¶¶        /// <summary>¶        /// Verifies the contact was added¶        /// </summary>¶        /// <param name="contactData">Contact data from feature file</param>¶        public void VerifyContact(ContactData contactData)¶        {¶            var user = LoggedInUser();¶            //TODO this will need to be converted into an interaction with more verification fields¶            user.AskingFor(Text.Of(AccountPage.ContactProfile.ContactName.FullName)).Should().Contain(contactData.FirstName);¶            user.AskingFor(Text.Of(AccountPage.ContactProfile.ContactName.FullName)).Should().Contain(contactData.LastName);¶        }¶¶¶        public void CreateNewContact(ContactData contactData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InMemberSite(CreateAccountPage.BaseUrl));¶            //I've changed the ones that are required to SendKeys. Since the user will be required to enter the information or else the test will fail¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.FirstName, contactData.FirstName));¶            user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.MiddleName, contactData.MiddleName));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.LastName, contactData.LastName));¶            string randNumber = TestHelper.GenerateRandomString(5);¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Email, randNumber + ")
Diff(INSERT,"(")
Diff(EQUAL,"contactData.Email")
Diff(INSERT," ?? "test@imisdemo.com")")
Diff(EQUAL,"));¶            user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.OrganizationName, contactData.Organization));¶            user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.Phone, contactData.Phone));¶            user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountPage.ContactAccountCreator.MobilePhone, contactData.MobilePhone));¶            user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.CountrySelect, contactData.Country")
Diff(INSERT," ?? "Zambia"")
Diff(EQUAL,"));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Address1, contactData.Address1")
Diff(INSERT," ?? "123 Some Street"")
Diff(EQUAL,"));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.City, contactData.City")
Diff(INSERT," ?? "Austin"")
Diff(EQUAL,"));¶            user.AttemptsTo(SetWhenProvided.DropDown(CreateAccountPage.ContactAccountCreator.SelectSubEntityCode, contactData.State));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.PostalCode, contactData.PostalCode")
Diff(INSERT," ?? "11111"")
Diff(EQUAL,"));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.Password, contactData.Password")
Diff(INSERT," ?? "demo123"")
Diff(EQUAL,"));¶            user.AttemptsTo(SendKeys.To(CreateAccountPage.ContactAccountCreator.ConfirmPassword, contactData.Password")
Diff(INSERT," ?? "demo123"")
Diff(EQUAL,"));¶            user.AttemptsTo(ClickCommandButton.Save());¶        }¶¶        public void VerifyLoggedInUserContact(ContactData contactData)¶        {¶            var user = LoggedInUser();¶            user.AskingFor(Text.Of(AccountArea.PartyName)).Should().Contain(contactData.FirstName);¶        }¶¶        public void AccessTheAccountPageWithPanelDefinition()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Waiting.InSeconds(3));//Needed before trying to load AccountPageUrl¶            user.AttemptsTo(Browse.InMemberSite(AccountPage.BaseUrl));¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountPage.Tab("Volunteering")), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountPage.Tab("Volunteering")));¶            user.AttemptsTo(ScrollToElement.At(VolunteerPanel.VolunteerInformationPanel));¶            user.AttemptsTo(Click.On(VolunteeringTab.VolunteerTabGroup.GetTab("Volunteer Skills and Interests")));¶            user.AttemptsTo(Click.On(VolunteerPanel.addButton));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶        }¶¶        public void EnterAngleBracketsInAPanelTextField()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SetWhenProvided.DropDown(VolunteerPanel.VolunteerSkill, "Marketing"));¶            user.AttemptsTo(SetWhenProvided.DropDown(VolunteerPanel.VolunteerSkillLevel, "Intermediate"));¶            user.AttemptsTo(SendKeys.To(VolunteerPanel.VolunteerSkillNotes, "If < 75 and > 50 percent"));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void VerifyAngleBracketsExists()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AsksFor(Text.Of(VolunteerPanel.VolunteeringGrid.Cell(1, 3))).Should().Be("If < 75 and > 50 percent");¶            user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel spinner needs time to refresh¶            user.AttemptsTo(Wait.Until(Existence.Of(VolunteerPanel.VolunteeringGrid.Cell(1, 4)), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(VolunteerPanel.VolunteeringGrid.Cell(1, 4)));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());           ¶            user.AskingFor(Text.Of(VolunteerPanel.VolunteerSkillNotes)).Should().ContainAny("If < 75 and > 50 percent");¶            user.AttemptsTo(ClickCommandButton.Cancel());¶        }¶¶        public void AddAValueToTheProfilePanel() ¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InMemberSite(AccountPage.BaseUrl));¶            user.AttemptsTo(Click.On(ProfilePanel.EditRecordButton));¶            user.AttemptsTo(SendKeys.To(ProfilePanel.AboutField, "About text test").UsingClearMethod());¶            user.AttemptsTo(SendKeys.To(ProfilePanel.WebsiteField, "www.advsol.com").UsingClearMethod());¶            user.AttemptsTo(ClickCommandButton.Save());¶¶            user.AttemptsTo(Waiting.ForPageReload()); //UpdatePanel spinner needs time to refresh¶            user.AskingFor(Text.Of(ProfilePanel.AboutText)).Should().Contain("About text test");¶            user.AskingFor(Text.Of(ProfilePanel.WebsiteText)).Should().Contain("www.advsol.com");¶            Authentication.LogOut();¶        }¶¶        public void SetPanelEditorPropertyToReadOnly() ¶        {¶            var user = LoggedInUser();¶            SignInTestMethods.ToTheSiteWithUserName("asoria", "Mbrr");¶            user.AttemptsTo(Browse.InMemberSite(AccountPage.BaseUrl));¶            user.AttemptsTo(Click.On(ProfilePanel.EditPanelButton));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            //Set property to read-only¶            user.AttemptsTo(Click.On(PanelDesignerPage.PanelDesignerGrid.Cell(2, 1, postXPath: "//div[1]//div[4]//label[contains(text(),'Read-only')]")));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            Authentication.LogOut();¶        }¶¶        public void VerifyProfilePanelValueCannotBeModified() ¶        {¶            var user = LoggedInUser();¶            SignInTestMethods.ToTheSiteWithUserName("stevec", "Mbrr");¶            user.AttemptsTo(Browse.InMemberSite(AccountPage.BaseUrl));¶            user.AttemptsTo(Click.On(ProfilePanel.EditRecordButton));¶            user.AttemptsTo(ScrollToElement.At(ProfilePanel.AboutField));¶            ¶            //Get value of read-only field¶            user.AskingFor(HtmlAttribute.Of(ProfilePanel.WebsiteReadOnly, "href")).Should().Contain("http://www.advsol.com");¶        }¶¶")
Diff(INSERT,"        public void VerifyTheInvalidCharacterWarning()¶        {¶            var user = LoggedInUser();¶            user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterValidatorWarning), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.InvalidCharacterConfirmValidatorWarning), IsEqualTo.True());¶¶        }¶¶")
Diff(EQUAL,"        public void NavigateToTab(string tab)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Wait.Until(Existence.Of(AccountPageStaff.Tab(tab)), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab(tab)));¶            user.AttemptsTo(Waiting.InSeconds(3));¶        }¶¶        public void VerifyMiniProfileValues(Table table)¶        {¶            foreach (var row in table.Rows)¶            {¶                string field, val;¶                row.TryGetValue("Field", out field);¶                row.TryGetValue("Value", out val);¶                VerifyMiniProfileField(field, val);¶            }¶        }¶¶        public void VerifyMiniProfileField(string field, string expectedValue)¶        {¶            var user = LoggedInUser();¶            user.AskingFor(Text.Of(AccountPage.ContactProfile.ContactAddress.GetLocatorById(field))).Should().Contain(expectedValue);¶        }¶¶        public void VerifyContactAddressField(string field, string expectedValue)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(ContactAddressEditor.AddressStrip.GetTabByName("Address")));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Hover.Over(ContactAddressEditor.ContactAddress.GetVisibleTabItemById("LinkEmail")));¶            user.AskingFor(Text.Of(ContactAddressEditor.ContactAddress.GetVisibleTabItemById("LinkEmail"))).Should().Contain(expectedValue);¶        }¶¶        public void VerifyProfileInformationField(string field, string expectedValue)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(ScrollToElement.At(PersonalInformationProfilePanel.PersonalInformationContentPanel));¶            user.AskingFor(Text.Of(PersonalInformationProfilePanel.LocatorByXPath(field))).Should().Contain(expectedValue);¶        }¶¶        public void VerifyTabPanelField(string panel, string field, string expectedValue)¶        {¶            switch (panel)¶            {¶                case "ProfileInformation":¶                    VerifyProfileInformationField(field, expectedValue);¶                    break;¶                case "ContactAddress":¶                    VerifyContactAddressField(field, expectedValue);¶                    break;¶            }¶        }¶¶        public void VerifyProfileTabValues(string tab, Table table)¶        {¶            NavigateToTab(tab);¶¶            foreach (var row in table.Rows)¶            {¶                string profileSection, field, val;¶                row.TryGetValue("Profile Section", out profileSection);¶                row.TryGetValue("Field", out field);¶                row.TryGetValue("Value", out val);¶                VerifyTabPanelField(profileSection, field, val);¶            }¶        }¶¶        public void PrepSiteForContactErasure()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(ContactGeneralSettingsPage.BaseUrl));¶            if(!user.AsksFor(SelectedState.Of(ContactGeneralSettingsPage.CheckBox(04).Control)))¶                user.AttemptsTo(Click.On(ContactGeneralSettingsPage.CheckBox(04).Control));¶            user.AttemptsTo(ClickCommandButton.Save());¶        }¶")
Diff(INSERT,"        public void PressAdjustMembershipButton()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));¶            NavigateToTab("Membership");¶            user.AttemptsTo(Click.On(AccountPageStaff.MembershipTab.AdjustMembershipButton));¶        }¶        public void VerifyAdjustMembershipButtonHasOptions(string firstOption, string secondOption)¶        {¶            var user = LoggedInUser();¶¶            var adjustFeesLink = AccountPageStaff.MembershipTab.AdjustFeesLink;¶            var cancelItemsLink = AccountPageStaff.MembershipTab.CancelItemsLink;¶¶¶            user.WaitsUntil(Existence.Of(adjustFeesLink),IsEqualTo.True());¶            user.AsksFor(Text.Of(adjustFeesLink)).Should().Be(firstOption);¶            user.WaitsUntil(Existence.Of(cancelItemsLink),IsEqualTo.True());¶            user.AsksFor(Text.Of(cancelItemsLink)).Should().Be(secondOption);¶        }¶        public void CancelFirstItem()¶        {¶            var user = LoggedInUser();¶            NavigateToMidtermChanges(AccountPageStaff.MembershipTab.CancelItemsLink);¶            var secondMembershipItemCancellationLink = AdjustMembershipFeesPage.SubscriptionsGrid.LinkInTable("Cancel");¶¶            user.AttemptsTo(Click.On(secondMembershipItemCancellationLink));¶            user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));¶        }¶        public void AdjustFirstFee(int desiredAmount)¶        {¶            var user = LoggedInUser();¶            NavigateToMidtermChanges(AccountPageStaff.MembershipTab.AdjustFeesLink);¶            var firstMembershipItemAdjustmentAmount = AdjustMembershipFeesPage.SubscriptionsGrid.CellInputWithText("0.00",exactMatch: true);¶¶            user.AttemptsTo(SendKeys.To(firstMembershipItemAdjustmentAmount, desiredAmount.ToString()));¶            user.AttemptsTo(Click.On(AdjustMembershipFeesPage.AdjustmentSubmitButton));¶        }¶        public void NavigateToMidtermChanges(IWebLocator adjustmentLinkLocator)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(AccountPageStaff.BaseUrl));¶            PressAdjustMembershipButton();¶            user.AttemptsTo(Click.On(adjustmentLinkLocator));¶        }¶¶        public void VerifyUserMessage(string userMessage)¶        {¶            var user = LoggedInUser();¶            user.WaitsUntil(Text.Of(AdjustMembershipFeesPage.InfoMessage), ContainsSubstring.Text(userMessage));¶        }¶¶        public void VerifyContactExists(string lastName, string firstName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 2))).Trim().Should().Contain($"{firstName} {lastName}");¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Community/ContactTestMethods.cs)
Diff(EQUAL,"{¶    public class RiseTestMethods : TestMethodBase¶    {¶        private readonly string disabled = "disabled";¶        private ManageContentPage ManageContentPage { get; }¶        private ManageWebSitesPage ManageWebSitesPage { get; }¶        private WebPartControl ContentItem { get; }¶        private PanelDesignerPage PanelDesignerPage { get;}¶        private PanelDefinitionListPage PanelDefinitionListPage { get; }¶        public ContentGallery ContentGallery { get; set; }¶        public PanelEditor StandaloneEditor { get; set; }¶        public DuplicateMergePage DuplicateMergePage { get; set; }¶")
Diff(INSERT,"        public CommunitiesDashboardPage CommunitiesDashboardPage { get; set; }¶        public AccountArea AccountArea { get; set; }¶        public BigButtonPanelEdit BigButtonPanelEdit { get; set; }¶        public PublishServersListPage PublishServersListPage { get; set; }¶")
Diff(EQUAL,"¶¶        public RiseTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            ManageContentPage = new ManageContentPage();¶            ManageWebSitesPage = new ManageWebSitesPage();¶            PanelDesignerPage = new PanelDesignerPage();¶            ContentItem = new WebPartControl("ContentCollectionOrganizerCommon");¶            PanelDefinitionListPage = new PanelDefinitionListPage();¶            ContentGallery = new ContentGallery("");¶            StandaloneEditor = new PanelEditor("");¶            DuplicateMergePage = new DuplicateMergePage();¶")
Diff(INSERT,"            CommunitiesDashboardPage = new CommunitiesDashboardPage();¶            AccountArea = new AccountArea("AccountArea");¶            BigButtonPanelEdit = new BigButtonPanelEdit();¶            PublishServersListPage = new PublishServersListPage();¶")
Diff(EQUAL,"        }¶¶        public void VerifyDynamicPageTitle()¶        {¶            var user = User("VerificationUser");¶            // verify title uses defined page suffix¶            _driver.Title.Should().BeEquivalentTo("Leadership Summit - iMIS Annual Conference");¶¶            // verify og:title meta tag uses dynamic title but not the page title suffix¶            var titleTag = user.AsksFor(HtmlAttribute.Of(PageBase.MetaOgTitle, "content"));¶            titleTag.Should().BeEquivalentTo("Leadership Summit");¶        }¶¶        public void GoToLeaderShipSubmit()¶        {¶            var user = User("SummitUser");¶            user.AttemptsTo(GoToStarterEvent.LeadershipSummit().InAnnualConferenceSite());¶        }¶¶        public void CreateAndPublish(string content, string path)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, path));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.NewMenuItem), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.WebsiteContentItem), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.WebsiteContentItem));¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.ContentTitle, content));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.PublishFileName, content));¶            user.AttemptsTo(Click.On(ObjectBrowserDialog.RadTabStrip.GetTab("Access settings")));¶            user.AttemptsTo(Select.ByText(ObjectBrowserDialog.AccessSettingsDropdown.DropDown, "Certification Managers Full Control"));¶            user.AsksFor(HtmlAttribute.Of(ObjectBrowserDialog.AccessSettingsDropdown.DropDown, disabled)).Should().BeNull();¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void VerifyDisabled(string path, string content, string tab)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, path));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶            user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.ContentList(content)));¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.AttemptsTo(Click.On(ObjectBrowserDialog.RadTabStrip.GetTab(tab)));¶            user.AsksFor(HtmlAttribute.Of(ObjectBrowserDialog.AccessSettingsDropdown.DropDown, disabled)).Should().NotBeNull();¶            user.AsksFor(HtmlAttribute.Of(ObjectBrowserDialog.PreconfiguredSetRadio, disabled)).Should().NotBeNull();¶            user.AsksFor(HtmlAttribute.Of(ObjectBrowserDialog.CustomSecurityRadio, disabled)).Should().NotBeNull();¶        }¶¶        public void CreateTestContentWithCCO(string folderType, string ContentType)¶        {¶            CreateWebsiteContent(folderType);¶¶            // Add CCO to content¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddContent));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem(folderType)));¶            user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.ContentItem(ContentType)));¶        }¶¶        public void CreateWebsiteContent(string ContentName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("@")));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(")
Diff(DELETE,"2")
Diff(INSERT,"1")
Diff(EQUAL,"));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.WebsiteContentItem), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.WebsiteContentItem));¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.ContentTitle, ContentName));¶        ")
Diff(DELETE,"    // jkh?? field is required but not filled, save fails¶")
Diff(INSERT,"}¶¶        public void CreateMemberWebsiteContent(string ContentName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("@")));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Quick Start Sites")));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Member Responsive")));¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.NewMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.WebsiteContentItem), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.WebsiteContentItem));¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶ ")
Diff(EQUAL,"           user.AttemptsTo(SendKeys.To(ObjectBrowserDialog.")
Diff(DELETE,"PublishFileNam")
Diff(INSERT,"ContentTitl")
Diff(EQUAL,"e, ContentName));¶        }¶¶        public void WhenIConfigureCCO()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame).AndSkipDefault());¶            user.AsksFor(Existence.Of(ObjectBrowserDialog.ContentTitle)).Should().BeTrue();¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Hover.Over(ContentCollectionOrganizerEdit.WizardModeControl.Control));¶            user.AttemptsTo(Click.On(ContentCollectionOrganizerEdit.WizardModeControl.Control));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Wait.Until(Appearance.Of(ContentCollectionOrganizerEdit.SequentialStepsControl.Control), IsEqualTo.True()));¶            user.AttemptsTo(Hover.Over(ContentCollectionOrganizerEdit.SequentialStepsControl.Control));¶            user.AttemptsTo(Click.On(ContentCollectionOrganizerEdit.SequentialStepsControl.Control));¶            user.AttemptsTo(ClickCommandButton.Save());¶        }¶¶        public void VerifyCCOURLParameterNameIsNotOverwritten()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.AttemptsTo(Click.On(ContentItem.Configures));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AsksFor(ValueAttribute.Of(ContentCollectionOrganizerEdit.URLKeyNameControl.Control)).Should().Be("New_ContentCollectionOrganizerCommon");¶        }¶¶        ¶        public void CreatePanelWithName(string parentType,string panelType, string panelName, Table propTable = null, bool randomizeName = true)¶        {¶            var user = LoggedInUser();¶            var sourceName = panelName.Replace(" ", "") + "Source";¶            var panel = new PanelData(panelName, parentType, panelType, sourceName, randomizeName);¶¶            user.AttemptsTo(Browse.InStaffSite(PanelDesignerPage.BaseUrl));¶¶")
Diff(INSERT,"            if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName,exactMatch: true)))) ¶            {¶                _context.UpsertData(panel.Name, panel);¶                SourceAndPanelCleanup(panel.Name);¶            }¶¶")
Diff(EQUAL,"            InitializePanel();¶            InitializeSource();¶¶            if (propTable != null)¶                AddPropertiesFromTable(propTable, panel);¶¶            _context.UpsertData(panel.Name, panel);¶¶            void InitializePanel()¶            {¶                //Panel Name & Parent Type¶                user.WaitsUntil(Appearance.Of(PanelDesignerPage.AddPanelDefinitionLink), IsEqualTo.True());¶                user.AttemptsTo(Click.On(PanelDesignerPage.AddPanelDefinitionLink));¶                user.AttemptsTo(SendKeys.To(PanelDesignerPage.PanelNameTextBox, panel.PanelName));¶                user.AttemptsTo(SetWhenProvided.DropDown(PanelDesignerPage.ParentTypeDropDown, parentType));¶¶                //Panel Type¶                var isSingleInstance = panelType.Equals("Single-Instance", StringComparison.OrdinalIgnoreCase);¶                SelectInstanceRadioButton(isSingleInstance);¶                user.AttemptsTo(SwitchFrame.ToActiveFrame());¶            }¶            void InitializeSource()¶            {¶                //Add Panel Source¶                user.AttemptsTo(Click.On(PanelDesignerPage.CreateSourceLink));¶                user.AttemptsTo(SwitchFrame.ToGenericWindow());¶                user.AttemptsTo(SendKeys.To(PanelDesignerPage.SourceNameTextBox, panel.Source));¶                user.AttemptsTo(ClickCommandButton.Ok());¶            }¶        }¶¶        private void AddPropertiesFromTable(Table propTable, PanelData panelData)¶        {¶            var user = LoggedInUser();¶            var propSet = propTable.CreateSet<PanelPropertyData>();¶            AddProperties(propSet, panelData);¶¶            //Save and Exit the Panel Design Dialogue¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        private void AddProperties(IEnumerable<PanelPropertyData> propSet,PanelData panelData)¶        {¶            AddColumns(NumColumnsRequired(propSet));¶            foreach (PanelPropertyData prop in propSet)¶                AddProperty(prop,panelData);¶            panelData.Properties = panelData.Properties.Concat(propSet);¶            _context.UpsertData(panelData.Name,panelData);¶¶            int NumColumnsRequired(IEnumerable<PanelPropertyData> propList)¶            {¶                int maxColRef = 0;¶                foreach (var prop in propList)¶                {¶                    var colRef = Convert.ToInt32(prop.Col);¶                    if (colRef > maxColRef)¶                        maxColRef = colRef;¶                }¶                return maxColRef; // We start with 1 column already, so returning the ref number is sufficient¶            }¶        }¶¶        private void AddProperty(PanelPropertyData prop,PanelData panelData)¶        {¶            //Add Property¶            AddPropertyToPanel(prop,panelData);¶¶            //Move property into panel if column and row specified¶            if (prop.HasGridCoordinate())¶                PropertyDragDropIntoLayout(prop);¶¶            //Add to panel object¶            panelData.Properties.Append(prop);¶        }¶¶        private void AddPropertyToPanel(PanelPropertyData prop,PanelData panelData, bool shouldExitAfter = true)¶        {¶            var user = LoggedInUser();¶¶            StartAddPropertyDialogue();¶            if (!")
Diff(DELETE,"string.IsNullOrEmpty(")
Diff(EQUAL,"prop.PreDefinedValuesType")
Diff(INSERT,".IsNullOrEmpty(")
Diff(EQUAL,"))¶                HandlePredefinedValuesProperty();¶            if (shouldExitAfter)¶                user.AttemptsTo(ClickCommandButton.Ok());¶            else¶                user.AttemptsTo(ClickCommandButton.Save());¶¶            panelData.Properties.Append(prop);¶            _context.UpsertData(panelData.Name, panelData);¶¶            void StartAddPropertyDialogue()¶            {¶                user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶                //Add Panel Source Property¶                user.WaitsUntil(Existence.Of(PanelDesignerPage.AddPropertyLink), IsEqualTo.True());¶                user.AttemptsTo(Click.On(PanelDesignerPage.AddPropertyLink));¶                user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶                //Set property name¶                user.AttemptsTo(SendKeys.To(PanelDesignerPage.PropertyNameTextBox, prop.Name));¶¶                //Set property type¶                if (")
Diff(DELETE,"string")
Diff(INSERT,"prop.Type")
Diff(EQUAL,".IsNullOrEmpty(")
Diff(DELETE,"prop.Type")
Diff(EQUAL,"))¶                    prop.Type = "Text";¶                user.AttemptsTo(Select.ByText(PanelDesignerPage.PropertyTypeDropDown, prop.Type));¶¶                //Set Log All Changes¶                if (prop.ShouldLogChanges)¶                    if(user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))¶                        user.AttemptsTo(Check.On(PanelDesignerPage.LogAllChangesCheckBox));¶¶                //Set Display as Single/Multi line¶                if (prop.Type.Equals("Text",StringComparison.OrdinalIgnoreCase) && ")
Diff(DELETE,"string.IsNullOrEmpty(")
Diff(EQUAL,"prop.PreDefinedValuesType")
Diff(INSERT,".IsNullOrEmpty(")
Diff(EQUAL,"))¶                    if (prop.SingleOrMultiLineTextBox != null && prop.SingleOrMultiLineTextBox.Equals("Multi",StringComparison.OrdinalIgnoreCase))¶                        user.AttemptsTo(Click.On(PanelDesignerPage.DisplayAsMultiLineRadio)); ¶                    else¶                        user.AttemptsTo(Click.On(PanelDesignerPage.DisplayAsSingleLineRadio));¶            }¶            void HandlePredefinedValuesProperty()¶            {¶                var preDefinedValueType = prop.PreDefinedValuesType.ToLower();¶                var preDefinedValue = prop.PredefinedValuesOption;¶                user.AttemptsTo(Check.On(PanelDesignerPage.PreDefinedValuesCheckBox));¶¶                switch (preDefinedValueType)¶                {¶                    case "query":¶                        AddQueryToProperty(preDefinedValue);¶                        break;¶                    case "sourcetable":¶                        AddSourceTableToProperty(preDefinedValue);¶                        break;¶                    case "explicitvalues":¶                        AddExplicitValuesToProperty(Convert.ToInt32(preDefinedValue));¶                        break;¶                    default:¶                        throw new NotImplementedException($"No predefined values with {preDefinedValueType} \"defined by\" type implemented");¶                }¶¶                void AddQueryToProperty(string fullQueryPath)¶                {¶                    var queryName = fullQueryPath.Split('/').Last();¶                    user.AttemptsTo(Click.On(PanelDesignerPage.DefinedByQueryRadioButton));¶                    user.AttemptsTo(Click.On(PanelDesignerPage.QueryBrowseButton));¶                    user.AttemptsTo(SwitchFrame.ToObjectBrowser().AndSkipDefault());¶                    user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, fullQueryPath));¶                    user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶                    user.AttemptsTo(Click.On(ObjectBrowserComponents.ContentItem(queryName)));¶                    user.AttemptsTo(ClickCommandButton.Ok());¶                    user.AttemptsTo(SwitchFrame.ToGenericWindow());¶                }¶                void AddSourceTableToProperty(string sourceTableName)¶                {¶                    user.AttemptsTo(Click.On(PanelDesignerPage.DefinedBySourceTableRadioButton));¶                    user.AttemptsTo(Select.ByText(PanelDesignerPage.SourceTableDropDown, sourceTableName));¶                }¶                void AddExplicitValuesToProperty(int itemCount)¶                {¶                    user.AttemptsTo(Click.On(PanelDesignerPage.DefinedByExplicitListRadioButton));¶                    for (int i = 0; i < itemCount; i++)¶                        AddExplicitListItemToProperty(i);¶¶                    void AddExplicitListItemToProperty(int i)¶                    {¶                        //Add Panel Source Property Explicit List Value              ¶                        user.AttemptsTo(Click.On(PanelDesignerPage.ExplicitListAddNewButton));¶¶                        user.WaitsUntil(Existence.Of(PanelDesignerPage.ExplicitListItemDataValue), IsEqualTo.True());¶                        user.AttemptsTo(SendKeys.To(PanelDesignerPage.ExplicitListItemDataValue, "DataValue" + i));¶¶                        user.WaitsUntil(Existence.Of(PanelDesignerPage.ExplicitListItemDisplayValue), IsEqualTo.True());¶                        user.AttemptsTo(SendKeys.To(PanelDesignerPage.ExplicitListItemDisplayValue, "DisplayValue" + i));¶¶                        user.AttemptsTo(Click.On(PanelDesignerPage.ExplicitListInsertButton));¶                    }¶                }¶¶            }¶        }¶¶        public void AddPanelDatasourcePropertiesToGridWithExplicitList(Table table, string panelName, string actionAfter = "exit")¶        {¶            var user = LoggedInUser();¶            bool shouldExit = actionAfter.Equals("exit", StringComparison.OrdinalIgnoreCase);¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var propSet = table.CreateSet<PanelPropertyData>();¶            foreach (var prop in propSet)¶            {¶                AddPropertyToPanel(prop, panel, shouldExit);¶                if (prop.HasGridCoordinate())¶                    PropertyDragDropIntoLayout(prop);¶            }¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void AddPanelDatasourcePropertiesWithExplicitList(Table table,string panelName, string actionAfter = "exit")¶        {¶            bool shouldExit = actionAfter.Equals("exit", StringComparison.OrdinalIgnoreCase);¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var propSet = table.CreateSet<PanelPropertyData>();¶            foreach (var prop in propSet)¶                AddPropertyToPanel(prop, panel, shouldExit);¶        }¶¶        public void VerifyPanelPropertiesExplicitListIsCleared()¶        {¶            var user = LoggedInUser();¶¶            //Verify state¶            user.AskingFor(Text.Of(PanelDesignerPage.PropertyNameTextBox)).Should().BeNullOrEmpty();¶            user.AskingFor(Text.Of(PanelDesignerPage.ExplicitListEmptyMessage)).Should().NotBeNullOrEmpty();¶¶            user.AttemptsTo(Click.On(PanelDesignerPage.CancelButton));¶            user.Verifies(SwitchFrame.ToGenericWindow().IsClosed());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶        }¶¶        public void AddPanelDatasourcePropertyWithReservedName(Table table) ¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            //Add Panel Source Property¶            user.AttemptsTo(Click.On(PanelDesignerPage.AddPropertyLink));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(Waiting.ForPageReload()); ; //Need pause for page to fully load¶            foreach (var i in table.Rows) ¶            {               ¶                user.AttemptsTo(SendKeys.To(PanelDesignerPage.PropertyNameTextBox, ((string[])i.Values)[0]));¶                user.AttemptsTo(Click.On(PanelDesignerPage.AddContinueButton));¶                IAlert alert = _driver.SwitchTo().Alert();               ¶                if (alert != null)¶                {¶                    user.AttemptsTo(Waiting.InSeconds(1)); //Need pause for JS Pop-up to appear¶                    alert.Dismiss(); ¶                }             ¶            }¶¶            user.AttemptsTo(SendKeys.To(PanelDesignerPage.PropertyNameTextBox, "ValidPropertyName"));¶            user.AttemptsTo(Click.On(PanelDesignerPage.AddContinueButton));¶¶            user.AttemptsTo(Click.On(PanelDesignerPage.CancelButton));¶            user.Verifies(SwitchFrame.ToGenericWindow().IsClosed());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶        }¶¶        public void VerifyReservedPropertyNameWasNotAdded() ¶        {¶            var user = LoggedInUser();¶¶            user.AskingFor(Text.Of(PanelDesignerPage.PanelEditorTreeNewSource)).Should().NotBeNull();¶            user.AskingFor(Text.Of(PanelDesignerPage.PanelEditorTreeNewSource)).Should().NotBe("Item");¶            user.AskingFor(Text.Of(PanelDesignerPage.PanelEditorTreeNewSource)).Should().NotBe("MarkedForDeleteOn");¶            user.AskingFor(Text.Of(PanelDesignerPage.PanelEditorTreeNewSource)).Should().Be("ValidPropertyName");¶        }¶¶        private void SelectInstanceRadioButton(bool isSingleInstance)¶        {¶            ImisUser user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            var radioButton = isSingleInstance¶                ? PanelDesignerPage.SingleInstanceRadioButton¶                : PanelDesignerPage.MultiInstanceRadioButton;¶¶            user.AttemptsTo(Click.On(radioButton));¶        }¶¶        private void PropertyDragDropIntoLayout(PanelPropertyData prop)¶        {¶            var user = LoggedInUser();¶¶            var pathToProperty = PanelDesignerPage.GetPathToSpan(prop.Name);¶            var pathToDrop = PanelDesignerPage.GetPathToGridCell(prop.Col, prop.Row);¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(Drag.AndDrop(pathToProperty, pathToDrop));¶        }¶¶        private void AddColumns(int columnsToAdd)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            for (var i = columnsToAdd; i > 0; i--)¶                user.AttemptsTo(Click.On(PanelDesignerPage.AddAColumnButton));¶        }¶¶        public void SaveAndExitPanelDesigner()¶        {¶            ImisUser user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void SavePanelVerifySuccess()¶        {¶            ImisUser user = LoggedInUser();¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.WaitsUntil(UserMessageState.HasAny().WithMessage("Successfully updated sources and panel"),¶                IsEqualTo.True());¶        }¶¶        public void VerifyPanelInList(string panelName,bool shouldPanelExist = true)¶        {¶            ImisUser user = LoggedInUser();¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            if(user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))¶                user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));¶¶            var panel = (PanelData)_context.DataStorage[panelName];¶            IWebLocator savedPanelLocation = PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panel.PanelName);¶            user.WaitsUntil(Existence.Of(savedPanelLocation), shouldPanelExist ? IsEqualTo.True() : IsEqualTo.False());¶        }¶¶        public void AddRandomPropertiesToPanel(int numProps, string panelName, string destination)¶        {¶            var user = LoggedInUser();¶            var shouldSendPropsToGrid = destination")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty()")
Diff(EQUAL," || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var props = PanelPropertyData.GenerateRandomProperties(numProps, shouldSendPropsToGrid, _context.IsV10);¶            AddProperties(props, panel);¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void AddAllPropertiesToPanel(string panelName, string destination)¶        {¶            var user = LoggedInUser();¶            var shouldSendPropsToGrid = destination")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty()")
Diff(EQUAL," || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var props = PanelPropertyData.GenerateAllProperties(shouldSendPropsToGrid, _context.IsV10);¶            AddProperties(props, panel);¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void DeletePanel(string panelName)¶        {¶            var user = LoggedInUser();¶            var panel = (PanelData)_context.DataStorage[panelName];¶¶            //Show all panel definitions and hit delete on target panel¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))¶                user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));¶            user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.DeleteButtonByLink(panel.PanelName)));¶            ¶            //Respond to confirmation alert¶            IAlert alert = _driver.SwitchTo().Alert();¶            if (alert != null)¶                alert.Accept();¶¶            user.AttemptsTo(Waiting.ForPageReload()); //Need pause for page to fully load¶        }¶¶        public void DeleteProperties(string panelName, string destination)¶        {¶            var user = LoggedInUser();¶            var panel = (PanelData)_context.DataStorage[panelName];¶¶            EditPanelDefinition(panel);¶¶            var shouldDeletePropsInGrid = destination.Equals("grid", StringComparison.OrdinalIgnoreCase);¶            var shouldDeletePropsInSource = destination.Equals("source", StringComparison.OrdinalIgnoreCase);¶¶            if (!shouldDeletePropsInSource && !shouldDeletePropsInGrid)¶                throw new InvalidOperationException(¶                    "Delete Properties method is only designed to target grid or source");¶            ¶            if (shouldDeletePropsInGrid)¶                RemovePropertiesFromGrid();¶            if (shouldDeletePropsInSource)¶                DeletePanelSourceProperties(panel);¶¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶        private void RemovePropertiesFromGrid()¶        {¶            var user = LoggedInUser();¶            //Coordinate row and column respectively¶            var coords = new[] { 0, 0 };¶            for (int i = 0; i < 150; i++)¶                if (user.AsksFor(")
Diff(DELETE,"¶                        ")
Diff(EQUAL,"Existence.Of(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(coords[0], coords[1]))))¶")
Diff(DELETE,"                {¶                    user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method¶")
Diff(EQUAL,"                    DeleteCellOnGrid(coords);¶")
Diff(DELETE,"                }¶")
Diff(EQUAL,"                else¶                    break;¶        }¶¶        /// <summary>¶        /// Attempts to click and switch to next cell -- returns boolean showing if it was successfully able to remove the property¶        /// </summary>¶        /// <param name="rowAndColumn"></param>¶        /// <returns></returns>¶        private void DeleteCellOnGrid(int[] rowAndColumn)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(rowAndColumn[0], rowAndColumn[1])));¶")
Diff(INSERT,"            user.AttemptsTo(Waiting.InMilliSeconds(500));  //Without a small wait, the delete button is not pressed in the DeleteCellOnGrid method¶")
Diff(EQUAL,"            CycleGridCoordinates(rowAndColumn);¶        }¶¶        private void CycleGridCoordinates(int[] rowAndColumn)¶        {¶            //Iterate to next grid cell, next column or overflow to next row and reset column¶            if (rowAndColumn[1]++ < 2)¶                return;¶            //Handle column overflow if applicable¶            rowAndColumn[1] = 0;¶            rowAndColumn[0]++;¶        }¶¶        private void DeletePanelSourceProperties(PanelData panelData)¶        {¶            var user = LoggedInUser();¶            var isSingleInstance = panelData.Instance.Equals("Single-Instance", StringComparison.OrdinalIgnoreCase);¶            SelectInstanceRadioButton(isSingleInstance);¶¶            OpenSourceProperties(panelData.Source);¶¶            foreach (var prop in panelData.Properties)¶                DeleteSourceOrProperty(prop.Name);¶¶            //Single instance panel must also delete source as it has no properties¶            if(isSingleInstance)¶                DeleteSourceOrProperty(panelData.Source);¶        }¶¶        private void OpenSourceProperties(string sourceName)¶        {¶            var user = LoggedInUser();¶            var openSourceButton = PanelDesignerPage.OpenSourcePropertiesButton(sourceName);¶¶            if (user.AsksFor(Existence.Of(openSourceButton)))¶                user.AttemptsTo(Click.On(openSourceButton));¶        }¶¶        public void DeletePanelSource(string panelName)¶        {¶            var user = LoggedInUser();¶¶            var panel = (PanelData)_context.DataStorage[panelName];¶            EditPanelDefinition(panel);¶¶            RemovePropertiesFromGrid();¶            user.AttemptsTo(Waiting.InSeconds(1)); //Need to wait as pressing save too fast can lead to issues with the grid properties not being totally removed yet¶            user.AttemptsTo(ClickCommandButton.Save());¶            var isSingleInstance = panel.Instance.Equals("Single-Instance", StringComparison.OrdinalIgnoreCase);¶            SelectInstanceRadioButton(isSingleInstance);¶¶            DeleteSourceOrProperty(panel.Source);¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        private void DeleteSourceOrProperty(string name)¶        {¶            var user = LoggedInUser();¶¶            var pathToElement = PanelDesignerPage.GetPathToSpan(name);¶            var pathToDeleteButton = PanelDesignerPage.RadMenuDeleteButton;¶¶            user.AttemptsTo(ScrollToElement.At(pathToElement));¶            user.AttemptsTo(Waiting.InMilliSeconds(500)); //Adding some time to ensure the element is in view and the browser isn't jumping around¶            user.AttemptsTo(RightClick.On(pathToElement));¶            Thread.Sleep(500); //Need pause for menu to fully expand so that the right button is pressed¶            user.WaitsUntil(Existence.Of(pathToDeleteButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(pathToDeleteButton));¶            IAlert alert = _driver.SwitchTo().Alert();¶            alert.Accept();¶            user.AttemptsTo(Waiting.InMilliSeconds(500)); // wait for alert to resolve¶        }¶¶        public void VerifyPropertiesDeleted(string panelName, string destination)¶        {¶            var panel = (PanelData)_context.DataStorage[panelName];¶            EditPanelDefinition(panel);¶¶            var shouldVerifyPropsInGrid = destination.Equals("grid", StringComparison.OrdinalIgnoreCase);¶            var shouldVerifyPropsInSource = destination.Equals("source", StringComparison.OrdinalIgnoreCase);¶¶            if (!shouldVerifyPropsInSource && !shouldVerifyPropsInGrid)¶                throw new InvalidOperationException(¶                    "Delete Properties method is only designed to target grid or source");¶¶            if (shouldVerifyPropsInGrid)¶                VerifyGridPropertiesDeleted();¶            if (shouldVerifyPropsInSource)¶                VerifySourcePropertiesDeleted(panel, false);¶        }¶¶        private void VerifyGridPropertiesDeleted()¶        {¶            var user = LoggedInUser();¶            var coords = new[] { 0, 0 };¶            var foundNonDeletedProp = false;¶¶            IWebLocator FindDeleteButton(int row, int col) => PanelDesignerPage.PanelDesignerGrid.DeleteButtonByRowCol(row,col);¶            IWebLocator FindHiddenCell(int row, int col) => PanelDesignerPage.PanelDesignerGrid.HiddenGridCell(row,col);¶¶            //Verify first row doesn't have any cells that can be deleted¶            while (coords[0] < 1 && !foundNonDeletedProp)¶                foundNonDeletedProp = CheckForExistenceAndIterateCoord(false, FindDeleteButton,coords);¶¶¶            //Verify that all remaining rows only have cells that are hidden¶            while (coords[0] < 50 && !foundNonDeletedProp)¶                foundNonDeletedProp = CheckForExistenceAndIterateCoord(true, FindHiddenCell, coords);¶¶            Assert.IsFalse(foundNonDeletedProp, $"Cell detected in Panel Designer grid at row {coords[0]} cell {coords[1]}.");¶¶            bool CheckForExistenceAndIterateCoord(bool shouldExist,Func<int,int,IWebLocator> FindIWebLocatorOfGrid, int[] coordinates)¶            {¶                bool exists = user.AsksFor(Existence.Of(FindIWebLocatorOfGrid(coords[0], coords[1])));¶¶                //If an unexpected existence occurs -- fail out¶                if ((exists && !shouldExist) || (!exists && shouldExist))¶                    return true;¶¶                //Otherwise iterate coordinates¶                CycleGridCoordinates(coordinates);¶¶                return false;¶            }¶        }¶¶        private void VerifySourcePropertiesDeleted(PanelData panel, bool shouldPropertiesExist)¶        {¶            var isSingleInstance = panel.Instance.Equals("Single-Instance", StringComparison.OrdinalIgnoreCase);¶            SelectInstanceRadioButton(isSingleInstance);¶¶            OpenSourceProperties(panel.Source);¶            foreach (var prop in panel.Properties)¶                VerifySourceProperty(prop, shouldPropertiesExist);¶        }¶¶        public void VerifySourceProperty(PanelPropertyData prop, bool shouldFindProp)¶        {¶            VerifySpanNotInPage(prop.Name,shouldFindProp);¶        }¶¶        public void VerifyPanelSourceInList(string panelName, bool shouldSourceExist)¶        {¶            var panel = (PanelData)_context.DataStorage[panelName];¶            EditPanelDefinition(panel);¶            VerifySpanNotInPage(panel.Source,shouldSourceExist);¶        }¶¶        private void VerifySpanNotInPage(string span, bool shouldFindSpan)¶        {¶            var user = LoggedInUser();¶¶            var pathToSpan = PanelDesignerPage.GetPathToSpan(span);¶            var spanFound = user.AsksFor(Existence.Of(pathToSpan));¶            if (shouldFindSpan)¶                Assert.IsTrue(spanFound, $"{span} was not found on page");¶            else¶                Assert.IsFalse(spanFound, $"{span} was found on page");¶        }¶¶        private void EditPanelDefinition(PanelData panelData)¶        {¶            var user = LoggedInUser();¶¶            var pathToPanel = PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelData.PanelName);¶¶            if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))¶                user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));¶¶            user.AttemptsTo(Click.On(pathToPanel));¶        }¶¶        public void OpenWebsiteContent(string ContentName)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("@")));¶            user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.ContentItem(ContentName)));¶        }¶¶        public void VerifyPublishLocationUrlLoads(string ContentName) ¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.PublishLocationLink), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.PublishLocationLink));¶¶            //Wait for browser tab to open and render content record¶            user.AttemptsTo(Waiting.ForPageReload());¶¶            //Get browser tab opened¶           ")
Diff(DELETE," //")
Diff(EQUAL," var windowHandles = _driver.WindowHandles;¶           ")
Diff(DELETE," //")
Diff(EQUAL," var windowTitle = _driver.SwitchTo().Window(windowHandles[1]).Title;¶¶           ")
Diff(DELETE," //")
Diff(EQUAL," //Verify that correctly loaded browser tab title has correct Content Name¶           ")
Diff(DELETE," //")
Diff(EQUAL," windowTitle.Should().Contain(ContentName);¶        }¶¶        public void AddSpecificPropertyToPanel(string propertyType, string propertyName, string panelName)¶        {¶            var user = LoggedInUser();¶¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var props = PanelPropertyData.GenerateSpecificProperty(propertyType, propertyName);¶            AddProperty(props, panel);¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void SourceAndPanelCleanup(string panelName)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InStaffSite(PanelDefinitionListPage.BaseUrl));")
Diff(INSERT,"¶¶")
Diff(EQUAL,"            ")
Diff(DELETE,"¶")
Diff(INSERT,"if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink)))¶                user.AttemptsTo(Click.On(PanelDefinitionListPage.PanelDesignerGrid.ShowAllLink));¶¶            if (user.AsksFor(Existence.Of(PanelDefinitionListPage.PanelDesignerGrid.CellLinkWithText(panelName)))) ¶            {¶    ")
Diff(EQUAL,"            DeletePanelSource(panelName);¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            DeletePanel(panelName);¶")
Diff(INSERT,"            }¶")
Diff(EQUAL,"        }¶¶        public void ActivateOOTBSites(string site)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageWebSitesPage.BaseUrl));¶            NavigateToSiteManipulation(site);¶            if (!user.AsksFor(SelectedState.Of(ManageWebSitesPage.WebsiteIsActiveCheckBox.Control)))¶                user.AttemptsTo(Click.On(ManageWebSitesPage.WebsiteIsActiveCheckBox.Control));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(ClickCommandButton.Cancel());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            PublishItems();¶        }¶¶        public void NavigateToSiteManipulation(string site)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.FolderItem("Quick Start Sites")));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(DoubleClick.On(ObjectBrowserComponents.FolderItem(site)));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.EditMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(.5));¶            user.AttemptsTo(SwitchFrame.To("ObjectBrowserDialog"));¶            var classes = user.AsksFor(Classes.Of(ManageWebSitesPage.StatusPanel));¶            if(classes.Contains("collapsed"))¶                user.AttemptsTo(Click.On(ManageWebSitesPage.StatusPanel));¶            user.AttemptsTo(Waiting.InSeconds(.5));¶        }¶¶        /// <summary>¶        /// Verifies that the site is active¶        /// </summary>¶        /// <param name="site"></param>¶        public void VerificationOOTBSites(string site)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InStaffSite(ManageWebSitesPage.BaseUrl));¶            NavigateToSiteManipulation(site);¶            user.AsksFor(SelectedState.Of(ManageWebSitesPage.WebsiteIsActiveCheckBox.Control)).Should().BeTrue();¶            user.AttemptsTo(Waiting.ForPageReload());¶            user.AttemptsTo(ClickCommandButton.Cancel());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶        }¶¶¶        /// <summary>¶        /// Publishes the content items and clicks Ok¶        /// </summary>¶        public void PublishItems()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.PublishMenuItem));¶            user.AttemptsTo(SwitchFrame.To("ObjectBrowserDialog"));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(ClickCommandButton.Ok());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶        }¶¶        /// <summary>¶        /// Add panel content to a page¶        /// </summary>¶        /// <param name="panelName"></param>¶        public void AddPanelEditorContent(string panelName)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.AddContent));¶¶            // Select the form ¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Click.On(ContentGallery.FolderType("Content")));¶            user.WaitsUntil(Existence.Of(ContentGallery.ContentType("Panel Editor")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ContentGallery.ContentType("Panel Editor")));¶            user.AttemptsTo(ClickCommandButton.Ok());¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            //there is so far no other way to ensure the frame with the form selections is fully loaded¶            //that doesn't fail on half of the test runs¶            user.AttemptsTo(Waiting.InSeconds(1));¶¶            // Configure¶            user.AttemptsTo(SwitchFrame.ToGenericWindow().AndSkipDefault());¶            user.AttemptsTo(Click.On(PanelEditorConfigEdit.ConfigurePanelSelector.Control));¶¶            user.AttemptsTo(Select.ByText(PanelEditorConfigEdit.ConfigurePanelSelector.Control, panelName));¶")
Diff(INSERT,"            user.AttemptsTo(SetWhenProvided.TextBox(PanelEditorConfigEdit.DescriptionTextArea, "Panel description text with <b>markup</b>"));¶")
Diff(EQUAL,"            user.AttemptsTo(SetWhenProvided.CheckBox(PanelEditorConfigEdit.AllowAdd.Control, true));¶            user.AttemptsTo(SetWhenProvided.CheckBox(PanelEditorConfigEdit.AllowEdit.Control, true));¶            user.AttemptsTo(SetWhenProvided.CheckBox(PanelEditorConfigEdit.AllowDelete.Control, true));¶")
Diff(INSERT,"                      ")
Diff(EQUAL,"¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            // Save and Publish¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶¶            //a delay to make sure page is published before attempting to navigate to it¶            user.AttemptsTo(Waiting.InSeconds(3));¶        }¶¶        public void AddSpecificPropertyToPanelSourceOrGrid(string propertyType, string propertyName, string panelName, string destination)¶        {¶            var user = LoggedInUser();¶            var shouldSendPropsToGrid = destination")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty()")
Diff(EQUAL," || destination.Equals("grid", StringComparison.OrdinalIgnoreCase);¶¶            var panel = (PanelData)_context.DataStorage[panelName];¶            var props = PanelPropertyData.GenerateSpecificProperty(propertyType, propertyName, shouldSendPropsToGrid);¶            AddProperty(props, panel);¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        public void AddValueToPanelProperty(string panelSource, string fieldPropertyName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(StandaloneEditor.AddPanel));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(SendKeys.To(StandaloneEditor.TextBox(panelSource, fieldPropertyName), TestHelper.GenerateRandomString(10)));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());          ¶        }¶¶        public void NavigateToDuplicateMergePage(string partyId, string panelSourceName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(DuplicateMergePage.Url(partyId)));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AsksFor(Appearance.Of(DuplicateMergePage.ContactMergeGrid.TextInTable(panelSourceName))).Should().BeFalse();¶        }¶¶        public void PurgeContentRecord(string contentName, string folderLocation = null)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(ManageContentPage.BaseUrl));¶¶            if (!string.IsNullOrEmpty(folderLocation))¶            {¶                user.AttemptsTo(SendKeys.To(ObjectBrowserComponents.Address, folderLocation));¶                user.AttemptsTo(Click.On(ObjectBrowserComponents.AddressGoButton));¶            }¶¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.ContentItem(contentName)), IsEqualTo.True());¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.ContentList(contentName)));¶            user.WaitsUntil(Appearance.Of(ObjectBrowserComponents.NewMenuItem), IsEqualTo.True());¶¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.OrganizeMenuItem));¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(ObjectBrowserComponents.PurgeMenuItem));¶¶            IAlert alert = _driver.SwitchTo().Alert();¶            if (alert != null)¶                alert.Accept();¶¶            user.AttemptsTo(SwitchFrame.To(ObjectBrowserDialog.Frame));¶            user.AttemptsTo(ClickCommandButton.Cancel());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶        }¶¶        /// <summary>¶        /// Navigate to a content record page¶        /// </summary>¶        /// <param name="pageName"></param>¶        public void NavigateToContent(string pageName)¶        {¶            // Navigate to page¶            var user = LoggedInUser();¶            if (pageName.IndexOf(".aspx", StringComparison.OrdinalIgnoreCase) == -1)¶                user.AttemptsTo(Browse.InStaffSite(new ImisUrl(pageName + ".aspx")));¶            else¶                user.AttemptsTo(Browse.InStaffSite(new ImisUrl(pageName)));¶        }")
Diff(INSERT,"¶¶        public void EditPanelSource(string attributeName, string propertyName, string panelName)¶        {¶            var panel = (PanelData)_context.DataStorage[panelName];¶            EditPanelDefinition(panel);¶            EditSourceProperty(attributeName, propertyName, panel.Source);¶        }¶¶        private void EditSourceProperty(string attributeName, string propertyName, string sourceName)¶        {¶            var user = LoggedInUser();¶¶            var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);¶            var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;¶¶            OpenSourceProperties(sourceName);¶¶            user.AttemptsTo(Click.On(pathToPropertyElement));¶            user.AttemptsTo(RightClick.On(pathToPropertyElement));¶            user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(pathToPropertyViewButton));¶¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶            user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());¶            user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);¶¶            if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))¶                user.AttemptsTo(Check.On(PanelDesignerPage.LogAllChangesCheckBox));¶¶            user.AttemptsTo(ClickCommandButton.Ok());¶¶        }¶¶        public void VerifyPropertyAttributeValue(string attributeName, string propertyName) ¶        {¶            var user = LoggedInUser();¶¶            var pathToPropertyElement = PanelDesignerPage.GetPathToSpan(propertyName);¶            var pathToPropertyViewButton = PanelDesignerPage.RadMenuViewButton;¶¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶¶            user.AttemptsTo(Click.On(pathToPropertyElement));¶            user.AttemptsTo(RightClick.On(pathToPropertyElement));¶            user.WaitsUntil(Existence.Of(pathToPropertyViewButton), IsEqualTo.True());¶            user.AttemptsTo(Waiting.InSeconds(1));¶            user.AttemptsTo(Click.On(pathToPropertyViewButton));¶¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶            user.WaitsUntil(Existence.Of(PanelDesignerPage.PropertyNameTextBox), IsEqualTo.True());¶            user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.PropertyNameTextBox, "value")).Should().Be(propertyName);¶¶            if (attributeName.Equals("LogAllChanges") && user.AsksFor(Existence.Of(PanelDesignerPage.LogAllChangesCheckBox)))¶                user.AsksFor(HtmlAttribute.Of(PanelDesignerPage.LogAllChangesCheckBox, "checked"));¶¶        }¶¶        public void VerifyPageConfigureProperties()¶        {¶            var user = LoggedInUser();¶¶            user.AsksFor(Appearance.Of(StandaloneEditor.PanelDescription)).Should().BeTrue();¶            user.AsksFor(Text.Of(StandaloneEditor.PanelDescription)).Should().Contain("Panel description text with markup");¶        }¶¶        public void NavigateToTheContentItemToEdit(Table table)¶        {¶¶            var basePage = ((string[])table.Rows[0].Values)[0];¶¶            var user = LoggedInUser();¶¶            if (basePage.Equals("CommunitiesDashboardPage")) ¶            {¶                user.AttemptsTo(Browse.InStaffSite(CommunitiesDashboardPage.BaseUrl));¶            }¶            ¶            if (user.AsksFor(Existence.Of(AccountArea.STEToggleOff)) == true)¶                user.AttemptsTo(Click.On(AccountArea.STEToggleOff));¶¶            var contentItemName = ((string[])table.Rows[0].Values)[1];¶            if (contentItemName.Equals("BigButtonPanelEdit"))¶            {¶¶                user.AttemptsTo(Click.On(PageUtilities.ConfigureButton("Big Button Panel")));¶                user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶                user.AttemptsTo(Waiting.InSeconds(1));¶                user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.AddButton));¶                user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));¶¶                for (int i = 1; i <= 15; i++)¶                {     ¶                    user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));¶                    user.AttemptsTo(Waiting.InSeconds(1));¶                    user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item {i}"));¶                    user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTargetTextBox, $"http://{TestHelper.GenerateRandomString(10)}.org"));¶                    user.AttemptsTo(Click.On(BigButtonPanelEdit.InsertButton));¶¶                    if (i < 15)¶                    {                       ¶                        user.AttemptsTo(Waiting.InSeconds(1));¶                        user.AttemptsTo(Click.On(BigButtonPanelEdit.AddButton));¶                        user.AttemptsTo(Waiting.InSeconds(1));¶                    }¶                }¶            }¶        }¶¶        public void VerifyContentItemCorrect()¶        {¶            var user = LoggedInUser();¶¶            //This control is tall when the grid is populated and has postbacks¶            //and the page has to scroll back to the bottom each time so the wait times are needed.¶¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(Click.On(BigButtonPanelEdit.EditButton));¶¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.LinkTextBox));¶            user.AttemptsTo(SendKeys.To(BigButtonPanelEdit.LinkTextBox, $"Item Modified Test"));¶            user.AttemptsTo(Click.On(BigButtonPanelEdit.UpdateButton));¶¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.FirstPageButton));¶            user.AsksFor(Appearance.Of(PageBase.UIText("Item 1"))).Should().BeTrue();¶¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AttemptsTo(ScrollToElement.At(BigButtonPanelEdit.ResultsGrid.LastPageButton));¶            user.AttemptsTo(Click.On(BigButtonPanelEdit.ResultsGrid.LastPageButton));¶¶            user.AttemptsTo(Waiting.InSeconds(2));¶            user.AsksFor(Appearance.Of(PageBase.UIText("Item Modified Test"))).Should().BeTrue();¶        }¶¶        public void NavigateToThePublishingServersPage() ¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(PublishServersListPage.BaseUrl));¶            user.WaitsUntil(Appearance.Of(PublishServersListPage.PublishingServersGrid.Grid), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(PageBase.PageTitle), IsEqualTo.True());¶        }¶¶        public void VerifyPublishingServersGridLoads() ¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Text.Of(PageBase.PageTitle)).Should().Be("Publishing servers");¶            user.AsksFor(Existence.Of(PublishServersListPage.AddServerLink));¶            user.AsksFor(Existence.Of(PublishServersListPage.PublishingServersGrid.CellLinkWithText("Gold publish server", exactMatch: true)));¶        }")
Diff(EQUAL,"¶    }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/RiSE/RiseTestMethods.cs)
Diff(EQUAL,"{¶    public class SignInTestMethods : TestMethodBase¶    {¶        public SignInTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            SignInPage = new SignInPage();¶        }¶¶        private SignInPage SignInPage { get; set; }¶¶        public void GoToResetWithBadToken()¶        {¶            var user = User("SignIn user");¶            var url = SignInPage.BaseUrl;¶            url.AddParameter("resettoken", "blarg");¶            user.AttemptsTo(Browse.InImis(url));¶        }¶¶        public void VerifyPasswordResetPage()¶        {¶            var user = User("SignIn user");¶            user.AsksFor(Existence.Of(SignInPage.ContactSignIn.OpenIDSignInPanel)).Should().BeFalse();¶            user.AsksFor(Existence.Of(SignInPage.ContactSignIn.PasswordUserName)).Should().BeTrue();¶        }¶¶        public void SignInDesignatedUser(string userType, string site)¶        {¶            var user = User("SignInDesignatedUser");¶            user.AttemptsTo(SignIn.WithUserRole(userType).InImis(site));¶            TurnOffPageStatistics();¶        }¶¶        public void SignInDesignatedUserAndOBO(string userType, string site, string firstName, string lastName)¶        {¶            var user = User("SignInDesignatedUser");¶")
Diff(INSERT,"            user.AttemptsTo(Waiting.ForPageReload());¶")
Diff(EQUAL,"            user.AttemptsTo(SignIn.WithUserRole(userType).AndOnBehalfUser(firstName, lastName).InImis(site));¶            TurnOffPageStatistics")
Diff(DELETE,"ForVat")
Diff(EQUAL,"();¶        }¶¶        public void OnTheSite(string Site)¶        {¶            var user = User("OnTheSite");¶            user.AttemptsTo(Browse.InImis(SignInPage.BaseUrl, Site));¶            TurnOffPageStatistics();¶        }¶¶        public void ToTheSiteWithUserName(string userName, string site)¶        {¶            var user = User("SignUserInByUserName");¶            user.AttemptsTo(SignIn.WithUserName(userName).InImis(site));¶            TurnOffPageStatistics();¶        }    ¶")
Diff(DELETE,"        ")
Diff(EQUAL,"¶        public void TurnOffPageStatistics")
Diff(DELETE,"ForVat")
Diff(EQUAL,"()¶        {¶            var user = User("TurnOffPageStatistics");¶            // if page turn statistics is on try to turn it off¶            try¶            {¶                ")
Diff(DELETE,"//")
Diff(EQUAL,"if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))¶                  ")
Diff(DELETE,"//")
Diff(EQUAL,"  user.AttemptsTo(Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));¶            }¶            catch (NoSuchElementException)¶            {¶                // if page turn stats does not exist or is already off do nothing¶            }¶        ")
Diff(DELETE,"    catch (StaleElementReferenceException)¶            {¶                // if page turn stats does not exist or is already off do nothing¶            }¶        }¶        public void TurnOffPageStatistics()¶        {¶            var user = User("TurnOffPageStatistics");¶            // if page turn statistics is on try to turn it off¶            try¶            {¶             //   if (user.AsksFor(Existence.Of(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on")))))")
Diff(INSERT,"}¶¶        public void SignInToLicenseServer()¶        {¶            var user = User("SignInToLicenseServer");")
Diff(EQUAL,"¶       ")
Diff(DELETE,"      //")
Diff(EQUAL,"     user.AttemptsTo(")
Diff(DELETE,"Click.On(WebLocator.L("PageStatsPresence", By.CssSelector(".page-statistics-toggle.on"))));¶            }¶            catch (NoSuchElementException)¶            {¶                // if page turn stats does not exist or is already off do nothing¶            }¶            catch (StaleElementReferenceException)¶            {¶                // if page turn stats does not exist or is already off do nothing¶            }")
Diff(INSERT,"SignIn.ToLicenseServer());")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/TestMethods/Authentication/SignInTestMethods.cs)
Diff(EQUAL,"{¶    public class MultiSelectControl : DisplayStaticBase¶    {¶        private string _selectId;¶        public MultiSelectControl(string selectId)¶        {¶            _selectId = $"{selectId}_ListBox_chosen";¶        }¶¶        public IWebLocator SearchField { get => LocatorByXPath(_selectId,")
Diff(INSERT," "div", "id",")
Diff(EQUAL," "/ul/li/input"); }¶        public IWebLocator Add { get => LocatorByXPath(_selectId, "/div/ul/li/a"); }¶")
Diff(INSERT,"        public IWebLocator ActiveItem { get => LocatorByXPath(_selectId, "div", "id", "/div/ul/li"); }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/AsiWeb/MultiSelectControl.cs)
Diff(EQUAL,"{¶    public class Lister : RadGrid // There might need to be a BusinessDataGrid in between these two¶    {¶        public Lister(string name) : base(name)¶        {¶            Queries = new ListerSheetCollection(name);¶            GridIdSuffix = "Grid1_ctl00";¶        }¶¶        public Lister() : base("Lister1")¶        {¶            Queries = new ListerSheetCollection("Lister1");¶            GridIdSuffix = "Grid1_ctl00";¶        }¶¶        public IWebLocator QuerySelector => GetLocatorById("DataSourceList");¶        public IWebLocator RefreshButton => GetLocatorById("RefreshButton", "input");¶        public IWebLocator AddToGrid => GetLocatorById("TopRightPanel", "div");¶        public ListerSheetCollection Queries { get; set; }")
Diff(INSERT,"¶        public IWebLocator FirstPageButton => LocatorByXPath("rgPageFirst", "input", "class");¶        public IWebLocator LastPageButton => LocatorByXPath("rgPageLast", "input", "class");")
Diff(EQUAL,"¶¶        public QueryParameter GetParameter(string queryName, string parameterName)¶        {¶            return Queries.Get(queryName).Parameters.Get(parameterName);¶        }¶        public IWebLocator DeleteFor(string text) => Cell(string.Empty, false, $"//*[contains(text(), '{text}')]//parent::td//parent::tr//input[contains(@id, 'DeleteColumn')]");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/AsiWeb/Lister.cs)
Diff(EQUAL,"{¶    public class DialogWindowWrapper : DisplayStaticBase¶    {¶        public static IWebLocator Title => LocatorByXPath("_title");¶        public static IWebLocator ReloadButton => LocatorByXPath("Reload", "a", "title");¶        public static IWebLocator MaximizeButton => LocatorByXPath("Maximize", "a", "title");¶        public static IWebLocator CloseButtonTop => LocatorByXPath("Close", "")
Diff(DELETE,"*")
Diff(INSERT,"a")
Diff(EQUAL,"", "title");¶")
Diff(INSERT,"        ")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/AsiWeb/Helpers/DialogWindowWrapper.cs)
Diff(EQUAL,"{¶    public class DisplayIPartBase : DisplayStaticBase¶    {¶        public readonly string Name;¶        public string UnChangedName;¶¶        public DisplayIPartBase(string name)¶        {¶            UnChangedName = name;¶            Name = name.Replace(" ", "");¶        }¶¶        /// <summary>¶        /// Expands and collapses a panel based off iPart name¶        /// </summary>¶        public IWebLocator CollapsiblePanelToggle => LocatorByXPath($"expand {UnChangedName}", "a", "title");¶        /// <summary>¶        /// Creates a By with the given Id¶        /// </summary>¶        /// <param name="elementId">the element id to look for</param>¶        /// <param name="tag">the tag type</param>¶        /// <returns>a By object</returns>¶        public By GetByWithId(string elementId, string tag = "*")¶        {¶            return ByXPath(GetId(elementId), tag);¶        }¶¶        /// <summary>¶        /// Creates a WebLocator with the given Id¶        /// </summary>¶        /// <param name="elementId">the element value for the chosen attribute to look for</param>¶        /// <param name="tag">the tag type, default is wildcard</param>>¶        /// <param name="attribute">the type of attribute, default is id</param>¶        /// <param name="postXPath"> the xpath to append at the end of the base XPath</param>¶        /// <returns>a WebLocator object</returns>¶        public IWebLocator GetLocatorById(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>¶            LocatorByXPath(GetId(elementId), tag, attribute, postXPath);¶¶")
Diff(DELETE,"        public IWebLocator GetLocatorByIdWithoutName(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>¶            LocatorByXPath(elementId, tag, attribute, postXPath);¶¶")
Diff(EQUAL,"        /// <summary>¶        /// Create a WebLocator with 2 parts for the same attibute¶        /// </summary>¶        /// <param name="elementId">the element value for the chosen attribute to look for</param>¶        /// <param name="tag">the tag type, default is wildcard</param>>¶        /// <param name="attribute">the type of attribute, default is id</param>¶        /// <param name="postXPath"> the xpath to append at the end of the base XPath</param>¶        /// <param name="parentId">The first part of the chosen attribute</param>¶        /// <returns>a WebLocator object</returns>¶        public IWebLocator GetLocatorDoubleContains(string elementId, string tag = "*", string attribute = "id", string postXPath = "", string parentId = "") =>¶            LocatorDoubleContains(GetId(parentId), elementId, tag, attribute, postXPath);¶¶        /// <summary>¶        /// Returns a weblocator for a table cell¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="row">the row number</param>¶        /// <param name="column">the column number</param>¶        /// <returns></returns>¶        public IWebLocator GetTableCell(string tableName, int row, int column, bool link = false, string postXpath = "", string tag = "") =>¶            WebLocator.L($"XPath for \"{tableName}\"", GetTableXPath(GetId(tableName), row, column, link, postXpath, tag));¶        public string GetId(string elementId)¶        {¶            if (string.IsNullOrEmpty(elementId))¶                return Name;¶            return $"{Name}_{elementId}";¶        }")
Diff(INSERT,"¶¶        public new IWebLocator PartialLinkText(string linkName) =>¶            WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName));")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/DisplayIPartBase.cs)
Diff(EQUAL,"{¶     public class AccountArea : DisplayIPartBase¶    {¶        public AccountArea(string name) : base(name)¶        {¶            OBOControlPanel = new ContactProxyPanel("OBOControlPanel");¶        }¶¶        public ContactProxyPanel OBOControlPanel { get; set; }¶        public IWebLocator MyAccountLink => LocatorByXPath("ProfileMenu", "li", "id", "//a[contains(@id,'MyAccountLink')]");¶        public IWebLocator SignOutLink => LocatorByXPath("ProfileMenu", "li", "id", "//a[contains(@id,'SignOutLink')]");¶        public IWebLocator OBOToggle => LocatorByXPath("OBOToggleLI", "li", "id", "//a[contains(@id,'OBOToggle')]");¶        public IWebLocator BatchToggle => LocatorByXPath("BatchToggleLI", "li", "id", "//a[contains(@id,'BatchToggle')]");¶")
Diff(INSERT,"        public IWebLocator BatchSelectorDropdown => LocatorByXPath("BatchSelectVisibilityPanel", "div");¶        public IWebLocator OverrideTransactionDateWrapper => LocatorByXPath("DateViewInputWrapper", "div");¶")
Diff(EQUAL,"        public IWebLocator PartyName => LocatorByXPath("PartyName", "span");¶        //This is coming from the Auxiliary navigation on Donor site in order to grab the user account name information¶        public IWebLocator DonorPartyName => LocatorByXPath("NavigationLink", "a", postXPath:"//span");¶        public IWebLocator STEToggleOff => LocatorByXPath("ste-toggle off", "a", "class");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/AccountArea.cs)
Diff(EQUAL,"{¶    public class PromotionManager : DisplayIPartBase¶    {¶        public PromotionManager(string name) : base(name) { }¶        public PromotionManager() : base("New PromotionManagerCommon") { }¶¶        public IWebLocator RemovePromotionalCodeLink => ")
Diff(INSERT,"Get")
Diff(EQUAL,"Locator")
Diff(DELETE,"ForXpath")
Diff(INSERT,"ById")
Diff(EQUAL,"("RemovePromotionalCode");¶        public IWebLocator ApplyPromotionalCodeButton => ")
Diff(INSERT,"Get")
Diff(EQUAL,"Locator")
Diff(DELETE,"ForXpath")
Diff(INSERT,"ById")
Diff(EQUAL,"("ApplyPromotionalCode");¶        public IWebLocator PromotionalCode => ")
Diff(INSERT,"Get")
Diff(EQUAL,"Locator")
Diff(DELETE,"ForXpath")
Diff(INSERT,"ById")
Diff(EQUAL,"("PromotionalCode", "input");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/PromotionManager.cs)
Diff(EQUAL,"{¶    public class CartChargesDisplay : DisplayIPartBase¶    {¶        public CartChargesDisplay(string name) : base(name) { }¶        public CartChargesDisplay() : base("New CartDetailsDisplayCommon") { }¶¶        // These are mainly labels for the user to verification purposes ¶        public IWebLocator TotalAmount { get => GetLocatorById("TxtTotalAmount"); }¶        public IWebLocator ShippingAmount { get => GetLocatorById("TxtShippingAmount"); }¶        public IWebLocator HandlingAmount { get => GetLocatorById("TxtHandlingAmount"); }¶        public IWebLocator GrandTotalAmount { get => GetLocatorById("TxtItemGrandTotalAmount"); }¶        public IWebLocator PaymentCredit { get => GetLocatorById("TxtPaymentCredit"); }¶        public IWebLocator CreditTotal { get => GetLocatorById("TxtCreditTotal"); }¶        public IWebLocator AppliedCredit { get => GetLocatorById("TxtPaymentCredit"); }¶        //we need LocatorByXpath because the ClientId is marked static in the display class¶        public IWebLocator TransactionGrandTotal => LocatorByXPath("TxtTransactionGrandTotal");¶        public IWebLocator WaitlistedAmount { get => GetLocatorById("TxtWaitlistedAmount"); }¶        public IWebLocator InvoiceTotal { get => GetLocatorById("TxtInvoiceTotal"); }¶        public IWebLocator TaxAmountTotal { get => GetLocatorById("TxtTaxAmountTotal"); }")
Diff(INSERT,"¶        public IWebLocator PstTaxAmount => GetLocatorById("1");¶        public IWebLocator GstTaxAmount => GetLocatorById("2");")
Diff(EQUAL,"¶¶        //TODO Create a method that takes an integer so it can loop through different tax info¶    }¶}")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/CartChargesDisplay.cs)
Diff(EQUAL,"{¶    public class RefundDisplay")
Diff(INSERT," ")
Diff(EQUAL,": DisplayIPartBase¶    {¶        public RefundDisplay(string name)")
Diff(INSERT," ")
Diff(EQUAL,": base(name)¶        {¶")
Diff(DELETE,"¶        }¶        public IWebLocator AdjustmentType => GetLocatorById("AdjustmentTypeList")
Diff(INSERT,"            AdjustmentDetailsGrid = new BusinessDataGrid("AdjustmentDetailsGrid");¶        }¶¶        public BusinessDataGrid AdjustmentDetailsGrid { get; }¶        public IWebLocator AdjustmentType => GetLocatorById("AdjustmentTypeList");¶        public IWebLocator PaymentMethod => GetLocatorById("RefundPaymentMethodList", "select");¶¶        public IWebLocator GetAmountToRefundLabel(string description) =>¶            AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");¶¶        public IWebLocator GetAmountTextbox(string description) =>¶            AdjustmentDetailsGrid.CellWithText(description, "//ancestor::tr//td//span[contains(@id,'AmountAppliedLabel')]")
Diff(EQUAL,"");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/RefundDisplay.cs)
Diff(EQUAL,"{¶    public class DataVaultLiveDisplay : DisplayIPartBase¶    {¶        public DataVaultLiveDisplay(string name) : base(name) => Construct();¶        public DataVaultLiveDisplay() : base("New DataVaultLiveDisplayCommon") => Construct();¶¶        private void Construct()¶        {¶            SearchDateFrom = new BusinessCalendar2("SearchDateFrom");¶            SearchDateTo = new BusinessCalendar2("SearchDateTo");¶            DataVaultLiveGrid = new BusinessDataGrid("DataVaultLiveGrid");¶        }¶¶        ")
Diff(INSERT,"public ")
Diff(EQUAL,"BusinessCalendar2 SearchDateFrom { get; set; }¶        ")
Diff(INSERT,"public ")
Diff(EQUAL,"BusinessCalendar2 SearchDateTo { get; set; }¶        ")
Diff(INSERT,"public ")
Diff(EQUAL,"BusinessDataGrid DataVaultLiveGrid { get; set; }¶        public IWebLocator InvoiceNumberBox => LocatorByXPath("SearchInvoiceNumber");¶        public IWebLocator PaymentIDBox => LocatorByXPath("SearchPaymentId");¶        public IWebLocator SearchNameTextBox => LocatorByXPath("SearchNameTextBox");¶        public IWebLocator SearchAmountFrom => LocatorByXPath("SearchAmountFrom");¶        public IWebLocator SearchAmountTo => LocatorByXPath("SearchAmountTo");¶")
Diff(INSERT,"        public IWebLocator SearchButton => LocatorByXPath("_SearchButton");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/DataVaultLiveDisplay.cs)
Diff(EQUAL,"{¶    public class OrderDetailsHeader : DisplayIPartBase ¶    {¶        public OrderDetailsHeader(string name) : base(name) {")
Diff(INSERT," ")
Diff(EQUAL,"}¶")
Diff(DELETE,"")
Diff(EQUAL,"        public OrderDetailsHeader() : base("New OrderDetailsHeaderCommon") { }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public IWebLocator PrintButton => LocatorByXPath("PrintButton");¶")
Diff(INSERT,"        public IWebLocator ActionButton => GetLocatorById("ActionButtonDiv", postXPath: "/div/button");¶")
Diff(EQUAL,"        public IWebLocator IssueQuoteLink => LocatorByXPath("IssueQuoteLink");¶        public IWebLocator ConvertQuoteLink => LocatorByXPath("ConvertQuoteLink");¶        public IWebLocator ReIssueQuoteLink => LocatorByXPath("ReIssueQuoteLink");¶        public IWebLocator PrintPickListLink => LocatorByXPath("PrintPickListLink");¶        public IWebLocator PrintShippingPaperLink => LocatorByXPath("PrintShippingPaperLink");¶        public IWebLocator MarkAsShippedLink => LocatorByXPath("MarkAsShippedLink");¶        public IWebLocator GenerateInvoiceLink => LocatorByXPath("GenerateInvoiceLink");¶        public IWebLocator ReleaseBackorderLink => LocatorByXPath("ReleaseBackorderLink");¶        public IWebLocator CloseOrderLink => LocatorByXPath("CloseOrderLink");¶        public IWebLocator DividerLineItem => LocatorByXPath("DividerLineItem");¶        public IWebLocator RePrintPickListLink => LocatorByXPath("RePrintPickListLink");¶        public IWebLocator RePrintShippingPaperLink => LocatorByXPath("RePrintShippingPaperLink");¶¶        #region Label")
Diff(INSERT,"¶¶        public IWebLocator HeaderLabel => GetLocatorById("HeaderLabel");")
Diff(EQUAL,"¶        public IWebLocator OrderTotalLabel => LocatorByXPath("OrderTotalLabel");¶        public IWebLocator RelatedOrdersLabel => LocatorByXPath("RelatedOrdersLabel");¶        public IWebLocator OrderTypeLabel => LocatorByXPath("OrderTypeLabel");¶        public IWebLocator SourceCodeLabel => LocatorByXPath("SourceCodeLabel");¶        public IWebLocator OrderStageLabel => LocatorByXPath("OrderStageLabel");¶        public IWebLocator PromoCodeLabel => LocatorByXPath("PromoCodeLabel");¶        public IWebLocator RePrintLabel => LocatorByXPath("RePrintLabel");¶¶        #endregion¶¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/OrderDetailsHeader.cs)
Diff(EQUAL,"{¶    public class OrderConfirmationDisplay : DisplayIPartBase¶    {¶        public OrderConfirmationDisplay(string name) : base(name)¶        {¶            Construct();¶        }¶¶        public OrderConfirmationDisplay() : base("New OrderConfirmationDisplayCommon")¶        {¶            Construct();¶        }¶¶        public void Construct()¶        {¶            ItemGrid = new OrderConfirmationDisplayItemGrid("Grid1");¶        }¶¶        public OrderConfirmationDisplayItemGrid ItemGrid { get; set; }¶¶        public IWebLocator OrderNumber { get => GetLocatorById("OrderNumberValue"); }¶        public IWebLocator OrderDate { get => GetLocatorById("OrderDateValue"); }¶        public IWebLocator BillTo { get => GetLocatorById("BillToValue"); }¶        public IWebLocator PaymentMethod { get => GetLocatorById("PaymentMethodValue"); }¶        public IWebLocator CreditCardName { get => GetLocatorById("CCNameValue"); }¶        public IWebLocator ShipAddress { get => GetLocatorById("ShipAddressValue"); }¶        public IWebLocator ShipMethod { get => GetLocatorById("ShipMethodValue"); }¶        public IWebLocator TotalAmount { get => GetLocatorById("TxtTotalAmount"); }¶        public IWebLocator ShippingAmount { get => GetLocatorById("TxtShippingAmount"); }¶        public IWebLocator HandlingAmount { get => GetLocatorById("TxtHandlingAmount"); }¶        public IWebLocator TaxAmountTotal { get => GetLocatorById("TxtTaxAmountTotal"); }¶")
Diff(INSERT,"        public IWebLocator PstTaxAmount => GetLocatorById("1");¶        public IWebLocator GstTaxAmount => GetLocatorById("2");¶")
Diff(EQUAL,"        public IWebLocator GrandTotalAmount { get => GetLocatorById("TxtGrandTotalAmount"); }¶        public IWebLocator InvoiceTotal { get => GetLocatorById("TxtInvoiceTotal"); }¶        public IWebLocator AppliedCredit { get => GetLocatorById("TxtAppliedCredit"); }¶        public IWebLocator CreditTotal { get => GetLocatorById("TxtCreditTotal"); }¶        public IWebLocator TransTotalAmount { get => GetLocatorById("TxtTransTotalAmount"); }¶        public IWebLocator TotalWaitlistedAmount { get => GetLocatorById("TxtTotalWaitlistedAmount"); }¶        public IWebLocator Prepayment { get => GetLocatorById("TxtPrepayment"); }¶        public IWebLocator PaymentAmount { get => GetLocatorById("TxtPaymentAmount"); }¶        public IWebLocator BalanceDue { get => GetLocatorById("TxtBalanceDue","span"); }¶        public IWebLocator EmailTextBox { get => GetLocatorById("EmailTextBox"); }¶        public IWebLocator SendEmailButton { get => GetLocatorById("SendEmailButton"); }¶¶    }¶¶    public class OrderConfirmationDisplayItemGrid : BusinessDataGrid¶    {¶¶        private readonly Dictionary<int, OrderConfirmationDisplayItemGridRow> _rows = new Dictionary<int, OrderConfirmationDisplayItemGridRow>();¶¶        public OrderConfirmationDisplayItemGrid(string name) : base(name)¶        {¶        }¶¶        public OrderConfirmationDisplayItemGridRow this[int row] => Row(row);¶¶        public OrderConfirmationDisplayItemGridRow Row(int row) => GetOrAddRow(row);¶¶        private OrderConfirmationDisplayItemGridRow GetOrAddRow(int row)¶        {¶            if (!_rows.ContainsKey(row))¶                _rows.Add(row, new OrderConfirmationDisplayItemGridRow(this, row));¶            return _rows[row];¶        }¶    }¶¶¶    public class OrderConfirmationDisplayItemGridRow¶    {¶¶        private const int _itemCell = 1;¶        private const int _quantityCell = 2;¶        private const int _priceCell = 3;¶        private const int _totalCell = 4;¶¶        private readonly OrderConfirmationDisplayItemGrid _itemGrid;¶        private readonly int _row;¶¶        public OrderConfirmationDisplayItemGridRow(OrderConfirmationDisplayItemGrid itemGrid, int row)¶        {¶            _itemGrid = itemGrid;¶            _row = row;¶        }¶¶        public IWebLocator ItemCell => _itemGrid.Cell(_row, _itemCell);¶        public IWebLocator QuantityCell => _itemGrid.Cell(_row, _quantityCell);¶        public IWebLocator PriceCell => _itemGrid.Cell(_row, _priceCell);¶        public IWebLocator TotalCell => _itemGrid.Cell(_row, _totalCell);¶¶    }¶¶¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/OrderConfirmationDisplay.cs)
Diff(EQUAL,"{¶    public class ItemCreator : DisplayIPartBase¶    {¶        public ItemCreator(string name) : base(name) => Construct();¶        public ItemCreator() : base("New ItemCreatorCommon") => Construct();¶¶        public void Construct()¶        {¶            TabStripControl = new RadTabStrip("TabStripControl");¶            TabStripControl.AddTab("Summary");¶            TabStripControl.AddTab("Accounting");¶            PublishStartDate = new BusinessCalendar2("PublishStartDate");¶            PublishStartTime = new BusinessCalendar2("PublishStartTime");¶            PublishEndDate = new BusinessCalendar2("PublishEndDate");¶            PublishEndTime = new BusinessCalendar2("PublishEndTime");¶            CalendarStartDate = new BusinessCalendar2("CalendarStartDate");¶            CalendarEndDate = new BusinessCalendar2("CalendarEndDate");¶            ExpectedArrivalCalendar = new BusinessCalendar2("ExpectedArrivalCalendar");¶            GroupList = new BusinessComboBox("GroupList");¶            GroupRoleList = new BusinessComboBox("GroupRoleList");¶            CollectionItemsGrid = new BusinessDataGrid("CollectionItemsGrid");¶            PremiumMultiSelect = new MultiSelectControl("PremiumMultiSelect");¶            AccountsReceivable = new GeneralLedgerAccount("AccountsReceivable");¶            Income = new GeneralLedgerAccount("Income");¶            Inventory = new GeneralLedgerAccount("Inventory");¶            CostOfGoodsSold = new GeneralLedgerAccount("CostOfGoodsSold");¶            Adjustments = new GeneralLedgerAccount("Adjustments");¶            TaxInfo = new ItemCreatorTaxInfo("TaxInfo");¶")
Diff(INSERT,"            TxtDescription = new BusinessHtmlEditor("txtDescription");¶")
Diff(EQUAL,"        }¶")
Diff(DELETE,"")
Diff(EQUAL,"¶        #region Properties¶        public RadTabStrip TabStripControl;¶        public BusinessCalendar2 PublishStartDate;¶        public BusinessCalendar2 PublishStartTime;¶        public BusinessCalendar2 PublishEndDate;¶        public BusinessCalendar2 PublishEndTime;¶        public BusinessCalendar2 CalendarStartDate;¶        public BusinessCalendar2 CalendarEndDate;¶        public BusinessCalendar2 ExpectedArrivalCalendar;¶        public BusinessComboBox GroupList;¶        public BusinessComboBox GroupRoleList;¶        public MultiSelectControl PremiumMultiSelect;¶¶        #region Grid")
Diff(DELETE," ")
Diff(EQUAL,"¶        public BusinessDataGrid CollectionItemsGrid;¶        //Need InfoControl¶        #endregion¶        public GeneralLedgerAccount AccountsReceivable { get; set; }¶        public GeneralLedgerAccount Income { get; set; }¶        public GeneralLedgerAccount Inventory { get; set; }¶        public GeneralLedgerAccount CostOfGoodsSold { get; set; }¶        public GeneralLedgerAccount Adjustments { get; set; }¶        public ItemCreatorTaxInfo TaxInfo { get; set; }¶")
Diff(INSERT,"        public BusinessHtmlEditor TxtDescription { get; private set; }")
Diff(EQUAL,"¶")
Diff(DELETE,"")
Diff(EQUAL,"¶        #endregion¶¶        #region SimpleOrCollectionPanel¶        public IWebLocator SimpleRadioButton => GetLocatorById("SimpleRadioButton");¶        public IWebLocator CollectionRadioButton => GetLocatorById("CollectionRadioButton");¶        public IWebLocator KitRadioButton => GetLocatorById("KitRadioButton");¶        public IWebLocator CollectionOfSeparateItemsRadioButton => GetLocatorById("CollectionOfSeparateItemsRadioButton");¶        public IWebLocator SeriesOfCollectionsRadioButton => GetLocatorById("SeriesOfCollectionsRadioButton");¶        #endregion¶¶        public IWebLocator TypeDescriptionTextBox => GetLocatorById("TypeDescriptionTextBox");¶        public IWebLocator ProductTypeDropDown => GetLocatorById("ProductTypeDropDown",")
Diff(INSERT," ")
Diff(EQUAL,""select");¶        public IWebLocator ProductClassDropDown => GetLocatorById("ProductClassDropDown",")
Diff(INSERT," ")
Diff(EQUAL,""select");¶        public IWebLocator TxtItemCode => GetLocatorById("txtItemCode");¶        public IWebLocator TxtName => GetLocatorById("txtName");¶        public IWebLocator ItemImageSelector => GetLocatorById("ItemImageSelector");¶¶¶        #region PriceUpdatePanel¶        public IWebLocator AddStandardPricingRulesLink => GetLocatorById("AddStandardPricingRulesLink");¶        public IWebLocator TxtStandardPrice => GetLocatorById("txtStandardPrice");¶        public IWebLocator TxtDiscountPrice => GetLocatorById("txtDiscountPrice");¶        public IWebLocator PriceIsTotalCheckBox => GetLocatorById("PriceIsTotalCheckBox");¶        public IWebLocator AddDiscountPricingRulesLink => GetLocatorById("AddDiscountPricingRulesLink");¶        public IWebLocator RemoveDiscountPricingRulesLink => GetLocatorById("RemoveDiscountPricingRulesLink");¶        public IWebLocator UseStandardPricingForDiscountPricingRulesLink => GetLocatorById("UseStandardPricingForDiscountPricingRulesLink");¶        #endregion¶¶        #region DivGroupsUpdatePanel¶        public IWebLocator OnlyStaffPurchaseCheckBox => GetLocatorById("OnlyStaffPurchaseCheckBox");¶        public IWebLocator AllowOrderLineNoteCheckBox => GetLocatorById("AllowOrderLineNoteCheckBox");¶        public IWebLocator NotOrderableCheckBox => GetLocatorById("NotOrderableCheckBox");¶        public IWebLocator RecurringGiftCheckBox => GetLocatorById("RecurringGiftCheckBox");¶        public IWebLocator GroupProperties => GetLocatorById("GroupProperties");¶        public IWebLocator AddNewGroupLinkButton => GetLocatorById("AddNewGroupLinkButton");¶        public IWebLocator NewGroupNameTextBox => GetLocatorById("NewGroupNameTextBox");¶        public IWebLocator SaveNewGroupButton => GetLocatorById("SaveNewGroupButton");¶        public IWebLocator CancelNewGroupButton => GetLocatorById("CancelNewGroupButton");¶        public IWebLocator GroupTermTextBox => GetLocatorById("GroupTermTextBox");¶        public IWebLocator NoProrationButton => GetLocatorById("NoProrationButton");¶        public IWebLocator MonthlyProrationButton => GetLocatorById("MonthlyProrationButton");¶        public IWebLocator CustomProrationButton => GetLocatorById("CustomProrationButton");¶        public IWebLocator CustomScheduleDropDown => GetLocatorById("CustomScheduleDropDown", "select");¶        public IWebLocator AdvanceEndDateCheckBox => GetLocatorById("AdvanceEndDateCheckBox");¶        public IWebLocator RelatedContentEditor => GetLocatorById("RelatedContentEditor");¶        public IWebLocator AdvanceEndDateMonthDropDown => GetLocatorById("AdvanceEndDateMonthDropDown", "select");¶        #endregion¶¶        public IWebLocator TxtWeight => GetLocatorById("txtWeight");¶        public IWebLocator TxtMinimumAllowed => GetLocatorById("txtMinimumAllowed");¶        public IWebLocator TxtMaximumAllowed => GetLocatorById("txtMaximumAllowed");¶        public IWebLocator ProductStatusDropDown => GetLocatorById("ProductStatusDropDown",")
Diff(INSERT," ")
Diff(EQUAL,""select");¶¶¶        #region ItemSetPropertiesPanel¶        public IWebLocator MultipleComponentsRadioButton => GetLocatorById("MultipleComponentsRadioButton");¶        public IWebLocator TxtMinimumComponentSelections => GetLocatorById("txtMinimumComponentSelections");¶        public IWebLocator TxtMaximumComponentSelections => GetLocatorById("txtMaximumComponentSelections");¶        public IWebLocator OneComponentRadioButton => GetLocatorById("OneComponentRadioButton");¶        public IWebLocator AllComponentsRadioButton => GetLocatorById("AllComponentsRadioButton");¶        #endregion¶¶¶        #region GridUpdatePanel¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public IWebLocator AddLinkButton => ")
Diff(DELETE,"GetLocatorById("")
Diff(INSERT,"CollectionItemsGrid.Cell(1, 1, tableSection: "thead", postXPath: "//a[contains(@id,'")
Diff(EQUAL,"AddLinkButton")
Diff(INSERT,"')]")
Diff(EQUAL,"");¶        public IWebLocator AddExistingCollectionLinkButton => GetLocatorById("AddExistingCollectionLinkButton");¶        public IWebLocator IsDefaultCheckBox => GetLocatorById("IsDefaultCheckBox");¶        public IWebLocator QuantityTextBox => GetLocatorById("QuantityTextBox");¶        public IWebLocator MaxQuantityTextBox => GetLocatorById("MaxQuantityTextBox");¶        public IWebLocator DisplayOrderTextBox => GetLocatorById("DisplayOrderTextBox");¶        public IWebLocator TaxCodeDropDown => GetLocatorById("TaxCodeDropDown", "select");¶        public IWebLocator StandardPriceTextBox => GetLocatorById("StandardPriceTextBox");¶        public IWebLocator DiscountPriceTextBox => GetLocatorById("DiscountPriceTextBox");¶        #endregion¶¶        #region RadPageAccounting¶        public IWebLocator FinancialEntityDropDownList => GetLocatorById("FinancialEntityDropDownList", "select");¶        public IWebLocator IncursShippingCheckBox => GetLocatorById("IncursShippingCheckBox");¶        public IWebLocator IncursHandlingCheckBox => GetLocatorById("IncursHandlingCheckBox");¶        public IWebLocator InventoryItemCheckBox => GetLocatorById("InventoryItemCheckBox");¶        public IWebLocator PublicBackordersCheckBox => GetLocatorById("PublicBackordersCheckBox");¶        public IWebLocator SystemDefaultMessageRadioButton => GetLocatorById("SystemDefaultMessageRadioButton");¶        public IWebLocator SpecificMessageTextBox => GetLocatorById("SpecificMessageTextBox");¶        public IWebLocator NoMessageRadioButton => GetLocatorById("NoMessageRadioButton");¶        public IWebLocator MinimumOrderPointTextBox => GetLocatorById("MinimumOrderPointTextBox");¶        public IWebLocator MinimumOrderQuantityTextBox => GetLocatorById("MinimumOrderQuantityTextBox");¶        public IWebLocator OnOrderTextBox => GetLocatorById("OnOrderTextBox");¶        public IWebLocator IsPremiumCheckBox => GetLocatorById("IsPremiumCheckBox");¶        public IWebLocator MinimumGiftAmountTextBox => GetLocatorById("MinimumGiftAmountTextBox");¶        public IWebLocator FairMarketValueTextBox => GetLocatorById("FairMarketValueTextBox");¶        public IWebLocator AddNewRuleLink => GetLocatorById("AddNewRuleLink");¶        #endregion¶¶¶¶")
Diff(INSERT,"")
Diff(EQUAL,"        public IWebLocator PayPriorityTextBox => GetLocatorById("PayPriorityTextBox");¶")
Diff(DELETE,"        public IWebLocator TxtDescription => GetLocatorById("txtDescription");     ¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/ItemCreator/ItemCreator.cs)
Diff(EQUAL,"{¶    public class InvoiceLinesTemplate : DisplayIPartBase¶    {¶        public InvoiceLinesTemplate(string name) : base(name)¶        {¶            InvoiceAdjustmentsGrid = new RadGrid("OtherInvoiceAdjustmentsGrid");¶            PaymentsGrid = new RadGrid("PaymentsGrid");¶")
Diff(INSERT,"            TaxGrid = new RadGrid("TaxLinesDataGrid");¶")
Diff(EQUAL,"        }¶¶        public IWebLocator TotalChargesValue ")
Diff(DELETE,"{ get ")
Diff(EQUAL,"=> GetLocatorById("TotalChargesValue");")
Diff(DELETE," }")
Diff(EQUAL,"¶        public IWebLocator AdjustmentsValue ")
Diff(DELETE,"{ get ")
Diff(EQUAL,"=> GetLocatorById("AdjustmentsValue");")
Diff(DELETE," }")
Diff(EQUAL,"¶        public IWebLocator AdjustedTotalChargesValue ")
Diff(DELETE,"{ get ")
Diff(EQUAL,"=> GetLocatorById("AdjustedTotalChargesValue");")
Diff(DELETE," }")
Diff(INSERT,"¶        public IWebLocator Tax => GetLocatorById("TaxTotalValue");")
Diff(EQUAL,"¶        public IWebLocator PaymentsValue ")
Diff(DELETE,"{ get ")
Diff(EQUAL,"=> GetLocatorById("PaymentsValue");")
Diff(DELETE," }")
Diff(EQUAL,"¶        public IWebLocator RemainingBalanceValue ")
Diff(DELETE,"{ get ")
Diff(EQUAL,"=> GetLocatorById("RemainingBalanceValue");")
Diff(DELETE," }")
Diff(EQUAL,"¶        public IWebLocator OriginalInvoiceTotal => LocatorByXPath("TotalChargesValue");¶        public IWebLocator Adjustments => LocatorByXPath("AdjustmentsValue");¶")
Diff(DELETE,"        ")
Diff(EQUAL,"¶        public RadGrid InvoiceAdjustmentsGrid { get;")
Diff(DELETE," set;")
Diff(EQUAL," }¶        public RadGrid PaymentsGrid { get; ")
Diff(DELETE,"s")
Diff(INSERT,"}¶        public RadGrid TaxGrid { g")
Diff(EQUAL,"et; }")
Diff(DELETE,"   ")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/InvoiceDetail/InvoiceLinesTemplate.cs)
Diff(EQUAL,"{¶    public class ProductDisplay : DisplayIPartBase¶    {¶        public ProductDisplay(string name) : base(name)¶        {¶            EnrollInAutomaticRenewalsControl = new EnrollInAutomaticRenewalsControl();¶        }¶¶        public EnrollInAutomaticRenewalsControl EnrollInAutomaticRenewalsControl;¶        public IWebLocator CartLink => LocatorByXPath("CartLink");¶        public IWebLocator ProductImage => LocatorByXPath("ProductImage");¶        public IWebLocator ProductTitle => LocatorByXPath("ProductTitle")
Diff(DELETE,"Header")
Diff(EQUAL,"");¶        public IWebLocator ProductDescription => LocatorByXPath("ProductDescription");¶        public IWebLocator InventoryLabel => LocatorByXPath("InventoryLabel");¶        public IWebLocator StandardPrice => LocatorByXPath("StandardPrice");¶        public IWebLocator DiscountPrice => LocatorByXPath("DiscountPrice");¶        public IWebLocator CustomerPrice => LocatorByXPath("CustomerPrice");¶        public IWebLocator OverridePricing => LocatorByXPath("OverridePricing");¶        public IWebLocator ExcludesTaxLabel => LocatorByXPath("ExcludesTaxLabel");¶        public IWebLocator RevertPrice => LocatorByXPath("RevertPrice");¶        public IWebLocator SavingsAmount => LocatorByXPath("SavingsAmount");¶        public IWebLocator QuantityLabel => LocatorByXPath("QuantityLabel");¶        public IWebLocator QuantityTextBox => LocatorByXPath("QuantityTextBox");¶        public IWebLocator AddToCart => GetLocatorById("AddToCart", "input");¶        public IWebLocator ProductDetailsLabel => LocatorByXPath("DetailsLabel");¶        public IWebLocator DetailsTextBox => LocatorByXPath("DetailsTextBox");¶        public IWebLocator OnHandValueLabel => LocatorByXPath("OnHandValueLabel");¶        public IWebLocator ReservedValueLabel => LocatorByXPath("ReservedValueLabel");¶        public IWebLocator CommittedValueLabel => LocatorByXPath("CommittedValueLabel");¶        public IWebLocator AvailableValueLabel => LocatorByXPath("AvailableValueLabel");¶        public IWebLocator OnOrderValueLabel => LocatorByXPath("OnOrderValueLabel");¶        public IWebLocator TotalCostValueLabel => LocatorByXPath("TotalCostValueLabel");¶        public IWebLocator AverageCostValueLabel => LocatorByXPath("AverageCostValueLabel");¶        public IWebLocator LastCostValueLabel => LocatorByXPath("LastCostValueLabel");¶        public IWebLocator LastReceivedValueLabel => LocatorByXPath("LastReceivedValueLabel");¶        public IWebLocator RefreshButton => LocatorByXPath("RefreshButton");¶")
Diff(INSERT,"        public IWebLocator InventoryDetailsButton => LocatorByXPath("InventoryDetailsSection", attribute: "aria-controls");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/GeneralProductDisplay/ProductDisplay.cs)
Diff(EQUAL,"{¶    public class DynamicProductDisplay : DisplayIPartBase¶    {¶        public DynamicProductDisplay(string name) : base(name)¶        {¶            Construct();¶        }¶¶        public DynamicProductDisplay() : base("New DynamicProductDisplayCommon")¶        {¶            Construct();¶        }¶¶        private void Construct()¶        {¶            MooRepeater = new MenuOfOptionsProductDisplay(GetId("MooRepeater"));¶            ChildMooListView = new ListView("ChildMooListView");¶            SimpleProductDisplay = new ProductDisplay(Name);¶            BackLink = new BackLinkControl("BackLink");¶        }¶¶        public MenuOfOptionsProductDisplay MooRepeater;¶        public ProductDisplay SimpleProductDisplay;¶¶        public ListView ChildMooListView;¶        public BackLinkControl BackLink;")
Diff(INSERT,"¶¶        public IWebLocator GetItemCheckBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'SelectCheckBox')]");¶        public IWebLocator GetAmountTextBoxByText(string text) => LocatorByTextXPath(text, postXPath: "//ancestor::tr//td//input[contains(@id,'AmountTextBox')]");")
Diff(EQUAL,"¶        public IWebLocator MooProductNameLabel(int row) => MooRepeater.Row(row, "MooProductNameLabel");¶        public IWebLocator MooProductItemName(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "ProductNameCell");¶        public IWebLocator PickListRequiredIndicator(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "PickListRequiredIndicator");¶        public IWebLocator PickList(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "PickList_Input");¶        public IWebLocator SelectRadioButton(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "SelectRadioButton");¶        public IWebLocator SelectCheckBox(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "SelectCheckBox");¶        public IWebLocator OverridePricing(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "OverridePricing");¶        public IWebLocator AmountLabel(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "AmountLabel");¶        public IWebLocator QuantityLabel(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "QuantityLabel");¶        public IWebLocator RevertPrice(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "RevertPrice");¶        public IWebLocator BalanceLabel(int row, int itemRow) => ChildMooListView.Item(MooRepeater.RowId(row), itemRow, "BalanceLabel");¶        public IWebLocator ItemAddedMessageLabel { get => GetLocatorById("ItemAddedMessageLabel"); }¶        public IWebLocator ViewCartLink { get => GetLocatorById("BottomCartLink"); }¶        public IWebLocator ProductTitle { get => GetLocatorById("ProductTitle"); }¶        public IWebLocator RedirectToCartButton => LocatorByXPath("RedirectToCartButton");")
Diff(DELETE," ")
Diff(EQUAL,"¶        public IWebLocator SubmitAdjustmentButton => LocatorByXPath("SubmitAdjustmentButton");¶        public BusinessCalendar2 TermStartDate => new BusinessCalendar2("TermStartDate");¶        public ")
Diff(DELETE,"BusinessCalendar2 TermEndDate => new BusinessCalendar2")
Diff(INSERT,"IWebLocator TermEndDate => LocatorByXPath")
Diff(EQUAL,"("TermEndDate");")
Diff(DELETE," ")
Diff(EQUAL,"¶        public IWebLocator TermLength => LocatorByXPath("TermLengthTextBox");¶        public IWebLocator SubtotalValueLabel { get => GetLocatorById("SubtotalValueLabel"); }")
Diff(INSERT,"¶        public IWebLocator AddToCartButton { get => GetLocatorById("AddToCartButton"); }")
Diff(EQUAL,"¶¶        //TODO: Add other controls¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Commerce/GeneralProductDisplay/DynamicProductDisplay.cs)
Diff(EQUAL,"{¶    public class PotentialDuplicateListDisplay : DisplayIPartBase¶    {¶        public PotentialDuplicateListDisplay(string name) : base(name) => Construct();¶        public PotentialDuplicateListDisplay() : base("New PotentialDuplicateListDisplayCommon") => Construct();¶¶        private void Construct()¶        {¶            RadTabStrip1 = new RadTabStrip("RadTabStrip1");¶            RadTabStrip1.AddTab("Manage Duplicates");¶            RadTabStrip1.AddTab("Settings");¶            DuplicatesGrid = new BusinessDataGrid("DuplicatesGrid");¶            PartiesNestGrid = new BusinessDataGrid("PartiesNestGrid");¶            CalendarFromDate = new BusinessCalendar2("CalendarFromDate");¶            CalendarToDate = new BusinessCalendar2("CalendarToDate");¶        }¶¶        public RadTabStrip RadTabStrip1 { get; set; }¶        public BusinessDataGrid DuplicatesGrid { get; set; }¶        public BusinessDataGrid PartiesNestGrid { get; set; }¶        public BusinessCalendar2 CalendarFromDate { get; set; }¶        public BusinessCalendar2 CalendarToDate { get; set; }¶¶        public IWebLocator NameContainsTextbox => GetLocatorById("NameContainsTextbox");¶        public IWebLocator IDEqualsTextbox => GetLocatorById("IDEqualsTextbox");¶        public IWebLocator FilterButton => GetLocatorById("FilterButton");¶        public IWebLocator ExpandAllButton => GetLocatorById("ExpandAllButton");¶        public IWebLocator CollapseAllButton => GetLocatorById("CollapseAllButton");¶        public IWebLocator ExportButton => LocatorByTextXPath("Export","Export",true);¶        public IWebLocator ExportWordButton => GetLocatorById("ExportWordButton");¶        public IWebLocator ExportExcelButton => GetLocatorById("ExportExcelButton");¶        public IWebLocator ExportPdfButton => GetLocatorById("ExportPdfButton");¶        public IWebLocator ExportCSVButton => GetLocatorById("ExportCSVButton");¶        public IWebLocator ResolveButton => GetLocatorById("ResolveButton");¶        public IWebLocator NotDuplicatesButton => GetLocatorById("NotDuplicatesButton");¶")
Diff(INSERT,"        public IWebLocator RunTaskNowButton => LocatorByXPath("RunTaskNowButton");¶        public IWebLocator CheckBoxScheduleTask => LocatorByXPath("CheckBoxScheduleTask");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/PotentialDuplicateListDisplay.cs)
Diff(EQUAL,"{¶    public class ContactAccountCreator : DisplayIPartBase¶    {¶        public ContactAccountCreator(string name) : base(name) => Construct();¶¶        public ContactAccountCreator() : base("New ContactAccountCreatorCommon") => Construct();¶¶        public void Construct()¶        {¶            PrimaryOrganizationSelector = new PrimaryOrganizationSelector("primaryOrgSelector");¶            PostalCodeLookup = new PostalCodeLookup("PostalCodeLookup");¶            PrimaryClub = new PrimaryOrganizationSelector("primaryClubSelect");¶            DesignationMultiSelect = new MultiSelectControl("DesignationMultiSelect");¶        }¶¶        #region TokenPanel¶        public IWebLocator DonateSomeoneElse { get => GetLocatorById("DonateSomeoneElse"); }¶        public IWebLocator TokenStatement { get => GetLocatorById("TokenStatement"); }¶        #endregion¶¶        public IWebLocator LabelErrorMessage { get => GetLocatorById("LabelErrorMessage"); }¶        public IWebLocator LabelSuccessMessage { get => GetLocatorById("LabelSuccessMessage"); }¶        public IWebLocator ContinueLink { get => GetLocatorById("ContinueLink"); }¶¶        #region FormPanel¶        public IWebLocator LabelLogOnLink { get => GetLocatorById("LabelLogOnLink"); }¶        public IWebLocator LogOnLink { get => GetLocatorById("LogOnLink"); }¶        //OpenAuthorizationProviders control missing¶        public IWebLocator CreateAccountType")
Diff(INSERT,"Individual")
Diff(EQUAL," { get => GetLocatorById("CreateAccountType")
Diff(INSERT,"_0");  }¶        public IWebLocator CreateAccountTypeOrganization { get => GetLocatorById("CreateAccountType_1")
Diff(EQUAL,""); }¶        public IWebLocator HouseholdRoleDropDownList { get => GetLocatorById("HouseholdRoleDropDownList"); }¶        public IWebLocator Prefix { get => GetLocatorById("Prefix"); }¶        public static IWebLocator SelectPrefix(PrefixEnum prefix) => LocatorByXPath(Enum.GetName(typeof(PrefixEnum), prefix), "option", "value");¶        public IWebLocator OrganizationName { get => GetLocatorById("OrganizationName"); }¶        public IWebLocator FirstName { get => GetLocatorById("FirstName"); }¶        public IWebLocator MiddleName { get => GetLocatorById("MiddleName"); }¶        public IWebLocator LastName { get => GetLocatorById("LastName"); }¶        public IWebLocator Suffix { get => GetLocatorById("Suffix"); }¶        public static IWebLocator SelectSuffix(SuffixEnum suffix) => LocatorByXPath(Enum.GetName(typeof(PrefixEnum), suffix), "option", "value");¶¶        public MultiSelectControl DesignationMultiSelect { get; set; }¶¶        public IWebLocator InformalName { get => GetLocatorById("InformalName"); }¶        public IWebLocator PrimaryTitle { get => GetLocatorById("PrimaryTitle"); }¶        public PrimaryOrganizationSelector PrimaryOrganizationSelector { get; set; }¶        public PrimaryOrganizationSelector PrimaryClub { get; set; }¶        public IWebLocator Email { get => GetLocatorById("Email"); }¶        public IWebLocator Phone { get => GetLocatorById("Phone"); }¶        public IWebLocator MobilePhone { get => GetLocatorById("MobilePhone"); }¶        #endregion¶¶        public IWebLocator CountryLabel { get => GetLocatorById("LabelCountry"); }¶        public IWebLocator CountrySelect { get => GetLocatorDoubleContains("SelectCountry", "select"); }")
Diff(INSERT,"¶        public IWebLocator InvalidCharacterValidatorWarning => LocatorByXPath("PasswordRegExpValidator");¶        public IWebLocator InvalidCharacterConfirmValidatorWarning => LocatorByXPath("ConfirmPasswordRegExpValidator");")
Diff(EQUAL,"¶¶        public PostalCodeLookup PostalCodeLookup { get; set; }¶¶        #region AddressPanel¶        public IWebLocator Address1 { get => GetLocatorById("TextAddress1"); }¶        public IWebLocator Address2 { get => GetLocatorById("TextAddress2"); }¶        public IWebLocator Address3 { get => GetLocatorById("TextAddress3"); }¶        public IWebLocator City { get => GetLocatorById("TextCity"); }¶        public IWebLocator SelectSubEntityCode { get => GetLocatorById("SelectSubEntityCode"); }¶        public IWebLocator SubEntityTextField { get => GetLocatorById("TextSubEntity"); }¶        public IWebLocator PostalCode { get => GetLocatorById("TextPostalCode"); }¶        #endregion¶¶        public PrimaryOrganizationSelector PrimaryClubSelector { get; set; }¶¶        #region AdministratorPanel¶        public IWebLocator AdministratorName { get => GetLocatorById("AdministratorName"); }¶        public IWebLocator RemoveLinkButton { get => GetLocatorById("RemoveLinkButton"); }¶        public IWebLocator SelectLink { get => GetLocatorById("SelectLink"); }¶        public IWebLocator AdministratorHelpInfo { get => GetLocatorById("AdministratorHelpInfo"); }¶        public IWebLocator SetSelectedAdministratorContactKeyButton { get => GetLocatorById("SetSelectedAdministratorContactKeyButton"); }¶        #endregion¶¶        #region CreateLogonPanel¶        public IWebLocator CreateAnAccountCheckBox { get => GetLocatorById("CreateAnAccountCheckBox"); }¶        public IWebLocator Logon { get => GetLocatorById("Logon"); }¶        public IWebLocator LogonEmail { get => GetLocatorById("LogonEmail"); }¶        public IWebLocator Password { get => GetLocatorById("Password"); }¶        public IWebLocator ConfirmPassword { get => GetLocatorById("ConfirmPassword"); }¶        public IWebLocator RecoveryEmail { get => GetLocatorById("RecoveryEmail"); }¶        #endregion¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactAccountCreator.cs)
Diff(EQUAL,"{¶    public class ContactMiniProfile : DisplayIPartBase¶    {¶        public ContactMiniProfile(string name) : base(name) => Construct();¶¶        public ContactMiniProfile() : base("New ContactMiniProfileCommon") => Construct();¶¶        private void Construct()¶        {¶            ContactName = new ContactName(GetId("contactName"));¶            ContactPicture = new ContactProfilePicture(GetId("contactPicture"));¶            ContactAddress = new ContactAddress(GetId("contactAddress"));¶            ContactStatus = new ContactStatus(GetId("contactStatus"));¶            ProceedContactErasureDialog = new ProceedContactErasureDialog();¶        }¶¶        public ContactName ContactName { get; private set; }¶        public ContactProfilePicture ContactPicture { get; private set; }¶        public ContactAddress ContactAddress { get; private set; }¶        public ContactStatus ContactStatus { get; private set; }¶        public ProceedContactErasureDialog ProceedContactErasureDialog { get; private set; }¶        public IWebLocator EditButton => GetLocatorById")
Diff(DELETE,"WithoutName("ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_")
Diff(INSERT,"("")
Diff(EQUAL,"EditButtonPlaceHolder", "div",")
Diff(DELETE," "id",")
Diff(EQUAL," postXPath: "/")
Diff(INSERT,"/")
Diff(EQUAL,"a");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactMiniProfile/ContactMiniProfile.cs)
Diff(EQUAL,"{¶    public class ContactName : DisplayIPartBase¶    {¶        public ContactName(string name) : base(name)¶        {¶        }¶¶        public ContactName() : base("New ContactNameCommon")¶        {¶        }¶¶        public IWebLocator FullName { get => GetLocatorById("fullName"); }¶        public IWebLocator FullNameLink { get => GetLocatorById("fullNameLink"); }¶        public IWebLocator ContactTitle { get => GetLocatorById("contactTitle"); }¶        public IWebLocator Institute { get => GetLocatorById("institute"); }¶        public IWebLocator InstituteNameLink { get => GetLocatorById("InstituteNameLink"); }¶        public IWebLocator PrimaryInstitute { get => GetLocatorById("primaryInstitute"); }¶        public IWebLocator LabelClub { get => GetLocatorById("labelClub"); }¶        public IWebLocator ClubNameLink { get => GetLocatorById("ClubNameLink"); }¶        public IWebLocator LabelPrimaryClub { get => GetLocatorById("labelPrimaryClub"); }¶        public IWebLocator MobilePhone { get => GetLocatorById("mobilePhone"); }¶        public IWebLocator ChosenContainer { get => LocatorByXPath("chosen-container chosen-container-multi", "div", "class"); }¶        public IWebLocator Designation { get => LocatorByXPath("chosen-search-input", "input", "class"); }¶        public IWebLocator AddDesignation { get => ")
Diff(DELETE,"Get")
Diff(EQUAL,"LocatorBy")
Diff(DELETE,"IdWithoutName("ctl00_TemplateBody_contactNameDisplay1_DesignationMultiSelect_ListBox_chosen", "li", "id", postXPath: "/div/ul/li"); ¶        }")
Diff(INSERT,"XPath("create-option active-result", "li", "class"); }¶")
Diff(EQUAL,"¶        //create-option active-result¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactMiniProfile/ContactName.cs)
Diff(EQUAL,"{¶    public class ContactAddressEditor : DisplayIPartBase¶    {¶        public ContactAddressEditor(string name) : base(name)¶        {¶            ContactAddress = new ContactAddress(name);¶            AddressStrip = GetAddressStrip();¶        }¶        public ContactAddressEditor() : base("new ContactAddressEditorCommon")¶        {¶            ContactAddress = new ContactAddress("new ContactAddressEditorCommon");¶            AddressStrip = GetAddressStrip();¶        }¶¶        public ContactAddress ContactAddress { get; set; }¶        public RadTabStrip AddressStrip;¶¶        private RadTabStrip GetAddressStrip()¶        {¶            var tabs = new RadTabStrip("ContactAddress");¶            tabs.AddTab("Address"")
Diff(DELETE,", new RadTab(0, "Address")")
Diff(EQUAL,");¶            return tabs;¶        }¶¶        public IWebLocator ContactAddressContentPanel = LocatorByXPath("ContactAddress_ContentPanel");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/ContactManagement/ContactAddressEditor/ContactAddressEditor.cs)
Diff(EQUAL,"{¶    public class AsiGiftEntry : AngularBase¶    {¶        public AsiGiftEntry()¶        {¶            Tag = "asi-gift-entry";¶            ParentXPath = $"//{Tag}";¶¶            ProcessBatchButton = new AngularButton(ParentXPath, "Process Batch");¶            DeleteBatchButton = new AngularButton(ParentXPath, "Delete Batch");¶            ShowPostedBatches = new AngularInput(ParentXPath, "checkbox", "showPostedBatches");¶            SelectedBatch = new AngularSelect(ParentXPath, "SelectedBatch");¶¶            var dateInput = new AngularDateInput("", "BatchDate");¶            BatchDate = new AngularFormField(dateInput, "Batch date", "BatchDate", ParentXPath);¶¶            CreateBatchButton = new AngularButton(ParentXPath, "Create Batch");¶¶            ShowUsers = new AngularRadio(ParentXPath, "showUsers");¶            AppGiftEntryForm = new AppGiftEntryForm();¶            UserMessage = new AsiMessage(ParentXPath);¶")
Diff(INSERT,"            ReceiptMessage = new ReceiptMessage(ParentXPath);¶")
Diff(EQUAL,"        }¶¶        public AngularButton ProcessBatchButton { get; set; }¶        public AngularButton DeleteBatchButton { get; set; }¶        public AngularInput ShowPostedBatches { get; set; }¶        public AngularSelect SelectedBatch { get; set; }¶        public AngularButton CreateBatchButton { get; set; }¶        public AngularFormField BatchDate { get; set; }¶        public AngularRadio ShowUsers { get; set; }¶")
Diff(INSERT,"        public ReceiptMessage ReceiptMessage { get; set; }¶")
Diff(EQUAL,"        public AsiMessage UserMessage { get; set; }¶        public IWebLocator DateMessage(string message) => DisplayStaticBase.LocatorForXpath($"{ParentXPath}//div[contains(text(),'{message}')]");¶¶¶        public AppGiftEntryForm AppGiftEntryForm { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Fundraising/GiftEntry/AngularContent/GiftEntryApp/AsiGiftEntry.cs)
Diff(EQUAL,"{¶    public class PanelEditor : DisplayIPartBase¶    {¶        public PanelEditor(string name) : base(name)¶        {¶            PanelName = name.Replace(" ", "");¶            MultipleInstanceList = new Lister("_panelEditor");¶        }¶¶        public Lister MultipleInstanceList;¶        private string PanelName;¶¶        public IWebLocator EditButton { get => GetLocatorById("_Head", "*", "id", "//button[@value='Edit']"); }¶        public IWebLocator ConfigureButton { get => GetLocatorById("_Head", "*", "id", "//button[@value='Edit Panel']"); }¶        public IWebLocator AddPanel => GetLocatorById(PanelName, postXPath: "//button[contains(@title,'Add')]");¶        public IWebLocator EditPanel => GetLocatorById(PanelName, postXPath: "//button[contains(@title,'Edit Panel')]");¶        public IWebLocator CopyAddressToClipboard => GetLocatorById(PanelName, postXPath: "//button[contains(@title,'Copy address to clipboard')]");¶        public IWebLocator TextBox(string boName, string propertyName) => GetLocatorById($"{boName}___{propertyName}"); ¶        public IWebLocator Select(string boName, string propertyName) => GetLocatorById($"{boName}___{propertyName}","select"); ¶        public IWebLocator CheckBox(string boName, string propertyName, int placement) => GetLocatorById($"{boName}___{propertyName}_{placement}");")
Diff(DELETE," ")
Diff(EQUAL,"¶")
Diff(INSERT,"        public IWebLocator PanelDescription { get => GetLocatorById("_Description", "div", "id", "//div"); }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Common/PanelEditor.cs)
Diff(EQUAL,"{¶    public class FormsDisplay: DisplayIPartBase¶    {¶        public FormsDisplay() : base("") { }¶¶        public FormsDisplay(string name) : base(name) { }¶¶        public IWebLocator DropDownField(string id) => LocatorByXPath($"FB_DropDown_{id}", "select");¶¶        public IWebLocator TextInputField(string id) => LocatorByXPath($"FB_TextBox_{id}", "input");¶¶        public IWebLocator ")
Diff(DELETE,"LabelField(string id) => LocatorByXPath($"FB_Label_{id}", "input")
Diff(INSERT,"ClientStateTextInputField(string id) => LocatorByXPath($"FB_TextBox_{id}_ClientState", "input");¶¶        public IWebLocator LabelField(string id) => LocatorByXPath($"FB_Label_{id}", "input");¶¶        public IWebLocator TextBoxLabelField(string id) => LocatorByXPath($"FB_TextBox_{id}", "label")
Diff(EQUAL,"");¶¶        public IWebLocator SubmitButton => LocatorByXPath("FB_Button", "input");¶¶        public IWebLocator FormRuntimeErrorMessage { get => LocatorByXPath("AsiError", "li", "class"); }¶¶        public IWebLocator AddLinkButton { get => LocatorByXPath("TextButtonM", "a", "class"); }¶¶")
Diff(INSERT,"        public IWebLocator LabelLocation(string id, string location) => LocatorByXPath($"Section_{id}", "div", postXPath: $"//div[contains(@class,'{location}')]");¶¶")
Diff(EQUAL,"        /// <summary>¶        /// Get a locater by field type¶        /// </summary>¶        /// <param name="fieldType"></param>¶        /// <param name="fieldId"></param>¶        /// <returns></returns>¶        public IWebLocator GetLocatorByFieldType(string fieldType, string fieldId)¶        {¶            switch (fieldType)¶            {¶                case "DropDown":¶                    return DropDownField(fieldId);¶                case "Label":¶                    return LabelField(fieldId);¶                default:¶                    return TextInputField(fieldId);¶            }¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/FormsDisplay.cs)
Diff(EQUAL,"{¶    public class FormsConfigEdit¶    {¶        public static SmartControl ConfigureFormSelector { get => SmartControl.ComboBox("FormName"); }¶")
Diff(INSERT,"        public static SmartControl NewContactRecordCheckbox { get => SmartControl.CheckBoxSet("FormCreateContact"); }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/Controls/FormsConfigEdit.cs)
Diff(EQUAL,"{¶    public class FormLibrary : DisplayIPartBase¶    {¶        public Rad")
Diff(DELETE,"Grid RadGrid1;¶        public IWebLocator FormNameInput { get => GetLocatorDoubleContains("tbFormName")
Diff(INSERT,"TabStrip FormGroupsTabStrip { get; }¶        public RadGrid RadGrid1 { get; }¶        public IWebLocator GroupNameInput { get => GetLocatorById("tbGroupName", "input"); }¶        public IWebLocator AddGroupButton { get => GetLocatorById("AddGroupButton", "input"); }¶        public IWebLocator FormNameInput { get => GetLocatorDoubleContains("tbFormName", "input"); }¶        public IWebLocator FormGroupCombobox { get => GetLocatorDoubleContains("ComboFormGroup")
Diff(EQUAL,"", "input"); }¶        public IWebLocator FormApprovalCheckBox { get => GetLocatorDoubleContains("cbRequiresApproval", "input"); }¶        public IWebLocator AddFormButton { get => GetLocatorDoubleContains("Button1", "input", "id", "[@value='Add']"); }¶        public IWebLocator ConvertToAdvancedModeLink { get => LocatorForXpath("//a[text()='Convert to advanced mode']"); }¶        public IWebLocator ProceedButton { get => GetLocatorDoubleContains("ProceedFormConvertButton", "input", "id", "[@value='Proceed']"); }¶¶        public FormLibrary(string name) :")
Diff(DELETE," ")
Diff(EQUAL,"¶            base(name)¶        {¶")
Diff(INSERT,"            FormGroupsTabStrip = CreateTabStrip();¶")
Diff(EQUAL,"            RadGrid1 = new RadGrid(name);¶        }¶        public FormLibrary() :")
Diff(DELETE," ")
Diff(EQUAL,"¶            base("FormLibrary")¶        {¶            ")
Diff(DELETE,"RadGrid1 = new RadGrid("FormLibrary")")
Diff(INSERT,"FormGroupsTabStrip = CreateTabStrip();¶            RadGrid1 = new RadGrid("FormLibrary");¶        }¶¶        private static RadTabStrip CreateTabStrip()¶        {¶            var tabStrip = new RadTabStrip("FormGroups");¶            tabStrip.AddTab("General");¶            tabStrip.AddTab("+");¶¶            return tabStrip")
Diff(EQUAL,";¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Common/FormBuilder/Controls/FormLibrary.cs)
Diff(EQUAL,"{¶    public class PanelEditorConfigEdit : DisplayStaticBase¶    {¶        public PanelEditorConfigEdit() { }¶        public static SmartControl ConfigurePanelSelector { get => SmartControl.DropDownList("panelList"); }¶        public static SmartControl AllowAdd { get => SmartControl.CheckBoxSet("allowAdd"); }¶        public static SmartControl AllowDelete { get => SmartControl.CheckBoxSet("allowDelete"); }¶        public static SmartControl AllowEdit { get => SmartControl.CheckBoxSet("allowEdit"); }¶")
Diff(INSERT,"        public static IWebLocator DescriptionTextArea => LocatorByXPath($"PartDescription_TextArea", "textarea", "id");  ¶")
Diff(EQUAL,"    }¶}")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Common/PanelEditor/PanelEditorConfigEdit.cs)
Diff(EQUAL,"{¶    public class RateCardDetailsSetting : AdvertisingSettingsBase¶    {¶        public static IWebLocator RateCardDetailsForm { get => LocatorByXPath("rateCardDetailsForm", "form", "name"); }¶        public static IWebLocator AdColorSelect { get => Select("AdColor"); }¶        public static IWebLocator AdSizeSelect { get => LocatorByXPath("AdSizeValue", "ng-select", "formcontrolname"); }¶        public static IWebLocator FrequencySelect { get => LocatorByXPath("FrequencyValue", "ng-select", "formcontrolname"); }¶        public static IWebLocator Create")
Diff(DELETE,"RateCardDetails")
Diff(EQUAL,"Matrix { get => LocatorBy")
Diff(DELETE,"Text")
Diff(EQUAL,"XPath("")
Diff(DELETE," Create Rate Card Details Matrix", "button", true); }¶        public static IWebLocator AddRateInRateCardDetailsMatrix { get => LocatorByTextXPath("Add Rate Card ")
Diff(INSERT,"btnRateCard")
Diff(EQUAL,"Details", "button"")
Diff(DELETE,", true")
Diff(EQUAL,"); }¶        public static IWebLocator ")
Diff(DELETE,"EditRateInRateCardDetailsMatrix")
Diff(INSERT,"Save")
Diff(EQUAL," { get => LocatorByTextXPath("")
Diff(DELETE,"Edit Rate Card Details")
Diff(INSERT," Save ")
Diff(EQUAL,"", "button", true); }¶        public static IWebLocator GetRateCardTitle { get => LocatorByXPath("rateCardTitle", "div", "Class"); }¶        public static IWebLocator RateCardDetailsTable { get => Table("SPACE"); }¶        public static IWebLocator DeleteRateCardDetailsMatrixLink { get => ElementByText("Delete matrix", "span"); }¶        public static IWebLocator AdSizeClearAllIcon { get => LocatorByXPath("inventoryDetailsForm", "form", "name", "//ng-select[contains(@formcontrolname,'SelectedIssueDateValue')]//span[contains(@title,'Clear all')]"); }¶        public static IWebLocator FrequencyClearAllIcon { get => LocatorByXPath("inventoryDetailsForm", "form", "name", "//ng-select[contains(@formcontrolname,'SelectedAdSizeValue')]//span[contains(@title,'Clear all')]"); }")
Diff(INSERT,"¶        public static IWebLocator ContentPanel { get => LocatorByXPath("ctl01_ContentPanel"); }¶        public static IWebLocator DeletePopUpDialog { get => LocatorByXPath("modal-dialog center-popup", "div", "class"); }¶        public static IWebLocator DeletePopUpDeleteOption { get => LocatorByTextXPath("Delete", "button", true); }¶¶        public static IWebLocator GetRemovedIconWithValue(string value)¶         => LocatorForXpath("//span[contains(text(),'" + value + "')]//parent::div//span[contains(@class,'ng-value-icon')]");")
Diff(EQUAL,"¶¶        /// <summary>¶        /// Get rate cards detail matrix cell by index¶        /// </summary>¶        /// <param name="index">Select rate card detail cell element by index</param>¶        /// <returns></returns>¶        public static IWebLocator GetRateCardDetailsMatrixRateCellXPath(string index = "")¶        {¶            return LocatorForXpath("//table[contains(@id,'rateCardsDetailsTable')]//tbody/tr//input[contains(@placeholder,'Rate')]", index);¶        }¶¶        /// <summary>¶        /// Get selected option from multiselect ¶        /// </summary>¶        /// <param name="formControlName">FormControlName to be used for find element from view</param>¶        /// <param name="value">Value to be used for find element from view</param>¶        /// <param name="postXpath">appended xpath at the end</param>¶        /// <returns></returns>¶        public static IWebLocator GetOptionFromMultiSelectXPath(string formControlName, string value, string postXpath = "")¶        {¶            return LocatorByXPath("rateCardDetailsForm", "form", "name", "//*[contains(@formcontrolname,'" + formControlName + "')]//div[contains(@role,'option')]//span[contains(text(),'" + value + "')]" + postXpath);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Advertising/Settings/Component/MediaAsset/RateCardDetailsSetting.cs)
Diff(EQUAL,"{¶    public class EventPricingGroup : DisplayIPartBase¶    {¶        public EventPricingGroup(string name) : base(name) ¶        {¶            GroupSelector = new MultiSelectControl("GroupSelector");¶            RoleSelector = new MultiSelectControl("RoleSelector");¶        }¶¶        public MultiSelectControl GroupSelector;¶        public MultiSelectControl RoleSelector;¶        public IWebLocator UseExistingRadioButton => GetLocatorById("UseExistingRadioButton");¶        public IWebLocator ExistingPriceSheetsDropDownList => GetLocatorById("ExistingPriceSheetsDropDownList", "select");¶        public IWebLocator AddNewRadioButton => GetLocatorById("AddNewRadioButton");¶        public IWebLocator GroupTypeDropDownList => GetLocatorById("GroupTypeDropDownList", "select");¶        public IWebLocator DisplayNameTextBox => GetLocatorById("DisplayNameTextBox");¶")
Diff(INSERT,"        public IWebLocator PreviewPanel => LocatorByXPath("PreviewDiv", "div");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/EventPricingGroup.cs)
Diff(EQUAL,"{¶    public class FunctionEdit : DisplayIPartBase¶    {¶        public FunctionEdit(string name) : base(name) => Construct();¶        public FunctionEdit() : base("New FunctionEditCommon") => Construct();¶¶        public void Construct()¶        {¶            Tabs = new  RadTabStrip("RadTabStrip1");¶            Tabs.AddTab("Info");¶            Tabs.AddTab("Pricing");¶            Tabs.AddTab("Accounting");¶")
Diff(INSERT,"            Tabs.AddTab("Questions");¶            Tabs.AddTab("Registration Options");¶            Tabs.AddTab("Plan");¶")
Diff(EQUAL,"            CalendarRecurringStartDate = new BusinessCalendar2("CalendarRecurringStartDate");¶            CalendarRecurringEndDate = new BusinessCalendar2("CalendarRecurringEndDate");¶            CalendarRecurringStartTime = new BusinessCalendar2("CalendarRecurringStartTime");¶            CalendarRecurringEndTime = new BusinessCalendar2("CalendarRecurringEndTime");¶            CalendarStartDate = new BusinessCalendar2("CalendarStartDate");¶            CalendarStartTime = new BusinessCalendar2("CalendarStartTime");¶            CalendarEndDate = new BusinessCalendar2("CalendarEndDate");¶            CalendarEndTime = new BusinessCalendar2("CalendarEndTime");¶            ConflictCodeList = new MultiSelectControl("ConflictCodeList");¶            AccountInfo = new AccountingInformation("AccountInfo");¶        }¶        public RadTabStrip Tabs;¶        public BusinessCalendar2 CalendarRecurringStartDate;¶        public BusinessCalendar2 CalendarRecurringEndDate;¶        public BusinessCalendar2 CalendarRecurringStartTime;¶        public BusinessCalendar2 CalendarRecurringEndTime;¶        public BusinessCalendar2 CalendarStartDate;¶        public BusinessCalendar2 CalendarStartTime;¶        public BusinessCalendar2 CalendarEndDate;¶        public BusinessCalendar2 CalendarEndTime;¶        public MultiSelectControl ConflictCodeList;¶        public MultiSelectControl LinkedFunctionsSelector;¶        public AccountingInformation AccountInfo;¶        //Need RadComboBox¶        public IWebLocator TextCode => GetLocatorById("TextCode");¶        public IWebLocator TextName => GetLocatorById("TextName");¶        public IWebLocator RadioReg => GetLocatorById("RadioRegType");¶        public IWebLocator TextDescription => GetLocatorById("TextDescription");¶        public IWebLocator TextFacility => GetLocatorById("TextFacility");¶        public IWebLocator CheckBoxRecurringSessions => GetLocatorById("CheckBoxRecurringSessions");¶        public IWebLocator RadioRecurringDaily => GetLocatorById("RadioRecurringDaily");¶        public IWebLocator RadNumericRecurringDaily => GetLocatorById("RadNumericRecurringDaily");¶        public IWebLocator DropDownRecurringFrequency => GetLocatorById("DropDownRecurringFrequency","select");¶        public IWebLocator RadioRecurringDailyWeekday => GetLocatorById("RadioRecurringDailyWeekday");¶        public IWebLocator RadNumericRecurringWeekly => GetLocatorById("RadNumericRecurringWeekly");¶        public IWebLocator CheckBoxRecurSun => GetLocatorById("CheckBoxRecurSun");¶        public IWebLocator CheckBoxRecurMon => GetLocatorById("CheckBoxRecurMon");¶        public IWebLocator CheckBoxRecurTue => GetLocatorById("CheckBoxRecurTue");¶        public IWebLocator CheckBoxRecurWed => GetLocatorById("CheckBoxRecurWed");¶        public IWebLocator CheckBoxRecurThu => GetLocatorById("CheckBoxRecurThu");¶        public IWebLocator CheckBoxRecurFri => GetLocatorById("CheckBoxRecurFri");¶        public IWebLocator CheckBoxRecurSat => GetLocatorById("CheckBoxRecurSat");¶        public IWebLocator CheckBoxDisplayToStaffOnly => GetLocatorById("CheckBoxDisplayToStaffOnly");¶        public IWebLocator EnableTimeConflicts => GetLocatorById("EnableTimeConflicts");¶        public IWebLocator TextCapacity => GetLocatorById("TextCapacity");¶        public IWebLocator TextMaxQty => GetLocatorById("TextMaxQty");¶        public IWebLocator CheckBoxPrintTickets => GetLocatorById("CheckBoxPrintTickets");¶        public IWebLocator TextCategory => GetLocatorById("TextCategory");¶        public IWebLocator TextTrack => GetLocatorById("TextTrack");¶        public IWebLocator TextSortSequence => GetLocatorById("TextSortSequence");¶        public IWebLocator AwardEducationUnits => GetLocatorById("AwardEducationUnits");¶        public IWebLocator UnitsTypeDropDownList => GetLocatorById("UnitsTypeDropDownList","select");¶        public IWebLocator UnitsToAwardTextBox => GetLocatorById("UnitsToAwardTextBox");¶        public IWebLocator FunctionImageSelector => GetLocatorById("FunctionImageSelector");¶        public IWebLocator HtmlAdditionalInfo => GetLocatorById("HtmlAdditionalInfo");¶")
Diff(INSERT,"        public IWebLocator AddNewRegistrationOptionLink => LocatorByTextXPath("Add new registration option", "a");¶")
Diff(EQUAL,"        #region Modal¶        public IWebLocator ConfirmDeleteButton => LocatorByXPath("ConfirmDeleteButton");¶        public IWebLocator ConfirmEditSaveButton => LocatorByXPath("ConfirmEditSaveButton");¶        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/FunctionEdit.cs)
Diff(EQUAL,"{¶    public class FunctionDisplay : DisplayIPartBase¶    {¶        public FunctionDisplay(string name): base(name){}¶        public FunctionDisplay(): base("New FunctionDisplayCommon"){}¶¶        public IWebLocator QuantityInput => GetLocatorById("QuantityInput");¶        public IWebLocator AddButton => GetLocatorById("AddButton");¶        public IWebLocator RemoveLinkButton => GetLocatorById("RemoveLinkButton");¶        public IWebLocator CategoryData => GetLocatorById("CategoryData");¶        public IWebLocator TrackData => GetLocatorById("TrackData");¶        public IWebLocator LocationData => GetLocatorById("LocationData");¶        public IWebLocator EmailData => GetLocatorById("EmailData");¶        public IWebLocator PhoneData => GetLocatorById("PhoneData");¶        public IWebLocator PriceData => GetLocatorById("PriceData");¶        public IWebLocator WhenData => GetLocatorById("WhenData");¶        public IWebLocator AvailabilityData => GetLocatorById("AvailabilityData");¶        public IWebLocator WaitlistButton => GetLocatorById("Waitlist", attribute:"value");¶        public IWebLocator RegisterButton => GetLocatorById("Register", attribute:"value");¶")
Diff(INSERT,"        public IWebLocator EditButton => LocatorByXPath("Edit", "a", "title");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/FunctionDisplay.cs)
Diff(EQUAL,"{¶    public class EventResources : DisplayIPartBase¶    {¶        public EventResources(string name) : base(name) => Construct();¶¶        public void Construct()¶        {¶            SetupTime = new BusinessCalendar2("SetupTime");¶            PostTime = new BusinessCalendar2("PostTime");¶            ")
Diff(DELETE,"RadGrid1")
Diff(INSERT,"SpaceRequirements")
Diff(EQUAL," = new RadGrid("RadGrid1");¶            ")
Diff(INSERT,"Resources")
Diff(EQUAL,"RadGrid")
Diff(DELETE,"2")
Diff(EQUAL," = new RadGrid("RadGrid2");¶            ")
Diff(DELETE,"RadGrid3")
Diff(INSERT,"Speakers")
Diff(EQUAL," = new RadGrid("RadGrid3");¶            ")
Diff(DELETE,"RadGrid4")
Diff(INSERT,"SupportStaff")
Diff(EQUAL," = new RadGrid("RadGrid4");¶        }¶¶        public BusinessCalendar2 SetupTime;¶        public BusinessCalendar2 PostTime;¶        public RadGrid ")
Diff(DELETE,"RadGrid1")
Diff(INSERT,"SpaceRequirements")
Diff(EQUAL,";¶        public RadGrid ")
Diff(INSERT,"Resources")
Diff(EQUAL,"RadGrid")
Diff(DELETE,"2")
Diff(EQUAL,";¶        public RadGrid ")
Diff(DELETE,"RadGrid3")
Diff(INSERT,"Speakers")
Diff(EQUAL,";¶        public RadGrid ")
Diff(DELETE,"RadGrid4")
Diff(INSERT,"SupportStaff")
Diff(EQUAL,";¶        //May need the following controls¶        //CapacityLiteral, RegisteredLiteral, WaitlistedLiteral, and CanceledLiteral¶¶        public IWebLocator EventResourcesPrintButton => GetLocatorById("EventResourcesPrintButton");¶        public IWebLocator MinimumTextBox => GetLocatorById("MinimumTextBox");¶        public IWebLocator ExpectedTextBox => GetLocatorById("ExpectedTextBox");¶        public IWebLocator GuaranteedTextBox => GetLocatorById("GuaranteedTextBox");¶        public IWebLocator SettingsTextBox => GetLocatorById("SettingsTextBox");¶        public IWebLocator ActualTextBox => GetLocatorById("ActualTextBox");¶        public IWebLocator AddButton1 => GetLocatorById("AddButton1");¶        public IWebLocator AddButton2 => GetLocatorById("AddButton2");¶        public IWebLocator AddButton3 => GetLocatorById("AddButton3");¶        public IWebLocator AddButton4 => GetLocatorById("AddButton4");¶        public IWebLocator TypeDropDownList => GetLocatorById("TypeDropDownList","select");¶        public IWebLocator ChangeSpeakerName => GetLocatorById("ChangeSpeakerName");¶        public IWebLocator ChangeStaffName => GetLocatorById("ChangeStaffName");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/EventResources.cs)
Diff(EQUAL,"{¶    public class EventProgramDisplay : DisplayIPartBase¶    {¶        public EventProgramDisplay(string name) : base(name) => Construct();¶        public EventProgramDisplay() : base("New EventProgramDisplay")
Diff(INSERT," Common")
Diff(EQUAL,"") => Construct();¶")
Diff(DELETE,"")
Diff(EQUAL,"¶        private void Construct()¶        {¶            ListFunctions = new RadGrid(GetId("list_functions"));¶            ListFunctions.GridIdSuffix = string.Empty;¶            EventAddOnFeesGrid = new BusinessDataGrid("List_EventAddOnFees");¶        }¶¶        public RadGrid ListFunctions;¶        public BusinessDataGrid EventAddOnFeesGrid;¶        public IWebLocator AddProgram(string name) => ListFunctions.CellWithText(name, "//ancestor::td//input[@value='Add']"); ¶        public IWebLocator RemoveProgram(string name) => ListFunctions.CellWithText(name, "//ancestor::td//a[contains(text(),'Remove')]"); ¶        public IWebLocator EventOptions(string option) => LocatorByXPath(option, "input", "value");¶")
Diff(INSERT,"        public IWebLocator FirstProgramName => ListFunctions.Cell(1, 1, postXPath: "//ancestor::td//a[contains(@id, 'DisplayLink')]");¶")
Diff(EQUAL,"        public IWebLocator SelectProgramsBy => GetLocatorById("SelectProgramsBy","select");¶        public IWebLocator CheckBoxItineraryOnly => GetLocatorById("CheckBoxItineraryOnly");¶        public IWebLocator RefreshButton => GetLocatorById("RefreshButton");¶        public IWebLocator RegisterButton => GetLocatorById("RegisterButton");¶        public IWebLocator UnregisterButton => GetLocatorById("UnregisterButton");¶        public IWebLocator SaveFunctionResponsesButton => GetLocatorById("SaveFunctionResponsesButton");¶        public IWebLocator RegisterFromWaitlistHiddenButton => GetLocatorById("RegisterFromWaitlistHiddenButton");¶")
Diff(DELETE,"")
Diff(EQUAL,"        public IWebLocator HiddenUndoPendingCheckoutFromWaitlistButton => GetLocatorById("HiddenUndoPendingCheckoutFromWaitlistButton");¶")
Diff(INSERT,"        public IWebLocator AddNewProgramItemLink => GetLocatorById("TitleBar", postXPath: "/div/div/a");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/EventProgramDisplay.cs)
Diff(EQUAL,"{¶    public class EventFunctionPricing : DisplayIPartBase¶    {¶        public EventFunctionPricing(string name) : base(name)¶        {¶            //TODO add ItemCreatorTaxInfo IPart¶            AccountListStandard = new BusinessComboBox("AccountListStandard");¶            AccountListDiscount = new BusinessComboBox("AccountListDiscount");¶            AccountListOtherPrice = new BusinessComboBox("AccountListOtherPrice");¶            CalendarEarlyCutoff = new BusinessCalendar2("CalendarEarlyCutoff");¶            CalendarRegularCutoff = new BusinessCalendar2("CalendarRegularCutoff");¶            PricingGroupRepeater = new Repeater("PricingGroupRepeater");¶        }¶¶        //TODO add ItemCreatorTaxInfo IPart¶        public BusinessComboBox AccountListStandard;¶        public BusinessComboBox AccountListDiscount;¶        public BusinessComboBox AccountListOtherPrice;¶        public BusinessCalendar2 CalendarEarlyCutoff;¶        public BusinessCalendar2 CalendarRegularCutoff;¶        public Repeater PricingGroupRepeater;¶        #region Labels¶        public IWebLocator AddOnFee => LocatorByXPath("LabelAddOnFee");¶        public IWebLocator CutoffDateHeader => LocatorByXPath("LabelCutoffDateHeader");¶        public IWebLocator EarlyDate => LocatorByXPath("LabelEarlyDate");¶        public IWebLocator RegularDate => LocatorByXPath("labelRegularDate");¶        public IWebLocator PricingName => LocatorByXPath("LabelPricingName");¶        public IWebLocator NotAvailable => LocatorByXPath("LabelNotAvailable");¶        public IWebLocator Comp => LocatorByXPath("LabelComp");¶        public IWebLocator Early => LocatorByXPath("LabelEarly");¶        public IWebLocator Regular => LocatorByXPath("LabelRegular");¶        public IWebLocator Late => LocatorByXPath("LabelLate");¶        public IWebLocator IncomeAccount => LocatorByXPath("LabelIncomeAccount");¶        public IWebLocator DeleteLabel => LocatorByXPath("deleteLabel");¶        public IWebLocator CutoffDate => LocatorByXPath("LabelCutoffDate");¶        public IWebLocator CalendarEarlyCutoffLabel => LocatorByXPath("CalendarEarlyCutoffLabel");¶        public IWebLocator CalendarRegularCutoffLabel => LocatorByXPath("CalendarRegularCutoffLabel");¶        public IWebLocator LabelStandardPrice => LocatorByXPath("LabelStandardPrice");¶        public IWebLocator NotAvailableStandardPriceLabel => LocatorByXPath("NotAvailableStandardPriceLabel");¶        public IWebLocator NotAvailableStandardPrice => LocatorByXPath("NotAvailableStandardPrice");¶        public IWebLocator CompStandardPriceLabel => LocatorByXPath("CompStandardPriceLabel");¶        public IWebLocator TextPriceStandardEarlyLabel => LocatorByXPath("TextPriceStandardEarlyLabel");¶        public IWebLocator TextPriceStandardEarly => LocatorByXPath("TextPriceStandardEarly");¶        public IWebLocator TextPriceStandardRegularLabel => LocatorByXPath("TextPriceStandardRegularLabel");¶        public IWebLocator TextPriceStandardRegular => LocatorByXPath("TextPriceStandardRegular"")
Diff(INSERT,", "input"")
Diff(EQUAL,");¶        public IWebLocator TextPriceStandardLateLabel => LocatorByXPath("TextPriceStandardLateLabel");¶        public IWebLocator NotAvailableDiscountPriceLabel => LocatorByXPath("NotAvailableDiscountPriceLabel");¶        public IWebLocator CompDiscountPriceLabel => LocatorByXPath("CompDiscountPriceLabel");¶        public IWebLocator TextPriceDiscountEarlyLabel => LocatorByXPath("TextPriceDiscountEarlyLabel");¶        public IWebLocator TextPriceDiscountRegularLabel => LocatorByXPath("TextPriceDiscountRegularLabel");¶        public IWebLocator TextPriceDiscountLateLabel => LocatorByXPath("TextPriceDiscountLateLabel");¶        public IWebLocator LabelOtherPrice => LocatorByXPath("LabelOtherPrice");¶        #endregion¶¶        #region Non Labels¶        public IWebLocator EventFinancialEntity => LocatorByXPath("EventFinancialEntitySelect","select");¶        public IWebLocator CurrentEventFinancialEntity => LocatorByXPath("CurrentEventFinancialEntityLabel");¶        public IWebLocator AvailableToGuests => LocatorByXPath("AvailableToGuests");¶        public IWebLocator AvailableToPrimary => LocatorByXPath("AvailableToPrimary");¶        public IWebLocator EventAddOnFee => LocatorByXPath("EventAddOnFee");¶        public IWebLocator AddPricingGroupImageLink => LocatorByXPath("AddPricingGroupImageLink");¶        public IWebLocator AddPricingGroupImage => LocatorByXPath("AddPricingGroupImage");¶        public IWebLocator AddPricingGroupHyperlink => LocatorByXPath("AddPricingGroupHyperlink");¶        public IWebLocator CompStandardPrice => LocatorByXPath("CompStandardPrice");¶        public IWebLocator TextPriceStandardLate => LocatorByXPath("TextPriceStandardLate");¶        public IWebLocator LabelDiscountPrice => LocatorByXPath("LabelDiscountPrice");¶        public IWebLocator NotAvailableDiscountPrice => LocatorByXPath("NotAvailableDiscountPrice");¶        public IWebLocator CompDiscountPrice => LocatorByXPath("CompDiscountPrice");¶        public IWebLocator TextPriceDiscountEarly => LocatorByXPath("TextPriceDiscountEarly");¶        public IWebLocator TextPriceDiscountRegular => LocatorByXPath("TextPriceDiscountRegular");¶        public IWebLocator TextPriceDiscountLate => LocatorByXPath("TextPriceDiscountLate");¶        public IWebLocator NotAvailableOtherPrice => LocatorByXPath("NotAvailableOtherPrice");¶        public IWebLocator CompOtherPrice => LocatorByXPath("CompOtherPrice");¶        public IWebLocator TextPriceOtherEarly => LocatorByXPath("TextPriceOtherEarly");¶        public IWebLocator TextPriceOtherRegular => LocatorByXPath("TextPriceOtherRegular");¶        public IWebLocator TextPriceOtherLate => LocatorByXPath("TextPriceOtherLate");¶        public IWebLocator DeleteButton => LocatorByXPath("DeleteButton");¶#endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/iParts/Events/EventFunctionPricing.cs)
Diff(EQUAL,"{¶    public class PageBase : DisplayStaticBase¶    {¶        public ImisUrl BaseUrl;¶        public static IWebLocator MetaOgTitle => LocatorByXPath("og:title", "meta", "property");¶        public static IWebLocator PageTitle => LocatorByXPath("panel-title", "h2", "class");¶        public static IWebLocator ContentPanel => LocatorByXPath("ContentPanel", "div"); ¶        public static IWebLocator ThemeStyleSheet => LocatorByXPath("Head1", "head", postXPath:"//link[contains(@href, '/App_Themes/')]");¶")
Diff(INSERT,"        public static IWebLocator InfoMessage => LocatorByXPath("UserMessageText",postXPath:"//p");¶")
Diff(EQUAL,"        public static IWebLocator ClientContext => LocatorByXPath("__ClientContext");¶        public static IWebLocator PayCentralFrame => LocatorByXPath("PayCentralFrameDiv","div");¶        public static IWebLocator UIText(string text, string type = "*", bool containing = true) => LocatorByTextXPath(text, type, containing);¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/PageBase.cs)
Diff(EQUAL,"{¶    public class FindProductsPage: PageBase¶    {¶        public FindProductsPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Store/StoreLayouts/Store_Home.aspx?");¶            ProductSearch = new Search("ProductSearch");¶        }¶        public Search ProductSearch { get; set; }¶")
Diff(INSERT,"        public new IWebLocator PageTitle => LocatorByTextXPath("Find products","h2");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Commerce/FindProductsPage.cs)
Diff(EQUAL,"{¶    public class ItemPage : PageBase¶    {¶        public ItemPage(string product")
Diff(DELETE,"Key")
Diff(INSERT,"Code")
Diff(EQUAL," = "", string category = "")")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            BaseUrl = new ImisUrl("ItemDetail"")
Diff(DELETE,"+"?iProductCode="+productKey+"&Category="+")
Diff(INSERT,");¶            WithBaseUrlParameters(productCode, ")
Diff(EQUAL,"category);¶            GeneralProductDisplay = new GeneralProductDisplay("General Product Display");¶            ContinueShoppingButtonLink = new ContinueShoppingButtonLink("Continue Shopping Button");¶            CartCheckoutButtonLink = new CartCheckOutButtonLink("Proceed to Checkout");¶            SimilarProducts = new RelatedItems("Similar products");¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public GeneralProductDisplay GeneralProductDisplay { get; set; }¶        public ContinueShoppingButtonLink ContinueShoppingButtonLink { get; set; }¶        public CartCheckOutButtonLink CartCheckoutButtonLink { get; set; }¶        public RelatedItems SimilarProducts { get; set; }")
Diff(INSERT,"¶¶        public ItemPage WithBaseUrlParameters(string productCode = "", string category = "")¶        {¶            BaseUrl¶                .WithUrlParameter("iProductCode", productCode)¶                .WithUrlParameter("Category", category);¶¶            return this;¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Commerce/ItemPage.cs)
Diff(EQUAL,"{¶    public class AddProductPage")
Diff(INSERT," ")
Diff(EQUAL,": PageBase¶    {¶        public AddProductPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Store/Manage/Add_Item.aspx");¶            ItemCreator = new ItemCreator();¶")
Diff(INSERT,"            AddItemDialog = new AddItemDialog();¶")
Diff(EQUAL,"        }¶¶        public ItemCreator ItemCreator { get; set; }¶")
Diff(INSERT,"        public AddItemDialog AddItemDialog { get; }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Commerce/AddProductPage.cs)
Diff(EQUAL,"{¶    public class PaymentDetails : DisplayIPartBase¶    {¶        public PaymentDetails(string name) : base(name)¶        {¶            RefundDisplay = new RefundDisplay("RefundDisplay");¶        }¶¶        public IWebLocator AdjustPaymentButton => GetLocatorById("AdjustPaymentButton");")
Diff(DELETE,"        ")
Diff(EQUAL,"¶        public IWebLocator SubmitAdjustmentButton => GetLocatorById("SubmitAdjustmentButton");¶")
Diff(INSERT,"        public IWebLocator PayerLink => GetLocatorById("payerLink");¶        public IWebLocator TotalAmountValueLabel => GetLocatorById("TotalAmountValueLabel");¶        public IWebLocator Status => GetLocatorById("Status", "span");¶")
Diff(EQUAL,"        public RefundDisplay RefundDisplay { get; set; }¶    }¶}")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Commerce/PaymentDetailsDisplay/PaymentDetails.cs)
Diff(EQUAL,"{¶    public class FinanceGeneralSettingsPage : PageBase¶    {¶        public FinanceGeneralSettingsPage()¶        {¶            BaseUrl = new ImisUrl("imis/Setup/Accounting/Setup.aspx");¶        }¶¶        #region Labels¶        public static IWebLocator DefaultCountryCurrency => LocatorByXPath("DefaultCurrencyCodeDropDownList", "select");¶        public static IWebLocator StartingReceiptNumberTextBox => LocatorByXPath("StartingReceiptNumberTextBox");¶        public static IWebLocator FirstFund => LocatorByXPath("FirstFund", "input","value");¶        public static IWebLocator Default => LocatorByXPath("Default", "input","value");¶        public static IWebLocator PremiumOrderTypeDropDownList => LocatorByXPath("PremiumOrderTypeDropDownList", "select");¶        public static IWebLocator DefaultReceiptPreferenceDropDownList => LocatorByXPath("DefaultReceiptPreferenceDropDownList", "select");¶")
Diff(INSERT,"        public static IWebLocator BatchModeSelectorDropDownList => LocatorByXPath("BatchModeDd", "select");¶")
Diff(EQUAL,"        #endregion¶¶        #region Non Labels¶        public static IWebLocator SourceForFinancialEntityLabel => LocatorByXPath("SourceForFinancialEntityLabel");¶        public IWebLocator DefaultCurrencyCodeTextBox { get => LocatorByXPath("DefaultCurrencyCodeTextBox", "input"); }¶        public static IWebLocator DefaultCurrencyCodeTextBoxRequiredValidator { get => LocatorByXPath("DefaultCurrencyCodeTextBoxRequiredValidator", "span"); }¶        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Settings/Finance/FinanceGeneralSettingsPage.cs)
Diff(EQUAL,"{¶    public class MembershipTab : PageBase¶    {¶        public MembershipTab()¶        {¶            PanelEditor = new PanelEditor("Membership1");¶            MembershipPanel = new MembershipPanel();¶            MembershipFeesGrid = new QueryMenu("Membership fees");¶            SubscriptionsGrid = new QueryMenu("Subscriptions");¶            InvoicesGrid = new QueryMenu("Invoices");¶            BillingHistory = new QueryMenu("Billing History");¶            MembershipFeesAdder = new SubscriptionAdder();¶            SubscriptionsAdder = new SubscriptionAdder(2);¶            ReviewOrCancel = new InvoicePaymentLink("Renew or Cancel");¶            /* Can't find it's iPart¶            AutomaticRenewal = new AutomaticPaymentEnrollments("Automatic renewal");*/¶            ChaptersAndSections = new GroupListEditor("Chapters and Sections");¶        }¶¶")
Diff(INSERT,"        public IWebLocator MembershipTabButton => LocatorByXPath("Membership", "span");¶")
Diff(EQUAL,"        public PanelEditor PanelEditor;¶        public MembershipPanel MembershipPanel;¶        public QueryMenu MembershipFeesGrid { get; set; }¶        public QueryMenu SubscriptionsGrid { get; set; }¶        public QueryMenu InvoicesGrid { get; set; }¶        public QueryMenu BillingHistory { get; set; }¶        public SubscriptionAdder MembershipFeesAdder { get; set; }¶        public SubscriptionAdder SubscriptionsAdder { get; set; }¶        public InvoicePaymentLink ReviewOrCancel { get; set; }¶       // public AutomaticPaymentEnrollments AutomaticRenewal { get; set; }¶        public GroupListEditor ChaptersAndSections { get; set; }¶")
Diff(INSERT,"        public IWebLocator AdjustMembershipButton => LocatorByXPath("AdjustMembershipButton","button");¶        public IWebLocator AdjustFeesLink => LocatorByXPath("AdjustFeesLink", "a");¶        public IWebLocator CancelItemsLink => LocatorByXPath("CancelItemsLink", "a");¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Contacts/MembershipTab.cs)
Diff(EQUAL,"{¶    public class AccountPageStaff : AccountPage¶    {¶        public AccountPageStaff() : base()")
Diff(DELETE," ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"        {¶            ParticipationTab = new ParticipationTab();¶            AboutTab = new AboutTab();¶            OverviewTab = new OverviewTab();¶            MembershipTab = new MembershipTab();¶            GivingTab = new GivingTab();¶            SecurityTab = new SecurityTab();¶            AlertsTab = new AlertsTab();¶            ContactProperties = new SummaryDisplay("ContactProperties");¶            MiniProfile = new ContactMiniProfile();¶")
Diff(INSERT,"            AlertDisplay = new AlertDisplay("AlertDisplay");¶")
Diff(EQUAL,"        }¶¶        public ParticipationTab ParticipationTab;¶        public AboutTab AboutTab;¶        public OverviewTab OverviewTab;¶        public MembershipTab MembershipTab;¶        public GivingTab GivingTab;¶        public SecurityTab SecurityTab;¶        public AlertsTab AlertsTab;¶        public SummaryDisplay ContactProperties { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        public ContactMiniProfile MiniProfile;¶")
Diff(INSERT,"        public AlertDisplay AlertDisplay { get; }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Contacts/AccountPageStaff.cs)
Diff(EQUAL,"{¶    public class Cart : PageBase¶    {¶        public Cart()¶        {¶            BaseUrl = new ImisUrl("iCore/Store/StoreLayouts/Cart_Home.aspx");¶            ContinueShoppingButtonLink = new ContinueShoppingButtonLink("Continue Shopping Button");¶            AutoPayInstructionCreator = new AutoPayInstructionCreator();¶            CartCharges = new CartChargesDisplay("Cart Charges");¶            PaymentDetails = new PaymentCreator("Payment Details");¶            SubmitOrderButtonLink = new SubmitOrderButtonLink();¶            OpenCreditDisplay = new OpenCreditDisplay("OpenCreditDisplayCommon");¶            PromotionManagerDisplay = new PromotionManager(")
Diff(INSERT,""PromotionManagerCommon"")
Diff(EQUAL,");¶            ContactSignIn = new ContactSignIn();¶            ShoppingCart = new CartDetailsDisplay("Shopping Cart");¶            ThreeDsPaymentModal = new ThreeDSPaymentModal();¶        }¶¶        public ContinueShoppingButtonLink ContinueShoppingButtonLink { get; set; }¶        public AutoPayInstructionCreator AutoPayInstructionCreator { get; set; }¶        public CartChargesDisplay CartCharges { get; set; }¶        public PaymentCreator PaymentDetails { get; set; }¶        public SubmitOrderButtonLink SubmitOrderButtonLink { get; set; }¶        public OpenCreditDisplay OpenCreditDisplay { get; set; }¶        public CartDetailsDisplay ShoppingCart { get; set; }¶        public PromotionManager PromotionManagerDisplay { get; set; }¶        public ContactSignIn ContactSignIn { get; set; }¶        public ThreeDSPaymentModal ThreeDsPaymentModal { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Shop/Cart.cs)
Diff(EQUAL,"{¶    public class FindGiftsPage : PageBase¶    {¶        public FindGiftsPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Fundraising/Find_gifts.aspx");¶            FindGifts = new QueryMenu("Findgifts");¶            SelectAQuery = BuildLister();¶        }¶¶        public QueryMenu FindGifts { get; set; }¶¶        public Lister SelectAQuery;¶        private static Lister BuildLister()¶        {¶            var lister = new Lister("ResultsGrid");¶            lister.Queries.Add("By common giving criteria", BuildByCommonGivingCriteriaQuery());¶            lister.Queries.Add("By moves manager", BuildByMovesManagerQuery());¶            lister.Queries.Add("Donors by liftetime giving amount", BuildByDonorsByLifetimeGivingAmountQuery());¶            lister.Queries.Add("Pledges", BuildPledgesQuery());¶            lister.Queries.Add("Tributes", BuildTributesQuery());¶¶            return lister;¶        }¶¶        private static ListerSheet BuildByCommonGivingCriteriaQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Invoice number", new QueryTextParameter());¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶")
Diff(INSERT,"            query.Parameters.Add("Donor ID", new QueryTextParameter());¶")
Diff(EQUAL,"            query.Parameters.Add("Gift amount greater than or equal to", new QueryTextParameter());¶            query.Parameters.Add("Gift date between")
Diff(DELETE," start", new QueryDateParameter());¶            query.Parameters.Add("Gift date between end")
Diff(EQUAL,"", new QueryDateParameter());¶            query.Parameters.Add("Source code contains", new QueryTextParameter());¶            query.Parameters.Add("Financial entity contains", new QueryTextParameter());¶            query.Parameters.Add("Gift item contains", new QueryTextParameter());¶            //TODO: add data range for Gift date between        ¶            return query;¶        }¶¶        private static ListerSheet BuildByMovesManagerQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Moves Manager first name", new QueryTextParameter());¶            query.Parameters.Add("Moves Manager last name", new QueryTextParameter());¶            query.Parameters.Add("Moves Manager ID", new QueryTextParameter());¶            return query;¶        }¶¶        private static ListerSheet BuildByDonorsByLifetimeGivingAmountQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶            query.Parameters.Add("Total gift amount greater than or equal to", new QueryTextParameter());¶            return query;¶        }¶¶        private static ListerSheet BuildPledgesQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Invoice number", new QueryTextParameter());¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶            query.Parameters.Add("Pledge date between", new QueryDateParameter());¶            query.Parameters.Add("Balance greater than or equal to", new QueryTextParameter());¶            query.Parameters.Add("Source code contains", new QueryTextParameter());¶            query.Parameters.Add("Financial entity contains", new QueryTextParameter());¶            return query;¶        }¶¶        private static ListerSheet BuildTributesQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶            query.Parameters.Add("Gift amount greater than or equal to", new QueryTextParameter());¶            query.Parameters.Add("Gift date between", new QueryDateParameter());¶            query.Parameters.Add("Tributee name contains", new QueryTextParameter());¶            return query;¶        }¶¶        public IWebLocator ViewDetails(int row) => SelectAQuery.Cell(row, 9, true);¶        public IWebLocator ViewPledgeDetails(int row) => SelectAQuery.Cell(row, 11, true);¶¶        //for whatever reason this always has Sheet0 not Sheet{index}¶        public IWebLocator FindButton => SelectAQuery.Queries.Get("By common giving criteria").Find;¶¶        public IWebLocator FindGiftsSelect => LocatorByXPath("Findgifts", "select"); //falls outside query parameters¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Fundraising/FindGiftsPage.cs)
Diff(EQUAL,"{¶    public class ManageGiftAidClaimsPage : PageBase¶    {¶        public ManageGiftAidClaimsPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Fundraising/Manage-Gift-Aid-Claims.aspx", "iCore/Fundraising/Manage_Gift_Aid_Claims.aspx");¶            ManageGiftAidClaims = new ContentCollectionOrganizer("Manage Gift Aid Claims");¶            ManageGiftAidClaims.AddTab("Gifts to be Claimed");¶            ManageGiftAidClaims.AddTab("Process Claims");¶            ManageGiftAidClaims.AddTab("Manage Gift Aid Declarations");¶            ProcessClaimsTab = new ProcessClaimsTab();¶            GiftsToBeClaimedTab = new GiftsToBeClaimedTab();¶            ManageDeclarationTab = new ManageDeclarationTab();¶        }¶¶        public ContentCollectionOrganizer ManageGiftAidClaims { get; set; }¶        public ProcessClaimsTab ProcessClaimsTab { get; set; }¶        public GiftsToBeClaimedTab GiftsToBeClaimedTab { get; set; }¶        public ManageDeclarationTab ManageDeclarationTab { get; set; }¶        public ")
Diff(INSERT,"new ")
Diff(EQUAL,"static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");¶¶        public ImisUrl Url(string tabName)¶        {¶            BaseUrl.AddParameter("Manage_Gift_Aid_Claims", tabName);¶            return BaseUrl;¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Fundraising/ManageGiftAidClaims/ManageGiftAidClaimsPage.cs)
Diff(EQUAL,"{¶    public class PayCentralLivePage : PageBase¶    {¶        public PayCentralLivePage()¶        {¶")
Diff(INSERT,"            BaseUrl = new ImisUrl("/iCore/Finance/PayCentralLive.aspx");¶")
Diff(EQUAL,"            DataVaultLiveDisplay = new DataVaultLiveDisplay();¶        }¶¶        public DataVaultLiveDisplay DataVaultLiveDisplay { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Finance/PayCentral/PayCentralLivePage.cs)
Diff(EQUAL,"{¶    public class EventDashboardPage¶    {¶        public EventDashboardPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Staff_Dashboards/Specific_Event/Event_Dashboard.aspx");¶            EventDashboard = new ContentCollectionOrganizer("Event Dashboard");¶            EventDashboard.AddTab("Showcase");¶            EventDashboard.AddTab("Dashboard");¶            EventDashboard.AddTab("Registrants");¶            EventDashboard.AddTab("Questions");¶            EventDisplay = new EventDisplay("EventDisplay");¶            EventEdit = new EventEdit();¶            FunctionEdit = new FunctionEdit();¶")
Diff(INSERT,"            EventProgramDisplay = new EventProgramDisplay("EventProgramDisplay");¶")
Diff(EQUAL,"        }¶¶        public ImisUrl BaseUrl;¶        public ContentCollectionOrganizer EventDashboard { get; set; }¶        public EventDisplay EventDisplay { get; set; }¶        public EventEdit EventEdit { get; set; }¶        public FunctionEdit FunctionEdit { get; set; }¶")
Diff(INSERT,"        public EventProgramDisplay EventProgramDisplay { get; set; }¶")
Diff(EQUAL,"        public ImisUrl Url(string eventKey)¶        {¶            BaseUrl.AddParameter("EventKey", eventKey);¶            return BaseUrl;¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Events/EventDashboardPage.cs)
Diff(EQUAL,"{¶    public class EventRegistrationDetailPage : PageBase¶    {¶        public EventRegistrationDetailPage() : base()¶        {¶            EventRegistrationOptions = new SummaryDisplay("Registrationoption");¶            RegistrationStatus = new SummaryDisplay("Registrationstatus");¶            BadgeInformationQuery = new BadgeInformationQuery();¶            BadgeInformation = new QueryTemplateDisplay("Badge")¶            {¶                PropertyDictionary = BadgeInformationQuery¶            };¶            EventRegistrationDetailActionButtons = new BigButtonPanel("Actionbuttons");¶            EventRegistrationDetailAlerts = new EventRegistrationDetailAlerts("Alerts_AlertContainer");¶            RegistrationBillingInformation = new SummaryDisplay("Billinginformation");¶")
Diff(INSERT,"            InvoicesGrid = new Lister("Invoices_ResultsGrid");¶")
Diff(EQUAL,"        }¶¶        public SummaryDisplay EventRegistrationOptions { get; set; }¶        public SummaryDisplay RegistrationStatus { get; set; }¶        public SummaryDisplay RegistrationBillingInformation { get; set; }¶        public BadgeInformationQuery BadgeInformationQuery { get; set; }¶        public QueryTemplateDisplay BadgeInformation { get; set; }¶        public BigButtonPanel EventRegistrationDetailActionButtons { get; set; }¶        public EventRegistrationDetailAlerts EventRegistrationDetailAlerts { get; set; }")
Diff(INSERT,"¶        public Lister InvoicesGrid { get; }")
Diff(EQUAL,"¶¶        public IWebLocator EventStartDate => LocatorByXPath("DSEventStartDate", "span");¶        public IWebLocator EventEndDate => LocatorByXPath("DSEventEndDate", "span");¶        public IWebLocator EditRegistrationButton => EventRegistrationDetailActionButtons.Button(1);¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Events/EventRegistrationDetailPage.cs)
Diff(EQUAL,"{¶    public class AddContactPage : PageBase¶    {¶        public AddContactPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Contacts/Create_Contact_Person_or_Org.aspx");¶            ContactAccountCreator = new ContactAccountCreator("Add contact");¶        ")
Diff(DELETE,"}¶        public ContactAccountCreator ContactAccountCrea")
Diff(INSERT,"    PrimaryOrgSelector = new PrimaryOrganizationSelector("primaryOrgSelector");¶        }¶        public ContactAccountCreator ContactAccountCreator { get; set; }¶        public PrimaryOrganizationSelector PrimaryOrgSelec")
Diff(EQUAL,"tor { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Community/AddContactPage.cs)
Diff(EQUAL,"{¶    public class ManageDuplicatesPage : PageBase¶    {¶        public ManageDuplicatesPage()¶        {¶            BaseUrl = new ImisUrl("")
Diff(INSERT,"i")
Diff(EQUAL,"Core/Contacts/Manage_Duplicates.aspx");¶            PotentialDuplicateListDisplay = new PotentialDuplicateListDisplay();¶")
Diff(INSERT,"            MiniProfile = new ContactMiniProfile("MiniProfile");¶")
Diff(EQUAL,"        }¶¶        public PotentialDuplicateListDisplay PotentialDuplicateListDisplay { get; set; }¶")
Diff(INSERT,"        public ContactMiniProfile MiniProfile;¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Community/ManageDuplicatesPage.cs)
Diff(DELETE,"#if USE_PLAYWRIGHT¶¶#else¶#endif¶¶namespace Asi.Selenium.Web.Pages.RiSE.SiteBuilder¶")
Diff(EQUAL,"{¶    public class ManageWebSitesPage : PageBase¶    {¶        public ManageWebSitesPage()¶        {¶            BaseUrl = new ImisUrl("iMIS/ContentManagement/WebsiteList.aspx");¶        }¶¶")
Diff(DELETE,"        // jkh changed to locate by id¶")
Diff(EQUAL,"        public IWebLocator StatusPanel => ")
Diff(DELETE,"L("status toggle", By.XPath(@"//*[@id='ctl00_TemplateBody_WebsiteEditControl_StatusPanel_Head']/div/a"));¶        //")
Diff(EQUAL,"LocatorByXPath("collapse", attribute: "data-toggle");¶        public SmartControl WebsiteIsActiveCheckBox => SmartControl.CheckBoxSet("WebsiteIsActive");¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/RiSE/SiteBuilder/ManageWebSitesPage.cs)
Diff(EQUAL,"{¶    public class TasksPage: PageBase¶    {¶        public TasksPage()¶        {¶            Task = new ")
Diff(DELETE,"iParts.Common.Tasks.")
Diff(EQUAL,"Task();¶            TaskUserControl = new TaskControl("TaskUserControl");¶            AddTrigger = new AddTrigger();¶            BaseUrl = new ImisUrl("iCore/Tasks/Tasks.aspx");¶        }¶¶        public ")
Diff(DELETE,"iParts.Common.Tasks.")
Diff(EQUAL,"Task Task { get; set; }¶        public TaskControl TaskUserControl { get; set; }¶        public AddTrigger AddTrigger { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/RiSE/ProcessAutomation/TasksPage.cs)
Diff(EQUAL,"{¶    public class PanelDesignerPage : PageBase¶    {¶        readonly string _XPathToCreateSource = "//li[contains(@class,'rtLI rtFirst') and not(@style='display: none;')]//a[contains(@class,'CreateSourceButton')]";¶¶        public PanelDesignerPage()¶        {¶            BaseUrl = new ImisUrl("iParts/Common/PanelEditor/PanelDefinitionList.aspx");¶            PanelDesignerGrid = new RadGrid("GridLayout");¶            PanelDesignerLister = new Lister("PanelDefinitionGrid");¶        }¶¶        public IWebLocator FindTextBox => LocatorByXPath("FindTextBox");¶        public IWebLocator AddPanelDefinitionLink => LocatorByTextXPath("Add panel definition", "a");¶        public IWebLocator PanelNameTextBox => LocatorByXPath("TextBoxPanelName");¶        public IWebLocator ParentTypeDropDown => LocatorByXPath("DropDownListRelatedEntity");¶        public IWebLocator SingleInstanceRadioButton => LocatorByXPath("RadioButtonShowSingle");¶        public IWebLocator MultiInstanceRadioButton => LocatorByXPath("RadioButtonShowMultiple");¶        /// <summary>¶        /// Utilizes the XPath to the visible Create Source link, since there is a hidden and non-hidden link,¶        /// this is determined by the state of the single/multi instance radio buttons¶        /// </summary>¶        public IWebLocator CreateSourceLink => LocatorForXpath(_XPathToCreateSource);¶        public IWebLocator SourceNameTextBox => LocatorByXPath("TextBoxSourceName");¶        public IWebLocator AddPropertyLink => LocatorByTextXPath("Add property", "a");¶        public IWebLocator PropertyNameTextBox => LocatorByXPath("TextBoxPropertyName");¶        public IWebLocator PropertyTypeDropDown => LocatorByXPath("DropDownPropertyType");¶        public IWebLocator LogAllChangesCheckBox => LocatorByXPath("CheckBoxLogAllChanges");¶        public IWebLocator DisplayAsSingleLineRadio => LocatorByXPath("RadioButtonSingleLineTextbox");¶        public IWebLocator DisplayAsMultiLineRadio => LocatorByXPath("RadioButtonMultiLineTextbox");¶        public IWebLocator PreDefinedValuesCheckBox => LocatorByXPath("CheckBoxSelectValueList");¶        public IWebLocator DefinedByQueryRadioButton = LocatorByXPath("RadioButtonQueryValueList");¶        public IWebLocator QueryBrowseButton = LocatorByXPath("QueryBrowseButton", "input");¶        public IWebLocator DefinedBySourceTableRadioButton = LocatorByXPath("RadioButtonSourceTableList");¶        public IWebLocator SourceTableDropDown = LocatorByXPath("SourceTableValueListDropDown", "select");¶        public IWebLocator DefinedByExplicitListRadioButton = LocatorByXPath("RadioButtonExplicitValueList");¶        public IWebLocator ExplicitListAddNewButton = LocatorByXPath("AddNewRecordButton");¶        public IWebLocator ExplicitListItemDataValue = LocatorByXPath("TB_DataValue");¶        public IWebLocator ExplicitListItemDisplayValue = LocatorByXPath("TB_DisplayValue");¶        public IWebLocator ExplicitListInsertButton = LocatorByXPath("PerformInsertButton");¶        public IWebLocator AddContinueButton = LocatorByXPath("SaveButton", "input", "id");¶        public IWebLocator ExplicitListEmptyMessage => LocatorByXPath("rgMasterTable", "table", "class", "//*[contains(text(),'No records to display')]");¶        public IWebLocator CancelButton => LocatorByXPath("CancelButton", "input", "id");¶        public IWebLocator PanelEditorTreeNewSource = LocatorByXPath("TreeTables", "div", "id", "//ul//li[3]//ul//li[2]//div//span[2]");¶        public IWebLocator AddAColumnButton = LocatorByXPath("ButtonColumnsPlus");¶        public IWebLocator GetPathToSpan(string span) => LocatorByTextXPath(span, "span");¶        public IWebLocator OpenSourcePropertiesButton(string sourceName) => LocatorForXpath($"//li//div[span[text()='{sourceName}']]//span[@class='rtPlus']");¶        public IWebLocator RadMenuDeleteButton => LocatorByTextXPath("Delete","span");¶")
Diff(INSERT,"        public IWebLocator RadMenuViewButton => LocatorByTextXPath("View", "span");¶")
Diff(EQUAL,"        public IWebLocator GetPathToGridCell(int col, int row) => LocatorForXpath($@"//td[@colid='{col}' and @rowid='{row}']");¶¶        public RadGrid PanelDesignerGrid { get; set; }¶        public Lister PanelDesignerLister { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/RiSE/PanelDesigner/PanelDesignerPage.cs)
Diff(EQUAL,"{¶    public class FormDesignerPage : PageBase¶    {¶        public ")
Diff(INSERT,"new ")
Diff(EQUAL,"ImisUrl ")
Diff(INSERT," ")
Diff(EQUAL,"BaseUrl { get => new ImisUrl("iCore/Forms/Form-Designer.aspx"); }¶        public FormManagerDragAndDrop FormManagerDragAndDrop { get; set; }¶¶        public FormDesignerPage()¶        {¶            FormManagerDragAndDrop = new FormManagerDragAndDrop();¶        }¶¶        public IWebLocator SaveFormButton { get => LocatorByXPath("btnSaveForm", "input", "id"); }¶¶        public IWebLocator SaveAsButton { get => LocatorByXPath("btnSaveAndReturn", "input", "id"); }¶¶        public IWebLocator SaveAsFormButton { get => LocatorByXPath("btnSaveFormAs", "input", "id"); }¶¶        public IWebLocator SaveAsNewFormName { get => LocatorByXPath("tbSaveFormAs", "input", "id"); }¶¶        public IWebLocator SaveAsValidationMessage { get => LocatorByXPath("lbSaveAsMessage", "span", "id"); }   ¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/RiSE/FormBuilder/FormDesignerPage.cs)
Diff(EQUAL,"{¶    public class DonateNowPage : PageBase¶    {¶¶        public DonateNowPage(string GiftAid = "")¶        {¶            BaseUrl = new ImisUrl($"iCore/Fundraising/Donate_Now{GiftAid}.aspx");¶            DonationCreator = new DonationCreator("DonationCreator");¶            RecurringDonationCreator = new RecurringDonationCreator();¶            PaymentCreator = new PaymentCreator("PaymentCreator");¶            MakeDonationContact = new ContactAccountCreator("Makedonationcontact");¶            GiftAidDeclaration = new GiftAidDeclaration("Gift Aid Declaration");¶        }¶¶        public DonationCreator DonationCreator;¶        public PaymentCreator PaymentCreator;¶        public RecurringDonationCreator RecurringDonationCreator;¶        public ContactAccountCreator MakeDonationContact;¶        public GiftAidDeclaration GiftAidDeclaration;")
Diff(INSERT,"¶¶        public IWebLocator GiftAidConfirmationMessage = LocatorByXPath("GiftAidConfirmationMessage", "div", "id");")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Donor/DonateNowPage.cs)
Diff(EQUAL,"{¶    public class BillingCycleDetailPage : PageBase¶    {¶        public BillingCycleDetailPage()¶        {¶            BaseUrl = new ImisUrl("imis/Setup/Billing/BillingCycleDetail.aspx");¶        }¶¶        public static IWebLocator AccountingMethodDropDown => LocatorByXPath("BillingTypeCashAccrualDropDownList","select");¶")
Diff(INSERT,"        public static IWebLocator BillingTimeDropDown => LocatorByXPath("BillingTypeAnnualAnniversaryDropDownList", "select");¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Membership/BillingCycleDetailPage.cs)
Diff(EQUAL,"{¶    public class ManageExpiredMembersPage : PageBase¶    {¶        public ManageExpiredMembersPage()¶        {¶            BaseUrl = new ImisUrl("iMIS/Setup/Shared/ManageExpiredMembers.aspx");¶            ManageExpiredMembersGrid = new Lister("ManageExpiredMembersGrid");¶            LogsListGrid = new Lister("LogsLister");¶            LogsDetailsListGrid = new Lister("LogDetailsLister");¶            TabGroup = GetRadTabStrip();¶            PaidThroughDate = new BusinessCalendar2("PaidThroughDate");¶        }¶¶        public RadTabStrip TabGroup;¶¶        public Lister ManageExpiredMembersGrid { get; set; }¶        public Lister LogsListGrid { get; set; }¶        //The following grid is not a part of this page, it has it's own page. However, leaving it here since it will be difficult to load ¶        // the page on it's own since the Query parameter needed is a RunNumber that is not displayed anywhere on the logs grid.¶        public Lister LogsDetailsListGrid { get; set; }¶¶        public static IWebLocator CurrentMemberTypesDropDown => LocatorByXPath("CurrentMemberTypesSelector", "select");¶        public static IWebLocator IncludeMembersWithoutPaidThroughDateCheckBox => LocatorByXPath("IncludeMembersWithoutPaidThroughDate");¶        public BusinessCalendar2 PaidThroughDate;¶        public static IWebLocator FindButton => LocatorByXPath("FindButton");¶        public static IWebLocator NewMemberTypeDropDown => LocatorByXPath("NewMemberTypesSelector");¶        public static IWebLocator NewMemberStatusDropDown => LocatorByXPath("NewMemberStatusSelector");¶        public static IWebLocator SubmitButton => LocatorByXPath("SubmitButton");¶        public static IWebLocator CurrentMemberType => LocatorByXPath("CurrentMemberType");¶        public ")
Diff(INSERT,"new ")
Diff(EQUAL,"static IWebLocator InfoMessage => LocatorByXPath("UserMessageText");¶¶        private RadTabStrip GetRadTabStrip()¶        {¶            var tabs = new RadTabStrip("ManageExpiredMembersRadTabStrip");¶            tabs.AddTab("Update status or type");¶            tabs.AddTab("Logs");¶            return tabs;¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Membership/ManageExpiredMembersPage.cs)
Diff(EQUAL,"{¶    public class JoinNowPage : PageBase¶    {¶        public JoinNowPage()¶        {¶            MOO = new GeneralProductDisplay();¶            QueryMenu = new QueryMenu();¶            BaseUrl = new ImisUrl("iCore/Membership/Join_Now.aspx");¶        }¶¶        public GeneralProductDisplay MOO { get; set; }¶        public QueryMenu QueryMenu { get; set; }¶¶        public ImisUrl ")
Diff(INSERT,"Get")
Diff(EQUAL,"Url(string productCode)¶        {¶            ")
Diff(INSERT,"return ")
Diff(EQUAL,"BaseUrl.")
Diff(DELETE,"Add")
Diff(INSERT,"WithUrl")
Diff(EQUAL,"Parameter("iProductCode", productCode);¶")
Diff(DELETE,"            return BaseUrl;¶")
Diff(EQUAL,"        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Membership/JoinNowPage.cs)
Diff(EQUAL,"{¶    public class BillingProductsPage : PageBase¶    {¶        public BillingProductsPage()¶        {¶            BaseUrl = new ImisUrl("iMIS/Setup/Shared/LegacyBillingItem.aspx");¶            ItemGrid = new Lister("ItemGrid");¶            BillingItemCreator = new BillingItemCreator("NewBillingItemCreator");¶        }¶¶        public IWebLocator FindTextBox => LocatorByXPath("FindTextBox");¶        public IWebLocator TypeBusinessDropdown => LocatorByXPath("TypeBusinessDropDown");¶        public IWebLocator FindButton => LocatorByXPath("Find", "input", "onclick");¶¶        public Lister ItemGrid;¶        public BillingItemCreator BillingItemCreator { get; set; }¶¶        public ImisUrl Url(string id, string tab = null)¶        {¶            BaseUrl.AddParameter("ID", id);¶            if (!")
Diff(DELETE,"(tab is {Length:>0}")
Diff(INSERT,"string.IsNullOrEmpty(tab")
Diff(EQUAL,"))¶                BaseUrl.AddParameter("My_account", tab);¶            return BaseUrl;¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/Asi.Selenium.Web/Pages/Membership/BillingProduct/BillingProductsPage.cs)
- /Asi.Selenium.Web.V10/Pages/Finance/PayCentral/FindPaymentsPage.cs
- /Asi.Selenium.Shared.V10/Steps/Forms/StateProvinceStepDef.cs
- /Asi.Selenium.V10/Features/Membership/SpecFlowFeature1.feature
+ /Asi.Selenium.Web.V10/Asi.Selenium.Web.V10.csproj
+ /Asi.Selenium.Web.V10/TestMethods/Commerce/PricingGroupTestMethods.cs
+ /Asi.Selenium.Web.V10/TestMethods/Commerce/OrdersTestMethods.cs
+ /Asi.Selenium.Web.V10/TestMethods/Community/ManageDuplicatesTestMethods.cs
+ /Asi.Selenium.Web.V10/TestMethods/Membership/MemberResponsiveTestMethods.cs
+ /Asi.Selenium.Web.V10/Pages/Commerce/OrderDetailsPage.cs
+ /Asi.Selenium.Web.V10/Pages/Commerce/PricingGroupDetailsPage.cs
+ /Asi.Selenium.Web.V10/Pages/Commerce/PricingGroupPage.cs
+ /Asi.Selenium.Web.V10/Pages/Events/EventPricingGroupDialogPage.cs
+ /Asi.Selenium.Web.V10/Pages/Community/CreateAccountNoSignInPage.cs
+ /Asi.Selenium.Shared.V10/Startup.cs
+ /Asi.Selenium.Shared.V10/appsettings.QA.json
+ /Asi.Selenium.Shared.V10/Asi.Selenium.Shared.V10.csproj
+ /Asi.Selenium.Shared.V10/Features/Forms/ContactFormTests.feature
+ /Asi.Selenium.Shared.V10/Features/IntroVideo/video.feature
+ /Asi.Selenium.Shared.V10/Features/Fundraising/AdjustedReceiptsTests.feature
+ /Asi.Selenium.Shared.V10/Steps/Forms/CreatedFormInteractionStepDef.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/member_login_task.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/creditcard_task.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/edit_profile.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/find_member_make_refund_task.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/shop.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/add_contacts_task.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Tasks/staff_login_task.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/Steps/asi_steps.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/login.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_home_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_buy_membership_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_navigate_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/member/member_conference_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staffhome_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staff_addcontacts_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/member_Morgan_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/staff_fundraising.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/find_contacts_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/make_a_refund_page.cs
+ /Asi.Selenium.Shared.V10/Steps/IntroVideo/pages/staff/community_dashboard_page.cs
+ /Asi.Selenium.V10/Asi.Selenium.V10.csproj
+ /Asi.Selenium.V10/Features/Commerce/Orders.feature
+ /Asi.Selenium.V10/Features/Commerce/PricingGroup.feature
+ /Asi.Selenium.V10/Features/Commerce/CanadaTaxation.feature
+ /Asi.Selenium.V10/Features/PaymentGateways/Stripe.feature
+ /Asi.Selenium.V10/Features/PaymentGateways/GoCardless.feature
+ /Asi.Selenium.V10/Features/Staff/ManualBatch.feature
+ /Asi.Selenium.V10/Features/Community/ManageDuplicates.feature
+ /Asi.Selenium.V10/Features/Membership/Membership.feature
+ /Asi.Selenium.V10/Steps/Commerce/OrdersStepDef.cs
+ /Asi.Selenium.V10/Steps/Commerce/PricingGroupStepDef.cs
+ /Asi.Selenium.V10/Steps/Settings/SettingsStepDef.cs
+ /Asi.Selenium.V10/Steps/Community/ManageDuplicatesStepDef.cs
+ /Asi.Selenium.V10/Steps/Membership/MembershipStepDef.cs
Diff(EQUAL,"{¶    public class SetupPaymentMethodSet : AsiAbstractWebTask¶    {¶        #region Constructors¶        private SetupPaymentMethodSet(string paymentMethodSet, GatewayData gatewayData)¶        {¶            PaymentMethodSet = paymentMethodSet;¶            GatewayData = gatewayData;¶            PaymentMethodSetPage = new PaymentMethodSetPage();¶            PaymentMethodSetCreatorDialog = new PaymentMethodSetCreatorDialog();¶            PayCentralPage = new PayCentralPage();¶        }¶        #endregion¶¶        #region Properties¶¶        private string PaymentMethodSet { get; set; }¶        private GatewayData GatewayData { get; set; }¶        private PaymentMethodSetPage PaymentMethodSetPage { get; set; }¶        private PaymentMethodSetCreatorDialog PaymentMethodSetCreatorDialog { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶¶        #endregion¶¶        #region Builder Methods¶¶        public static SetupPaymentMethodSet AddToStaff(GatewayData gatewayData) => new SetupPaymentMethodSet("Staff", gatewayData);¶        public static SetupPaymentMethodSet AddToStaff(string paymentMethodCode, string paymentMethodName) =>¶            new SetupPaymentMethodSet("Staff", new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶        public static SetupPaymentMethodSet AddToGiftEntry(GatewayData gatewayData) => new SetupPaymentMethodSet("Gift Entry", gatewayData);¶        public static SetupPaymentMethodSet AddToGiftEntry(string paymentMethodCode, string paymentMethodName) =>¶            new SetupPaymentMethodSet("Gift Entry", new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶        public static SetupPaymentMethodSet AddToPublic(GatewayData gatewayData) => new SetupPaymentMethodSet("Public", gatewayData);¶        public static SetupPaymentMethodSet AddToPublic(string paymentMethodCode, string paymentMethodName) =>¶            new SetupPaymentMethodSet("Public", new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶        public static SetupPaymentMethodSet AddToCustomSet(string paymentMethodSet, GatewayData gatewayData) => new SetupPaymentMethodSet(paymentMethodSet, gatewayData);¶        public static SetupPaymentMethodSet AddToCustomSet(string paymentMethodSet, string paymentMethodCode, string paymentMethodName) =>¶            new SetupPaymentMethodSet(paymentMethodSet, new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            LoadPaymentMethodSet(user);¶¶            var code = string.IsNullOrEmpty(GatewayData.PaymentMethodCode) ? GatewayData.AccountCode : GatewayData.PaymentMethodCode;¶            var name = string.IsNullOrEmpty(GatewayData.PaymentMethodName) ? GatewayData.AccountName : GatewayData.PaymentMethodName;¶¶            if (user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(code))))¶                return;¶            if (!user.AsksFor(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(name))))¶            {¶                user.AttemptsTo(Click.On(PaymentMethodSetCreatorDialog.PaymentMethods.AddNew));¶                user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodSetCreatorDialog.PaymentMethod, code));¶                user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodSetCreatorDialog.DisplayName, name));¶                user.AttemptsTo(Click.On(PaymentMethodSetCreatorDialog.PaymentMethods.SaveNewButton));¶                user.AttemptsTo(ClickCommandButton.Submit());¶            }                ¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(Click.On(DialogWindowWrapper.CloseButtonTop));¶            if(user is ImisUser imisUser)¶                imisUser.Verifies(SwitchFrame.ToDefaultFrame().IsClosed());¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            driver.WaitInSeconds(1);¶            LoadPaymentMethodSet(user);¶¶            if (string.IsNullOrEmpty(GatewayData.PaymentMethodName))¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            else¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            if (string.IsNullOrEmpty(GatewayData.PaymentMethodCode))¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.AccountCode))")
Diff(DELETE,").Should().Be")
Diff(INSERT,",IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            else¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.SpanInTable(GatewayData.PaymentMethodCode))")
Diff(DELETE,").Should().Be")
Diff(INSERT,",IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(Click.On(DialogWindowWrapper.CloseButtonTop));¶        }¶¶        private void LoadPaymentMethodSet(IActor user)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment method sets")));¶            ¶            user.WaitsUntil(Appearance.Of(PaymentMethodSetPage.SetCreator.ResultsGrid.CellLinkWithText(PaymentMethodSet)), IsEqualTo.True());¶            user.AttemptsTo(Click.On(PaymentMethodSetPage.SetCreator.ResultsGrid.CellLinkWithText(PaymentMethodSet)));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.WaitsUntil(Appearance.Of(PaymentMethodSetCreatorDialog.PaymentMethods.Grid), IsEqualTo.True());¶        }¶        #endregion¶¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupPaymentMethodSet.cs)
Diff(EQUAL,"{¶    public class SetupGateway : AsiAbstractWebTask¶    {¶        private SetupGateway(GatewayTypeEnum gatewayType, GatewayData gatewayData)¶        {¶            if (gatewayType == GatewayTypeEnum.DefaultData)¶                GatewayType = (GatewayTypeEnum)Enum.Parse(typeof(GatewayTypeEnum), gatewayData.GatewayType);¶            else¶                GatewayType = gatewayType;¶")
Diff(DELETE,"    ¶")
Diff(EQUAL,"            GatewayData = gatewayData;¶")
Diff(INSERT,"")
Diff(EQUAL,"            GatewaysPage = new GatewaysPage();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        #region Properties¶        private GatewayTypeEnum GatewayType { get; set; }¶        private GatewayData GatewayData { get; set; }¶        private GatewaysPage GatewaysPage { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶")
Diff(INSERT,"        private bool ShouldSaveGateway { get; set; } = true;¶")
Diff(EQUAL,"        #endregion¶¶        public static SetupGateway WithGatewayData(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.DefaultData, gatewayData);¶        public static SetupGateway ImisPay(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.ImisPay, gatewayData);¶        public static SetupGateway Iats(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.Iats, gatewayData);¶        public static SetupGateway SecurePay(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.SecurePay, gatewayData);¶        public static SetupGateway PayFlowPro(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.PayFlowPro, gatewayData);¶        public static SetupGateway Vantiv(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.Vantiv, gatewayData);¶        public static SetupGateway PayPal(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.PayPal, gatewayData);¶        public static SetupGateway ImisPassThrough(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.ImisPassThrough, gatewayData);")
Diff(INSERT,"¶        public static SetupGateway GoCardless(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.GoCardless, gatewayData);¶¶        public SetupGateway AndDontSaveGateway()¶        {¶            ShouldSaveGateway = false;¶            return this;¶        }")
Diff(EQUAL,"¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(INSERT,"            context.UpsertData("GatewayData", GatewayData);¶")
Diff(EQUAL,"            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Gateways")));¶¶            user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.Grid), IsEqualTo.True());¶            if (user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))))¶                return;¶            user.AttemptsTo(Click.On(GatewaysPage.AccountsGrid.AddToGrid));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(SetWhenProvided.DropDown(GatewayAccountDialog.GatewayDropdown, GatewayType.GetDisplayName()));¶            //Set AccountCode¶            user.AttemptsTo(SetWhenProvided.TextBox(GatewayAccountDialog.AccountCode, GatewayData.AccountCode));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶¶            PerformGatewayDataEntry(user);¶¶")
Diff(INSERT,"            //switch (based on settings) to stop¶            if (ShouldSaveGateway)¶            {¶    ")
Diff(EQUAL,"            //Exit out of dialogs¶            ")
Diff(INSERT,"   ")
Diff(INSERT," ")
Diff(EQUAL,"user.AttemptsTo(SwitchFrame.ToGenericWindow());¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.Continue());¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"//TODO: check it was added to the table¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName)), IsEqualTo.True());¶            ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"user.AsksFor(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))).Should().BeTrue();¶")
Diff(INSERT,"            }¶")
Diff(EQUAL,"        }¶¶        private void PerformGatewayDataEntry(IActor user)¶        {¶            switch (GatewayType)¶            {¶                case GatewayTypeEnum.ImisPay:¶                    SetImisPay(user);¶                    break;¶                case GatewayTypeEnum.Iats:¶                    SetIats(user);¶                    break;¶                case GatewayTypeEnum.SecurePay:¶                    SetSecurePay(user);¶                    break;¶                case GatewayTypeEnum.PayFlowPro:¶                    SetPayflowPro(user);¶                    break;¶                case GatewayTypeEnum.Vantiv:¶                    SetVantiv(user);¶                    break;¶                case GatewayTypeEnum.PayPal:¶                    SetPayPal(user);¶                    break;¶                case GatewayTypeEnum.ImisPassThrough:¶                    SetImisPassThrough(user);¶                    break;¶")
Diff(INSERT,"                case GatewayTypeEnum.GoCardless:¶                    SetGoCardless(user);¶                    break;¶                case GatewayTypeEnum.Stripe:¶                    SetStripe(user);¶                    break;¶")
Diff(EQUAL,"            }¶        }¶¶        public void SetImisPay(IActor user)¶        {¶            //Set Region first to show/hide the correct elements ¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPayDialog.Region, GatewayData.Region));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.XWebId, GatewayData.XWebId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.TerminalId, GatewayData.TerminalId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AuthorizationKey, GatewayData.AuthorizationKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.DigitalKey, GatewayData.DigitalKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AppId, GatewayData.AppId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AppKey, GatewayData.AppKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.MerchantId, GatewayData.MerchantId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AccountId, GatewayData.AccountId));¶        }¶¶        public void SetIats(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(IatsDialog.Region, GatewayData.Region));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.AgentCode, GatewayData.AgentCode));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.Password, GatewayData.Password));¶        }¶¶        public void SetSecurePay(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(SecurePayDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.MerchantId, GatewayData.MerchantId));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.Password, GatewayData.Password));¶        }¶¶        public void SetPayflowPro(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(PayFlowDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Vendor, GatewayData.Vendor));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Partner, GatewayData.Partner));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.User, GatewayData.UserName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Password, GatewayData.Password));¶        }¶¶        public void SetVantiv(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.TextBox(VantivDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(VantivDialog.MerchantId, GatewayData.MerchantId));¶        }¶¶        public void SetPayPal(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.Vendor, GatewayData.Vendor));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.UserName, GatewayData.UserName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.Password, GatewayData.Password));¶        }¶¶        public void SetImisPassThrough(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPassThroughDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPassThroughDialog.GatewayType, GatewayData.SpreedlyType));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.AccountName, GatewayData.AccountName));¶            if (GatewayData.SpreedlyType.Equals("Elavon"))¶            {¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.MerchantId(SpreedlyGatewayType.Elavon), GatewayData.MerchantId));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.User, GatewayData.UserName));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Pin, GatewayData.Pin));¶            }¶            else¶            {¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.MerchantId(SpreedlyGatewayType.Bambora), GatewayData.MerchantId));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Username, GatewayData.UserName));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Password, GatewayData.Password));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.ApiKey, GatewayData.ApiKey));¶            }   ¶        }¶¶")
Diff(INSERT,"        public void SetGoCardless(IActor user)¶        {¶            //Fill out fields¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessDialog.AccountName,GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.DropDown(GoCardlessDialog.Environment, GatewayData.Environment));¶¶            if (!GatewayData.CompleteOnboarding)¶                return;¶¶            // Onboarding and OAuth completion¶            user.AttemptsTo(Click.On(GoCardlessDialog.GoCardlessOauthLink));¶            TestHelper.WaitForPageReload();¶            var goCardlessHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];¶            user.AttemptsTo(SwitchWindow.To(goCardlessHandle));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.SigninLink));¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.EmailInput,GatewayData.Email));¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.PasswordInput, GatewayData.Password));¶            user.AttemptsTo(ScrollToElement.At(GoCardlessOAuth.ConnectAccountButton));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.ToSCheckBox));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.ConnectAccountButton));¶            TestHelper.WaitForPageReload();¶            var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];¶            user.AttemptsTo(SwitchWindow.To(imisWebHandle));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶        }¶¶        public void SetStripe(IActor user)¶        {¶            //Fill out fields¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeDialog.AccountName, GatewayData.AccountName));¶¶            if (!GatewayData.CompleteOnboarding)¶                return;¶¶            // Onboarding completion¶            user.AttemptsTo(Click.On(StripeDialog.StripeConnectLink));¶            for (int i = 0; i < 30; i++)¶            {¶                int tabCount = user.Using<TestImis>().WebDriver.WindowHandles.Count;¶                if (tabCount > 1)¶                    break;¶                user.AttemptsTo(Waiting.InSeconds(1));¶            }¶            var stripeHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];¶            user.AttemptsTo(SwitchWindow.To(stripeHandle));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.EmailInputBox, GatewayData.Email));¶            user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.PasswordInputBox, GatewayData.Password));¶            user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));¶            string codeToEnter = MultiFactorAuthentication.Generate2FACode(GatewayData.MFACode);¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.VerificationCodeInputBox, codeToEnter));¶¶            //After entering the code, we should be redirected to the next page which allows you to continue.¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.ContinueButton), IsEqualTo.True());¶            // Incase there are any saved credentials, we need to skip the first page which asks to use existing info¶            bool promptedToUseSavedInfo = user.AsksFor(Appearance.Of(StripeOnboarding.Span("Use your saved information")));¶            if (promptedToUseSavedInfo)¶                user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton)); //Continue through onboarding wizard to get to starting page and create new business¶¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Let’s start with some basics")), IsEqualTo.True());¶            //Let’s start with some basics¶            // We are just going to continue with a UK business location and Individual type of business, and fill out all data with dummy data.¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶¶            //Personal Details¶            // Name¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Verify your personal details")), IsEqualTo.True());¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("First name"), "Timmy"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Last name"), "Tester"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("you@example.com"), GatewayData.Email ?? "Somebody@advsol.com"));¶            // Date of birth¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("MM"), "05"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("DD"), "05"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("YYYY"), "1960"));¶            // Home address¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Address line 1"), "798 New Road"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Town or City"), "London"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Postal code"), "W49 3IX"));¶¶            // Phone number¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("121 234 5678"), "121 234 5678"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Professional Details¶            // Industry¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Professional details")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Please select your industry…")));¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Software")));¶            // Website¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("www.example.com"), "www.imis.com"));¶            // Product description¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.ProductDescriptionBox, "We test websites"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Add your bank to receive payouts¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add your bank to receive payouts")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Use test account")));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Add public details for customers¶            // Shortened Descriptor¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add public details for customers")), IsEqualTo.True());¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Business"), "iMIS"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Setting climate contribution¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.ClimateContributionLabel),IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Agreeing and submitting all data¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Review and finish up")),IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.AgreeAndSubmitButon));¶            user.WaitsUntil(Appearance.Of(ImisRedirectPage.returnSpan), IsEqualTo.True());¶¶            // Return to iMIS¶            var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];¶            user.AttemptsTo(SwitchWindow.To(imisWebHandle));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶        }¶¶")
Diff(EQUAL,"        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Gateways")));¶            user.WaitsUntil(Appearance.Of(GatewaysPage.AccountsGrid.Grid), IsEqualTo.True());¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(GatewaysPage.AccountsGrid.TextInTable(GatewayData.AccountName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,",IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(GatewaysPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        private enum GatewayTypeEnum¶        {¶            DefaultData,¶            [Display(Name = "iMIS Pay")]¶            ImisPay,¶            [Display(Name = "iATS")]¶            Iats,¶            [Display(Name = "SecurePay")]¶            SecurePay,¶            [Display(Name = "PayFlow Pro with DataVault")]¶            PayFlowPro,¶            [Display(Name = "Vantiv")]¶            Vantiv,¶            [Display(Name = "PayPal")]¶            PayPal,¶            [Display(Name = "iMIS Pass-through Gateway")]¶")
Diff(DELETE,"")
Diff(EQUAL,"            ImisPassThrough")
Diff(INSERT,",¶            [Display(Name = "GoCardless")]¶            GoCardless,¶            [Display(Name = "Stripe")]¶            Stripe")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupGateway.cs)
Diff(EQUAL,"{¶    public class SetupPaymentMethod : AsiAbstractWebTask¶    {¶        private SetupPaymentMethod(GatewayData gatewayData)¶        {¶            GatewayData = gatewayData;¶            PaymentMethodsPage = new PaymentMethodsPage();¶            PaymentMethodDialog = new PaymentMethodDialog();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        #region Properties¶        private GatewayData GatewayData { get; set; }¶        private PaymentMethodsPage PaymentMethodsPage { get; set; }¶        private PaymentMethodDialog PaymentMethodDialog { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶        #endregion¶¶        public static SetupPaymentMethod WithGatewayData(GatewayData gatewayData) => new SetupPaymentMethod(gatewayData);¶        public static SetupPaymentMethod WithGatewayAccount(string paymentMethodCode, string paymentMethodName) => ¶            new SetupPaymentMethod(new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(DELETE,"            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));¶            user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());¶")
Diff(EQUAL,"            var code = string.IsNullOrEmpty(GatewayData.PaymentMethodCode) ? GatewayData.AccountCode : GatewayData.PaymentMethodCode;¶            var name = string.IsNullOrEmpty(GatewayData.PaymentMethodName) ? GatewayData.AccountName : GatewayData.PaymentMethodName;¶¶")
Diff(INSERT,"¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));¶            user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());¶")
Diff(EQUAL,"            if (user.AsksFor(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(code))))¶                return;¶            user.AttemptsTo(Click.On(PaymentMethodsPage.AccountsGrid.AddToGrid));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶            ")
Diff(DELETE,"//TODO: Cleanup this automatic assignment from feature files and define the gl account there¶            if (GatewayData.AccountName.Contains("DD") ¶                || (!string.IsNullOrEmpty(GatewayData.PaymentMethodType) && GatewayData.PaymentMethodType.Equals("Direct debit")))¶            {¶                user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1060: Debit"));¶            }¶            else¶            {¶                user.AttemptsTo(SendKeys.To(PaymentMethodDialog.Account.TextBox, "1-1020: VISA"));¶            }")
Diff(INSERT,"user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));¶            user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name));¶")
Diff(EQUAL,"¶            user.AttemptsTo(SetWhenProvided.")
Diff(DELETE,"TextBox")
Diff(INSERT,"DropDown")
Diff(EQUAL,"(PaymentMethodDialog.")
Diff(DELETE,"Account.TextBox, GatewayData.GLAccount")
Diff(INSERT,"Type, GatewayData.PaymentMethodType")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(PaymentMethodDialog.Account.ExpandArrow));¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            user.AttemptsTo(")
Diff(DELETE,"SetWhenProvided.DropDown(PaymentMethodDialog.Type, GatewayData.PaymentMethodType")
Diff(INSERT,"Waiting.ForPageReload());¶            user.AttemptsTo(Click.On(PaymentMethodDialog.Account.DropDownValue(GatewayData.GLAccount)")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            if(user.AsksFor(Existence.Of(PaymentMethodDialog.RequireCSC)))¶                user.AttemptsTo(SetWhenProvided.CheckBox(PaymentMethodDialog.RequireCSC, GatewayData.RequireCSC));¶            user.AttemptsTo(SetWhenProvided.CheckBox(PaymentMethodDialog.DisplayPaymentAuthoirizationCheckbox, GatewayData.DisplayPaymentAuthoirizationCheckbox));¶            if (user.AsksFor(Existence.Of(PaymentMethodDialog.PaymentAuthorizationTermsAndConditions)))¶                user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.PaymentAuthorizationTermsAndConditions, GatewayData.PaymentAuthorizationTermsAndConditions));¶¶            user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.GatewayAccount, GatewayData.AccountName));¶            ")
Diff(DELETE,"//driver.WaitInSeconds(2);//GET RID OF IT¶            user.WaitsUntil(Existence.Of(PaymentMethodDialog.Code), IsEqualTo.True());¶            user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Code, code));¶            user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name, name")
Diff(INSERT,"user.AttemptsTo(Waiting.ForPageReload(")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.Save()")
Diff(DELETE,".AndExpectMessage());¶            var userMessage = user.AsksFor(UserMessageContents.First());¶            if (userMessage.Equals("Successfully saved")) return;¶            else¶                throw new Exception("Payment Method was not saved."")
Diff(INSERT,");¶            user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("Successfully saved")")
Diff(EQUAL,");¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));¶            user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.Grid), IsEqualTo.True());¶")
Diff(INSERT,"¶¶")
Diff(EQUAL,"            if(string.IsNullOrEmpty(GatewayData.PaymentMethodName))¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.AccountName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            else¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodsPage.AccountsGrid.TextInTable(GatewayData.PaymentMethodName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(DELETE,";")
Diff(INSERT,");¶")
Diff(EQUAL,"¶            if")
Diff(INSERT," ")
Diff(EQUAL,"(string.IsNullOrEmpty(GatewayData.PaymentMethodCode))¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.True());¶            else¶                user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode)),IsEqualTo.")
Diff(EQUAL,"True()")
Diff(DELETE,";")
Diff(INSERT,");¶")
Diff(EQUAL,"¶            ")
Diff(DELETE,"else¶                user.AsksFor")
Diff(INSERT,"if (string.IsNullOrEmpty(GatewayData.GLAccount))¶                user.WaitsUntil(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.AccountCode)), IsEqualTo.True());¶            else¶                user.WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodsPage.AccountsGrid.LinkInTable(GatewayData.PaymentMethodCode))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupPaymentMethod.cs)
Diff(EQUAL,"{¶    public class SetupAutoPay : AsiAbstractWebTask¶    {¶        #region Contructors¶        private SetupAutoPay(AutoPayData autoPayData)¶        {¶            AutomaticPaymentPage = new AutomaticPaymentPage();¶            AutoPayData = autoPayData;¶            PayCentralPage = new PayCentralPage();¶        }¶        #endregion¶¶        #region Properties¶        private AutomaticPaymentPage AutomaticPaymentPage { get; set; }¶        private AutoPayData AutoPayData { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        public static SetupAutoPay WithAutoPayData(AutoPayData autoPayData) => new SetupAutoPay(autoPayData);¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Automatic payments")));¶            user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.RecurringDonation, AutoPayData.RecurringDonation));¶            if (AutoPayData.RecurringDonation)¶            {¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring, AutoPayData.DefaultToRecurring));¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount, AutoPayData.AllowDonorsChangeAmount));¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate, AutoPayData.AllowDonorsSelectCollectionDate));¶            }¶            user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships, AutoPayData.RenewingMemberships));¶            if (AutoPayData.RenewingMemberships)¶            {¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew, AutoPayData.DefaultAutoRenew));¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew, AutoPayData.RequiredAutoRenew));¶            }¶            user.AttemptsTo(ClickCommandButton.Save());¶            ")
Diff(DELETE,"var userMessage = user.AsksFor(UserMessageContents.First());¶            if (userMessage.Equals("Settings successfully updated.")) return;¶            else¶                throw new Exception("Autopay settings were not saved."")
Diff(INSERT,"user.WaitsUntil(UserMessageContents.First(),IsEqualTo.Value("Settings successfully updated.")")
Diff(EQUAL,");¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Automatic payments")));¶            user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RecurringDonation)).Should().Be(AutoPayData.RecurringDonation);¶            if (AutoPayData.RecurringDonation)¶            {¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.DefaultToRecurring)")
Diff(INSERT,")")
Diff(EQUAL,";¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount)")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.AllowDonorsChangeAmount)")
Diff(INSERT,")")
Diff(EQUAL,";¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsSelectCollectionDate)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.AllowDonorsSelectCollectionDate)")
Diff(INSERT,")")
Diff(EQUAL,";¶            }¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.RenewingMemberships)")
Diff(INSERT,")")
Diff(EQUAL,";¶            if (AutoPayData.RenewingMemberships)¶            {¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.DefaultAutoRenew)")
Diff(INSERT,")")
Diff(EQUAL,";¶                user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RequiredAutoRenew)")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e(AutoPayData.RequiredAutoRenew)")
Diff(INSERT,")")
Diff(EQUAL,";¶            }¶        }¶        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/PayCentral/SetupAutoPay.cs)
Diff(DELETE,"#nullable enable¶using Asi.Selenium.Web.Controls.Telerik;¶using Asi.Selenium.Core.DataClasses;¶using Asi.Selenium.Core.DataClasses.Advertising;¶using Asi.Selenium.Core.Interfaces;¶using Asi.Selenium.Web.iParts.Advertising.Settings.Component.MediaAsset;¶using Asi.Selenium.Web.V10.Pages.Advertising.MediaAsset;¶using Asi.Selenium.Core.WebDriver;¶using Boa.Constrictor.Screenplay;¶¶using FluentAssertions;¶¶using System.Collections.Generic;¶using System.Linq;¶using TechTalk.SpecFlow;¶using TechTalk.SpecFlow.Assist;¶using Asi.Selenium.Web.Interactions.Tasks;¶¶namespace Asi.Selenium.Web.V10.Interactions.Advertising.Settings.MediaAsset¶")
Diff(EQUAL,"{¶    public class AdjustRateCardDetails : AsiAbstractWebTask¶    {¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        private AdjustRateCardDetails(string adColor, ActionType action, string mediaAssets, string rateCardName, Table")
Diff(DELETE,"?")
Diff(EQUAL," table)¶        {¶            MediaAssets = mediaAssets;¶            RateCardName = rateCardName;¶            AdColor = adColor;¶            Action = action;¶            Table = table;¶            MediaAssetSettingPage = new MediaAssetSettingPage();¶        }¶¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        private AdjustRateCardDetails(string adColor, OtherRateCardDetailAction otherAction, string mediaAssets, string rateCardName)¶        {¶            MediaAssets = mediaAssets;¶            RateCardName = rateCardName;¶            AdColor = adColor;¶            OtherAction = otherAction;¶            MediaAssetSettingPage = new MediaAssetSettingPage();¶        }¶¶        #region Properties¶¶        private string MediaAssets { get; set; }¶        private string RateCardName { get; set; }¶        private string AdColor { get; set; }¶        private Table")
Diff(DELETE,"?")
Diff(EQUAL," Table { get; set; }¶        private ActionType Action { get; set; }¶        private OtherRateCardDetailAction OtherAction { get; set; }¶        private MediaAssetSettingPage MediaAssetSettingPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        /// <summary>¶        /// Constructs the Task object for Insert Rate Card Details¶        /// </summary>¶        /// <param name="adColor">Ad Color name to be select</param>¶        /// <param name="mediaAssets">MediaAssets name to be select</param>¶        /// <param name="rateCardName">Rate Cards name to be select</param>¶        /// <param name="table">List of rate card detail values to be select</param>¶        /// <returns></returns>¶        public static AdjustRateCardDetails Add(string adColor, Table table, string mediaAssets = "", string rateCardName = "") =>¶            new AdjustRateCardDetails(adColor, ActionType.Add, mediaAssets, rateCardName, table);¶¶        /// <summary>¶        /// Constructs the Task object for Update Rate Card Details¶        /// </summary>¶        /// <param name="adColor">Ad Color name to be select</param>¶        /// <param name="mediaAssets">MediaAssets name to be select</param>¶        /// <param name="rateCardName">Rate Cards name to be select</param>¶        /// <param name="table">List of rate card detail values to be select</param>¶        /// <returns></returns>¶        public static AdjustRateCardDetails Update(string adColor, string mediaAssets, string rateCardName, Table table) =>¶            new AdjustRateCardDetails(adColor, ActionType.Update, mediaAssets, rateCardName, table);¶¶        /// <summary>¶        /// Constructs the Task object for DElete Rate Card Details¶        /// </summary>¶        /// <param name="adColor">Ad Color name to be select</param>¶        /// <param name="mediaAssets">MediaAssets name to be select</param>¶        /// <param name="rateCardName">Rate Cards name to be select</param>¶        /// <returns></returns>¶        public static AdjustRateCardDetails Delete(string adColor, string mediaAssets = "", string rateCardName = "") =>¶            new AdjustRateCardDetails(adColor, ActionType.Delete, mediaAssets, rateCardName, null);¶¶        /// <summary>¶        /// Constructs the Task object for Add Rate In Rate Card Details Matrix¶        /// </summary>¶        /// <param name="adColor">Ad Color name to be select</param>¶        /// <param name="mediaAssets">MediaAssets name to be select</param>¶        /// <param name="rateCardName">Rate Cards name to be select</param>¶        /// <returns></returns>¶        public static AdjustRateCardDetails AddRates(string adColor, string mediaAssets = "", string rateCardName = "") =>¶            new AdjustRateCardDetails(adColor, OtherRateCardDetailAction.AddRates, mediaAssets, rateCardName);¶        #endregion¶¶        #region Methods¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            if (user.AsksFor(Existence.Of(RateCardDetailsSetting.RateCardDetailsForm)) == false)¶            {¶                if (user.AsksFor(Existence.Of(MediaAssetSetting.MediaAssetForm)) == false)¶                    user.AttemptsTo(Browse.InImis(MediaAssetSettingPage.BaseUrl));¶                if (user.AsksFor(Existence.Of(RateCardsSetting.RateCardForm)) == false)¶                    user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(MediaAssets, "Rate Card")));¶                user.AttemptsTo(KendoGridClick.On(RateCardsSetting.RateCardsTableLinkCell(RateCardName, "rate cards details")));¶            }¶            switch (Action)¶            {¶                case ActionType.Add:¶                    AddRateCardDetails(user);¶                    break;¶                case ActionType.Update:¶                    UpdateRateCardDetails(user);¶                    break;¶                case ActionType.Delete:¶                    DeleteRateCardDetails(user);¶                    break;¶            }¶            switch (OtherAction)¶            {¶                case OtherRateCardDetailAction.AddRates:¶                    AddRatesInRateCardDetailsMatrix(user);¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            switch (Action)¶            {¶                case ActionType.Add:¶                    VerifyAddedRateCardDetails(user);¶                    break;¶                case ActionType.Delete:¶                    VerifyDeletedRateCardDetails(user);¶                    break;¶            }¶            switch (OtherAction)¶            {¶                case OtherRateCardDetailAction.AddRates:¶                    VerifyAddRatesInRateCardDetailsMatrix(user);¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Add Rate Card Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void AddRateCardDetails(IActor user)¶        {¶            CreateMatrix(user, AdColor, Table);¶        }¶¶        /// <summary>¶        /// Verify Add Rate Card Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void VerifyAddedRateCardDetails(IActor user)¶        {¶            user.AskingFor(Text.Of(RateCardDetailsSetting.GetRateCardTitle)).Should().Contain(AdColor.ToUpper());¶            var rateCardDetailsTableText = user.AskingFor(Text.Of(RateCardDetailsSetting.RateCardDetailsTable));¶            List<RateCardDetailList> rateCardDetailList;¶            rateCardDetailList = Table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();¶            foreach (RateCardDetailList rateCardDetail in rateCardDetailList)¶            {¶                if (!string.IsNullOrEmpty(rateCardDetail.AdSize))¶                    rateCardDetailsTableText.Should().Contain(rateCardDetail.AdSize);¶                if (!string.IsNullOrEmpty(rateCardDetail.Frequency))¶                    rateCardDetailsTableText.Should().Contain(rateCardDetail.Frequency);¶            }¶        }¶¶        /// <summary>¶        /// Update Rate Card Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void UpdateRateCardDetails(IActor user)¶        {¶            CreateMatrix(user, AdColor, Table);¶        }¶¶        /// <summary>¶        /// Delete Rate Card Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void DeleteRateCardDetails(IActor user)¶        {¶            user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, AdColor));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.DeleteRateCardDetailsMatrixLink));¶            var deletePopUp = user.AskingFor(Text.Of(RateCardDetailsSetting.DeletePopUp")
Diff(INSERT,"Dialog")
Diff(EQUAL,"));¶            deletePopUp.Should().Contain("Do you want to delete");¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.DeletePopUp")
Diff(DELETE,"Yes")
Diff(INSERT,"Delete")
Diff(EQUAL,"Option));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.RateCardDetailsTable), IsEqualTo.False());¶        }¶¶        /// <summary>¶        /// Verify Delete Rate Card Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void VerifyDeletedRateCardDetails(IActor user)¶        {¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.RateCardDetailsTable), IsEqualTo.False());¶        }¶¶        /// <summary>¶        /// Add Rates Rate Cards Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void AddRatesInRateCardDetailsMatrix(IActor user)¶        {¶            user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, AdColor));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.RateCardDetailsTable), IsEqualTo.True());¶            int count = user.AsksFor(Count.Of(RateCardDetailsSetting.GetRateCardDetailsMatrixRateCellXPath()));¶            for (int i = 1; i <= count; i++)¶                user.AttemptsTo(SendKeys.To(RateCardDetailsSetting.GetRateCardDetailsMatrixRateCellXPath(i.ToString()), (i + 50).ToString()));¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.")
Diff(DELETE,"EditRateInRateCardDetailsMatrix")
Diff(INSERT,"Save")
Diff(EQUAL,"));¶        }¶¶        /// <summary>¶        /// VerifyAdd Rates Rate Cards Details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void VerifyAddRatesInRateCardDetailsMatrix(IActor user)¶        {¶            int count = user.AsksFor(Count.Of(RateCardDetailsSetting.GetRateCardDetailsMatrixRateCellXPath()));¶            for (int i = 1; i <= count; i++)¶            {¶                var text = user.AskingFor(HtmlAttribute.Of(RateCardDetailsSetting.GetRateCardDetailsMatrixRateCellXPath(i.ToString()), "value"));¶                text.Should().Contain((i + 50).ToString());¶            }¶        }¶¶        /// <summary>¶        /// Create matrix¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="adColor">Ad color to be select</param>¶        /// <param name="table">List of rate card detail values to be select</param>¶        private void CreateMatrix(IActor user, string adColor, Table table)¶        {¶            user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, adColor));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AdColorSelect, true));¶            List<RateCardDetailList> rateCardDetailList;¶            rateCardDetailList = table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();¶            foreach (RateCardDetailList rateCardDetail in rateCardDetailList)¶            {¶                if (!string.IsNullOrEmpty(rateCardDetail.AdSize))¶                {¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.AdSizeSelect));¶                    if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("AdSizeValue", rateCardDetail.AdSize, "//parent::div[@aria-selected='true']"))) == false)¶                        user.AttemptsTo(Click.On(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("AdSizeValue", rateCardDetail.AdSize)));¶                }¶                if (!string.IsNullOrEmpty(rateCardDetail.Frequency))¶                {¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.FrequencySelect));¶                    if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("FrequencyValue", rateCardDetail.Frequency, "//parent::div[@aria-selected='true']"))) == false)¶                        user.AttemptsTo(Click.On(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("FrequencyValue", rateCardDetail.Frequency)));¶                }¶            }¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.Create")
Diff(DELETE,"RateCardDetails")
Diff(EQUAL,"Matrix));¶            ")
Diff(DELETE,"if (user.AsksFor(AlertPresence.InBrowser()) == true)¶            {¶                user.AttemptsTo(AcceptAlert.ThatMustExist());¶                user.AttemptsTo(Click.On(RateCardDetailsSetting.EditRateInRateCardDetailsMatrix));¶                user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            }¶            else¶            {¶                user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix, true));¶                user.AttemptsTo(Click.On(RateCardDetailsSetting.AddRateInRateCardDetailsMatrix));¶                user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            }")
Diff(INSERT,"user.AttemptsTo(Click.On(RateCardDetailsSetting.Save));")
Diff(EQUAL,"¶        }¶        #endregion¶¶        public enum OtherRateCardDetailAction¶        {¶            None,¶            AddRates¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Advertising/Settings/MediaAsset/AdjustRateCardDetails.cs)
Diff(EQUAL,"{¶    public class AdjustStep4ProductionDetails : AsiAbstractWebTask¶    {¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        private AdjustStep4ProductionDetails(ProductionDetailAction action, MediaOrderData data = null, List<string> issueDateList = null, Table table = null)¶        {¶            Action = action;¶            Data = data;¶            IssueDateList = issueDateList;¶            Table = table;¶        }¶¶        #region Properties¶¶        private ProductionDetailAction")
Diff(DELETE,"?")
Diff(EQUAL," Action;¶        private MediaOrderData")
Diff(DELETE,"?")
Diff(EQUAL," Data;¶        private List<string>")
Diff(DELETE,"?")
Diff(EQUAL," IssueDateList;¶        private Table")
Diff(DELETE,"?")
Diff(EQUAL," Table;¶        #endregion¶¶        #region Builder Method¶        /// <summary>¶        /// Constructs the Task object for delete order¶        /// </summary>¶        /// <param name="data">Media order step 2 data list</param>¶        /// <param name="issueDateList">List of Issue Dates</param>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails DeleteOrder(MediaOrderData data, List<string> issueDateList) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.Delete, data, issueDateList);¶¶        /// <summary>¶        /// Constructs the Task object for edit order¶        /// </summary>¶        /// <param name="data">Media order step 2 data list</param>¶        /// <param name="issueDateList">List of Issue Dates</param>¶        /// <param name="table">List of rate card details</param>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails EditOrder(MediaOrderData data, List<string> issueDateList, Table table = null) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.Edit, data, issueDateList, table);¶¶        /// <summary>¶        /// Constructs the Task object for Create Production details for material¶        /// </summary>¶        /// <param name="data">Media order step 2 data list</param>¶        /// <param name="issueDateList">List of Issue Dates</param>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails NewMaterialOrder(MediaOrderData data, List<string> issueDateList) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.NewMaterial, data, issueDateList);¶¶        /// <summary>¶        /// Constructs the Task object for Previous click on step 4¶        /// </summary>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails Previous(MediaOrderData data, List<string> issueDateList) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.Previous, data, issueDateList);¶¶        /// <summary>¶        /// Constructs the Task object for Finish and exit click on step 4¶        /// </summary>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails FinishAndExit(MediaOrderData data, List<string> issueDateList) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.FinishAndExit, data, issueDateList);¶¶        /// <summary>¶        /// Constructs the Task object for Finish and Create click on step 4¶        /// </summary>¶        /// <returns></returns>¶        public static AdjustStep4ProductionDetails FinishAndCreate(MediaOrderData data = null, List<string> issueDateList = null) =>¶            new AdjustStep4ProductionDetails(ProductionDetailAction.FinishAndCreate, data, issueDateList);¶        #endregion¶¶        #region Methods¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            switch (Action)¶            {¶                case ProductionDetailAction.Delete:¶                    DeleteMediaOrder(user);¶                    break;¶                case ProductionDetailAction.Edit:¶                    EditMediaOrder(user);¶                    break;¶                case ProductionDetailAction.NewMaterial:¶                    CreateNewMaterialTypeOrder(user);¶                    break;¶                case ProductionDetailAction.Previous:¶                    ClickOnPrevious(user);¶                    break;¶                case ProductionDetailAction.FinishAndExit:¶                    ClickOnFinishAndExit(user);¶                    break;¶                case ProductionDetailAction.FinishAndCreate:¶                    ClickOnFinishAndCreate(user);¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Verify the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            switch (Action)¶            {¶                case ProductionDetailAction.Delete:¶                    user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶                    user.WaitsUntil(KendoGridAppearance.Of(KendoGrid.KendoGridRow(Data.MediaAssets, IssueDateList[0])).AndPageUntilFound(), IsEqualTo.False());¶                    user.AskingFor(Count.Of(KendoGrid.KendoGridRow(Data.MediaAssets, IssueDateList[0]))).Should().BeLessThanOrEqualTo(0);¶                    break;¶                case ProductionDetailAction.Edit:¶                    user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProductionDetailsTab), IsEqualTo.True());¶                    user.WaitsUntil(KendoGridAppearance.Of(KendoGrid.KendoGridRow(Data.MediaAssets, IssueDateList[0])).AndPageUntilFound(), IsEqualTo.True());¶                    user.WaitsUntil(Existence.Of(KendoGrid.KendoGridRow(Data.MediaAssets, IssueDateList[0])), IsEqualTo.True());¶                    string text = user.AskingFor(Text.Of(Step4ProductionDetailsSetting.ProductionDetailsTab));¶                    text.Should().Contain(Data.MediaAssets);¶                    text.Should().Contain(Data.AdType);¶                    break;¶                case ProductionDetailAction.NewMaterial:¶                    VerifyCreatedNewMaterialTypeOrder(user);¶                    break;¶                case ProductionDetailAction.FinishAndCreate:¶                    user.AskingFor(Text.Of(Step1BillingDetailsSetting.BillingDetailsTab)).Should().Contain("Campaign name");¶                    user.AskingFor(Existence.Of(Step1BillingDetailsSetting.AdvertiserSelect));¶                    user.AskingFor(Existence.Of(Step1BillingDetailsSetting.AgencySelect));¶                    break;¶            }¶        }¶¶        /// <summary>¶        ///Navigate to step 3 to step 4 and delete media order¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void DeleteMediaOrder(IActor user)¶        {¶            NavigateToStep4(user);¶            user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(Data.MediaAssets, null, IssueDateList[0], "//div//div[2]")));¶            user.AttemptsTo(Wait.Until(Existence.Of(Step4ProductionDetailsSetting.Step4DeletePopUp), IsEqualTo.True()).ForAnAdditional(30));¶            var deletePopUp = user.AskingFor(Text.Of(Step4ProductionDetailsSetting.Step4DeletePopUp));¶            deletePopUp.Should().Contain("Are you sure you want to delete ");¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.DeletePopUpDeleteOption));¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶        }¶¶        #region Edit Media Order¶        /// <summary>¶        ///Navigate to step 3 to step 4 and edit media order¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void EditMediaOrder(IActor user)¶        {¶            NavigateToStep4(user);¶            user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(Data.MediaAssets, null, IssueDateList[0], "//div//div[1]")));¶            string ratecard = GetOptionValueByTitleAttribute(user, Data.RateCardName + " | " + Data.BillingMethod + " | " + Data.AdType, Step2MediaScheduleSetting.RateCardSelect);¶            user.AttemptsTo(Select.ByValue(Step2MediaScheduleSetting.RateCardSelect, ratecard));¶            OverrideRateCardCostForCPM(user);¶            user.AttemptsTo(Click.On(Step2MediaScheduleSetting.AddToBuy));¶            user.WaitsUntil(Existence.Of(Step2MediaScheduleSetting.ProgressLoader), IsEqualTo.False());¶            user.AttemptsTo(Click.On(Step2MediaScheduleSetting.NextButton));¶            user.WaitsUntil(Existence.Of(Step2MediaScheduleSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step3AdjustmentSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step3AdjustmentSetting.NextButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step3AdjustmentSetting.NextButton));¶        }¶¶        /// <summary>¶        /// Override rate card cost¶        /// <param name="user">The iMIS user.</param>¶        /// </summary>¶        private void OverrideRateCardCost(IActor user)¶        {¶            string text = user.AskingFor(HtmlAttribute.Of(Step2MediaScheduleSetting.RateCardCost, "input"));¶            int rateCardCost = string.IsNullOrEmpty(text) ? 0¶               : Convert.ToInt32(text);¶            int newRateCardCost = rateCardCost + 10;¶            user.AttemptsTo(SendKeys.To(Step2MediaScheduleSetting.RateCardCost, newRateCardCost.ToString()));¶        }¶¶        /// <summary>¶        /// Override rate card cost for CPM¶        /// <param name="user">The iMIS user.</param>¶        /// </summary>¶        public void OverrideRateCardCostForCPM(IActor user)¶        {¶            SelectCommonFieldsInOrderStep2ForAllBillingMethod(user);¶            user.AttemptsTo(SendKeys.To(Step2MediaScheduleSetting.NoOfInsert, "100"));¶            OverrideRateCardCost(user);¶        }¶¶        /// <summary>¶        /// Select common fields in step 2 for all billing method¶        /// <param name="user">The iMIS user.</param>¶        /// </summary>¶        public void SelectCommonFieldsInOrderStep2ForAllBillingMethod(IActor user)¶        {¶            List<RateCardDetailList> rateCardDetailList;¶            rateCardDetailList = Table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();¶            var rateCardDetail = rateCardDetailList.First();¶            string adsizeId = GetOptionValueByTitleAttribute(user, rateCardDetail.AdSize, Step2MediaScheduleSetting.AdSizeSelect);¶            if (!string.IsNullOrEmpty(rateCardDetail.AdSize))¶                user.AttemptsTo(Select.ByValue(Step2MediaScheduleSetting.AdSizeSelect, adsizeId));¶            string frequencyId = GetOptionValueByTitleAttribute(user, rateCardDetail.Frequency, Step2MediaScheduleSetting.FrequencySelect);¶            if (!string.IsNullOrEmpty(rateCardDetail.Frequency))¶                user.AttemptsTo(Select.ByValue(Step2MediaScheduleSetting.FrequencySelect, frequencyId));¶        }¶        #endregion¶¶        /// <summary>¶        ///Navigate to step 3 to step 4 and create material order¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void CreateNewMaterialTypeOrder(IActor user)¶        {¶            NavigateToStep4(user);¶            user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(Data.MediaAssets, null, IssueDateList[2], "//span[contains(text(),'" + Data.MediaAssets + "')]")));¶            AddProductionDetail(user);¶        }¶¶        /// <summary>¶        ///Add Production details¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void AddProductionDetail(IActor user)¶        {¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProductionPopupBox), IsEqualTo.True());¶            switch (Data.MaterialType)¶            {¶                case "New":¶                    AddNewMaterialTypeData(user);¶                    break;¶                case "PickUp":¶                    AddPickupMaterialTypeData(user);¶                    break;¶            }¶            if (Data.ContactType == "Advertiser")¶            {¶                user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.ContactTypeAdvertiser));¶                string contactId = GetOptionValueByTitleAttribute(user, Data.ProductionContact, Step4ProductionDetailsSetting.ProductionContactSelect);¶                user.AttemptsTo(Select.ByValue(Step4ProductionDetailsSetting.ProductionContactSelect, contactId));¶            }¶            if (!string.IsNullOrEmpty(Data.OriginalFile))¶            {¶                user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.OriginalFileNameUpload), IsEqualTo.True());¶                user.AttemptsTo(UploadFile.Through(Step4ProductionDetailsSetting.OriginalFileNameUpload, FileHelper.GetFilePath(Data.OriginalFile)));¶            }¶            if (!string.IsNullOrEmpty(Data.ProofFile))¶            {¶                user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProofFileNameUpload), IsEqualTo.True());¶                user.AttemptsTo(UploadFile.Through(Step4ProductionDetailsSetting.ProofFileNameUpload, FileHelper.GetFilePath(Data.ProofFile)));¶            }¶            if (!string.IsNullOrEmpty(Data.FinalFile))¶            {¶                user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.FinalFileNameUpload), IsEqualTo.True());¶                user.AttemptsTo(UploadFile.Through(Step4ProductionDetailsSetting.FinalFileNameUpload, FileHelper.GetFilePath(Data.FinalFile)));¶            }¶            user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.HeadLineInput, "iMIS Advertising"));¶            user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.NunberOfTearSheet, "2"));¶            user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.PageNumber, "1"));¶            string separationId = GetOptionValueByTitleAttribute(user, Data.Separation, Step4ProductionDetailsSetting.SeparationSelect);¶            user.AttemptsTo(Select.ByValue(Step4ProductionDetailsSetting.SeparationSelect, separationId));¶            user.AttemptsTo(ScrollToElement.At(Step4ProductionDetailsSetting.PositionSelect));¶            string positionId = GetOptionValueByTitleAttribute(user, Data.Position, Step4ProductionDetailsSetting.PositionSelect);¶            user.AttemptsTo(Select.ByValue(Step4ProductionDetailsSetting.PositionSelect, positionId));¶            user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.Comments, ""));¶            string statusId = GetOptionValueByTitleAttribute(user, Data.Status, Step4ProductionDetailsSetting.StatusSelect);¶            user.AttemptsTo(Select.ByValue(Step4ProductionDetailsSetting.StatusSelect, statusId));¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.SaveProductionDetails));¶        }¶¶        /// <summary>¶        ///Add New Material Type Data¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void AddNewMaterialTypeData(IActor user)¶        {¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.MaterialTypeNew));¶            user.AttemptsTo(Check.On(Step4ProductionDetailsSetting.OnHandCheckBox));¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.SourceTypeExpected), IsEqualTo.True());¶            if (Data.SourceType == "Expected from contact")¶            {¶                user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.SourceTypeExpected));¶                user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.OnDateInput, DateTime.Today.AddDays(2).ToString("MM/dd/yyyy")));¶                user.AttemptsTo(SendKeys.To(Step4ProductionDetailsSetting.TrackingInput, "A2C3R4P5"));¶            }¶            else¶                user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.SourceTypeInHouse));¶        }¶¶        /// <summary>¶        ///Add Pick up Material Type Data¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void AddPickupMaterialTypeData(IActor user)¶        {¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.MaterialTypeNew));¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.MaterialTypePickUp), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.MaterialTypePickUp));¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.PickUpFrom), IsEqualTo.True());¶            string pickUpFromId = GetOptionValueByTitleAttribute(user, Data.MediaAssets + " | " + IssueDateList[1] + " | 1000 Inserts", Step4ProductionDetailsSetting.PickUpFrom);¶            user.AttemptsTo(Select.ByValue(Step4ProductionDetailsSetting.PickUpFrom, pickUpFromId));¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.RequiredChangesCheckBox));¶        }¶¶        /// <summary>¶        ///Verify created Material Type Data¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void VerifyCreatedNewMaterialTypeOrder(IActor user)¶        {¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProductionDetailsTab), IsEqualTo.True());¶            user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(Data.MediaAssets, null, IssueDateList[2], "//span[contains(text(),'" + Data.MediaAssets + "')]")));¶            string text = user.AskingFor(Text.Of(Step4ProductionDetailsSetting.ProductionPopupBox));¶            text.Should().Contain(Data.MediaAssets);¶            text.Should().Contain(IssueDateList[2]);¶            user.AskingFor(HtmlAttribute.Of(Step4ProductionDetailsSetting.MaterialTypeNew, Data.MaterialType));¶            user.AskingFor(Existence.Of(Step4ProductionDetailsSetting.SelectByCSS(Data.ProductionContact)));¶            user.AskingFor(Existence.Of(Step4ProductionDetailsSetting.SelectByCSS(Data.Separation)));¶            user.AskingFor(Existence.Of(Step4ProductionDetailsSetting.SelectByCSS(Data.Position)));¶            user.AskingFor(Existence.Of(Step4ProductionDetailsSetting.SelectByCSS(Data.Status)));¶        }¶¶        /// <summary>¶        ///Navigate to step 3 to step 4 and verify¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void NavigateToStep4(IActor user)¶        {¶            user.WaitsUntil(Existence.Of(Step3AdjustmentSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step3AdjustmentSetting.NextButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step3AdjustmentSetting.NextButton));¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProductionDetailsTab), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶            for (int i = 0; i < IssueDateList.Count; i++)¶                user.WaitsUntil(KendoGridAppearance.Of(KendoGrid.KendoGridRow(Data.MediaAssets, IssueDateList[i])).AndPageUntilFound(), IsEqualTo.True());¶        }¶¶        /// <summary>¶        /// Navigate to step 4 then click Previous button¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void ClickOnPrevious(IActor user)¶        {¶            NavigateToStep4(user);¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.PreviousButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.PreviousButton));¶        }¶¶        /// <summary>¶        /// Navigate to step 4 then click Finish and Exit button on Step 4¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void ClickOnFinishAndExit(IActor user)¶        {¶            NavigateToStep4(user);¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.FinishExitButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.FinishExitButton));¶        }¶¶        /// <summary>¶        /// Navigate to step 4 then click Finish and Create button on Step 4¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        private void ClickOnFinishAndCreate(IActor user)¶        {¶            NavigateToStep4(user);¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(Step4ProductionDetailsSetting.FinishCreateButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Step4ProductionDetailsSetting.FinishCreateButton));¶        }¶¶        /// <summary>¶        /// Selects a value from dropdown element¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="value">The value of the element</param>¶        /// <param name="selectControl">Select Web Locator Name</param>¶        private string GetOptionValueByTitleAttribute(IActor user, string value, IWebLocator selectControl)¶        {¶            string Text;¶            user.WaitsUntil(Existence.Of(selectControl), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(AgencySetting.SelectByCSS(value)), IsEqualTo.True());¶            Text = user.AskingFor(HtmlAttribute.Of(AgencySetting.SelectByCSS(value), "value"));¶            return Text;¶        }¶        #endregion¶¶        private enum ProductionDetailAction¶        {¶            Edit,¶            Delete,¶            NewMaterial,¶            PickUpMaterial,¶            Previous,¶            FinishAndExit,¶            FinishAndCreate¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Advertising/Settings/MediaOrder/AdjustStep4ProductionDetails.cs)
Diff(EQUAL,"{¶    public class AddContact : AsiAbstractWebTask¶    {¶        #region Constructors¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        private AddContact(ContactData contact)¶        {¶            Contact = contact;¶            AddContactPage = new AddContactPage();¶")
Diff(INSERT,"            CreateAccountNoSignIn = new CreateAccountNoSignInPage();¶")
Diff(EQUAL,"        }¶¶        private AddContact(AddContactType contactType, string organization)¶        {¶            ContactType = contactType;¶            Organization = organization;¶            AddContactPage = new AddContactPage();¶        }¶        #endregion¶¶        #region Properties¶¶        private string Organization;¶        private ContactData Contact { get; set; }¶        private AddContactType ContactType { get; set; }¶        private AddContactPage AddContactPage { get; set; }")
Diff(INSERT,"¶        private CreateAccountNoSignInPage CreateAccountNoSignIn { get; set; }")
Diff(EQUAL,"¶¶        #endregion¶¶        #region Builder Methods¶¶        /// <summary>¶        /// Constructs the Task object ")
Diff(DELETE,"with Associate Membership fees.")
Diff(INSERT,"for a Organization")
Diff(EQUAL,"¶        /// </summary>¶        /// <returns></returns>¶        public static AddContact AddOrgainization(string organization) =>¶                      new AddContact(AddContactType.Organization, organization);¶¶        /// <summary>¶        /// Constructs the Task object ")
Diff(DELETE,"with Regular Membership fees.")
Diff(INSERT,"for an Individual")
Diff(EQUAL,"¶        /// </summary>¶        /// <returns></returns>¶        public static AddContact AddIndividual(ContactData contact) => new AddContact(contact);¶¶        #endregion¶¶        #region Methods¶¶        /// <summary>¶        /// Performs the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            // ")
Diff(DELETE,"navigate straight")
Diff(INSERT,"add contact details¶            if (ContactType == AddContactType.Organization)¶            {¶                // navigate")
Diff(EQUAL," to Add Contacts page¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));¶            ")
Diff(DELETE,"// add contact details¶            if (ContactType == AddContactType.Organization)¶            {¶                user.AsksFor(Appearance.Of(AddContactPage.AddContact.OrganizationName));¶                // select orgainization type from radio box¶                user.AttemptsTo(SendKeys.To(AddContactPage.CreateAccountTypeOrganization, Keys.Space));¶                user.AttemptsTo(SendKeys.To(AddContactPage.AddContact.Organization")
Diff(INSERT,"    user.WaitsUntil(Existence.Of(AddContactPage.ContactAccountCreator.OrganizationName), IsEqualTo.True());¶                // select orgainization type from radio box¶                user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.CreateAccountTypeOrganization, Keys.Space));¶                user.AttemptsTo(SendKeys.To(AddContactPage.ContactAccountCreator.OrganizationName, Organization + Keys.Enter));¶            }¶            else if (Contact.ContactType == "MBRR")¶            {¶                user.WaitsUntil(Existence.Of(CreateAccountNoSignIn.ContactAccountCreator.Prefix), IsEqualTo.True());¶                string preFix = Contact.PrefixString;¶                user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.Prefix, preFix));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.FirstName, Contact.FirstName));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MiddleName, Contact.MiddleName));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.LastName, Contact.LastName));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.OrganizationName, Contact.Organization));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Email, Contact.Email));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Phone, Contact.Phone));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.MobilePhone, Contact.MobilePhone));¶                user.AttemptsTo(Select.ByText(CreateAccountNoSignIn.ContactAccountCreator.CountrySelect, Contact.Country));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Address1, Contact.Address1));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address2, Contact.Address2));¶                user.AttemptsTo(SetWhenProvided.TextBox(CreateAccountNoSignIn.ContactAccountCreator.Address3, Contact.Address3));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.City, Contact.City));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.SelectSubEntityCode, Contact.State));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.PostalCode, Contact.PostalCode));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.Password, Contact.Password));¶                user.AttemptsTo(SendKeys.To(CreateAccountNoSignIn.ContactAccountCreator.ConfirmPassword, Contact.Password));¶                // save the record ¶                user.AttemptsTo(ClickCommandButton.Save());¶                // save to context for use later¶                context.UpsertData("First")
Diff(EQUAL,"Name")
Diff(INSERT,""")
Diff(EQUAL,", ")
Diff(DELETE,"Organization + Keys.Enter));¶            }¶            else¶            {¶                user.AsksFor(Appeara")
Diff(INSERT,"Contact.FirstName);¶                context.UpsertData("MiddleName", Contact.MiddleName);¶                context.UpsertData("LastName", Contact.LastName);¶                context.UpsertData("Username", Contact.Email);¶                context.UpsertData("Email", Contact.Email);¶            }¶            else¶            {¶                // navigate to Add Contacts page¶                user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));¶                user.WaitsUntil(Existe")
Diff(EQUAL,"nce.Of(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(DELETE,".FirstName")
Diff(INSERT,"AccountCreator.FirstName), IsEqualTo.True(")
Diff(EQUAL,"));¶                user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".FirstName, Contact.FirstName));¶                user.AttemptsTo(Se")
Diff(DELETE,"ndKeys.To")
Diff(INSERT,"tWhenProvided.TextBox")
Diff(EQUAL,"(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".MiddleName, Contact.MiddleName));¶                user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".LastName, Contact.LastName));¶                user.AttemptsTo(Se")
Diff(DELETE,"ndKeys.To")
Diff(INSERT,"tWhenProvided.TextBox")
Diff(EQUAL,"(AddContactPage.PrimaryOrgSelector.PrimaryOrganization.TextBox, Contact.Organization));¶                user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".Email, Contact.Email));¶                //if password provided then create an account for them¶                if (Contact.Password != null)¶                {¶                    user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".CreateAnAccountCheckBox, Keys.Space));¶                    user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".Password, Contact.Password));¶                    user.AttemptsTo(SendKeys.To(AddContactPage.")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL,".ConfirmPassword, Contact.Password));¶                }¶                // save the record ¶                user.AttemptsTo(ClickCommandButton.Save());¶                // save to context for use later¶                context.UpsertData("FirstName", Contact.FirstName);¶")
Diff(INSERT,"                context.UpsertData("MiddleName", Contact.MiddleName);¶")
Diff(EQUAL,"                context.UpsertData("LastName", Contact.LastName);¶                context.UpsertData("Username", Contact.Email);¶")
Diff(INSERT,"                context.UpsertData("Email", Contact.Email);¶")
Diff(EQUAL,"            }¶        }¶¶        /// <summary>¶        /// Verifys the task¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new System.NotImplementedException();¶        }¶¶¶        /// <summary>¶        /// Checks if this interaction is equal to another interaction.¶        /// </summary>¶        /// <param name="obj">The other object.</param>¶        public override bool Equals(object obj) => obj is AddContact AddContact && ContactType == ContactType;¶¶        /// <summary>¶        /// Gets a unique hash code for this interaction.¶        /// </summary>¶        /// <returns></returns>¶        public override int GetHashCode() => HashCode.Combine(GetType(), ContactType);¶¶        /// <summary>¶        /// Returns a description of the Task.¶        /// </summary>¶        /// <returns></returns>¶        public override string ToString() => $"AddContact with '{Enum.GetName(typeof(AddContactType), ContactType)}'";¶¶        #endregion¶¶        private enum AddContactType¶        {¶            Individual,¶            Organization¶        }¶    }¶}¶¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Interactions/Community/AddContact.cs)
Diff(EQUAL,"{¶    public class InventoryReceiptsTestMethods : TestMethodBase¶    {¶        public InventoryReceiptsTestMethods(IWebDriver driver, IAsiWebContext context, ")
Diff(DELETE,"SpecFlowContext scenario")
Diff(INSERT,"ProductContext product")
Diff(EQUAL,"Context) : base(driver, context)¶        {¶            ")
Diff(DELETE,"ProductDisplayPage = new ProductDisplay")
Diff(INSERT,"ItemPage = new Item")
Diff(EQUAL,"Page();¶            InventoryReceiptsDialogPage = new InventoryReceiptsDialogPage();¶            InventoryReceiptsPage = new InventoryReceiptsPage();¶            ")
Diff(DELETE,"Scenario")
Diff(INSERT,"Product")
Diff(EQUAL,"Context = ")
Diff(DELETE,"scenarioContext;¶        }¶¶        private const string _onHandKey = "onHand";¶        private const string _lastCostKey = "lastCost";¶        private const string _unitCostKey = "unitCost";¶        private const string _quantityKey = "quanitty";¶¶        private ProductDisplayPage ProductDisplay")
Diff(INSERT,"productContext;¶        }¶¶        private ItemPage Item")
Diff(EQUAL,"Page { get; }¶        private InventoryReceiptsDialogPage InventoryReceiptsDialogPage { get; }¶        private InventoryReceiptsPage InventoryReceiptsPage { get; }¶        private ")
Diff(DELETE,"SpecFlowContext Scenario")
Diff(INSERT,"ProductContext Product")
Diff(EQUAL,"Context { get; }¶¶        public void Save")
Diff(DELETE,"Inventory")
Diff(INSERT,"Product")
Diff(EQUAL,"DetailsBeforeUpdate(string productCode)¶        {¶            var user = User("InventoryReceiptsUser");¶")
Diff(INSERT,"            var productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay;")
Diff(EQUAL,"¶            user.AttemptsTo(Browse.InImis(")
Diff(DELETE,"ProductDisplay")
Diff(INSERT,"Item")
Diff(EQUAL,"Page.")
Diff(DELETE,"Get")
Diff(INSERT,"With")
Diff(EQUAL,"BaseUrl")
Diff(INSERT,"Parameters")
Diff(EQUAL,"(productCode)")
Diff(INSERT,".BaseUrl")
Diff(EQUAL,"));¶            user.AttemptsTo(Click.On(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".InventoryDetails")
Diff(DELETE,"Switch")
Diff(INSERT,"Button")
Diff(EQUAL,"));¶            user.WaitsUntil(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".OnHandValue")
Diff(INSERT,"Label")
Diff(EQUAL,"), IsNotEqualTo.Value(""));¶            user.WaitsUntil(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".LastCostValue")
Diff(INSERT,"Label")
Diff(EQUAL,"), IsNotEqualTo.Value(""));¶¶            ")
Diff(DELETE,"ScenarioContext.Set(")
Diff(INSERT,"ProductContext.Code = productCode;¶            ProductContext.InventoryOnHand = ")
Diff(EQUAL,"int.Parse(user.AsksFor(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".OnHandValue")
Diff(DELETE,"))), _onHandKey);¶            ScenarioContext.Set(")
Diff(INSERT,"Label)));¶            ProductContext.LastCost = ")
Diff(EQUAL,"user.AsksFor(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".LastCostValue")
Diff(DELETE,")), _lastCostKey")
Diff(INSERT,"Label));¶            ProductContext.Name = user.AsksFor(Text.Of(productDisplay.ProductTitle)")
Diff(EQUAL,");¶        }¶¶        public void ")
Diff(DELETE,"Select")
Diff(INSERT,"Process")
Diff(EQUAL,"InventoryReceipt")
Diff(DELETE,"sFromCommerce(string type, string productNam")
Diff(INSERT,"(string typ")
Diff(EQUAL,"e, bool isPositiveQuantity)¶        {¶            var user = User("InventoryReceiptsUser");¶¶            user.AttemptsTo(Browse.InImis(InventoryReceiptsDialogPage.BaseUrl));¶            user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 4, tableSection: "tfoot", postXPath: "/span")),")
Diff(INSERT,"¶               ")
Diff(EQUAL," IsNotEqualTo.Value(""));¶¶            user.AttemptsTo(Select.ByValue(InventoryReceiptsDialogPage.TypeSelector, type));¶            user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, tableSection: "tfoot", postXPath: "//input"),")
Diff(DELETE," productName")
Diff(INSERT,"¶                ProductContext.NameForSearch")
Diff(EQUAL,"));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.GetSelectorOptionWithText(")
Diff(DELETE,"p")
Diff(INSERT,"P")
Diff(EQUAL,"roduct")
Diff(DELETE,"Name")
Diff(INSERT,"Context.NameForSearch")
Diff(EQUAL,")));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            ")
Diff(DELETE,"user.WaitsUntil(ValueAttribute.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input")),¶                IsEqualTo.Value(ScenarioContext.Get<string>(_lastCostKey)")
Diff(INSERT,"// Wait some time because after program is selected,¶            // unit cost input is set with product last cost twice and it isn't possible to wait for second setup with WaitsUntil().¶            user.AttemptsTo(Waiting.InSeconds(1")
Diff(EQUAL,"));¶¶            ")
Diff(DELETE,"var u")
Diff(INSERT,"ProductContext.U")
Diff(EQUAL,"nitCost = TestHelper.GenerateRandomNumber(1, 10);¶            ")
Diff(DELETE,"var q")
Diff(INSERT,"ProductContext.Q")
Diff(EQUAL,"uantity = isPositiveQuantity")
Diff(DELETE,"¶               ")
Diff(EQUAL," ? TestHelper.GenerateRandomNumber(1, 10)")
Diff(DELETE,"¶               ")
Diff(EQUAL," : -TestHelper.GenerateRandomNumber(1, 10);¶¶")
Diff(DELETE,"            ScenarioContext.Set(unitCost, _unitCostKey);¶            ScenarioContext.Set(quantity, _quantityKey);¶¶")
Diff(EQUAL,"            user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2, tableSection: "tfoot", postXPath: "//input"),")
Diff(DELETE," u")
Diff(INSERT,"¶                ProductContext.U")
Diff(EQUAL,"nitCost.ToString()));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(SendKeys.To(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3, tableSection: "tfoot", postXPath: "//input"),")
Diff(DELETE," q")
Diff(INSERT,"¶                ProductContext.Q")
Diff(EQUAL,"uantity.ToString()));¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 5, tableSection: "tfoot", postXPath: "//input[contains(@id, 'Insert')]")));¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.Save());¶            user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ConfirmSubmitButton));¶            ")
Diff(DELETE,"// dg we need to retry this, ¶            user.WaitsUntil")
Diff(INSERT,"user.AsksFor")
Diff(EQUAL,"(UserMessageState.HasAny().WithMessage("Inventory successfully updated.")")
Diff(DELETE,", IsEqualTo.")
Diff(INSERT,").Should().Be")
Diff(EQUAL,"True()")
Diff(DELETE,")")
Diff(EQUAL,";¶        }¶¶        public void VerifyInventoryDetailsAreUpdated(string type")
Diff(DELETE,", string productName")
Diff(EQUAL,")¶        {¶            var user = User("InventoryReceiptsUser");¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            var ")
Diff(DELETE,"expectedUnitCost = ScenarioContext.Get<int>(_unitCostKey);¶            var expectedQuantity = ScenarioContext.Get<int>(_quantityKey)")
Diff(INSERT,"productDisplay = ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay")
Diff(EQUAL,";¶¶            user.AttemptsTo(Click.On(InventoryReceiptsPage.Grid.Cell(1, 1, link: true)));¶            user.WaitsUntil(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1)), IsNotEqualTo.Value(""));¶¶            user.AsksFor(Text.Of(InventoryReceiptsDialogPage.TypeLabel)).Should().Be(type);¶            user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1))).Should().Be(")
Diff(DELETE,"p")
Diff(INSERT,"P")
Diff(EQUAL,"roduct")
Diff(DELETE,"Name")
Diff(INSERT,"Context.NameForSearch")
Diff(EQUAL,");¶            double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 2)))).Should().Be(")
Diff(DELETE,"expected")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"UnitCost);¶            double.Parse(user.AsksFor(Text.Of(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 3)))).Should().Be(")
Diff(DELETE,"expected")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"Quantity);¶¶            user.AttemptsTo(Click.On(InventoryReceiptsDialogPage.ProductGrid.Cell(1, 1, link: true)));¶            user.AttemptsTo(Click.On(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".InventoryDetails")
Diff(DELETE,"Switch")
Diff(INSERT,"Button")
Diff(EQUAL,"));¶            user.WaitsUntil(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".OnHandValue")
Diff(INSERT,"Label")
Diff(EQUAL,"), IsNotEqualTo.Value(""));¶            user.WaitsUntil(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".LastCostValue")
Diff(INSERT,"Label")
Diff(EQUAL,"), IsNotEqualTo.Value(""));¶¶            double.Parse(user.AsksFor(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".OnHandValue")
Diff(INSERT,"Label")
Diff(EQUAL,"))).Should().Be(")
Diff(DELETE,"ScenarioContext.Get<int>(_onHandKey) + expected")
Diff(INSERT,"ProductContext.InventoryOnHand + ProductContext.")
Diff(EQUAL,"Quantity);¶            if (type == "Receipt")¶                double.Parse(user.AsksFor(Text.Of(")
Diff(DELETE,"P")
Diff(INSERT,"p")
Diff(EQUAL,"roductDisplay")
Diff(DELETE,"Page")
Diff(EQUAL,".LastCostValue")
Diff(INSERT,"Label")
Diff(EQUAL,"))).Should().Be(")
Diff(DELETE,"expected")
Diff(INSERT,"ProductContext.")
Diff(EQUAL,"UnitCost);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/InventoryReceiptsTestMethods.cs)
Diff(EQUAL,"{¶    public class OrderConfirmationTestMethods : TestMethodBase¶    {¶        public OrderConfirmationTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            OrderConfirmation = new OrderConfirmation();¶")
Diff(INSERT,"            OrderDetailsPage = new OrderDetailsPage();¶            InvoicesPage = new InvoicesPage();¶            EventRegistrationDetailPage = new EventRegistrationDetailPage();¶")
Diff(EQUAL,"        }¶¶        p")
Diff(DELETE,"ublic")
Diff(INSERT,"rivate")
Diff(EQUAL," OrderConfirmation OrderConfirmation { get; ")
Diff(DELETE,"s")
Diff(INSERT,"}¶        private OrderDetailsPage OrderDetailsPage { get; }¶        private InvoicesPage InvoicesPage { get; }¶        private EventRegistrationDetailPage EventRegistrationDetailPage { g")
Diff(EQUAL,"et; }¶¶        public void VerifyAtLeastOneItemIncludeGstInc()¶        {¶            Test")
Diff(DELETE,"Gst")
Diff(INSERT,"Tax")
Diff(EQUAL,"InclusionForAtLeastOneItem(")
Diff(INSERT,"true, "GST");¶            TestTaxInclusionOnOrderDetailsAndInvoice(true, checkBaseGstTax: ")
Diff(EQUAL,"true);¶        }¶¶        public void VerifyAtLeastOneItemsDoNotIncludeGstInc()¶        {¶            Test")
Diff(DELETE,"GstInclusionForAtLeastOneItem(false);¶        }¶¶        private void TestGst")
Diff(INSERT,"TaxInclusionForAtLeastOneItem(false, "GST");¶            TestTaxInclusionOnOrderDetailsAndInvoice(false, checkBaseGstTax: true);¶        }¶¶        public void VerifyAtLeastOneItemIncludeVatInc()¶        {¶            TestTaxInclusionForAtLeastOneItem(true, "VAT");¶            TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true);¶        }¶¶        public void VerifyAtLeastOneItemsDoNotIncludeVatInc()¶        {¶            TestTaxInclusionForAtLeastOneItem(false, "VAT");¶            TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true);¶        }¶¶        public void VerifyOrderConfirmationContainsCanadaTax()¶        {¶            TestCanadaTaxInclusion(true);¶            TestTaxInclusionOnOrderDetailsAndInvoice(true, checkTax: true, checkBaseGstTax: true);¶        }¶¶        public void VerifyOrderConfirmationDoesNotContainCanadaTax()¶        {¶            TestCanadaTaxInclusion(false);¶            TestTaxInclusionOnOrderDetailsAndInvoice(false, checkTax: true, checkBaseGstTax: true);¶        }¶¶        private void TestTax")
Diff(EQUAL,"InclusionForAtLeastOneItem(bool shouldInclude")
Diff(DELETE,"Gst")
Diff(INSERT,"Tax, string tax")
Diff(EQUAL,")¶        {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            var user = ")
Diff(DELETE,"User("VerifyGstInc"")
Diff(INSERT,"LoggedInUser(")
Diff(EQUAL,");¶¶            var itemGrid = OrderConfirmation.OrderConfirmationDisplay.ItemGrid;¶            user.")
Diff(DELETE,"WaitsUntil")
Diff(INSERT,"AskingFor")
Diff(EQUAL,"(Existence.Of(itemGrid.Grid)")
Diff(DELETE,", IsEqualTo.")
Diff(INSERT,").Should().Be")
Diff(EQUAL,"True()")
Diff(DELETE,")")
Diff(EQUAL,";¶¶            var ")
Diff(DELETE,"gstR")
Diff(INSERT,"r")
Diff(EQUAL,"egex = new Regex(")
Diff(INSERT,"$")
Diff(EQUAL,""^.*\\(includes.*")
Diff(DELETE,"GST")
Diff(INSERT,"{tax}")
Diff(EQUAL,"\\).*$");¶¶            var rows = user.AskingFor(itemGrid.GetRowCount());¶            for (int row = 1; row <= rows; row++)¶            {¶                var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell))")
Diff(INSERT,".Replace(Environment.NewLine, " ")")
Diff(EQUAL,";¶                var match = ")
Diff(DELETE,"gstR")
Diff(INSERT,"r")
Diff(EQUAL,"egex.IsMatch(description);¶                if (match == shouldInclude")
Diff(DELETE,"Gst")
Diff(INSERT,"Tax")
Diff(EQUAL,")¶                    return;     // found a match¶            }¶¶            // if we get here we didnt find a match¶            ")
Diff(DELETE,"if ")
Diff(INSERT,"throw new Exception")
Diff(EQUAL,"(shouldInclude")
Diff(DELETE,"Gst)")
Diff(INSERT,"Tax")
Diff(EQUAL,"¶                ")
Diff(DELETE,"throw new Exception(")
Diff(INSERT,"? $")
Diff(EQUAL,""Expected at least one row in the order confirmation to include a ")
Diff(DELETE,"GST")
Diff(INSERT,"{tax}")
Diff(EQUAL," amount in the description"")
Diff(DELETE,");")
Diff(EQUAL,"¶            ")
Diff(DELETE,"else¶                throw new Exception(")
Diff(INSERT,"    : $")
Diff(EQUAL,""Expected at least one row in the order confirmation to NOT include a ")
Diff(DELETE,"GST")
Diff(INSERT,"{tax}")
Diff(EQUAL," amount in the description");¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        p")
Diff(DELETE,"ublic void VerifyAtLeastOneItemIncludeVatInc()¶        {¶           ")
Diff(INSERT,"rivate void")
Diff(EQUAL," Test")
Diff(DELETE,"Vat")
Diff(INSERT,"Tax")
Diff(EQUAL,"Inclusion")
Diff(DELETE,"ForAtLeastOneItem(true);¶        }¶¶        public void VerifyAtLeastOneItemsDoNotIncludeVatInc()¶        {¶            TestVatInclusionForAtLeastOneItem(false);¶        }¶¶        private void TestVatInclusionForAtLeastOneItem(bool shouldIncludeVat")
Diff(INSERT,"OnOrderDetailsAndInvoice(bool shouldIncludeTax, bool checkTax = false, bool checkBaseGstTax = false")
Diff(EQUAL,")¶        {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            var user = ")
Diff(DELETE,"User("VerifyVatInc");¶¶            var itemGrid = ")
Diff(INSERT,"LoggedInUser();¶¶            user.AttemptsTo(Click.On(")
Diff(EQUAL,"OrderConfirmation.OrderConfirmationDisplay.")
Diff(DELETE,"ItemGrid")
Diff(INSERT,"OrderNumber))")
Diff(EQUAL,";¶            ")
Diff(DELETE,"user.WaitsUntil(Appearance.Of(itemGrid.Grid), IsEqualTo.True());¶¶            var gstRegex = new Regex("^.*\\(includes.*VAT\\).*$");¶¶            var rows =")
Diff(INSERT,"var isOrderDetailsPage = user.AsksFor(Existence.Of(OrderDetailsPage.BillingDetails.InvoiceLink));¶¶            if (isOrderDetailsPage && checkTax)¶                user.AsksFor(Existence.Of(OrderDetailsPage.Total.Tax)).Should().Be(shouldIncludeTax);¶¶            if (isOrderDetailsPage && checkBaseGstTax)¶               ")
Diff(EQUAL," user.Ask")
Diff(DELETE,"ing")
Diff(INSERT,"s")
Diff(EQUAL,"For(")
Diff(DELETE,"itemGrid.GetRowCount()")
Diff(INSERT,"Existence.Of(OrderDetailsPage.Total.TaxBaseGst)).Should().Be(shouldIncludeTax")
Diff(EQUAL,");¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            ")
Diff(DELETE,"for (int row = 1; row <= rows; row++)¶            {¶                var description = user.AskingFor(Text.Of(itemGrid[row].ItemCell));¶                var match = gstRegex.IsMatch(description);¶    ")
Diff(INSERT,"user.AttemptsTo(Click.On(isOrderDetailsPage¶                ? OrderDetailsPage.BillingDetails.InvoiceLink¶                : EventRegistrationDetailPage.InvoicesGrid.FirstCellLink));¶¶            var taxValue = double.Parse(user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.Tax), IsNotEqualTo.Value("")));¶")
Diff(EQUAL,"            if (")
Diff(DELETE,"match == ")
Diff(EQUAL,"shouldInclude")
Diff(DELETE,"Vat")
Diff(INSERT,"Tax")
Diff(EQUAL,")¶                ")
Diff(DELETE,"    return;     // found a match¶            }¶¶            // if we get here we didnt find a match¶")
Diff(INSERT,"taxValue.Should().NotBe(0);¶            else¶                taxValue.Should().Be(0);¶¶            user.AsksFor(Existence.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TaxGrid.Grid)).Should().Be(shouldIncludeTax);¶   ")
Diff(EQUAL,"    ")
Diff(INSERT," }¶¶")
Diff(EQUAL,"        ")
Diff(DELETE,"if (")
Diff(INSERT,"private void TestCanadaTaxInclusion(bool ")
Diff(EQUAL,"shouldInclude")
Diff(DELETE,"Vat")
Diff(INSERT,"Tax")
Diff(EQUAL,")¶        ")
Diff(INSERT,"{¶")
Diff(EQUAL,"        ")
Diff(DELETE,"throw new Exception("Expected at least one row in the o")
Diff(INSERT,"    var user = LoggedInUser();¶¶            user.AsksFor(Existence.Of(OrderConfirmation.O")
Diff(EQUAL,"rder")
Diff(DELETE," c")
Diff(INSERT,"C")
Diff(EQUAL,"onfirmation")
Diff(DELETE," to include a VAT amount in the description");¶            else¶                throw new Exception("Expected at least one row in the o")
Diff(INSERT,"Display.PstTaxAmount)).Should().Be(shouldIncludeTax);¶            user.AsksFor(Existence.Of(OrderConfirmation.O")
Diff(EQUAL,"rder")
Diff(DELETE," c")
Diff(INSERT,"C")
Diff(EQUAL,"onfirmation")
Diff(DELETE," to NOT include a VAT amount in the description"")
Diff(INSERT,"Display.GstTaxAmount)).Should().Be(shouldIncludeTax")
Diff(EQUAL,");¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/OrderConfirmationTestMethods.cs)
Diff(EQUAL,"{¶    public class CartTestMethods : TestMethodBase¶    {¶        public CartTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            Cart = new Cart();¶        }¶¶        public Cart Cart { get; set; }¶¶        public void VerifyCartContainsGstIncTaxForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds)¶        {¶            TestGstInclusionForItems(itemIds, true);¶        }¶¶        public void VerifyCartDoesNotContainGstIncTaxForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds)¶        {¶            TestGstInclusionForItems(itemIds, false);¶        }¶¶        private void TestGstInclusionForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds, bool shouldIncludeGst)¶        {¶¶            var user = User("VerifyGstInc");¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶¶            var gstRegex = new Regex("^.*\\(includes.*GST\\).*$");¶")
Diff(DELETE,"            user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());")
Diff(EQUAL,"¶            var rows = user.AskingFor(Cart.ShoppingCart.ItemGrid.GetRowCount());¶            foreach (var itemId in itemIds)¶            {¶                var found = false;¶                for (int row = 1; row <= rows; row++)¶                {¶                    ")
Diff(DELETE,"if (")
Diff(INSERT,"var itemHref = ")
Diff(EQUAL,"user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))")
Diff(INSERT,";")
Diff(EQUAL,"¶                    ")
Diff(DELETE,"        ?")
Diff(INSERT,"if (itemHref")
Diff(EQUAL,".Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ")
Diff(DELETE,"?? fal")
Diff(INSERT,"||¶                        itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCa")
Diff(EQUAL,"se)")
Diff(INSERT,")")
Diff(EQUAL,"¶                    {¶                        var description = user.AskingFor(Text.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink));¶                        if (shouldIncludeGst)¶                            description.Should()¶                                .MatchRegex(gstRegex,¶                                    "Expected the cart row for item with code {0} to include a GST amount in the description");¶                        else¶                            description.Should()¶                                .NotMatchRegex(gstRegex,¶                                    "Expected the cart row for item with code {0} to NOT include a GST amount in the description");¶                        found = true;¶                        break;¶                    }¶                }¶                found.Should().Be(true, "Expected to find a row in the cart for item with code {0}", itemId);¶            }¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public void VerifyCartContainsVatIncTaxForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds)¶        {¶            TestVatInclusionForItems(itemIds, true);¶        }¶¶        public void VerifyCartDoesNotContainVatIncTaxForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds)¶        {¶            TestVatInclusionForItems(itemIds, false);¶        }¶¶        private void TestVatInclusionForItems(")
Diff(DELETE,"List")
Diff(INSERT,"IEnumerable")
Diff(EQUAL,"<string> itemIds, bool shouldIncludeVat)¶        {¶¶            var user = User("VerifyVatInc");¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶¶            var gstRegex = new Regex("^.*\\(includes.*VAT\\).*$");¶¶")
Diff(DELETE,"            user.WaitsUntil(Existence.Of(Cart.ShoppingCart.ItemGrid.Grid), IsEqualTo.True());¶")
Diff(EQUAL,"            var rows = user.AskingFor(Cart.ShoppingCart.ItemGrid.GetRowCount());¶            foreach (var itemId in itemIds)¶            {¶                var found = false;¶                for (int row = 1; row <= rows; row++)¶                {¶                    ")
Diff(DELETE,"if (")
Diff(INSERT,"var itemHref = ")
Diff(EQUAL,"user.AskingFor(HtmlAttribute.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink, "href"))")
Diff(INSERT,";")
Diff(EQUAL,"¶                    ")
Diff(DELETE,"        ?")
Diff(INSERT,"if (itemHref")
Diff(EQUAL,".Contains($"iProductCode={itemId}", StringComparison.OrdinalIgnoreCase) ")
Diff(DELETE,"?? fal")
Diff(INSERT,"||¶                        itemHref.Contains($"EventKey={itemId}", StringComparison.OrdinalIgnoreCa")
Diff(EQUAL,"se)")
Diff(INSERT,")")
Diff(EQUAL,"¶                    {¶                        var description = user.AskingFor(Text.Of(Cart.ShoppingCart.ItemGrid[row].ItemDescriptionLink));¶                        if (shouldIncludeVat)¶                            description.Should()¶                                .MatchRegex(gstRegex,¶                                    "Expected the cart row for item with code {0} to include a VAT amount in the description");¶                        else¶                            description.Should()¶                                .NotMatchRegex(gstRegex,¶                                    "Expected the cart row for item with code {0} to NOT include a VAT amount in the description");¶                        found = true;¶                        break;¶                    }¶                }¶                found.Should().Be(true, "Expected to find a row in the cart for item with code {0}", itemId);¶            }¶        }¶¶")
Diff(INSERT,"        public void VerifyCartContainsCanadaTax()¶        {¶            TestCanadaTaxInclusion(true);¶        }¶¶        public void VerifyCartDoesNotContainCanadaTax()¶        {¶            TestCanadaTaxInclusion(false);¶        }¶¶        private void TestCanadaTaxInclusion(bool shouldIncludeTax)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶            user.AsksFor(Appearance.Of(Cart.CartCharges.PstTaxAmount)).Should().Be(shouldIncludeTax);¶            user.AsksFor(Appearance.Of(Cart.CartCharges.GstTaxAmount)).Should().Be(shouldIncludeTax);¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Commerce/CartTestMethods.cs)
Diff(EQUAL,"{¶    public class MiscNavigationTestMethods : TestMethodBase¶    {¶        public PayCentralPage PayCentralPage { get; }¶        public GatewaysPage GatewaysPage { get; }")
Diff(INSERT,"¶        public AccountArea AccountArea { get; set; }")
Diff(EQUAL,"¶¶        public MiscNavigationTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            PayCentralPage = new PayCentralPage();¶            GatewaysPage = new GatewaysPage();¶")
Diff(INSERT,"            AccountArea = new AccountArea("AccountArea");¶")
Diff(EQUAL,"        }¶¶        public void GotoPayCentralTab()¶        {¶            var user = NavUser();            ¶            user.AttemptsTo(Browse.InImis(PayCentralPage.Url("Gateways")));¶        }¶¶        private ImisUser NavUser() => User("MiscNav user");¶¶        public void VerifyOnCorrectTab()¶        {¶            var user = NavUser();            ¶            user.AsksFor(Existence.Of(PayCentralPage.PayCentralSettings.GetTab("Gateways")));¶            user.AsksFor(Existence.Of(GatewaysPage.AccountsGrid.AddToGrid));¶        }")
Diff(INSERT,"¶¶        public void ClickOnAccountAreaBatchToggleIcon()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(AccountArea.BatchToggle));¶        }¶¶        public void VerifyExistanceOfBatchSelectVisibilityPanelDiv()¶        {¶            var user = LoggedInUser();¶            user.WaitsUntil(Appearance.Of(AccountArea.OverrideTransactionDateWrapper), IsEqualTo.True());¶            user.AskingFor(Existence.Of(AccountArea.BatchSelectorDropdown));¶        }")
Diff(EQUAL,"¶    }¶")
Diff(INSERT,"")
Diff(EQUAL,"}")
Diff(DELETE,"¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Settings/MiscNavigationTestMethods.cs)
Diff(EQUAL,"{¶    public class GatewayTestMethods : TestMethodBase¶    {¶        public GatewayTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            PayCentralServicePage = new PayCentralServicePage();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        public PayCentralServicePage PayCentralServicePage { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶¶        private ImisUser User() => User("GatewayUser");¶¶        public void EnsurePayCentralIsReady()¶        {¶            var user = ")
Diff(INSERT,"LoggedIn")
Diff(EQUAL,"User();¶")
Diff(DELETE,"")
Diff(EQUAL,"            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.BaseUrl));¶            var statusMessage = user.AsksFor(Text.Of(PayCentralServicePage.StatusMessageBody(5)));¶            if (statusMessage.Equals("Could not create a new Pay Central service account. Please contact your administrator for help."))¶            {¶                user.AttemptsTo(ManageLicense.Resync());¶                user.AttemptsTo(Browse.InStaffSite(PayCentralPage.BaseUrl));¶            }¶        }¶¶        public void SetupAutoPayData(AutoPayData autoPayData)¶        {¶            var user = ")
Diff(INSERT,"LoggedIn")
Diff(EQUAL,"User();¶            user.AttemptsTo(SetupAutoPay.WithAutoPayData(autoPayData));¶        }¶¶        public void SetupGatewaySuite(GatewayData gatewayData)¶        {¶            var user = ")
Diff(INSERT,"LoggedIn")
Diff(EQUAL,"User();¶            user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData));¶            user.AttemptsTo(SetupPaymentMethod.WithGatewayData(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToStaff(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToGiftEntry(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToPublic(gatewayData));¶        }¶¶        public void VerifyAutoPayData(AutoPayData autoPayData)¶        {¶            var user = ")
Diff(INSERT,"LoggedIn")
Diff(EQUAL,"User();¶            user.Verifies(SetupAutoPay.WithAutoPayData(autoPayData));¶        }¶¶        public void VerifyGatewaySuite(GatewayData gatewayData)¶        {¶            var user = ")
Diff(INSERT,"LoggedIn")
Diff(EQUAL,"User();¶            user.Verifies(SetupGateway.WithGatewayData(gatewayData));¶            user.Verifies(SetupPaymentMethod.WithGatewayData(gatewayData));¶            user.Verifies(SetupPaymentMethodSet.AddToStaff(gatewayData));¶            user.Verifies(SetupPaymentMethodSet.AddToGiftEntry(gatewayData));¶")
Diff(DELETE,"")
Diff(EQUAL,"            user.Verifies(SetupPaymentMethodSet.AddToPublic(gatewayData));¶        }")
Diff(INSERT,"¶¶        public void FillOutNewGateway(GatewayData gatewayData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData).AndDontSaveGateway());¶        }¶¶        public void VerifyLinkValidationError()¶        {¶            var user = LoggedInUser();¶            var gatewayData = _context.GetData<GatewayData>("GatewayData");¶            user.Verifies(ValidationForLink.WithGatewayData(gatewayData));¶        }¶¶        public void AttemptToSaveAndCloseGateway()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(ClickCommandButton.Continue());¶        }")
Diff(EQUAL,"¶    }¶}¶¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Settings/Finance/PayCentral/Gateway/GatewayTestMethods.cs)
Diff(EQUAL,"{¶    public class ReceiptingTestMethods : TestMethodBase¶    {¶        public IssueReceiptsPage IssueReceiptsPage { get; }")
Diff(INSERT,"¶        public FindIssuedReceiptsPage FindIssuedReceiptsPage { get; }")
Diff(EQUAL,"¶¶        public ReceiptingTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            IssueReceiptsPage = new IssueReceiptsPage();")
Diff(INSERT,"¶")
Diff(EQUAL,"         ")
Diff(INSERT,"   FindIssuedReceiptsPage = new FindIssuedReceiptsPage();")
Diff(EQUAL,"¶        }¶¶        public void AccessTheIssueReceiptsPage() ¶        {¶            var user = StaffSiteUser();            ¶            user.AttemptsTo(Browse.InStaffSite(IssueReceiptsPage.BaseUrl));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.SubmitButton));¶        }¶¶        public void ")
Diff(DELETE,"ClickItemsOnIssueReceiptsPage()¶        {¶            var user = StaffSiteUser();            ¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(2)));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(4)));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager()));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(6)));¶        }¶¶        public void VerifyTheCorrectPageLocationIsLoaded() ¶        {¶            var user = StaffSiteUser();            ¶            user.AsksFor(Text.Of(IssueReceiptsPage.GridCurrentPage)).Should().Be("6");¶        }¶¶        private ImisUser StaffSiteUser() => User("IssueReceipts User");¶")
Diff(INSERT,"FindReceiptsToIssue(string name, string item)¶        {¶            var user = StaffSiteUser();¶            user.AttemptsTo(Browse.InStaffSite(IssueReceiptsPage.BaseUrl));¶            var query = IssueReceiptsPage.SelectAQuery.Queries.Get("All gifts elligible for receipting");¶            var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, name));¶            user.AttemptsTo(Click.On(query.Find));¶        }¶¶        public void IssueReceipts()¶        {¶            var user = StaffSiteUser();¶            user.AttemptsTo(Click.On(IssueReceiptsPage.IssueReceiptsButton));¶        }¶¶        public void ClickItemsOnIssueReceiptsPage()¶        {¶            var user = StaffSiteUser();            ¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(2)));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(4)));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager()));¶            user.AttemptsTo(Click.On(IssueReceiptsPage.Grid1.Pager(6)));¶        }¶¶        public void VerifyTheCorrectPageLocationIsLoaded() ¶        {¶            var user = StaffSiteUser();            ¶            user.AsksFor(Text.Of(IssueReceiptsPage.GridCurrentPage)).Should().Be("6");¶        }¶¶        private ImisUser StaffSiteUser() => User("IssueReceipts User");¶¶        public void FindIssuedReceipts(string name, string receiptNumber, string receiptStatus)¶        {¶            var user = StaffSiteUser();¶            user.AttemptsTo(Browse.InStaffSite(FindIssuedReceiptsPage.BaseUrl));¶            var query = FindIssuedReceiptsPage.SelectAQuery.Queries.Get("Main");¶            var donorName = query.Parameters.Get("Donor name contains") as QueryTextParameter;¶            var number = query.Parameters.Get("Receipt number equals") as QueryTextParameter;¶            var status = query.Parameters.Get("Receipt status") as QueryComboBoxParameter;¶            user.AttemptsTo(SetWhenProvided.TextBox(donorName.Textbox, name));¶            user.AttemptsTo(SetWhenProvided.TextBox(number.Textbox, receiptNumber));¶            user.AttemptsTo(SetWhenProvided.TextBox(status.ComboBoxTextBox, receiptStatus));¶            user.AttemptsTo(Click.On(query.Find));¶        }¶¶        public string GetReceiptNumber()¶        {¶            var user = StaffSiteUser();¶            return user.AsksFor(Text.Of(FindIssuedReceiptsPage.SelectAQuery.Cell(1, 1)));¶        }¶¶        public void VerifyReceiptNumber(string expectedNumber)¶        {¶            var user = StaffSiteUser();¶            user.AsksFor(Text.Of(FindIssuedReceiptsPage.SelectAQuery.Cell(1, 1))).Should().Be(expectedNumber);¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Fundraising/ReceiptingTestMethods.cs)
Diff(EQUAL,"{¶    public class RateCardDetailsTestMethod : TestMethodBase¶    {¶        public RateCardDetailsTestMethod(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            MediaAssetSettingTestMethod = new MediaAssetSettingTestMethod(driver, context);¶            RateCardsTestMethod = new RateCardsTestMethod(driver, context);¶            MediaAssetSettingPage = new MediaAssetSettingPage();¶        }¶¶        public MediaAssetSettingTestMethod MediaAssetSettingTestMethod { get; private set; }¶        public RateCardsTestMethod RateCardsTestMethod { get; private set; }¶        private MediaAssetSettingPage MediaAssetSettingPage { get; set; }¶¶        #region Rate Cards Details ¶        public void CreateAdColorIfNotExist(ImisUser user, string mediaAssets, string rateCardName, string adColor)¶        {¶            if (user.AsksFor(Existence.Of(RateCardsSetting.RateCardForm)) == false)¶            {¶                if (user.AsksFor(Existence.Of(MediaAssetSetting.MediaAssetForm)) == false)¶                    user.AttemptsTo(Browse.InImis(MediaAssetSettingPage.BaseUrl));¶                user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(mediaAssets, "Rate Card")));¶            }¶            user.AttemptsTo(KendoGridClick.On(RateCardsSetting.RateCardsTableLinkCell(rateCardName, "rate cards details")));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.RateCardDetailsForm), IsEqualTo.True());¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.GetRateCardTitle), IsEqualTo.True());¶            var text = user.AskingFor(Text.Of(RateCardDetailsSetting.AdColorSelect));¶            if (!text.Contains(adColor))¶                user.AttemptsTo(AdjustAdColor.Add(adColor, mediaAssets, rateCardName));¶        }¶¶        public void CreateNewAdColor(string mediaAssets, string rateCardName, string adColor)¶        {¶            var user = User(mediaAssets);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAssets, rateCardName, string.Empty, null);¶            user.AttemptsTo(AdjustAdColor.Add(adColor, mediaAssets, rateCardName));¶        }¶¶        public void VerifyCreteNewAdColor(string adColor)¶        {¶            var user = User(adColor);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustAdColor.Add(adColor));¶        }¶¶        public void CreateAdSizeIfNotExist(ImisUser user, string mediaAssets, string rateCardName, List<string> adSizeList)¶        {¶            if (user.AsksFor(Existence.Of(RateCardDetailsSetting.RateCardDetailsForm)) == false)¶            {¶                if (user.AsksFor(Existence.Of(MediaAssetSetting.MediaAssetForm)) == false)¶                    user.AttemptsTo(Browse.InImis(MediaAssetSettingPage.BaseUrl));¶                user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(mediaAssets, "Rate Card")));¶                user.AttemptsTo(KendoGridClick.On(RateCardsSetting.RateCardsTableLinkCell(rateCardName, "rate cards details")));¶            }¶            foreach (string adSize in adSizeList)¶            {¶                if (!string.IsNullOrEmpty(adSize))¶                {¶                    user.AttemptsTo(Wait.Until(Existence.Of(RateCardDetailsSetting.AdSizeSelect), IsEqualTo.True()).ForAnAdditional(30));¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.AdSizeSelect));¶                    if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("AdSizeValue", adSize))) == false)¶                        user.AttemptsTo(AdjustAdSize.Add(adSize, mediaAssets, rateCardName));¶                }¶            }¶        }¶¶        public void CreateNewAdSize(string mediaAssets, string rateCardName, string adSize)¶        {¶            var user = User(mediaAssets);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAssets, rateCardName, string.Empty, null);¶            user.AttemptsTo(AdjustAdSize.Add(adSize, mediaAssets, rateCardName));¶        }¶¶        public void VerifyCreateNewAdSize(string adSize)¶        {¶            var user = User(adSize);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustAdSize.Add(adSize));¶        }¶¶        public void CreateFrequencyIfNotExist(ImisUser user, string mediaAssets, string rateCardName, List<string> frequencyList)¶        {¶            if (user.AsksFor(Existence.Of(RateCardDetailsSetting.RateCardDetailsForm)) == false)¶            {¶                if (user.AsksFor(Existence.Of(MediaAssetSetting.MediaAssetForm)) == false)¶                    user.AttemptsTo(Browse.InImis(MediaAssetSettingPage.BaseUrl));¶                user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(mediaAssets, "Rate Card")));¶                user.AttemptsTo(KendoGridClick.On(RateCardsSetting.RateCardsTableLinkCell(rateCardName, "rate cards details")));¶            }¶            foreach (string adFrequency in frequencyList)¶            {¶                if (!string.IsNullOrEmpty(adFrequency))¶                {¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.FrequencySelect));¶                    if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("FrequencyValue", adFrequency))) == false)¶                        user.AttemptsTo(AdjustFrequency.Add(adFrequency, mediaAssets, rateCardName));¶                }¶            }¶        }¶¶        public void CreateNewFrequency(string mediaAssets, string rateCardName, string frequency)¶        {¶            var user = User(mediaAssets);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAssets, rateCardName, string.Empty, null);¶            user.AttemptsTo(AdjustFrequency.Add(frequency, mediaAssets, rateCardName));¶        }¶¶        public void VerifyCreateFrequency(string frequency)¶        {¶            var user = User(frequency);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustFrequency.Add(frequency));¶        }¶¶        public void CreatePreRequisiteDataForRateCardDetails(ImisUser user, string mediaAssets, string rateCardName, string adColor, Table table)¶        {¶            if (!string.IsNullOrEmpty(mediaAssets))¶                MediaAssetSettingTestMethod.CreateMediaAssetsIfNotExist(user, mediaAssets);¶            if (!string.IsNullOrEmpty(mediaAssets) && !string.IsNullOrEmpty(rateCardName))¶                RateCardsTestMethod.CreateRateCardsIfNotExist(user, rateCardName, mediaAssets);¶            if (!string.IsNullOrEmpty(mediaAssets) && !string.IsNullOrEmpty(rateCardName) && !string.IsNullOrEmpty(adColor))¶                CreateAdColorIfNotExist(user, mediaAssets, rateCardName, adColor);¶            if (table != null && table.Rows.Count > 0)¶            {¶                List<RateCardDetailList> rateCardDetailList;¶                rateCardDetailList = table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();¶                List<string> frequencyList = new List<string>();¶                List<string> adSizeList = new List<string>();¶                foreach (RateCardDetailList rateCardDetail in rateCardDetailList)¶                {¶                    if (!string.IsNullOrEmpty(rateCardDetail.AdSize))¶                    {¶                        user.AttemptsTo(Click.On(RateCardDetailsSetting.AdSizeSelect));¶                        if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("AdSizeValue", rateCardDetail.AdSize))) == false)¶                            adSizeList.Add(rateCardDetail.AdSize);¶                    }¶                    if (!string.IsNullOrEmpty(rateCardDetail.Frequency))¶                    {¶                        user.AttemptsTo(Click.On(RateCardDetailsSetting.FrequencySelect));¶                        if (user.AsksFor(Existence.Of(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("FrequencyValue", rateCardDetail.Frequency))) == false)¶                            frequencyList.Add(rateCardDetail.Frequency);¶                    }¶                }¶                if (frequencyList.Count > 0)¶                    CreateFrequencyIfNotExist(user, mediaAssets, rateCardName, frequencyList);¶                if (adSizeList.Count > 0)¶                    CreateAdSizeIfNotExist(user, mediaAssets, rateCardName, adSizeList);¶            }¶        }¶¶        public void CreateMatrixIfNotExist(IActor user, string mediaAsset, string rateCard, string adColor, Table table, bool isUpdateMatrix = false)¶        {¶            if (user.AsksFor(Existence.Of(RateCardDetailsSetting.RateCardDetailsForm)) == false)¶            {¶                if (user.AsksFor(Existence.Of(MediaAssetSetting.MediaAssetForm)) == false)¶                    user.AttemptsTo(Browse.InImis(MediaAssetSettingPage.BaseUrl));¶                user.AttemptsTo(KendoGridClick.On(KendoGrid.KendoGridLinkCell(mediaAsset, "Rate Card")));¶                user.AttemptsTo(KendoGridClick.On(RateCardsSetting.RateCardsTableLinkCell(rateCard, "rate cards details")));¶            }¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            if (user.AskingFor(Existence.Of(RateCardDetailsSetting.RateCardDetailsTable)) == false)¶            {¶                user.AttemptsTo(AdjustRateCardDetails.Add(adColor, table, mediaAsset, rateCard));¶                if (isUpdateMatrix)¶                    user.AttemptsTo(AdjustRateCardDetails.AddRates(adColor, mediaAsset, rateCard));¶            }¶        }¶¶        public void CreateRateCardDetailMatrix(string mediaAsset, string rateCard, string adColor, Table table)¶        {¶            var user = User(mediaAsset);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);¶            user.AttemptsTo(AdjustRateCardDetails.Add(adColor, table, mediaAsset, rateCard));¶        }¶¶        public void VerifyCreatedRateCardDetailMatrix(string adColor, Table table)¶        {¶            var user = User(adColor);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustRateCardDetails.Add(adColor, table));¶        }¶¶        public void AddRatesInRateCardDetailMatrix(string mediaAsset, string rateCard, string adColor)¶        {¶            var user = User(mediaAsset);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            Table table = new Table(new string[] { "Ad size", "Frequency" });¶            table.AddRow(new string[] { "Full Page", "1" });¶            table.AddRow(new string[] { "Back Cover", "3" });¶            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);¶            CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);¶            user.AttemptsTo(AdjustRateCardDetails.AddRates(adColor, mediaAsset, rateCard));¶        }¶¶        public void VerifyAddedRatesInRateCardDetailMatrix(string adColor)¶        {¶            var user = User(adColor);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustRateCardDetails.AddRates(adColor));¶        }¶¶        public void UpdateRateCardDetailsMatrix(string mediaAsset, string rateCard, string adColor, Table table)¶        {¶            var user = User(mediaAsset);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);¶            CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);¶            user.AttemptsTo(AdjustRateCardDetails.Update(adColor, mediaAsset, rateCard, table));¶        }¶¶        public void DeleteRateCardDetailsMatrix(string mediaAsset, string rateCard, string adColor)¶        {¶            var user = User(mediaAsset);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            Table table = new Table(new string[] { "Ad size", "Frequency" });¶            table.AddRow(new string[] { "Full Page", "1" });¶            table.AddRow(new string[] { "Back Cover", "3" });¶            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);¶            CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);¶            user.AttemptsTo(AdjustRateCardDetails.Delete(adColor, mediaAsset, rateCard));¶        }¶¶        public void VerifyDeletedRateCardDetailsMatrix(string adColor)¶        {¶            var user = User(adColor);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.Verifies(AdjustRateCardDetails.Delete(adColor));¶        }¶        #endregion¶¶        #region remove x icon from rate cards details¶        /// <summary>¶        /// Create media asset and navigate to rate card details screen¶        /// </summary>¶        /// <param name="mediaAsset">Navigate to rate card details for media asset</param>¶        public void CreateMediaAssetAndNavigateToRateCardsDetailsScreen(string mediaAsset)¶        {¶            var user = User(mediaAsset);¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, "ACRP21d", string.Empty, null);¶            var adSizeList = new List<string>() { "Full Page" };¶            CreateAdSizeIfNotExist(user, mediaAsset, "ACRP21d", adSizeList);¶            var frequencyList = new List<string>() { "5" };¶            CreateFrequencyIfNotExist(user, mediaAsset, "ACRP21d", frequencyList);¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.AdSizeSelect));¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("AdSizeValue", adSizeList[0].ToString())));¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.FrequencySelect));¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.GetOptionFromMultiSelectXPath("FrequencyValue", frequencyList[0].ToString())));¶        }¶¶        /// <summary>¶        /// Verify clear all icon is not display on screen¶        /// </summary>¶        public void VerifyClearAllIconNotExist()¶        {¶            var user = User("");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.AdSizeClearAllIcon), IsEqualTo.False());¶")
Diff(DELETE,"")
Diff(EQUAL,"            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.FrequencyClearAllIcon), IsEqualTo.False());¶        }¶        #endregion")
Diff(INSERT,"¶¶        #region remove ad size and frequency from rate cards details¶        public void UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(string mediaAsset, string rateCard, string adColor, Table table)¶        {¶            var user = User(mediaAsset);¶            CreatePreRequisiteDataForRateCardDetails(user, mediaAsset, rateCard, adColor, table);¶            CreateMatrixIfNotExist(user, mediaAsset, rateCard, adColor, table);¶            user.AttemptsTo(Select.ByText(RateCardDetailsSetting.AdColorSelect, adColor));¶            user.WaitsUntil(Existence.Of(RateCardDetailsSetting.ProgressLoader), IsEqualTo.False());¶            user.AttemptsTo(ScrollToElement.At(RateCardDetailsSetting.AdColorSelect, true));¶            List<RateCardDetailList> rateCardDetailList;¶            rateCardDetailList = table.CreateSet<RateCardDetailList>().ToList<RateCardDetailList>();¶            foreach (RateCardDetailList rateCardDetail in rateCardDetailList)¶            {¶                if (!string.IsNullOrEmpty(rateCardDetail.AdSize))¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.AdSize)));¶                if (!string.IsNullOrEmpty(rateCardDetail.Frequency))¶                    user.AttemptsTo(Click.On(RateCardDetailsSetting.GetRemovedIconWithValue(rateCardDetail.Frequency)));¶            }¶            user.AttemptsTo(Click.On(RateCardDetailsSetting.CreateMatrix));¶        }¶¶        public void VerifyMessage(string message)¶        {¶            var user = User("");¶            user.AskingFor(Text.Of(RateCardDetailsSetting.ContentPanel)).Should().Contain(message);¶        }¶        #endregion")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Advertising/Settings/MediaAsset/RateCardDetailsTestMethod.cs)
Diff(EQUAL,"{¶    public class AccountPageTestMethods : TestMethodBase¶    {¶        public AccountPageTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            AccountPageStaff = new AccountPageStaff();¶            AccountPage = new AccountPage();¶        }¶¶        AccountPageStaff AccountPageStaff { get; set; }¶        AccountPage AccountPage { get; set; }¶¶        string PartyDesignation { get; set; }¶¶        /// <summary>¶        /// Modifies the User Account page email¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        /// <param name="email">User email</param>¶        public void GreenPathUpdateAccountPageEmail(string partyID, string email)¶        {¶            EditAccountPageContactPanel(partyID);¶            ModifyAccountPageEmail(email);¶        }¶¶        /// <summary>¶        /// Modifies the User Account page email with invalid information¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        /// <param name="email">User email</param>¶        public void NegativePathUpdateAccountPageEmail(string partyID, string email)¶        {¶            EditAccountPageContactPanel(partyID);¶            ModifyAccountPageEmailNegativePath(email);¶        }¶¶        /// <summary>¶        /// Verifies the email was updated successfully on User Account Page¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        /// <param name="email">User email</param>¶        public void VerifyAccountPageEmailUpdated(string partyID, string email)¶        {¶            var user = User("AccountPageEmailVerificationUser");¶            EditAccountPageContactPanel(partyID);¶            user.AsksFor(ValueAttribute.Of(PersonalInformationPanel.Email)).Should().Be(email);¶        }¶¶        /// <summary>¶        /// Verifies the email was not updated succesfully on User Account page¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        /// <param name="email">User email</param>¶        public void VerifyAccountPageEmailNotUpdated(string partyID, string email)¶        {¶            var user = User("AccountPageEmailVerificationUser");¶            EditAccountPageContactPanel(partyID);¶            user.AsksFor(ValueAttribute.Of(PersonalInformationPanel.Email)).Should().NotBe(email);¶        }¶¶        /// <summary>¶        /// Navigates to the User Account About page and clicks the edit button¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        public void EditAccountPageContactPanel(string partyID)¶        {¶            var user = User("EditAccountPageEmailUser");¶            user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(partyID)));¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("About")));¶            user.AttemptsTo(Waiting.ForPageReload()); //Tab needs time to refresh¶            user.AttemptsTo(ScrollToElement.At(AccountPageStaff.AboutTab.PersonalInformation.EditButton));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(AccountPageStaff.AboutTab.PersonalInformation.EditButton).AndUseJavaScript());¶            user.AttemptsTo(Waiting.InSeconds(4)); //UpdatePanel spinner needs time to refresh¶        }¶¶        /// <summary>¶        /// Modifes the User Accounnt page with email and saves the content¶        /// </summary>¶        /// <param name="email">User email</param>¶        public void ModifyAccountPageEmail(string email)¶        {¶            var user = User("ModifyAccountPageEmailUser");¶            user.AttemptsTo(SendKeys.To(PersonalInformationPanel.Email, email));¶            user.AttemptsTo(ClickCommandButton.Save().AndUseJavaScript());¶        }¶¶        /// <summary>¶        /// Modify the User Account page with email that is invalid and saves the content¶        /// </summary>¶        /// <param name="email">User email</param>¶        public void ModifyAccountPageEmailNegativePath(string email)¶        {¶            var user = User("ModifyAccountPageEmailUser");¶            user.AttemptsTo(SendKeys.To(PersonalInformationPanel.Email, email));¶            user.AttemptsTo(ClickCommandButton.Save().AndUseJavaScript());¶            ElementMessageState.CheckError(PersonalInformationPanel.Email).WithMessage("Invalid email address.");¶        }¶¶        /// <summary>¶        /// Navigates to a account page and clicks transactions tab to access payments grid¶        /// </summary>¶        /// <param name="partyID">User ID</param>¶        public void AccountPageTransactionsPayments(string accountPageType, string partyID)¶        {¶            var user = LoggedInUser();¶            if (accountPageType.Equals("staff", System.StringComparison.InvariantCultureIgnoreCase))¶            {¶                user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(partyID)));¶                user.AttemptsTo(Click.On(AccountPageStaff.Tab("Transactions")));¶                user.WaitsUntil(Appearance.Of(AccountPageStaff.TransactionsTab.Payments.ResultsGrid.Grid), IsEqualTo.True());¶                user.AttemptsTo(ScrollToElement.At(AccountPageStaff.TransactionsTab.Payments.ResultsGrid.Grid));¶            }¶            if (accountPageType.Equals("member", System.StringComparison.InvariantCultureIgnoreCase))¶            {¶                user.AttemptsTo(Browse.InImis(AccountPage.Url(partyID)));¶                user.AttemptsTo(Click.On(AccountPage.Tab("Transactions")));¶                user.WaitsUntil(Appearance.Of(AccountPage.TransactionsTab.Payments.ResultsGrid.Grid), IsEqualTo.True());¶                user.AttemptsTo(ScrollToElement.At(AccountPage.TransactionsTab.Payments.ResultsGrid.Grid));¶            }¶        }¶¶        /// <summary>¶        /// Verify print receipt exists¶        /// </summary>¶        public void PaymentsPrintReceipt()¶        {¶            var user = LoggedInUser();¶            user.AsksFor(Appearance.Of(AccountPageStaff.TransactionsTab.Payments.ResultsGrid.CellLinkWithText("Print receipt"))).Should().BeTrue();¶            user.AttemptsTo(Click.On(AccountPageStaff.TransactionsTab.Payments.ResultsGrid.CellLinkWithText("Print receipt")));¶        }¶¶        public void OpenMiniProfileEditor(string partyID) ¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(partyID)));¶           ")
Diff(DELETE," //")
Diff(EQUAL," user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.EditButton));¶")
Diff(DELETE,"            var xp = By.XPath("//div[@id='ctl01_TemplateBody_WebPartManager1_gwpciMiniProfile_ciMiniProfile_EditButtonPlaceHolder']/a");¶            user.AttemptsTo(Click.On(new WebLocator("",xp)));¶")
Diff(EQUAL,"            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        }¶¶        public void AddNewDesignationToParty() ¶        {¶            string code = TestHelper.GenerateRandomString(5);¶            string description = TestHelper.GenerateRandomName("Description");¶")
Diff(DELETE,"            // jkh, it seems to be losing the code here.¶")
Diff(EQUAL,"            PartyDesignation = $"")
Diff(INSERT,"({code})")
Diff(EQUAL,"{description}";¶¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.ContactName.ChosenContainer));¶            user.AttemptsTo(SendKeys.To(AccountPageStaff.MiniProfile.ContactName.Designation, PartyDesignation));¶            user.AttemptsTo(Click.On(AccountPageStaff.MiniProfile.ContactName.AddDesignation));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶")
Diff(DELETE,"            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶")
Diff(EQUAL,"        }¶¶        public void VerifyPartyDesignationDisplays() ¶        {¶            var user = LoggedInUser();¶           ")
Diff(DELETE," // jkh(remove)")
Diff(EQUAL," user.AttemptsTo(Waiting.InSeconds(3)); //UpdatePanel partial update ¶            ")
Diff(DELETE,"for (var i=0; i<30; i++) {¶                // jkh this is broken, the names have changed.¶                //var xp = AccountPageStaff.MiniProfile.ContactName.FullName;¶                var xp = new WebLocator("fullname", By.XPath("//*[contains(@id,'fullName')]"));¶                string x = user.AsksFor(Text.Of(xp));¶                if (x")
Diff(INSERT,"user.AsksFor(Text.Of(AccountPageStaff.MiniProfile.ContactName.FullName)).Should()")
Diff(EQUAL,".Contain")
Diff(DELETE,"s")
Diff(EQUAL,"(PartyDesignation)")
Diff(DELETE,"){¶                    return;¶                }¶            }¶            throw new Exception($"Text did not contain {PartyDesignation}")")
Diff(EQUAL,";¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Staff/AccountPageTestMethods.cs)
Diff(EQUAL,"{¶    public class EventTestMethods : TestMethodBase¶    {¶        public EventTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            EventDashboardPage = new EventDashboardPage();¶        ")
Diff(DELETE,"}¶¶        public EventDashboardPage EventDashboardPage;")
Diff(INSERT,"    EventStaffFunctionDisplayPage = new EventStaffFunctionDisplayPage();¶            EventStaffFunctionDialog = new EventStaffFunctionDialog();¶            EventPricingGroupDialogPage = new EventPricingGroupDialogPage();¶            EventPricingGroup = new EventPricingGroup("");¶        }¶¶        public EventDashboardPage EventDashboardPage;¶        public EventStaffFunctionDisplayPage EventStaffFunctionDisplayPage;¶        public EventStaffFunctionDialog EventStaffFunctionDialog;¶        public EventPricingGroupDialogPage EventPricingGroupDialogPage;¶        public EventPricingGroup EventPricingGroup;¶")
Diff(EQUAL,"¶        /// <summary>¶        /// Changes the event name when on the event dashboard page¶        /// </summary>¶        /// <param name="createEventData">Data being passed through the feature file</param>¶        public void ChangeEventName(CreateEventData createEventData)¶        {¶            var user = User("ChangeEventName");¶            user.AttemptsTo(Click.On(EventDashboardPage.EventDisplay.EditButton));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(SendKeys.To(EventDashboardPage.EventEdit.EventName, createEventData.EventName).UsingClearMethod());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶        }¶¶        /// Ver")
Diff(INSERT,"i")
Diff(EQUAL,"fies the title of the event¶        /// </summary>¶        /// <param name="CreateEventData">Table set data from feature file</param>¶        public void VerifyCancelEvent()¶        {¶            var user = User("VerifyCancelEvent");¶            user.")
Diff(DELETE,"WaitsUntil")
Diff(INSERT,"AsksFor")
Diff(EQUAL,"(UserMessageState.HasWarnings().WithMessage("Event has a status of Cancelled")")
Diff(DELETE,",IsEqualTo.True());¶            //")
Diff(INSERT,")")
Diff(EQUAL,".Should().BeTrue();¶        }¶¶        public void CancelEvent()¶        {¶            var user = User("CancelEvent");¶            //Clicking Event Edit button ¶            user.AttemptsTo(Click.On(EventDashboardPage.EventDisplay.EditButton));¶            //Switching to pop-up (iframe) window e.g Edit window of Event¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            //Clicking Event Cancel button ¶            user.AttemptsTo(ClickCommandButton.Continue());¶            //Click Cancel button¶            user.AttemptsTo(Hover.Over(EventDashboardPage.EventEdit.ConfirmCancelButton));¶            user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.ConfirmCancelButton));¶            //Clicking Event "Save and Exit" button ¶")
Diff(DELETE,"            // so this is not happening - why?¶")
Diff(EQUAL,"            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            //Switching to the Main Page¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶        }¶")
Diff(INSERT,"        public void AddAResourceWithQuantity(decimal decimalQuantity)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(EventDashboardPage.EventProgramDisplay.ListFunctions.CellLinkWithText("Video Access")));¶            user.AttemptsTo(Click.On(EventStaffFunctionDisplayPage.FunctionDisplay.EditButton));¶            var resourcesRadGrid = EventStaffFunctionDialog.EventResources.ResourcesRadGrid;¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(Click.On(EventStaffFunctionDialog.FunctionEdit.Tabs.GetTab("Plan")));¶            user.AttemptsTo(Click.On(resourcesRadGrid.AddNew));¶            var quantityBox = resourcesRadGrid.Cell(3, 2, postXPath: "/input", tableSection: "thead"); ;¶            user.AttemptsTo(SendKeys.To(quantityBox, decimalQuantity.ToString()).UsingClearMethod());¶            user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));¶            var ButtonExists = user.AsksFor(Existence.Of(resourcesRadGrid.SaveNewButton));¶            if (ButtonExists) //only works in debug without second attempt :)¶                user.AttemptsTo(Click.On(resourcesRadGrid.SaveNewButton));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶¶        }¶¶        public void VerifyTheResourceIs(decimal decimalQuantity)¶        {¶            var user = LoggedInUser();¶            user.WaitsUntil(Existence.Of(EventStaffFunctionDisplayPage.ResourcesRadGrid.Cell(decimalQuantity.ToString(),exactMatch: true)), IsEqualTo.True());¶¶        }¶        public void DeleteTheEventButDontExit()¶        {¶¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(EventDashboardPage.EventDisplay.EditButton));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.DeleteEvent));¶            user.AttemptsTo(Hover.Over(EventDashboardPage.EventEdit.ConfirmDeleteButton));¶            user.AttemptsTo(Click.On(EventDashboardPage.EventEdit.ConfirmDeleteButton));¶            user.WaitsUntil(UserMessageState.HasWarnings().WithMessage("Event delete submitted for processing."), IsEqualTo.True());¶        }¶¶        public void VerifyTheCancelButtonIsGreyedOut()¶        {¶            var user = LoggedInUser();¶            var cancelButton = ClickCommandButton.ButtonLocator(ClickCommandButton.CommandButtonBarButtons.CloseButton);¶            user.WaitsUntil(EnabledState.Of(cancelButton),IsEqualTo.False());¶        }¶¶        public void AddEventPricingGroup(Table table)¶        {¶            var user = LoggedInUser();¶¶            foreach (var row in table.Rows)¶            {¶                row.TryGetValue("EventKey", out string eventKey);¶                row.TryGetValue("FunctionKey", out string functionKey);¶                row.TryGetValue("GroupType", out string groupType);¶                row.TryGetValue("Group", out string group);¶                row.TryGetValue("Role", out string role);¶¶                var functionEditShortcut = new ImisUrl("FunctionEdit");¶                functionEditShortcut.AddParameter("EventKey", eventKey);¶                functionEditShortcut.AddParameter("FunctionKey", functionKey);¶                user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));¶¶                user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, functionKey)));¶¶                user.WaitsUntil(Existence.Of(EventPricingGroup.DisplayNameTextBox), IsEqualTo.True());¶¶                string randNumber = TestHelper.GenerateRandomString(4);¶¶                if (!string.IsNullOrEmpty(groupType) && string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))¶                {¶                    string name = $"A-{randNumber}(GroupType Only:{groupType})";¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));¶¶                    user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));¶                }¶                else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && string.IsNullOrEmpty(role))¶                {¶                    string name = $"B-{randNumber}(Group Only:{group})";¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));¶¶                    SelectGroup(user, group);¶                }¶                else if (string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))¶                {¶                    string name = $"C-{randNumber}(Group:{group}) w/Role";¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));¶¶                    SelectGroup(user, group);¶                    SelectRole(user, role);¶                }¶                else if (!string.IsNullOrEmpty(groupType) && !string.IsNullOrEmpty(group) && !string.IsNullOrEmpty(role))¶                {¶                    string name = $"D-{randNumber}(GroupType:{groupType} w/Group:{group}) w/Role";¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.DisplayNameTextBox, name));¶¶                    user.AttemptsTo(SetWhenProvided.DropDown(EventPricingGroup.GroupTypeDropDownList, groupType));¶¶                    SelectGroup(user, group);¶                    SelectRole(user, role);¶                }¶¶                user.AttemptsTo(ClickCommandButton.Ok());¶¶            }¶        }¶¶        private void SelectGroup(ImisUser user, string group)¶        {¶            if (group.Contains(","))¶            {¶                var g = group.Split(",");¶                foreach (var i in g)¶                {¶                    user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, i.ToString()));¶                    user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));¶                }¶            }¶            else¶            {¶                user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.SearchField));¶                user.AttemptsTo(SendKeys.To(EventPricingGroup.GroupSelector.SearchField, group));¶                user.AttemptsTo(Click.On(EventPricingGroup.GroupSelector.ActiveItem));¶            }¶        }¶¶        private void SelectRole(ImisUser user, string role)¶        {¶            if (role.Contains(","))¶            {¶                var r = role.Split(",");¶                foreach (var i in r)¶                {¶                    user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));¶                    user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, i.ToString()));¶                    user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));¶                }¶            }¶            else¶            {¶                user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.SearchField));¶                user.AttemptsTo(SendKeys.To(EventPricingGroup.RoleSelector.SearchField, role));¶                user.AttemptsTo(Click.On(EventPricingGroup.RoleSelector.ActiveItem));¶            }¶        }¶¶        public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey) ¶        {¶            var user = LoggedInUser();¶¶            string eventFunctionKey = $"{eventKey}/{functionKey}";¶            var functionEditShortcut = new ImisUrl("FunctionEdit");¶            functionEditShortcut.AddParameter("EventKey", eventKey);¶            functionEditShortcut.AddParameter("FunctionKey", eventFunctionKey);¶            user.AttemptsTo(Browse.InStaffSite(functionEditShortcut));¶            user.AttemptsTo(Browse.InStaffSite(EventPricingGroupDialogPage.Url(eventKey, eventFunctionKey)));     ¶        }¶¶        public void SelectExistingPricingGroups()¶        {¶            var user = LoggedInUser();¶       ¶            user.WaitsUntil(Existence.Of(EventPricingGroup.UseExistingRadioButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(EventPricingGroup.UseExistingRadioButton));¶¶            user.WaitsUntil(Appearance.Of(EventPricingGroup.ExistingPriceSheetsDropDownList), IsEqualTo.True());¶            user.AttemptsTo(Click.On(EventPricingGroup.ExistingPriceSheetsDropDownList));¶¶            var priceSheetsDropDownList = user.AskingFor(SelectOptionsAvailable.For(EventPricingGroup.ExistingPriceSheetsDropDownList));¶¶            for (int i = 1; i < priceSheetsDropDownList.Count; i++)¶            {¶                user.AttemptsTo(Select.ByIndex(EventPricingGroup.ExistingPriceSheetsDropDownList, i));¶¶                string selectedItem = user.AsksFor(SelectedOptionText.Of(EventPricingGroup.ExistingPriceSheetsDropDownList));¶¶                if (selectedItem.Contains("(GroupType Only:Committee)"))¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Committee groups"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                }¶                else if (selectedItem.Contains("(GroupType Only:Member Type)")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Member Type groups"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                }¶                else if (selectedItem.Contains("(GroupType Only:Chapter)")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All Chapter groups"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                }¶                else if (selectedItem.Contains("(Group Only:Harris County Chapter)")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Harris County Chapter group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                }¶                else if (selectedItem.Contains("(Group Only:Professional Member)")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Professional Member group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                }¶                else if (selectedItem.Contains("(Group:Membership Committee) w/Role")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Membership Committee group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("President role"));¶                }¶                else if (selectedItem.Contains("(Group:Awards Committee,East Chapter) w/Role")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("East Chapter group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("All roles"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Awards Committee group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Secretary role"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Compliance Officer role"));¶                }¶                else if (selectedItem.Contains("GroupType:Committee w/Group:Governmental")) ¶                {¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Governmental Affairs Committee group"));¶                    user.WaitsUntil(Text.Of(EventPricingGroup.PreviewPanel), ContainsSubstring.Text("Committee Administrator role"));¶                }¶            }¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Events/EventTestMethods.cs)
Diff(EQUAL,"{¶    public class ContactTestMethods : TestMethodBase¶    {¶        public ContactTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            FindContactsPage = new FindContactsPage();¶            AccountPageStaff = new AccountPageStaff();¶        }¶¶        public FindContactsPage FindContactsPage { get; set; }¶        public AccountPageStaff AccountPageStaff { get; set; }¶        public void FindContact(string lastName, string firstName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));¶        }¶¶")
Diff(INSERT,"        public void FindContactByEmail(string email)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));¶        }¶¶        public void VerifyContactExistsByEmail(string email)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all criteria (multi select fields)", "Email contains")).Textbox, email));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.Cell(1, 8))).Trim().Should().Be(email);¶        }¶¶")
Diff(EQUAL,"        public void VerifyLoggedInUserContact(string lastName, string firstName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "First name starts with")).Textbox, firstName));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("By all common criteria", "Last name starts with")).Textbox, lastName));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AsksFor(Text.Of(FindContactsPage.SelectAQuery.FirstCell)).Should().Contain("There are no records.");¶¶        }¶¶        public void VerifyOpenPledge()¶        {¶            var user = LoggedInUser();¶            FindContact(_context.GetData<string>("FirstName"), _context.GetData<string>("LastName"));¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Giving")));¶            user.AttemptsTo(Click.On(AccountPageStaff.GivingTab.OpenInvoiceListDisplay.OpenInvoicesGrid.Cell(1,2)));¶        }¶")
Diff(INSERT,"¶        public void AddNewContact(ContactData contactData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(AddContact.AddIndividual(contactData));¶        }¶¶        /// <summary>¶        /// Add a new contact with a random name¶        /// </summary>¶        public void AddNewRandomContact()¶        {¶            var user = LoggedInUser();¶            // create a new contact¶            var contact = new ContactData()¶            {¶                FirstName = $"{TestHelper.GenerateRandomString(5)}First",¶                MiddleName = $"{TestHelper.GenerateRandomString(5)}Middle",¶                LastName = $"{TestHelper.GenerateRandomString(5)}Last",¶            };¶            contact.Email = $"{contact.LastName}@netfake.com";¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶        }¶¶        /// <summary>¶        /// Add a new duplicate contact from exisiting contact name saved in the context¶        /// </summary>¶        public void AddANewDuplicateContactFromContext()¶        {¶            var user = LoggedInUser();¶            // create a new dupe contact from context¶            var contact = new ContactData()¶            {¶                FirstName = _context.GetData<string>("FirstName"),¶                MiddleName = _context.GetData<string>("MiddleName"),¶                LastName = _context.GetData<string>("LastName"),¶                Email = _context.GetData<string>("Email"),¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Community/ContactTestMethods.cs)
Diff(EQUAL,"{¶    public class BillingFinanceTestMethods : TestMethodBase¶    {¶        public BillingFinanceTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            BillingCyclesPage = new BillingCyclesPage();¶            GenerateRenewalsPage = new GenerateRenewalsPage();¶            AccountPageStaff = new AccountPageStaff();¶            AccountPage = new AccountPage();¶            ManageExpiredMembersPage = new ManageExpiredMembersPage();¶            Cart = new Cart();¶            OrderConfirmation = new OrderConfirmation();¶            FindProductsPage = new FindProductsPage();¶            CustomerTypesPage = new CustomerTypesPage();¶            JoinNowPage = new JoinNowPage();¶            AccountArea = new AccountArea("AccountArea");¶            BillingProductsPage = new BillingProductsPage();¶            ProratingRulesPage = new ProratingRulesPage();¶            ProratingScheduleCreatorDialog = new ProratingScheduleCreatorDialog();¶            AddContactPage = new AddContactPage();¶            ")
Diff(DELETE,"ProductDisplayPage = new ProductDisplay")
Diff(INSERT,"AssocMemberJoinPage = new AssocMemberJoinPage();¶¶            ItemPage = new Item")
Diff(EQUAL,"Page();¶        }¶¶        private BillingCyclesPage BillingCyclesPage { get; set; }¶        private GenerateRenewalsPage GenerateRenewalsPage { get; set; }¶        private AccountPageStaff AccountPageStaff { get; set; }¶        private AccountPage AccountPage { get; set; }¶        private ManageExpiredMembersPage ManageExpiredMembersPage { get; set; }¶        private Cart Cart { get; set; }¶        private OrderConfirmation OrderConfirmation { get; set; }¶        private FindProductsPage FindProductsPage { get; set; }¶        private CustomerTypesPage CustomerTypesPage { get; set; }¶        private JoinNowPage JoinNowPage { get; set; }¶        private AccountArea AccountArea { get; set; }¶        private BillingProductsPage BillingProductsPage { get; set; }¶        private ProratingRulesPage ProratingRulesPage { get; set; }¶        private ProratingScheduleCreatorDialog ProratingScheduleCreatorDialog { get; set; }¶        private AddContactPage AddContactPage { get; set; }¶        private ")
Diff(DELETE,"ProductDisplayPage ProductDisplay")
Diff(INSERT,"ItemPage ItemPage { get; set; }¶        public AssocMemberJoinPage AssocMemberJoin")
Diff(EQUAL,"Page { get; ")
Diff(DELETE,"}")
Diff(INSERT,"set; }¶")
Diff(EQUAL,"¶¶        /// <summary>¶        /// Change Billing Cycle Accounting Method¶        /// </summary>¶        /// <param name="billingCycle"></param>¶        /// <param name="accountingMethod"></param>¶        public void ChangeBillingCycleAccountMethod(string billingCycle, string accountingMethod)¶        {¶            var user = User("ChangeBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            // navigate straight to Billing Cycle page¶            user.AttemptsTo(Browse.InImis(BillingCyclesPage.BaseUrl));¶            // click on given Billing Cycle name in Billing Cycle Table to load its detail page¶            user.AttemptsTo(Click.On(BillingCyclesPage.BillingCycleGrid.CellLinkWithText(text: billingCycle)));¶            // change to given accounting method¶            user.AttemptsTo(Select.ByValue(BillingCycleDetailPage.AccountingMethodDropDown, accountingMethod));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        /// <summary>¶        /// Verify Billing Cycle Accounting Method¶        /// </summary>¶        /// <param name="billingCycle"></param>¶        /// <param name="accountingMethod"></param>¶        public void VerifyBillingCycleAccountMethod(string billingCycle, string accountingMethod)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            // navigate straight to Billing Cycle page¶            user.AttemptsTo(Browse.InImis(BillingCyclesPage.BaseUrl));¶            // click on given Billing Cycle name in Billing Cycle Table to load its detail page¶            user.AttemptsTo(Click.On(BillingCyclesPage.BillingCycleGrid.CellLinkWithText(text: billingCycle)));¶            // verify given billing cycle¶            var verification = user.AsksFor(ValueAttribute.Of(BillingCycleDetailPage.AccountingMethodDropDown));¶            verification.Should().Be(accountingMethod);¶        }¶¶        /// <summary>¶        /// Generate a Renewals Billing Run¶        /// </summary>¶        /// <param name="billingCycle"></param>¶        /// <param name="accountingMethod"></param>¶        public void GenerateARenewalsBillingRun(Table table)¶        {¶            var user = User("GenerateRenewalsUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var renewalData = table.CreateInstance<RenewalData>();¶            // Generate a renewal based on the passed billingCycle¶            switch (renewalData.BillingCycle)¶            {¶                case "Associate Membership Fees":¶                    user.AttemptsTo(GenerateRenewals.WithAssociateMembership(renewalData.BillingRunName));¶                    break;¶                case "Regular Membership Fees":¶                    user.AttemptsTo(GenerateRenewals.WithRegularMembership(renewalData.BillingRunName));¶                    break;¶                case "Part-Time Professional":¶                    user.AttemptsTo(GenerateRenewals.WithPartTimeProfessional(renewalData.BillingRunName));¶                    break;¶                case "Professional Membership":¶                    user.AttemptsTo(GenerateRenewals.ProfessionalMembership(renewalData.BillingRunName, renewalData));¶                    break;¶                case "List Billing":¶                    user.AttemptsTo(GenerateRenewals.ListBillingMembership(renewalData.BillingRunName, renewalData));¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Verify Newest Renewals Billing Run¶        /// </summary>¶        /// <param name="accountingMethod"></param>¶        /// <param name="billingRunName"></param>¶        /// <param name="billingCycle"></param>¶        public void VerifyNewestRenewalsBillingRun(string accountingMethod, string billingRunName, string billingCycle)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            // Verify a renewal based on the passed billingCycle¶            switch (billingCycle)¶            {¶                case "Associate Membership Fees":¶                    user.Verifies(GenerateRenewals.WithAssociateMembership(billingRunName, accountingMethod));¶                    break;¶                case "Regular Membership Fees":¶                    user.Verifies(GenerateRenewals.WithRegularMembership(billingRunName, accountingMethod));¶                    break;¶                case "Part-Time Professional":¶                    user.Verifies(GenerateRenewals.WithPartTimeProfessional(billingRunName, accountingMethod));¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Manage Expired Members and change Type And New Member Type ¶        /// </summary>¶        /// <param name="expiredMemberType"></param>¶        /// <param name="newMemberType"></param>¶        /// <param name="newStatus"></param>¶        public void ManageExpiredMembers(string expiredMemberType, string newMemberType, string newStatus)¶        {¶            var user = User("VerifyBillingCycleUser");¶            // navigate straight to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(ManageExpiredMembersPage.BaseUrl));¶            // Select Current member of type - "Retired Member"¶            user.AsksFor(Appearance.Of(ManageExpiredMembersPage.CurrentMemberTypesDropDown));¶            user.AttemptsTo(Select.ByText(ManageExpiredMembersPage.CurrentMemberTypesDropDown, expiredMemberType));¶            // click check box "Include members with a blank paid-through date"¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.IncludeMembersWithoutPaidThroughDateCheckBox));¶            // set change date to future to pick up pre entered retired member¶            user.AttemptsTo(SendKeys.To(ManageExpiredMembersPage.PaidThroughDate.TextBox, DateTime.Now.AddYears(5).ToString()));¶            // Click "Find" to get a list of members¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.FindButton));¶            // save found contacts for later¶            string Name1 = user.AsksFor(Text.Of(ManageExpiredMembersPage.ManageExpiredMembersGrid.Cell(1, 2)));¶            // set New member type to Select "Non Member"¶            user.AttemptsTo(Select.ByText(ManageExpiredMembersPage.NewMemberTypeDropDown, newMemberType));¶            // change Status to "Active"¶            user.AttemptsTo(Select.ByText(ManageExpiredMembersPage.NewMemberStatusDropDown, "Active"));¶            // click submet button¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.SubmitButton));¶            // wait till grid is hidden¶            user.AttemptsTo(Wait.Until(Appearance.Of(ManageExpiredMembersPage.ManageExpiredMembersGrid.Cell(1, 2)), IsEqualTo.False()));¶            // verify finished message¶            user.AttemptsTo(Wait.Until(Appearance.Of(ManageExpiredMembersPage.InfoMessage), IsEqualTo.True()));¶            user.AsksFor(Text.Of(ManageExpiredMembersPage.InfoMessage)).Should().Contain("members submitted for processing");¶            // go to logs page¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.TabGroup.GetTab("Logs")));¶            // wait till batch is completed before continuing¶            bool finishedProcessing = false;¶            do¶            {¶                user.AttemptsTo(Click.On(ManageExpiredMembersPage.LogsListGrid.RefreshButton));¶                if (user.AsksFor(Appearance.Of(ManageExpiredMembersPage.LogsListGrid.FirstCell)))¶                {¶                    if (user.AsksFor(Text.Of(ManageExpiredMembersPage.LogsListGrid.Cell(1, 2))).ToString() == "Completed") finishedProcessing = true;¶                }¶            } while (finishedProcessing == false);¶            // verify successfully completed message¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.LogsListGrid.RefreshButton));¶            user.AsksFor(Text.Of(ManageExpiredMembersPage.LogsListGrid.Cell(1, 2))).Should().Be("Completed");¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(ManageExpiredMembersPage.LogsListGrid.Cell(1, 7, true)));¶            //-- verify the members name from earlier¶            user.AsksFor(Text.Of(ManageExpiredMembersPage.LogsDetailsListGrid.CellLinkWithText(Name1)));¶            // verify you can click on name to jump to member account page¶            user.AttemptsTo(Click.On(ManageExpiredMembersPage.LogsDetailsListGrid.Cell(1, 2, true)));¶        }¶¶        /// <summary>¶        /// Verify Accounts Page Join Now button works¶        /// </summary>¶        public void VerifyAccountsPageJoinNowButtonWorks()¶        {¶            var user = User("VerifyBillingCycleUser");¶            // check that RenewNow button can be pressed¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            if (user.AsksFor(Appearance.Of(AccountPageStaff.RenewalButton.JoinNowButton)))¶                user.AttemptsTo(Click.On(AccountPageStaff.RenewalButton.JoinNowButton));¶        }¶¶¶        /// <summary>¶        /// Selects a product by text from the Join Now Product page¶        /// </summary>¶        /// <param name="product"></param>¶        public void ClickJoinProduct(Table table)¶        {¶            var user = User("JoinProductNowUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var product = table.CreateInstance<OrderConfirmationData>();¶            SelectMembership(product.Product);¶            user.AttemptsTo(Click.On(")
Diff(DELETE,"ProductDisplayPage.ProceedToCart")
Diff(INSERT,"ItemPage.CartCheckoutButtonLink.RedirectToCartButton")
Diff(EQUAL,"));¶            user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2)), ContainsSubstring.Text(product.Product));¶            //Applies open credit¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.ApplyOpenCredit));¶            user.AttemptsTo(SwitchFrame.ToObjectBrowser());¶            //Clicks Find User Button¶            var query = Cart.OpenCreditDisplay.FinderAdderControl.FinderAdder.Queries.Get("Query");¶            user.AttemptsTo(Click.On(query.Find));¶            //Clicks on James Luckey Cell¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.FinderAdderControl.FinderAdder.Cell(6, 1)));¶            //Applies open credit¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.FinderAdderApplyButton));¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            //Verifies contents on Cart charges table¶            user.WaitsUntil(Text.Of(Cart.CartCharges.AppliedCredit), ContainsSubstring.Text(product.AppliedCredit));¶            user.WaitsUntil(Text.Of(Cart.OpenCreditDisplay.CreditAmount), ContainsSubstring.Text(product.TotalAmount));¶            //Views applied open credit details¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.ViewDetails));¶            user.AsksFor(Text.Of(Cart.OpenCreditDisplay.AppliedInvoicesCredit.Cell(1, 1))).Should().Be("R142");¶            user.AsksFor(Text.Of(Cart.OpenCreditDisplay.AppliedInvoicesCredit.Cell(1, 2))).Should().Be("James Luckey");¶            user.AsksFor(Text.Of(Cart.OpenCreditDisplay.AppliedInvoicesCredit.Cell(1, 3))).Should().Be(product.TotalAmount);¶            //Clicks Submit Order¶            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶        }¶¶        public void VerifyOrderConfirmation(Table table)¶        {¶            var user = User("VerifyOrderConfirmation");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var orderConfirmation = table.CreateInstance<OrderConfirmationData>();¶            user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.AppliedCredit), ContainsSubstring.Text(orderConfirmation.AppliedCredit));¶            user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount), ContainsSubstring.Text(orderConfirmation.TransTotalAmount));¶            user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.BillTo), ContainsSubstring.Text(orderConfirmation.BillTo));¶            user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.GrandTotalAmount), ContainsSubstring.Text(orderConfirmation.GrandTotalAmount));¶            user.WaitsUntil(Text.Of(OrderConfirmation.ContentPanel), ContainsSubstring.Text(orderConfirmation.LineItem));¶¶        }¶¶        /// <summary>¶        /// Search for product¶        /// </summary>¶        public void SearchForProduct(Table table)¶        {¶            var user = User("SearchForProduct");¶            //Add product to cart¶            var product = table.CreateInstance<OrderConfirmationData>();¶            user.AttemptsTo(Browse.InImis(FindProductsPage.BaseUrl));¶            user.AttemptsTo(Click.On(FindProductsPage.ProductSearch.SearchResults.CellSpanLinkWithText(product.Product)));¶            user.AttemptsTo(Click.On(")
Diff(DELETE,"ProductDisplayPage.AddToCart));¶            user.AttemptsTo(Click.On(ProductDisplayPage.ProceedToCart")
Diff(INSERT,"ItemPage.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));¶            user.AttemptsTo(Click.On(ItemPage.CartCheckoutButtonLink.RedirectToCartButton")
Diff(EQUAL,"));¶            //Will need to later find a way to dynamically search the shopping cart grid for products based off data from feature file¶            user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2)), ContainsSubstring.Text(product.Product));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.TotalAmount), ContainsSubstring.Text(product.TotalAmount));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.ShippingAmount), ContainsSubstring.Text(product.ShippingAmount));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.HandlingAmount), ContainsSubstring.Text(product.HandlingAmount));¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.ApplyButton));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.GrandTotalAmount), ContainsSubstring.Text(product.GrandTotalAmount));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.AppliedCredit), ContainsSubstring.Text(product.AppliedCredit));¶            user.WaitsUntil(EnabledState.Of(Cart.OpenCreditDisplay.RemoveOpenCreditButton), IsEqualTo.True());¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.RemoveOpenCreditButton));¶            //Need to repeat to make sure it is successfuly repeatedly¶            user.AttemptsTo(Click.On(Cart.OpenCreditDisplay.ApplyButton));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.GrandTotalAmount), ContainsSubstring.Text(product.GrandTotalAmount));¶            user.WaitsUntil(Text.Of(Cart.CartCharges.AppliedCredit), ContainsSubstring.Text(product.AppliedCredit));¶            user.WaitsUntil(EnabledState.Of(Cart.OpenCreditDisplay.RemoveOpenCreditButton), IsEqualTo.True());¶            //Submit Order¶            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶        }¶¶        /// <summary>¶        /// Selects the Join product¶        /// </summary>¶        /// <param name="membership"></param>¶        public void SelectMembership(string membership)¶        {¶            var user = User("SelectMembership");")
Diff(DELETE,"            ")
Diff(EQUAL,"¶¶            switch (membership)¶            {¶                case "Associate Membership Fees":¶                    user.AttemptsTo(JoinNow.WithAssociateMembership());¶                    break;¶                case "Community Partner Membership":¶                    user.AttemptsTo(JoinNow.WithCommunityPartnerMembership());¶                    break;¶                case "Company Regular Membership":¶                    user.AttemptsTo(JoinNow.WithCompanyRegularMembership());¶                    break;¶                case "PartTime Professional":¶                    user.AttemptsTo(JoinNow.WithPartTimeProfessional());¶                    break;¶                case "Professional Membership":¶                    user.AttemptsTo(JoinNow.WithProfessionalMembership());¶                    break;¶                case "Regular Membership Fees":¶                    user.AttemptsTo(JoinNow.WithRegularMembership());¶                    break;¶                case "Retired Members":¶                    user.AttemptsTo(JoinNow.WithRetiredMembers());¶                    break;¶                case "Student Member Join":¶                    user.AttemptsTo(JoinNow.WithStudentMemberJoin());¶                    break;¶                case "Young Professional Membership":¶                    user.AttemptsTo(JoinNow.WithYoungProfessionalMembership());¶                    break;¶            }¶        }¶¶        /// <summary>¶        /// Generate Individual Membership Renewal For New Contact¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void GenerateIndividualMembershipRenewalForNewContact(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // create a new contact¶            var contact = new ContactData()¶            {¶                FirstName = bList.ContactFirstName,¶                MiddleName = "",¶                LastName = bList.ContactLastName,¶                Email = "",¶                Organization = ""¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶            // goto to new contacts membership tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));¶            // wait for membership details¶            user.AttemptsTo(Wait.Until(Appearance.Of(AccountPageStaff.MembershipTab.PanelEditor.EditButton), IsEqualTo.True()));¶            user.AttemptsTo(Hover.Over(AccountPageStaff.MembershipTab.PanelEditor.EditButton));¶            // edit membership details - need to click it multiple times to ensure that the click registers otherwise it sometimes fails¶            for (int x")
Diff(DELETE,"=0;x<")
Diff(INSERT," = 0; x < ")
Diff(EQUAL,"8; x++)¶                user.AttemptsTo(Click.On(AccountPageStaff.MembershipTab.PanelEditor.EditButton));¶            // change member type to given membership type¶            user.AttemptsTo(Select.ByText(AccountPageStaff.MembershipTab.MembershipPanel.MemberTypeEdit, bList.MembershipType));¶            user.AttemptsTo(ClickCommandButton.Save());¶            // verify member type change¶            user.AsksFor(ValueAttribute.Of(AccountPageStaff.MembershipTab.MembershipPanel.MemberType)).Should().Be(bList.ProductCode);¶            // generate the new contacts renewals for given billing cycle type¶            user.AttemptsTo(Click.On(AccountPage.ActionsButtons.ActionsButton));¶            //user.AttemptsTo(Click.On(AccountPage.ActionsGenerateRenewals));¶            user.AttemptsTo(Click.On(AccountPageStaff.ActionsGenerateRenewals));¶            // select billing run type¶            user.AttemptsTo(Select.ByText(GenerateRenewalsPage.RunDetailsPage.BillingCycleDropDown, bList.ProductName));¶            // generate the run¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.RunDetailsPage.GenerateBillsButton));¶            // verify completed message¶            user.AsksFor(UserMessageState.HasAny().WithMessage("The " + bList.ProductName + " billing cycle has been submitted for processing.")).Should().BeTrue();¶        }¶¶¶        /// <summary>¶        /// Verify Billing Renewals Logs Data¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void VerifyBillingRenewalsLogsData(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            // navigate straight to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(GenerateRenewalsPage.BaseUrl));¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));¶            // cycle through given list now¶            var billingLookupTableList = billingTable.CreateSet<BillingLookUpTable>().ToList();¶            foreach (BillingLookUpTable bList in billingLookupTableList)¶            {¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for "")
Diff(DELETE,"+")
Diff(INSERT," + ")
Diff(EQUAL,"bList.ContactFirstName")
Diff(DELETE,"+" "+")
Diff(INSERT," + " " + ")
Diff(EQUAL,"bList.ContactLastName);¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 2))).Should().Contain(bList.ProductName);¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(bList.AccountingMethod);¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(DateTime.Now.ToShortDateString());¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 6))).Should().Contain(bList.Amount);¶            }¶¶        }¶¶        /// <summary>¶        /// Set Customer Type Default¶        /// </summary>¶        /// <param name="customerTypeName"></param>¶        /// <param name="customerTypeCode"></param>¶        /// <param name="defaultCode"></param>¶        public void SetCustomerTypeDefault(string CustomerTypeName, string defaultCode)¶        {¶            var user = User("SetCustomerTypeDefaultUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            // navigate straight to Customer Type page ¶            user.AttemptsTo(Browse.InImis(CustomerTypesPage.BaseUrl));¶            // - Select Customer Type from grid¶            user.AttemptsTo(Click.On(CustomerTypesPage.CustomerTypesGrid.CellLinkWithText(CustomerTypeName)));¶            // wait for appearence of customer dialog page¶            user.AsksFor(Appearance.Of(CustomerTypeDialogPage.DefaultProduct1DropDownList));¶            // check if use formula checkbox is not checked and check it if it isn't¶            if (user.AsksFor(SelectedState.Of(CustomerTypeDialogPage.UseFormulaCheckbox)).Equals(false))¶            {¶                user.AttemptsTo(SendKeys.To(CustomerTypeDialogPage.UseFormulaCheckbox, Keys.Space));¶            }¶            string fullDropDownName = (defaultCode + " - " + CustomerTypeName).Substring(0, 25) + "..."; // dropdown name is trimmed to 25 chars to match¶            user.AttemptsTo(Select.ByText(CustomerTypeDialogPage.DefaultProduct1DropDownList, fullDropDownName));¶            // save changes¶            user.AttemptsTo(ClickCommandButton.Save());¶            // verify saved message¶            user.AsksFor(UserMessageState.HasAny().WithMessage("Successfully saved")).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Submit order for Join Now Product for a New Contact¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void SubmitABillingOrderForNewContact(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // set the default product for the given billing product¶            SetCustomerTypeDefault(bList.MembershipType, bList.ProductCode);¶            // add a new contact¶            var contact = new ContactData()¶            {¶                FirstName = bList.ContactFirstName,¶                MiddleName = "",¶                LastName = bList.ContactLastName,¶                Email = "",¶                Organization = ""¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶            // Join given membership type¶            user.AttemptsTo(Click.On(AccountPageStaff.RenewalButton.JoinNowButton));¶            // click on create membership¶            //user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton ChildMooListView.CellLinkWithText(bList.MembershipType)));¶            user.AttemptsTo(Click.On(JoinNowPage.QueryMenu.ResultsGrid.CellLinkWithText(bList.MembershipType)));¶            // verify the product join and it's term span length¶            VerifyContactsJoinedProductTermSpanOf(bList.ProductName, bList.TermSpan.ToString());¶            // I submit the order with given options¶            ISubmitOrderForProductWithTermSpanAndPaymentOption(bList.ProductName, bList.TermSpan, bList.PayOption")
Diff(INSERT,", bList.PayNow")
Diff(EQUAL,");¶        }¶¶        /// <summary>¶        /// Submit order for Join Now Product¶        /// </summary>¶        /// <param name="productName"></param>¶        /// <param name="termSpan"></param>¶        /// <param name="pay")
Diff(DELETE,"Now")
Diff(EQUAL,"Option"></param>¶")
Diff(INSERT,"        /// <param name="shouldPayNow"></param>¶")
Diff(EQUAL,"        public void ISubmitOrderForProductWithTermSpanAndPaymentOption(string productName, int termSpan, string pay")
Diff(DELETE,"Now")
Diff(EQUAL,"Option")
Diff(INSERT,", bool shouldPayNow = false")
Diff(EQUAL,")¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            ")
Diff(DELETE,"// check if passed product name is the selected product in the product list¶            bool finishedloop = false;¶            int rowPos = 0;¶            do¶            {¶                if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)¶                {¶                    user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, rowPos))).Should().BeTrue();¶                    finishedloop = true;¶                }¶                rowPos++;¶            } while (finishedloop == false);")
Diff(INSERT,"EnsureProductIsSelected(user, productName);¶")
Diff(EQUAL,"¶            // click add to cart button¶            user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));¶            // verify cart message¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.ItemAddedMessageLabel)")
Diff(DELETE,").Should().B")
Diff(INSERT,", IsEqualTo.Valu")
Diff(EQUAL,"e("This item has been added to your cart")")
Diff(INSERT,")")
Diff(EQUAL,";¶            // now proceed to checkout¶            user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.RedirectToCartButton));¶            //  ")
Diff(DELETE,"submi")
Diff(INSERT,"Se")
Diff(EQUAL,"t the ")
Diff(DELETE,"order ¶            user.AttemptsTo(")
Diff(INSERT,"Pay Now / Pay Later radio button¶            user.AttemptsTo(shouldPayNow¶                ? Click.On(Cart.PaymentDetails.PayNowRadioButton)¶                : ")
Diff(EQUAL,"Click.On(Cart.PaymentDetails.PayLaterRadioButton));¶")
Diff(INSERT,"            //  submit the order¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶")
Diff(INSERT,"            if (!shouldPayNow)¶    ")
Diff(EQUAL,"            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod)")
Diff(DELETE,").Should().Contain")
Diff(INSERT,", ContainsSubstring.Text")
Diff(EQUAL,"("will be billed for the balance due")")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        /// <summary>¶        /// Verify contacts joined product term span¶        /// </summary>¶        /// <param name="productName"></param>¶        /// <param name="termSpan"></param>¶        public void VerifyContactsJoinedProductTermSpanOf(string productName, string termSpan)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            ")
Diff(DELETE,"// check if passed product name is the selected product in the product list¶            bool finishedloop = false;¶            int rowPos = 0;¶            do¶            {¶                if (user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, rowPos))) == productName)¶                {¶                    user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0")
Diff(INSERT,"EnsureProductIsSelected(user")
Diff(EQUAL,", ")
Diff(INSERT,"p")
Diff(EQUAL,"ro")
Diff(DELETE,"wPos))).Should().BeTrue();¶                    finishedloop = true;¶                }¶                rowPos++;¶            } while (finishedloop == fals")
Diff(INSERT,"ductNam")
Diff(EQUAL,"e);¶")
Diff(INSERT,"¶")
Diff(EQUAL,"            // check is it's the correct term span set¶            user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.TermLength)).Should().Be(termSpan);¶        }¶¶        /// <summary>¶        /// Verify Order Confirmation Message in Payment Method is displayed¶        /// </summary>¶        /// <param name="message"></param>¶        public void VerifyOrderConfirmationMessage(string message)¶        {¶            var user = User("VerifyOrderConfirmationMessageUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentMethod)).Should().Contain(message);¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        /// <summary>¶        /// Join now and pay for a product for a new contact¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void JoinNowAndPayForAProductForANewContact(Table joinNowData)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var joinNowTable = joinNowData.CreateInstance<JoinNowData>();¶            // create a new contact¶            var contact = new ContactData()¶            {¶                FirstName = joinNowTable.ContactFirstName,¶                MiddleName = "",¶                LastName = joinNowTable.ContactLastName,¶                Email = "",¶                Organization = ""¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶            // save the new contacts ID for the JoinNow interaction to use¶            _context.SelectedPartyId = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID")));¶            // now join product¶            user.AttemptsTo(JoinNow.WithChapterMembership(joinNowTable));¶            // skip next bit if unit amount is zero¶            if (joinNowTable.UnitAmount != "0")¶            {¶                if (_context.GetData<bool>("CheckOut")) user.AttemptsTo(CheckOut.WithMainCheckingAccount());¶                // verify Order Confirmation page title¶                user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");¶                //verify items grid¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 1))).Should().Be(joinNowTable.ProductName);¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 2))).Should().Be("1");¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 3))).Should().Be(joinNowTable.UnitAmount);¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 4))).Should().Be(joinNowTable.UnitAmount);¶                // confirm totals under grid¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TotalAmount)).Should().Be(joinNowTable.UnitAmount);¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount)).Should().Be(joinNowTable.UnitAmount);¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be(joinNowTable.UnitAmount);¶                user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.BalanceDue)).Should().Be("0.00");¶                // now pay for it and generate a renewal¶                PayInvoiceOnBehalfOf(joinNowData);¶            }¶            else")
Diff(DELETE," ")
Diff(EQUAL,"¶            {¶                user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶                user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶            }¶        }¶¶        /// <summary>¶        /// Pay invoice on behalf of¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void PayInvoiceOnBehalfOf(Table joinNowData)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var bList = joinNowData.CreateInstance<JoinNowData>();¶            // select on behalf of user¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.OBOControlPanel.TargetNameLink));¶            // goto to new contacts membership tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));¶            // verify membership fees grid on account page¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1))).Should().Be(bList.ProductCode);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 2))).Should().Be(bList.UnitAmount);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 3))).Should().Be("0.00");¶            // click product name in grid¶            user.AttemptsTo(Click.On(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1, true)));¶            // close the panel¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            user.AttemptsTo(SwitchFrame.ToParentFrame());¶            // goto to new contacts transactions tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Transactions")));¶            // verify tranactions grid on account page¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.InvoicesGrid.ResultsGrid.Cell(1, 4))).Should().Be(bList.UnitAmount);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.InvoicesGrid.ResultsGrid.Cell(1, 5))).Should().Be("0.00");¶        }¶¶        /// <summary>¶        /// Generate Renewal and Pay for Modified Chapter on behalf of¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void GenerateRenewalAndPayForModifiedChapterOnBehalfOf(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶¶            // navigate to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(GenerateRenewalsPage.BaseUrl));¶            // go to logs page¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));¶            // get last run on date¶            string oldBillDate = user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).ToString();¶            user.AttemptsTo(Browse.InImis(AccountPageStaff.Url(_context.SelectedPartyId)));¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // now generate a renewal¶            user.AttemptsTo(Click.On(AccountPageStaff.ActionsButton));¶            user.AttemptsTo(Click.On(AccountPageStaff.ActionsGenerateRenewals));¶            // select billing cycle¶            user.AttemptsTo(Select.ByText(GenerateRenewalsPage.RunDetailsPage.BillingCycleDropDown, bList.ProductName));¶            DateTime bDate = DateTime.Parse(oldBillDate);¶            DateTime bDateNew = new DateTime(bDate.AddYears(1).Year, bDate.Month, 1).AddDays(-1);¶            string billDate = bDateNew.ToShortDateString();¶            user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.BillDate.TextBox, billDate + Keys.Enter).UsingClearMethod());¶            // change effective date to a year in the future¶            var edate = user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox));¶            DateTime edate2 = DateTime.Parse(edate);¶            // now add a year to the date¶            edate = edate2.AddYears(1).ToString();¶            // put new date into Effective date¶            user.AttemptsTo(SendKeys.To(GenerateRenewalsPage.RunDetailsPage.EffectiveDateCalendar.TextBox, edate.ToString()));¶            // generate the run¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.RunDetailsPage.GenerateBillsButton));¶            // verify completed message¶            user.AsksFor(UserMessageState.HasAny().WithMessage("The " + bList.ProductName + " billing cycle has been submitted for processing.")).Should().BeTrue();¶            // switch to logs page and verify info¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));¶            // wait till batch is completed before continuing¶            bool finishedProcessing = false;¶            do¶            {¶                user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶                if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Completed") finishedProcessing = true;¶            } while (finishedProcessing == false);¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Billing run for " + bList.ContactFirstName + " " + bList.ContactLastName);¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 2))).Should().Contain(bList.ProductName);¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain(bList.AccountingMethod);¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(billDate);¶            // select on behalf of user¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.OBOControlPanel.TargetNameLink));¶            // goto to contacts transactions tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Transactions")));¶            // verify open tranactions grid on account page¶            user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 4))).Should().Be(billDate);¶            user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 7))).Should().Be(bList.Amount);¶            user.AsksFor(Text.Of(AccountPageStaff.OpenInvoicesGrid.Cell(1, 8))).Should().Be(bList.Amount);¶            // tick the Pay check box - need a loop to check if the tick is successful¶            do¶            {¶                user.AttemptsTo(Check.On(AccountPageStaff.OpenInvoicesGrid.Cell(1, 2, postXPath: "//input")));¶            } while (user.AsksFor(EnabledState.Of(AccountPageStaff.OpenInvoicesCartButton)) == false);¶            // click the Add to Cart button¶            user.AttemptsTo(Click.On(AccountPageStaff.OpenInvoicesCartButton));¶            // expand invoice item¶            user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.Cell(1, 1)));¶            // click on invoice number of cart¶            user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.Cell(1, 2)));¶            // select a product¶            user.AttemptsTo(SendKeys.To(JoinNowPage.MOO.DynamicProductDisplay.PickList(0, 0), "South Chapter" + Keys.Enter));¶            // wait until unit amounts have been updated before checking it¶            bool finishedUpdating = false;¶            do¶            {¶                if (double.Parse(user.AsksFor(ValueAttribute.Of(JoinNowPage.MOO.DynamicProductDisplay.OverridePricing(0, 0)))) == 43) finishedUpdating = true;¶            } while (finishedUpdating == false);¶            // verify total amount¶            user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.AmountLabel(0, 0))).Should().Be("43.00");¶            // verify subtotal at bottom of page¶            user.AsksFor(Text.Of(JoinNowPage.MOO.DynamicProductDisplay.SubtotalValueLabel)).Should().Be("43.00");¶            // now click update cart¶            user.AttemptsTo(Click.On(JoinNowPage.MOO.DynamicProductDisplay.MooRepeater.AddToCartButton));¶            // add a check number¶            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, "9999"));¶            // submit the order¶            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶            // verify item grid items¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 2))).Contains("Adjustments for invoice:");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.Cell(1, 3))).Should().Be("-2.00");¶            // confirm totals under grid¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.GrandTotalAmount)).Should().Be("-2.00");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TotalAmount)).Should().Be("-2.00");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.InvoiceTotal)).Should().Be("45.00");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount)).Should().Be("43.00");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be("43.00");¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.BalanceDue)).Should().Be("0.00");¶        }¶¶        /// <summary>¶        /// Then I verify contacts membership details¶        /// </summary>¶        /// <param name="billingTable"></param>¶        public void VerifyContactsMembershipDetails(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // select on behalf of user¶            user.AttemptsTo(Click.On(AccountArea.PartyName));¶            user.AttemptsTo(Click.On(AccountArea.OBOControlPanel.TargetNameLink));¶            // goto to new contacts membership tab¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));¶            // verify membership items grid on account page¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 1))).Should().Be(bList.ItemName1);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(1, 2))).Should().Be(bList.ItemAmount1);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipFeesGrid.ResultsGrid.Cell(2, 2))).Should().Be(bList.ItemAmount2);¶            // verify membership details¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipPanel.MemberType)).Should().Be(bList.MembershipType);¶            user.AsksFor(Text.Of(AccountPageStaff.MembershipTab.MembershipPanel.Chapter)).Should().Be(bList.Chapter);¶        }¶¶        /// <summary>¶        /// Then I add new billing products¶        /// </summary>¶        /// <param name="productTable"></param>¶        public void AddNewBillingProducts(Table productTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶            var ProductLookupTableList = productTable.CreateSet<ProductLookUpTable>().ToList();¶            foreach (ProductLookUpTable pList in ProductLookupTableList)¶            {¶                // navigate straight to billing product page ¶                user.AttemptsTo(Browse.InImis(BillingProductsPage.BaseUrl));¶                // check if product already exists and delete if it does¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.FindTextBox, pList.Name));¶                user.AttemptsTo(Click.On(BillingProductsPage.FindButton));¶                // wait for table to be updated by hovering - change this once there's a method for checking if table has been updated¶                for (int x")
Diff(DELETE,"=1;x<")
Diff(INSERT," = 1; x < ")
Diff(EQUAL,"8;")
Diff(INSERT," ")
Diff(EQUAL,"x++)¶                    user.AttemptsTo(Hover.Over(BillingProductsPage.FindButton));¶                // check if the new product already exists ¶                if (user.AsksFor(Text.Of(BillingProductsPage.ItemGrid.FirstCell)) != "There are no records.")¶                {¶                    // found the same exisiting product so now delete it¶                    user.AttemptsTo(Hover.Over(BillingProductsPage.ItemGrid.Cell(1, 4, postXPath: "//input")));¶                    user.AttemptsTo(Click.On(BillingProductsPage.ItemGrid.Cell(1, 4, postXPath: "//input")));¶                    user.AttemptsTo(AcceptAlert.ThatMustExist());¶                }¶                user.AttemptsTo(Refresh.Browser());¶                // now add the new product¶                user.AttemptsTo(Click.On(BillingProductsPage.ItemGrid.AddToGrid));¶                user.AttemptsTo(Select.ByText(BillingProductsPage.BillingItemCreator.TypeBusinessDropDown, pList.Type));¶                // needs a hover to wait for dropdown to finished otherwise the next sendkeys was skipped¶                user.AttemptsTo(Hover.Over(BillingProductsPage.BillingItemCreator.CodeTextBox));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.CodeTextBox, pList.Code));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.NameTextBox, pList.Name));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.DescriptionTextArea.TextArea, pList.Description));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.TxtStandardPrice, pList.StandardPrice));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.TxtDiscountPrice, pList.DiscountPrice));¶                user.AttemptsTo(SendKeys.To(BillingProductsPage.BillingItemCreator.TermSpanMonthsTextBox, pList.TermSpan));¶                user.AttemptsTo(ClickCommandButton.Save());¶                user.AsksFor(UserMessageState.HasAny().WithMessage("Item successfully saved"));¶            }¶        }¶¶        /// <summary>¶        /// Edit Prorate Rule¶        /// </summary>¶        /// <param name="prorateRule"></param>¶        /// <param name="prorateTable"></param>¶        public void EditProrateRule(string prorateRule, Table prorateTable)¶        {¶            var user = User("SetCustomerTypeDefaultUser");¶            // go straight to Prorate Rules page¶            user.AttemptsTo(Browse.InImis(ProratingRulesPage.BaseUrl));¶            // select given protate rule¶            user.AttemptsTo(Click.On(ProratingRulesPage.ProratingScheduleCreator.ScheduleGrid.CellLinkWithText(prorateRule)));¶            // now edit the given changes to the prorate rules¶            var prorateLookupTableList = prorateTable.CreateSet<ProrateLookUpTable>().ToList();¶            foreach (ProrateLookUpTable pList in prorateLookupTableList)¶            {¶                user.AttemptsTo(SendKeys.To(ProratingScheduleCreatorDialog.ScheduleEditor.ScheduleRadGrid.Cell(int.Parse(pList.FiscalMonth), 2, postXPath: "//input"), Keys.Control + "A"));¶                user.AttemptsTo(SendKeys.To(ProratingScheduleCreatorDialog.ScheduleEditor.ScheduleRadGrid.Cell(int.Parse(pList.FiscalMonth), 2, postXPath: "//input"), pList.Multiplier));¶                user.AttemptsTo(SetWhenProvided.DropDown(ProratingScheduleCreatorDialog.ScheduleEditor.ScheduleRadGrid.Cell(int.Parse(pList.FiscalMonth), 3, postXPath: "//Select"), pList.Options));¶            }¶            user.AttemptsTo(ClickCommandButton.Save());¶            user.AsksFor(UserMessageState.HasAny().WithMessage("Successfully saved")).Should().BeTrue();¶        }¶¶        /// <summary>¶        /// Verify a Prorate Rule¶        /// </summary>¶        /// <param name="prorateRule"></param>¶        /// <param name="prorateTable"></param>¶        public void VerifyProrateRule(string prorateRule, Table prorateTable)¶        {¶            var user = User("SetCustomerTypeDefaultUser");¶            // go straight to Prorate Rules page¶            user.AttemptsTo(Browse.InImis(ProratingRulesPage.BaseUrl));¶            // select given protate rule¶            user.AttemptsTo(Click.On(ProratingRulesPage.ProratingScheduleCreator.ScheduleGrid.CellLinkWithText(prorateRule)));¶            // now edit the given changes to the prorate rules¶            var prorateLookupTableList = prorateTable.CreateSet<ProrateLookUpTable>().ToList();¶            foreach (ProrateLookUpTable pList in prorateLookupTableList)¶            {¶                // verify multiplier for that month¶                user.AsksFor(ValueAttribute.Of(ProratingScheduleCreatorDialog.ScheduleEditor.ScheduleRadGrid.Cell(int.Parse(pList.FiscalMonth), 2, postXPath: "//input"))).Should().Be(pList.Multiplier);¶                // verify options for that month if given¶                user.Verifies(SetWhenProvided.DropDown(ProratingScheduleCreatorDialog.ScheduleEditor.ScheduleRadGrid.Cell(int.Parse(pList.FiscalMonth), 3, postXPath: "//Select"), pList.Options));¶            }¶        }¶¶        /// <summary>¶        /// Add Contact and Join given product¶        /// </summary>¶        /// <param name="newContactFirstName"></param>¶        /// <param name="newContactLastName"></param>¶        /// <param name="joinProductCode"></param>¶        public void AddContactAndJoin(Table billingTable)¶        {¶            var user = User("VerifyBillingCycleUser");¶            var bList = billingTable.CreateInstance<BillingLookUpTable>();¶            // navigate straight to Add Contact page ¶            user.AttemptsTo(Browse.InImis(AddContactPage.BaseUrl));¶            // create a new contact¶            var contact = new ContactData()¶            {¶                FirstName = bList.ContactFirstName,¶                MiddleName = "",¶                LastName = bList.ContactLastName,¶                Email = "",¶                Organization = ""¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶            // save the new contacts ID for the JoinNow interaction to use¶            _context.SelectedPartyId = user.AsksFor(Text.Of(AccountPageStaff.ContactProperties.QueryType("ID"))); ;¶            // now join with the passed membership type¶            user.AttemptsTo(JoinNow.WithMembership(bList.ProductCode));¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Join now as provided member type¶        /// </summary>¶        /// <param name="memberType"></param>¶        /// <param name="site"></param>¶        /// <param name="joinNowData"></param>¶        public void JoinNowAs(string memberType, string site = "Staff", JoinNowData joinNowData = null)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(JoinNow.WithMembership(memberType).WithJoinNowData(joinNowData).InImis(site));¶        }¶¶        /// <summary>¶        /// Cancel renewal for user¶        /// </summary>¶        /// <param name="id">user id</param>¶        public void CancelRenewalForUser(int id)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InImis(AccountPage.Url(id.ToString())));¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Membership")));¶¶            var cancelRenewalButton = AccountPageStaff.MembershipTab.ReviewOrCancel.CancelInvoiceButton;¶            user.WaitsUntil(Appearance.Of(cancelRenewalButton), IsEqualTo.True());¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(cancelRenewalButton));¶        }¶¶        /// <summary>¶        /// Verify transaction grand total is 0¶        /// </summary>¶        public void VerifyOrderWasSubmittedWithoutPayment()¶        {¶            var user = LoggedInUser();¶¶            var transactionGrandTotalText = user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.TransTotalAmount),¶                IsNotEqualTo.Value(""));¶¶            double.Parse(transactionGrandTotalText).Should().Be(0);¶        }¶¶        /// <summary>¶        /// Verify that Non-member Subscriptions is ordered for public users¶        /// </summary>¶        public void VerifyANonDuesProductIsOrdered()¶        {¶            var user = LoggedInUser();¶¶            user.WaitsUntil(Text.Of(OrderConfirmation.OrderConfirmationDisplay.ItemGrid.FirstCell),¶                IsEqualTo.Value("Non-Member Subscriptions"));¶        }¶¶        /// <summary>¶        /// Change billing time for billing cycle¶        /// </summary>¶        /// <param name="billingTime"></param>¶        /// <param name="billingCycle"></param>¶        public void ChangeBillingTimeForBillingCycle(string billingTime, string billingCycle)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InImis(BillingCyclesPage.BaseUrl));¶¶            user.AttemptsTo(Click.On(BillingCyclesPage.BillingCycleGrid.CellLinkWithText(text: billingCycle)));¶            user.AttemptsTo(Select.ByValue(BillingCycleDetailPage.BillingTimeDropDown, billingTime));¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }¶¶        /// <summary>¶        /// Verify product price¶        /// </summary>¶        /// <param name="productName"></param>¶        /// <param name="price"></param>¶        public void VerifyProductPriceIs(string productName, string price)¶        {¶            var user = LoggedInUser();¶¶            user.AttemptsTo(Browse.InImis(Cart.BaseUrl));¶¶            user.AttemptsTo(Click.On(Cart.ShoppingCart.ItemGrid.FirstCell));¶¶            user.WaitsUntil(Text.Of(Cart.ShoppingCart.NestedItemGrid.Cell(productName, postXPath: "//parent::tr//td[3]")),¶                IsEqualTo.Value(price));¶        }¶¶        /// <summary>¶        /// Verify the membership period for annual billing time¶        /// </summary>¶        public void VerifyTheMembershipPeriod()¶        {¶            const int december = 12;¶            const int startSecondHalfOfMonth = 15;¶¶            var user = LoggedInUser();¶            var currentDate = DateTime.Now;¶¶            var beginDate = currentDate.Day < startSecondHalfOfMonth¶                ? new DateTime(currentDate.Year, currentDate.Month, 1)¶                : new DateTime(currentDate.AddMonths(1).Year, currentDate.AddMonths(1).Month, 1);¶¶            var endDate = new DateTime(beginDate.Year, december, 31);¶¶            user.WaitsUntil(Text.Of(Cart.ShoppingCart.ItemGrid[1].ItemDescriptionLink),¶                ContainsSubstring.Text($"({beginDate.ToString("d", CultureInfo.CurrentCulture)} - {endDate.ToString("d", CultureInfo.CurrentCulture)})"));¶        }¶¶        private void EnsureProductIsSelected( ImisUser user, string productName)¶        {¶            IWebLocator ProductRow(int i) => JoinNowPage.MOO.DynamicProductDisplay.MooProductItemName(0, i);¶            bool ProductRowExists(int i) => user.AsksFor(Existence.Of(ProductRow(i)));¶            bool FoundCorrectProductRow(int i) => user.AsksFor(Text.Of(ProductRow(i))) == productName;¶¶            user.WaitsUntil(Existence.Of(ProductRow(0)), IsEqualTo.True());¶            TestHelper.WaitForPageReload();¶            for (int i = 0; i < 1000; i++)¶                if (ProductRowExists(i) && FoundCorrectProductRow(i))¶                {¶                    user.AsksFor(SelectedState.Of(JoinNowPage.MOO.DynamicProductDisplay.SelectRadioButton(0, i))).Should().BeTrue();¶                    return;¶                }¶¶            throw new NotFoundException($"Did not find {productName} as a selected product within the first 1000 items in the list.");¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/BillingFinanceTestMethods.cs)
Diff(EQUAL,"{¶    public class RenewalsTestMethods : TestMethodBase¶    {¶")
Diff(INSERT,"        private const string _paidThruDateKey = "paidThruDate";¶¶")
Diff(EQUAL,"        public RenewalsTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶")
Diff(DELETE,"")
Diff(EQUAL,"        {¶            GenerateRenewalsPage = new GenerateRenewalsPage();¶            BillGenerationBillingLogDrilldownDetailPage = new BillGenerationBillingLogDrilldownDetailPage();¶            AccountPage = new AccountPage")
Diff(INSERT,"Staff")
Diff(EQUAL,"();¶            Account_Staff = new AccountStaff();¶            ListBillingPage = new ListBillingPage();¶            ItemizedRenewal = new ItemizedRenewal();¶            OrderConfirmation = new OrderConfirmation();¶            Authentication = new Authentication(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶            Cart = new Cart();¶            ReverseOpenInvoicePage = new ReverseOpenInvoicePage();¶            ReversalLogDetail = new ReversalLogDetail("Reversal log");¶            InvoicesPage = new InvoicesPage();¶        }¶¶        private GenerateRenewalsPage GenerateRenewalsPage { get; set; }¶        private BillGenerationBillingLogDrilldownDetailPage BillGenerationBillingLogDrilldownDetailPage { get; set; }¶        private AccountPage")
Diff(INSERT,"Staff")
Diff(EQUAL," AccountPage { get; set; }¶        private AccountStaff Account_Staff { get; set; }¶        private ListBillingPage ListBillingPage { get; set; }¶        private ItemizedRenewal ItemizedRenewal { get; set; }¶        private Cart Cart { get; set; }¶        private OrderConfirmation OrderConfirmation { get; set; }¶        private Authentication Authentication { get; set; }¶        private SignInTestMethods SignInTestMethods { get; set; }¶        private ReverseOpenInvoicePage ReverseOpenInvoicePage { get; set; }¶        private ReversalLogDetail ReversalLogDetail { get; set; }¶        private InvoicesPage InvoicesPage { get; set; }¶¶        /// <summary>¶        /// I verify I can modify a cash dues list billing¶        /// </summary>¶        /// <param name="user">The iMIS user.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public void IVerifyICanModifyACashDuesListBilling()¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶            DateTime Today = DateTime.Now;¶            // navigate straight to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(GenerateRenewalsPage.BaseUrl));¶            // go to logs page¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));¶            // wait till batch is completed before continuing¶            bool finishedProcessing = false;¶            do¶            {¶                user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶                if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Completed") finishedProcessing = true;¶            } while (finishedProcessing == false);¶            // verify successfully completed message¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).Should().Be("Completed");¶            // verify data of first item in table as it is the newest¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCell)).Should().Contain("Cash dues list billing");¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 3))).Should().Contain("Cash");¶            // save amount for later¶            string bAmount = user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 6)));¶            var eDate = _context.GetData<string>("EffectiveDate");¶            var bDate = _context.GetData<string>("BillDate");¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 4))).Should().Contain(bDate);¶            // click on details to show to detail grid¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.FirstCellLink));¶            //verifies the show all ¶            if (user.AsksFor(Appearance.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.ShowAllLink)))¶                user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.ShowAllLink));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.GetParameter("Billing", "Bill to name contains")).Textbox, "Versaton New Zealand"));¶            user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Queries.Get("Billing").Find));¶            user.AttemptsTo(Waiting.InSeconds(2));¶            // verify company name¶            user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1,")
Diff(INSERT," ")
Diff(EQUAL,"2))).Should().Be("Versaton New Zealand");¶            // verify Bill beginning and end dates¶            DateTime thruDate;¶            DateTime eDate1 = DateTime.Parse(eDate);¶            thruDate = new DateTime(eDate1.AddYears(1).Year, eDate1.Month, 1).AddDays(-1);¶            user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 4))).Should().Be(thruDate.ToShortDateString());¶            // verify amount¶            user.AsksFor(Text.Of(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 5))).Should().Be(bAmount);¶            // expand info¶            user.AttemptsTo(Hover.Over(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.FirstCellInput));¶            user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.FirstCellInput));¶            // click on invoice number¶            user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.Cell(1, 2, true)));¶            // click RenewNow button ¶            user.AsksFor(Appearance.Of(Account_Staff.RenewalButton.PayInvoiceButton));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(Account_Staff.RenewalButton.PayInvoiceButton));¶            // ListBilling page appears¶            // untick the first three items¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(1, 2, postXPath: "//input[@type='checkbox']")));¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(2, 2, postXPath: "//input[@type='checkbox']")));¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(3, 2, postXPath: "//input[@type='checkbox']")));¶            // verify one worked¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(1, 4))).Should().Be("Basic Membership Dues - Pay later");¶            // edit 9th contacts entry in the list¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 6, true)));¶            // ItemizedRenewal page appears¶            // store subtotal value¶            var subtotal = user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel));¶            // tick the checkbox for Scholarship Fund Contribution¶            user.AsksFor(SelectedState.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(3, 1))).Should().BeFalse();¶            user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(3, 1)));¶            // wait till subtotal changes then verify new subtotal amount¶            finishedProcessing = false;¶            do¶            {¶                if (user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel)) != subtotal) finishedProcessing = true;¶            } while (finishedProcessing == false);¶            user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel)).Should().Be("110.00");¶            // click save and return¶            user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.MooRepeater.AddToCartButton));¶            // verify ItemizedRenewal page OpenInvoices grid has now changed¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 4))).Should().Be("Basic Membership Dues - Updated");¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(9, 5))).Should().Be("110.00");¶            // now cancel an contacts dues¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 7, true)));¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 4))).Should().Be("Basic Membership Dues - Cancelled");¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(10, 5))).Should().Be("0.00");¶            // store total amount for later¶            var totalAmount = user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.TotalSelectForPaymentAmount));¶            // click add to cart¶            user.AttemptsTo(Click.On(ListBillingPage.CartCheckOutButton.RedirectToCartButton));¶            // cart page appears¶            // verify the two items in the items grid¶            user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2))).Should().Contain("Adjustments for invoice:");¶            user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(2, 2))).Should().Contain("Cancellation for invoice:");¶            // verify total amount¶            user.AsksFor(Text.Of(Cart.CartCharges.TransactionGrandTotal)).Should().Be(totalAmount);¶            // add a check number¶            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, "777"));¶            // submit the order¶            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶            // verify Order Confirmation page title¶            user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");¶            // confirm total¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be(totalAmount);¶        }¶¶        /// <summary>¶        /// I verify I can modify a ModifyAccrualListBilling¶        /// </summary>¶        /// <param name="Table">Renewal data table.</param>¶        public void ModifyAccrualListBilling(Table table)¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶")
Diff(DELETE,"            ")
Diff(EQUAL,"¶")
Diff(INSERT,"")
Diff(EQUAL,"            DateTime Today = DateTime.Now;¶            var renewalData = table.CreateInstance<RenewalData>();¶            // navigate straight to Generate Renewals page¶            user.AttemptsTo(Browse.InImis(GenerateRenewalsPage.BaseUrl));¶            // go to logs page¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.TabGroup.GetTab("Logs")));¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶            // check status of batch ¶            bool finishedProcessing = false;¶            do¶            {¶                user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶                if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Unposted Batch") finishedProcessing = true;¶                // check status so it doesn't ever get caught in an infinite loop if the batch is already completed¶                user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString().Should().NotBe("Completed");¶            } while (finishedProcessing == false);¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).Should().Be("Unposted Batch");¶            // click on status to open billing run detail page¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7, true)));¶            // verify details on the page¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            user.AsksFor(Existence.Of(BillingRunDetailsPage.BillingLogName));¶            user.AsksFor(Text.Of(BillingRunDetailsPage.BillingLogName)).Should().Contain(renewalData.BillingRunName);¶            user.AsksFor(Text.Of(BillingRunDetailsPage.BillingCycle)).Should().Contain(renewalData.BillingCycle);¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            // close the dialog¶            user.AttemptsTo(Click.On(DialogWindowWrapper.CloseButtonTop));¶            // store the Batch number for verifying later¶            var batchNumber = user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 8)));¶            // click on the Batch number to open batch into dialog¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 8, true)));¶            // verify info on page¶            user.AttemptsTo(SwitchFrame.To("GenericWindow"));¶            user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchTemplateTitle)).Should().Contain("Batch "")
Diff(DELETE,"+")
Diff(INSERT," + ")
Diff(EQUAL,"batchNumber);¶            user.AsksFor(ValueAttribute.Of(GenerateRenewalsPage.BatchSummary.EditableDescription)).Should().Contain(renewalData.BillingCycle);¶            // compare dates from context¶            var Date1 = _context.GetData<string>("BillDate");¶            user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.BatchDate)).Should().Contain(Date1);¶            user.AsksFor(Text.Of(GenerateRenewalsPage.BatchSummary.DateCreated)).Should().Contain(Today.ToShortDateString());¶            // post the batch¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.BatchSummary.PostBatchButton));¶            // click ok on the confirmation dialog¶            user.AttemptsTo(AcceptAlert.ThatMustExist());¶            // verify completed message¶            user.AsksFor(UserMessageState.HasAny().WithMessage("Batch submitted for posting")).Should().BeTrue();¶            // close the dialog¶            user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶            user.AttemptsTo(Click.On(DialogWindowWrapper.CloseButtonTop));¶            // wait till batch has been completed¶            finishedProcessing = false;¶            do¶            {¶                user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶                if (user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).ToString() == "Completed") finishedProcessing = true;¶            } while (finishedProcessing == false);¶            user.AttemptsTo(Click.On(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.RefreshButton));¶            user.AsksFor(Text.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.Cell(1, 7))).Should().Be("Completed");¶            // click on selected billing run name in grid¶            user.WaitsUntil(Appearance.Of(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.SelectLinkWithRowText(renewalData.BillingRunName)), IsEqualTo.True());¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(GenerateRenewalsPage.LogsDetailsPage.BillLogsGrid.SelectLinkWithRowText(renewalData.BillingRunName)));¶            // click on company name to jump to account page¶            user.AttemptsTo(Click.On(BillGenerationBillingLogDrilldownDetailPage.BillLogsGrid.LinkInTable("Versaton New Zealand")));¶            // click RenewNow button ¶            user.AsksFor(Appearance.Of(Account_Staff.RenewalButton.PayInvoiceButton));¶            user.AttemptsTo(Click.On(Account_Staff.RenewalButton.PayInvoiceButton));¶            // untick first four names ¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(1, 2, postXPath: "//input[@type='checkbox']")));¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(2, 2, postXPath: "//input[@type='checkbox']")));¶            // cancel the 3rd entry¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(3, 7, true)));¶            // verify it's cancelled¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(3, 4))).Should().Contain("Cancelled");¶            // cancel the 4th entry¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(4, 7, true)));¶            // verify it's cancelled¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(4, 4))).Should().Contain("Cancelled");¶            // verify count and amount left¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.TotalSelectForPaymentCount)).Should().Contain("4");¶            user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.TotalSelectForPaymentAmount)).Should().Contain("400.00");¶            // save name of 6th entry¶            var cName = user.AsksFor(Text.Of(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(6, 3)));¶            // edit the 6th entry¶            user.AttemptsTo(Click.On(ListBillingPage.ListBillingDisplay.OpenInvoicesGrid.Cell(6, 6, true)));¶            // verify name on new page¶            user.AsksFor(Text.Of(ItemizedRenewal.PageTitle)).Should().Be("Professional Membership - " + cName);¶            // click return to previous back link button¶            user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.BackLink.BackLinkText));¶            // click add to cart¶            user.AttemptsTo(Click.On(ListBillingPage.CartCheckOutButton.RedirectToCartButton));¶            // cart page appears - verify two items in the items grid¶            user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2))).Should().Contain("Cancellation");¶            user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(2, 2))).Should().Contain("Cancellation");¶            // verify item in invoices grid¶            user.AsksFor(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 3))).Should().Contain("Basic Membership Dues");¶            user.AsksFor(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 4))).Should().Contain("800.00");¶            user.AsksFor(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 5))).Should().Contain("600.00");¶            // expand invoice¶            user.AttemptsTo(Click.On(Cart.ShoppingCart.InvoiceGrid.FirstCellInput));¶            // verify grand total¶            user.AsksFor(Text.Of(Cart.CartCharges.GrandTotalAmount)).Should().Contain("-200.00");¶            // add a check number¶            user.AttemptsTo(SendKeys.To(Cart.PaymentDetails.CheckNumber, "777"));¶            // submit the order¶            user.AttemptsTo(Click.On(Cart.SubmitOrderButtonLink.SubmitCartOrderButton));¶            // verify Order Confirmation page title¶            user.AsksFor(Text.Of(PageBase.PageTitle)).Should().BeEquivalentTo("Order confirmation");¶            // confirm total¶            user.AsksFor(Text.Of(OrderConfirmation.OrderConfirmationDisplay.PaymentAmount)).Should().Be("400.00");¶        }¶¶        /// <summary>¶        /// I renew membership fees on the Mbrr site¶        /// </summary>¶        /// <param name="table">.</param>¶        public void RenewMembershipFeesOnTheMbrrSite(ItemizedRenewalData itemizedRenewalData, CartData cartData)¶        {¶            var user = User("IssueInvoiceWriteoffUser");¶            string today = DateTime.Today.ToShortDateString();¶            // sign user into Mbrr site as passed user¶            SignInTestMethods.ToTheSiteWithUserName(itemizedRenewalData.UserName, "Mbrr");¶            // navigate straight to Members account page¶            user.AttemptsTo(Browse.InImis(AccountPage.BaseUrl));¶            // click renew now¶            user.AttemptsTo(Wait.Until(Appearance.Of(AccountPage.RenewalButton.PayInvoiceButton), IsEqualTo.True()));¶            user.AttemptsTo(Click.On(AccountPage.RenewalButton.PayInvoiceButton));¶            // tick and untick items from passed itemized renewal table¶            user.AsksFor(Appearance.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(0, 1)));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(2, 0), itemizedRenewalData.FinanceSection));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(2, 1), itemizedRenewalData.MarketingSection));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(2, 2), itemizedRenewalData.TechnologySection));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(3, 0), itemizedRenewalData.JournalOfProfessionalLeadership));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(3, 1), itemizedRenewalData.IndustryInsiderMagazine));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(4, 0), itemizedRenewalData.PACContribution));¶            user.AttemptsTo(SetWhenProvided.CheckBox(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SelectCheckBox(4, 1), itemizedRenewalData.ScholarshipFundContribution));¶            // save total for later verification¶            string subTotalAmount = user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel));¶            // wait till subtotal changes then verify new total amount¶            bool finishedProcessing = false;¶            do¶            {¶                if (user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel)) != subTotalAmount) finishedProcessing = true;¶            } while (finishedProcessing == false);¶            string totalAmount = user.AsksFor(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SubtotalValueLabel));¶            // click update cart¶            user.AttemptsTo(Click.On(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.MooRepeater.AddToCartButton));¶            // cart page appears¶            // verify the items grid¶            user.AsksFor(Text.Of(Cart.ShoppingCart.ItemGrid.Cell(1, 2))).Should().Contain("Adjustments for invoice:");¶            // verify the invoices grid¶            user.AsksFor(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 3))).Should().Contain("Renewal Fees");¶            user.AsksFor(Text.Of(Cart.ShoppingCart.InvoiceGrid.Cell(1, 4))).Should().Contain(subTotalAmount);¶            // verify total amount¶            user.AsksFor(Text.Of(Cart.CartCharges.TransactionGrandTotal)).Should().Be(totalAmount);¶            // save details to context for verification later¶            _context.UpsertData("OrderDate", today);¶            _context.UpsertData("FullName", itemizedRenewalData.FullName);¶            _context.UpsertData("InvoiceTotal", subTotalAmount);¶            _context.UpsertData("GrandTotal", totalAmount);¶            _context.UpsertData("BalanaceDue", "0.00");¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Reverse first open invoice¶        /// </summary>¶")
Diff(EQUAL,"        public void ReverseFirstOpenInvoice()¶        {¶            var user = User("ReverseOpenInvoiceUser");¶¶            user.AttemptsTo(Browse.InImis(ReverseOpenInvoicePage.BaseUrl));¶            var query = ReverseOpenInvoicePage.SelectAQuery.Queries.Get("Main");¶            var accountingMethodParameter = (QuerySelectParameter)query.Parameters.Get("Accounting method");¶            user.AttemptsTo(Select.ByValue(accountingMethodParameter.Selectbox, "Cash"));¶            user.AttemptsTo(Click.On(query.Find));¶¶            var duesReversalControl = ReverseOpenInvoicePage.DuesReversals.DuesReversalControl;¶            user.WaitsUntil(Text.Of(duesReversalControl.Lister2Grid.Cell(1, 2)), IsNotEqualTo.Value(""));¶¶            user.AttemptsTo(Click.On(duesReversalControl.Lister2Grid.Cell(1, 1)));¶            user.AttemptsTo(Click.On(duesReversalControl.ReverseOnlyRadioButton));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(duesReversalControl.ReverseSubmitButton));¶            user.AsksFor(UserMessageState.HasAny().WithMessage("Invoice reversal submitted for processing. Check the log for the status of the submission.")).Should().BeTrue();¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// Verify open invoice is reversed¶        /// </summary>¶")
Diff(EQUAL,"        public void VerifyOpenInvoiceIsReversed()¶        {¶            var user = User("VerifyOpenInvoiceIsReversedUser");¶¶            user.AttemptsTo(Click.On(ReverseOpenInvoicePage.DuesReversals.ReverseInvoicesRadTabStrip.GetTab("Log")));¶            user.WaitsUntil(Text.Of(ReverseOpenInvoicePage.DuesReversals.ReversalLogControl.ReversalLogGrid.Cell(1, 3)), IsEqualTo.Value("Succeeded"));¶            user.AttemptsTo(Click.On(ReverseOpenInvoicePage.DuesReversals.ReversalLogControl.ReversalLogGrid.Cell(1, 1, link: true)));¶            user.AttemptsTo(Click.On(ReversalLogDetail.ReversalLogDetailGrid.Cell(1, 1, link: true)));¶¶            user.WaitsUntil(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TotalChargesValue), IsNotEqualTo.Value(""));¶            var totalChargesValue = user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.TotalChargesValue));¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustmentsValue)).Should().Be($"-{totalChargesValue}");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.AdjustedTotalChargesValue)).Should().Be("0.00");¶            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.PaymentsValue)).Should().Be("0.00");¶")
Diff(DELETE,"")
Diff(EQUAL,"            user.AsksFor(Text.Of(InvoicesPage.InvoiceDetail.InvoiceLinesTemplate.RemainingBalanceValue)).Should().Be("0.00");¶        }")
Diff(INSERT,"¶¶        /// <summary>¶        /// Renew membership on user account page¶        /// </summary>¶        public void RenewUserMembership(int userId)¶        {¶            var user = User("RenewMembershipUser");¶¶            user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));¶            var paidThruDate = DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")));¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(AccountPage.RenewalButton.RenewInAdvanceButton));¶            user.WaitsUntil(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.PickList(0, 0)),¶                IsEqualTo.Value("East Chapter"));¶¶            var termStartDate = DateTime.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermStartDate.TextBox)));¶            termStartDate.Should().Be(paidThruDate.AddDays(1));¶¶            var termLength = int.Parse(user.AsksFor(ValueAttribute.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermLength)));¶            termLength.Should().BeGreaterThan(0);¶¶            var termEndDate = DateTime.Parse(user.WaitsUntil(Text.Of(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.TermEndDate), IsNotEqualTo.Value("")));¶            termEndDate.Should().Be(termStartDate.AddMonths(termLength).AddDays(-1));¶¶            _context.AddData(_paidThruDateKey, termEndDate);¶            user.AttemptsTo(ClickCommandButton.WithWebLocator(ItemizedRenewal.GeneralProductDisplay.DynamicProductDisplay.SimpleProductDisplay.AddToCart));¶        }¶¶        /// <summary>¶        /// Verify user membership was renewed¶        /// </summary>¶        public void VerifyUserMembershipWasRenewed(int userId)¶        {¶            var user = User("VerifyRenewUser");¶¶            user.AttemptsTo(Browse.InImis(AccountPage.Url(userId.ToString())));¶            DateTime.Parse(user.WaitsUntil(Text.Of(AccountPage.MembershipTab.MembershipPanel.PaidThrough), IsNotEqualTo.Value("")))¶                .Should().Be(_context.GetData<DateTime>(_paidThruDateKey));¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/RenewalsTestMethods.cs)
Diff(EQUAL,"{¶    public class ChaptersTestMethods : TestMethodBase¶    {¶        public ChaptersTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            BillingProductsPage = new BillingProductsPage();¶        }¶¶        public BillingProductsPage BillingProductsPage { get; set; }¶¶¶        public void NavigateToChaptersPage()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(BillingProductsPage.BaseUrl.WithUrlParameter("ItemClassId", "CHAPT")));¶        }¶¶        public void ClickFirstChapterInList()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Click.On(BillingProductsPage.ItemGrid.Cell(1, 1,true)));¶        }¶¶        public void VerifyHeaderText(string expectedHeaderText)¶        {¶            var user = LoggedInUser();¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(BillingProductsPage.PageTitle)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(expectedHeaderText)")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        public void VerifyAddNewItemLinkText(string expectedAddText)¶        {¶            var user = LoggedInUser();¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Text.Of(BillingProductsPage.ItemGrid.AddToGrid)")
Diff(DELETE,").Should().B")
Diff(INSERT,",IsEqualTo.Valu")
Diff(EQUAL,"e(expectedAddText)")
Diff(INSERT,")")
Diff(EQUAL,";¶        }¶¶        public void VerifyRedirectedToChapterDashboard()¶        {¶            Assert.IsTrue(_driver.Url.Contains("Chapter_dashboard"),"URL does not indicate that the page is the specific chapter dashboard.");¶        }¶¶        public void VerifyTheListOfChapters(string exist, string chapterCode)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InStaffSite(BillingProductsPage.BaseUrl.WithUrlParameter("ItemClassId", "CHAPT")));¶¶            if (exist.Equals("doesnot", StringComparison.OrdinalIgnoreCase))¶                user.AsksFor(Appearance.Of(BillingProductsPage.ItemGrid.TextInTable(chapterCode))).Should().BeFalse();¶            else¶                user.AsksFor(Appearance.Of(BillingProductsPage.ItemGrid.TextInTable(chapterCode))).Should().BeTrue();¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/TestMethods/Membership/ChaptersTestMethods.cs)
Diff(EQUAL,"{¶    public class FindOrderPage : PageBase¶    {¶        public FindOrderPage()¶        {¶            SelectAQuery = BuildLister();¶            BaseUrl = new ImisUrl("iCore/Commerce/Find_orders.aspx");¶        }¶¶        public Lister SelectAQuery;¶¶        private static Lister BuildLister()¶        {¶            var lister = new Lister("");¶            lister.Queries.Add("Find orders", BuildSearchOrderQuery());¶            return lister;¶        }¶¶        private static ListerSheet BuildSearchOrderQuery()¶        {¶            var query = new ListerSheet("");¶            query.Parameters.Add("Order ")
Diff(DELETE,"date between", new QueryDate")
Diff(INSERT,"number equals", new QueryTextParameter());¶            query.Parameters.Add("Order type", new QueryComboBoxParameter());¶            query.Parameters.Add("Order date between", new QueryDateParameter());¶            query.Parameters.Add("First name starts with", new QueryTextParameter());¶            query.Parameters.Add("Last name starts with", new QueryText")
Diff(EQUAL,"Parameter());¶            return query;¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Commerce/FindOrderPage.cs)
Diff(EQUAL,"{¶    public class InventoryReceiptsDialogPage : PageBase¶    {¶        public InventoryReceiptsDialogPage()¶        {¶            BaseUrl = new ImisUrl("imis/setup/commerce/InventoryReceiptDialog.aspx");¶            ProductGrid = new RadGrid("RadGrid1");¶        }¶¶        public RadGrid ProductGrid { get; }¶        public IWebLocator TypeLabel => LocatorByXPath("TypeLabel");¶        public IWebLocator TypeSelector => LocatorByXPath("TransactionTypeDropDownList");¶       ")
Diff(DELETE," //")
Diff(EQUAL," public IWebLocator ConfirmSubmitButton => LocatorByXPath("rwPopupButton", attribute: "class", postXPath: "//span[text()='OK']");¶")
Diff(DELETE,"        public IWebLocator ConfirmSubmitButton => WebLocator.L("Ok button", By.CssSelector("button.rwOkBtn")); // dg")
Diff(EQUAL,"¶        public IWebLocator GetSelectorOptionWithText(string text) => LocatorByTextXPath(text);¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Commerce/InventoryReceiptsDialogPage.cs)
Diff(EQUAL,"{¶    public class AssocMemberJoinPage : PageBase¶    {¶        public AssocMemberJoinPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Membership/Associate-Member-Join.aspx");¶        ")
Diff(DELETE,"}")
Diff(INSERT,"    GeneralProductDisplay = new GeneralProductDisplay();¶        }¶¶        public GeneralProductDisplay GeneralProductDisplay { get; set; }¶")
Diff(EQUAL,"¶        public static IWebLocator BirthDateInput => LocatorByXPath("dateInput", "input");¶        public static IWebLocator GenderDropDown => LocatorByXPath("Gender", "select");¶        public static IWebLocator MaritalDropDown => LocatorByXPath("MaritalStatus", "select");¶        public static IWebLocator TermsAndConditionBox => LocatorByXPath("AcceptTAndC", "input");¶        public static IWebLocator NextButton => LocatorByXPath("btnNext", "input");¶")
Diff(INSERT,"        public static IWebLocator FinishButton => LocatorByXPath("btnNext_2", "input");¶¶¶")
Diff(EQUAL,"    }¶}¶¶¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Forms/AssocMemberJoinPage.cs)
Diff(EQUAL,"{¶    public class IssueReceiptsPage : PageBase¶    {¶        public IssueReceiptsPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Fundraising/Issue-Receipts-CCO.aspx");¶            ContentCollectionOrganizer = new ContentCollectionOrganizer();¶            ContentCollectionOrganizer.AddTab("Issue receipts");¶            ContentCollectionOrganizer.AddTab("Reissue void receipts");¶            Grid1 = new RadGrid("Grid1");¶")
Diff(INSERT,"            SelectAQuery = BuildLister();¶")
Diff(EQUAL,"        }¶¶        public ContentCollectionOrganizer ContentCollectionOrganizer { get; set; }¶¶        public RadGrid Grid1 { get; set; }¶¶        public IWebLocator GridCurrentPage => LocatorByCSS("a", "class", "rgCurrentPage");")
Diff(INSERT,"¶¶        public IWebLocator IssueReceiptsButton => LocatorByXPath("GenerateReceipts", "input");¶¶        public Lister SelectAQuery;¶¶        private static Lister BuildLister()¶        {¶            var lister = new Lister("ResultsGrid1");¶            lister.Queries.Add("All gifts elligible for receipting", BuildAllQuery());¶            return lister;¶        }¶¶        private static ListerSheet BuildAllQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Gift date between", new QueryDateParameter());¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶            query.Parameters.Add("Gift item contains", new QueryTextParameter());¶            return query;¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Fundraising/IssueReceiptsPage.cs)
Diff(EQUAL,"{¶    ")
Diff(INSERT,"public ")
Diff(EQUAL,"class AddContactPage : PageBase¶")
Diff(DELETE,"")
Diff(EQUAL,"    {¶        public AddContactPage()¶        {¶            ")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL," = new ContactAccountCreator("Addcontact");¶            PrimaryOrgSelector = new PrimaryOrganizationSelector("primaryOrgSelector");¶            BaseUrl = new ImisUrl("iCore/Contacts/Create_Contact_Person_or_Org.aspx");¶        }¶")
Diff(INSERT,"               ")
Diff(EQUAL,"¶        public ContactAccountCreator ")
Diff(DELETE,"Add")
Diff(EQUAL,"Contact")
Diff(INSERT,"AccountCreator")
Diff(EQUAL," { get; set; }¶        public PrimaryOrganizationSelector PrimaryOrgSelector { get; set; }¶")
Diff(DELETE,"        ¶        public static IWebLocator CreateAccountTypeIndividual => LocatorByXPath("CreateAccountType_0");¶        public static IWebLocator CreateAccountTypeOrganization => LocatorByXPath("CreateAccountType_1");¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Web.V10/Pages/Community/AddContactPage.cs)
Diff(EQUAL,"{¶    "IsV10": true,¶    "IsDev": false,¶    "BaseUrl": "https://demodb.asiops.com",¶")
Diff(INSERT,"    "LicenseUrl":  "https://informationservice.imistest.com",¶")
Diff(EQUAL,"    "Headless": false,¶    "WaitMultiplier": 1,¶    "AdditionalWaitInMiliseconds": "0"¶}")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/appsettings.json)
Diff(EQUAL,"[¶  {¶    "username": "asoria",¶    "firstname": "Al",¶    "lastname": "Soria",¶    "role": "bothStaffUser",¶    "title": "System Administrator"¶  },¶  {¶    "username": "brianm",¶    "firstname": "Brian",¶    "lastname": "Murphy",¶    "role": "System Administrator",¶    "title": "System Administrator"¶  },¶  {¶    "username": "suzannej",¶    "firstname": "Suzanne",¶    "lastname": "Jackson",¶    "role": "Senior Accountant",¶    "title": "Senior Accountant"¶  },¶  {¶    "username": "casual123",¶    "firstname": "Mr. David F.",¶    "lastname": "Cooke",¶    "role": "Vice President",¶    "title": "Vice President"¶  },¶  {¶    "username": "asoria",¶    "firstname": "Julia",¶    "lastname": "Gills",¶    "role": "",¶    "title": "Executive Director"¶  },¶  {¶    "username": "katrinad",¶    "firstname": "Katrina",¶    "lastname": "Devlin",¶    "role": "Full user",¶    "title": "Moves Manager"¶  },¶  {¶    "username": "patz",¶    "firstname": "Pat",¶    "lastname": "Zimmerman",¶    "role": "Casual user",¶    "title": "Development Director"¶  },¶  {¶    "username": "jamesp",¶    "firstname": "James",¶    "lastname": "Parker",¶    "role": "Causal user",¶    "title": "Membership Director"¶  },¶  {¶    "username": "stevec",¶    "firstname": "Steve",¶    "lastname": "Carlson",¶    "role": "Public user",¶    "title": "Intern"¶  },¶  {¶    "username": "julieb",¶    "firstname": "Julie",¶    "lastname": "Bacon",¶    "role": "Non-staff blogger",¶    "title": "Non-staff blogger"¶  },¶  {¶    "username": "alexm",¶    "firstname": "Alex",¶    "lastname": "Morgan",¶    "role": "Vice President",¶    "title": "Vice President"¶  },¶  {¶    "username": "teresas",¶    "firstname": "Teresa",¶    "lastname": "Spain",¶    "role": "Assistant Director",¶    "title": "Assistant Director"¶  },¶  {¶    "username": "johnt",¶    "firstname": "John",¶    "lastname": "Tan",¶    "role": "Director of Marketing",¶    "title": "Director of Marketing"¶  },¶  {¶    "username": "judyg",¶    "firstname": "Judy",¶    "lastname": "Gray",¶    "role": "Non-Member",¶    "title": "Director of Education"¶  },¶  {¶    "username": "robertb",¶    "firstname": "Robert",¶    "lastname": "Baker",¶    "role": "Regular Member",¶    "title": "Manager of IT Services"¶  },¶  {¶    "username": "michellew",¶    "firstname": "Michelle",¶    "lastname": "Wilson",¶    "role": "Non-Member",¶    "title": "HR Director"¶  },¶  {¶    "username": "liamd",¶    "firstname": "Liam",¶    "lastname": "Duffield",¶    "role": "Regular Member",¶    "title": "Team Lead"¶  },¶  {¶    "username": "brodiea",¶    "firstname": "Brodie",¶    "lastname": "Archer",¶    "role": "Regular Member",¶    "title": "President"¶  },¶  {¶    "username": "nathanl",¶    "firstname": "Nathan",¶    "lastname": "Lauzier",¶    "role": "Non-Member",¶    "title": "Marketing Director"¶  },¶  {¶    "username": "dominiqueb",¶    "firstname": "Dominique",¶    "lastname": "Barclay",¶    "role": "Associate Member",¶    "title": "Vice President of Finance"¶  },¶  {¶    "username": "melissah",¶    "firstname": "Melissa",¶    "lastname": "Hodges",¶    "role": "Donor",¶    "title": ""¶  },¶  {¶    "username": "allysons",¶    "firstname": "Allyson",¶    "lastname": "Smith",¶    "role": "Prospect",¶    "title": ""¶  },¶  {¶    "username": "jamess",¶    "firstname": "James",¶    "lastname": "Stafford",¶    "role": "Staff2",¶    "title": ""¶  },¶  {¶    "username": "janiced",¶    "firstname": "Janice",¶    "lastname": "Darrow",¶    "role": "Non Group Member",¶    "title": "Non Group Member"¶  },¶  {¶    "username": "Unknown",¶    "firstname": "",¶    "lastname": "",¶    "role": "Unknown",¶    "title": ""¶  },¶  {¶    "username": "brianm",¶    "firstname": "Brian",¶    "lastname": "Murphy",¶    "role": "Tim",¶    "title": "Tim"¶  },¶  {¶    "username": "kallied",¶    "firstname": "Kallie",¶    "lastname": "Donovan",¶    "role": "Staff",¶    "title": "Staff"¶  },¶  {¶    "username": "teresas",¶    "firstname": "Teresa",¶    "lastname": "Spain",¶    "role": "Committee Admin",¶    "title": "Assistant Director"¶  },¶  // Inactive Users¶¶  {¶    "username": "terib",¶    "firstname": "Terri",¶    "lastname": "Boone",¶    "role": "Casual user",¶    "title": "Major Gifts Manager"¶  },¶  {¶    "username": "ryanc",¶    "firstname": "Ryan",¶    "lastname": "Bachman",¶    "role": "Club Full user",¶    "title": ""¶  },¶  {¶    "username": "albertb",¶    "firstname": "Albert",¶    "lastname": "Bachman",¶    "role": "Non Member Company",¶    "title": ""¶  },¶  {¶    "username": "")
Diff(DELETE,"ferriss")
Diff(INSERT,"sffull",¶    "password": "sffull4")
Diff(EQUAL,"",¶    "firstname": "Ferris",¶    "lastname": "Sagen",¶    "role": "Full user",¶    "title": ""¶  },¶  {¶    "username": "c")
Diff(DELETE,"harl")
Diff(INSERT,"w")
Diff(EQUAL,"es")
Diff(DELETE,"w")
Diff(INSERT,"t")
Diff(EQUAL,"",¶    "firstname": "Charles",¶    "lastname": "West",¶    "role": "Full user",¶    "title": ""¶  },¶  {¶    "username": "davidc",¶    "firstname": "David",¶    "lastname": "Cooke",¶    "role": "Casual user",¶    "title": ""¶  },¶  {¶    "username": "")
Diff(DELETE,"franciso")
Diff(INSERT,"FOBOE")
Diff(EQUAL,"",¶    "firstname": "Francis",¶    "lastname": "Oboe",¶    "role": "Full user",¶    "title": "Full user"¶  },¶  {¶    "username": "shannonl",¶    "firstname": "Shannon",¶    "lastname": "Lewis",¶    "role": "Non-Member",¶    "title": "Event Coordinator"¶  },¶  {¶    "username": "johnb",¶    "firstname": "John",¶    "lastname": "Barry",¶    "role": "Regular Member",¶    "title": "CEO"¶  },¶  {¶    "username": "sarahs",¶    "firstname": "Shannon",¶    "lastname": "Starns",¶    "role": "Company Admin",¶    "title": ""¶  },¶  //Generic User List for Regular QS¶  {¶    "username": "Tester1@email.com",¶    "firstname": "Tester1",¶    "lastname": "Tester1",¶    "role": "Full User1",¶    "title": "Full User1"¶  },¶  {¶    "username": "Tester2@email.com",¶    "firstname": "Tester2",¶    "lastname": "Tester2",¶    "role": "Full User2",¶    "title": "Full User2"¶  },¶  //Test User List for US¶  {¶    "username": "Tester1US@email.com",¶    "firstname": "Tester1US",¶    "lastname": "Tester1US",¶    "role": "Full User1US",¶    "title": "Full User1US"¶  },¶  {¶    "username": "Tester2US@email.com",¶    "firstname": "Tester2US",¶    "lastname": "Tester2US",¶    "role": "Full User2US",¶    "title": "Full User2US"¶  },¶  {¶    "username": "Tester3US@email.com",¶    "firstname": "Tester3US",¶    "lastname": "Tester3US",¶    "role": "Full User3US",¶    "title": "Full User3US"¶  },¶  {¶    "username": "Tester4US@email.com",¶    "firstname": "Tester4US",¶    "lastname": "Tester4US",¶    "role": "Full User4US",¶    "title": "Full User4US"¶  },¶  {¶    "username": "Tester5US@email.com",¶    "firstname": "Tester5US",¶    "lastname": "Tester5US",¶    "role": "Full User5US",¶    "title": "Full User5US"¶  },¶  {¶    "username": "Tester6US@email.com",¶    "firstname": "Tester6US",¶    "lastname": "Tester6US",¶    "role": "Full User6US",¶    "title": "Full User6US"¶  },¶  {¶    "username": "Tester7US@email.com",¶    "firstname": "Tester7US",¶    "lastname": "Tester7US",¶    "role": "Full User7US",¶    "title": "Full User7US"¶  },¶  //Test User List for AU¶  {¶    "username": "Tester1AU@email.com",¶    "firstname": "Tester1AU",¶    "lastname": "Tester1AU",¶    "role": "Full User1AU",¶    "title": "Full User1AU"¶  },¶  {¶    "username": "Tester2AU@email.com",¶    "firstname": "Tester2AU",¶    "lastname": "Tester2AU",¶    "role": "Full User2AU",¶    "title": "Full User2AU"¶  },¶  {¶    "username": "Tester3AU@email.com",¶    "firstname": "Tester3AU",¶    "lastname": "Tester3AU",¶    "role": "Full User3AU",¶    "title": "Full User3AU"¶  },¶  {¶    "username": "Tester4AU@email.com",¶    "firstname": "Tester4AU",¶    "lastname": "Tester4AU",¶    "role": "Full User4AU",¶    "title": "Full User4AU"¶  },¶  {¶    "username": "Tester5AU@email.com",¶    "firstname": "Tester5AU",¶    "lastname": "Tester5AU",¶    "role": "Full User5AU",¶    "title": "Full User5AU"¶  },¶  //Test User List for CA¶  {¶    "username": "Tester1CA@email.com",¶    "firstname": "Tester1CA",¶    "lastname": "Tester1CA",¶    "role": "Full User1CA",¶    "title": "Full User1CA"¶  },¶  {¶    "username": "Tester2CA@email.com",¶    "firstname": "Tester2CA",¶    "lastname": "Tester2CA",¶    "role": "Full User2CA",¶    "title": "Full User2CA"¶  },¶  {¶    "username": "Tester3CA@email.com",¶    "firstname": "Tester3CA",¶    "lastname": "Tester3CA",¶    "role": "Full User3CA",¶    "title": "Full User3CA"¶  },¶  {¶    "username": "Tester4CA@email.com",¶    "firstname": "Tester4CA",¶    "lastname": "Tester4CA",¶    "role": "Full User4CA",¶    "title": "Full User4CA"¶  },¶  {¶    "username": "Tester5CA@email.com",¶    "firstname": "Tester5CA",¶    "lastname": "Tester5CA",¶    "role": "Full User5CA",¶    "title": "Full User5CA"¶  },¶  //Test User List for NZ¶  {¶    "username": "Tester1NZ@email.com",¶    "firstname": "Tester1NZ",¶    "lastname": "Tester1NZ",¶    "role": "Full User1NZ",¶    "title": "Full User1NZ"¶  },¶  {¶    "username": "Tester2NZ@email.com",¶    "firstname": "Tester2NZ",¶    "lastname": "Tester2NZ",¶    "role": "Full User2NZ",¶    "title": "Full User2NZ"¶  },¶  {¶    "username": "Tester3NZ@email.com",¶    "firstname": "Tester3NZ",¶    "lastname": "Tester3NZ",¶    "role": "Full User3NZ",¶    "title": "Full User3NZ"¶  },¶  {¶    "username": "Tester4NZ@email.com",¶    "firstname": "Tester4NZ",¶    "lastname": "Tester4NZ",¶    "role": "Full User4NZ",¶    "title": "Full User4NZ"¶  },¶  {¶    "username": "Tester5NZ@email.com",¶    "firstname": "Tester5NZ",¶    "lastname": "Tester5NZ",¶    "role": "Full User5NZ",¶    "title": "Full User5NZ"¶  },¶  //Test User List for UK¶  {¶    "username": "Tester1UK@email.com",¶    "firstname": "Tester1UK",¶    "lastname": "Tester1UK",¶    "role": "Full User1UK",¶    "title": "Full User1UK"¶  },¶  {¶    "username": "Tester2UK@email.com",¶    "firstname": "Tester2UK",¶    "lastname": "Tester2UK",¶    "role": "Full User2UK",¶    "title": "Full User2UK"¶  },¶  {¶    "username": "Tester3UK@email.com",¶    "firstname": "Tester3UK",¶    "lastname": "Tester3UK",¶    "role": "Full User3UK",¶    "title": "Full User3UK"¶  },¶  {¶    "username": "Tester4UK@email.com",¶    "firstname": "Tester4UK",¶    "lastname": "Tester4UK",¶    "role": "Full User4UK",¶    "title": "Full User4UK"¶  },¶  {¶    "username": "Tester5UK@email.com",¶    "firstname": "Tester5UK",¶    "lastname": "Tester5UK",¶    "role": "Full User5UK",¶    "title": "Full User5UK"¶  },¶  {¶    "username": "stevec",¶    "firstname": "Steve",¶    "lastname": "Carlson",¶    "role": "Donor user",¶    "title": "Intern"¶")
Diff(INSERT,"  },¶  {¶    "username": "zzzlicenseqaadmin@advsol.com",¶    "password": "W&QMmx#tSi952eY6PKjqr*jc52spzW66YAr!q3iFsROkzYwP",¶    "firstname": "License",¶    "lastname": "TestUser",¶    "role": "License Administrator",¶    "title": "License Administrator"¶")
Diff(EQUAL,"  }¶]")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Users.json)
Diff(EQUAL,"Feature: MemberField¶	Misc tests related to member field bugs¶     Background:¶          Given I am on the Staff site as designated user System Administrator¶¶@VerifyMemberFieldReadOnly¶Scenario: Add MemberType field and verify it is read only after edit¶	Given I create a new form TestMemberTypeFieldReadOnlyDisabled with elements¶		| Category       | Field                |¶		| Contact fields | CsContact.MemberType |¶	When I edit the options for element CsContact.MemberType¶		| Option    | Value      |¶		| tbLabel     | MemberType |¶	Then I verify the checkbox input Read only for element CsContact.MemberType is disabled¶¶@ConfigureDesignationAllowOther¶Scenario: Add Designation field and set Allow Other option¶	Given I create a new member form TestDesignationAllowOther with elements¶		| Category       | Field                 |¶		| Contact ")
Diff(DELETE,"F")
Diff(INSERT,"f")
Diff(EQUAL,"ields | CsContact.Designation |¶        | Actions        | Submit button         |¶	When I edit the options for element CsContact.Designation¶		| Option   | Value       |¶		| checkbox | Allow other |¶	And I verify the checkbox option Allow other for element CsContact.Designation is checked ¶    And I publish content TestDesignationAllowOther with the member form¶    Then I navigate to the member page¶")
Diff(DELETE,"# todo!!: this is not working, the select field does not have the other option.¶#")
Diff(EQUAL,"	And I verify the select field for element CsContact.Designation contains ")
Diff(DELETE,"""")
Diff(INSERT,"Other")
Diff(EQUAL," value¶¶@ConfigureSuffixRequired¶Scenario: Add Suffix field and set Required Field option¶	Given I create a new member form TestSuffixRequiredField with elements¶		| Category       | Field            |¶		| Contact fields | CsContact.Suffix |¶		| Actions        | Submit button    |¶	When I edit the options for element CsContact.Suffix¶		| Option   | Value          |¶		| checkbox | Required field |¶	And I publish content TestSuffixRequiredField with the member form¶	Then I navigate to the member page¶	And I verify the select field for element CsContact.Suffix is required¶¶@TestContentPublishLocation¶Scenario: Add member field to content and check publish location¶	Given I create a new member form TestContentPublishLocation with elements¶		| Category       | Field            |¶		| Contact fields | CsContact.FirstName |¶	When I publish content TestContentPublishLocation with the member form¶	Then I open website content record¶")
Diff(DELETE,"")
Diff(EQUAL,"	And I verify content record publish location url loads")
Diff(INSERT,"¶¶@ConfigureCheckBoxLabelLocation¶Scenario: Configure checkbox label location¶	Given I create a new member form TestCheckBoxLabelLocation with elements¶		| Category       | Field						|¶		| Contact fields | CsContact.ExcludeDirectory	|		¶	When I edit the options for element CsContact.ExcludeDirectory¶		| Option			| Value          |¶		| ddLabelLocation   | Right |¶	And I publish content TestCheckBoxLabelLocation with the member form¶	Then I navigate to the member page¶	And I verify the checkbox label in form section R1C1W12 is Right aligned")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Forms/MemberField.feature)
Diff(EQUAL,"Feature: FormsDesigner¶¶Rise Forms Designer¶¶@NewExistingFormSaveAs¶Scenario: Add new form and try to save as with existing name¶	Given I am on the Staff site as designated user System Administrator¶	And I add new form named TestFormSaveAs with elements¶		| Category       | Field            |¶		| Contact fields | CsContact.ID     |¶		| Actions        | Submit button    |¶	When I attempt to save as with a existing form name¶	Then I verify validation message is visible¶¶@NewUniqueFormSaveAs¶Scenario: Add new form and try to save as with unique name¶	Given I am on the Staff site as designated user System Administrator¶	And I add new form named TestFormSaveAs with elements¶		| Category       | Field            |¶		| Contact fields | CsContact.ID     |¶		| Actions        | Submit button    |¶	When I attempt to save as with a unique form name¶	Then I verify validation message is hidden¶¶@NewFormAdvanced¶Scenario: Add new form with stateprovince then change to advanced mode¶	Given I am on the Staff site as designated user System Administrator¶	And I add new form named TestFormAdvanced with elements¶		| Category               | Field				 |¶		| Address fields.Address | Address.StateProvince |¶	Then I convert new form to advanced mode¶	When I add new form to content and publish¶	Then I navigate to the page created¶	And I verify page does not contain and runtime message")
Diff(INSERT,"¶¶Scenario: Forms CRUD¶	Given I am on the Staff site as designated user System Administrator¶	When I add new form named TestForm on Test group with elements¶		| Category       | Field               |¶		| Contact fields | CsContact.BirthDate |¶		| Contact fields | CsContact.FirstName |¶		| Contact fields | CsContact.Informal  |¶		| Actions        | Submit button       |¶		| Actions        | Cancel button       |¶	Then I verify form has elements¶		| Field               |¶		| CsContact.BirthDate |¶		| CsContact.FirstName |¶		| CsContact.Informal  |¶		| Submit.yes          |¶		| Cancel.no           |¶¶Scenario: Create numeric form content with panel designer source to compare to panel¶    Given I am on the Staff site as designated user System Administrator¶    And I create a Contact type Single-Instance specific panel named AStaticTest¶    And I add specific Currency property named Curr to the AStaticTest¶    And I add new form named NumericTestForm with elements¶    | Category                          | Field                  |¶    | Single instance.AStaticTestSource | AStaticTestSource.Curr |¶    | Actions                           | Submit button          |¶    When I add new form to content and publish¶    And I navigate to the page created¶    Then I verify client state text input field and submit rows¶    | Given    | Expected    |¶    | 12334.01 | 12,334.0100 |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Forms/FormDesigner.feature)
Diff(EQUAL,"Feature: Contact¶¶Scenario: Verify you can add a contact with an account¶	Given I am on the Staff site as designated user Staff¶	When I add contact¶		| Key          | Value             |¶		| FirstName    | New               |¶		| LastName     | Account           |¶		| Organization | OrgBorg           |¶		| Email        | test@imisdemo.com |¶		| Password     | demo123           |¶	Then I verify contact was added¶		| Key       | Value   |¶		| FirstName | New     |¶		| LastName  | Account |¶¶¶Scenario: Verify an anonymous user can create an account¶	Given I am on the Mbrr site¶	When I create a new contact¶		| Key        | Value             |¶		| FirstName  | Bob               |¶		| LastName   | Smith             |¶		| Country    | Zambia            |¶		| Address1   | 123 Some Street   |¶		| City       | Austin            |¶		| PostalCode | 11111             |¶		| Email      | test@imisdemo.com |¶		| Password   | demo123           |¶	Then I verify user was logged in¶		| Key       | Value |¶		| FirstName | Bob   |¶		| LastName  | Smith |¶¶Scenario: Verify angle brackets characters are allowed in panel editor field¶	Given I am on the Mbrr site as designated user Donor user¶	And I access the account page with panel definition¶	When I enter angle brackets in a panel text field¶	Then I verify angle brackets exist¶¶Scenario: Verify member cannot modify read only panel editor property¶	Given I am on the Mbrr site as designated user Donor user¶	And I add a value to the profile panel¶	When I configure profile panel editor property to read only¶	Then I verify profile panel value cannot be modified")
Diff(INSERT,"¶¶Scenario: Verify you cannot create accounts with bad passwords¶	Given I am on the Staff site as designated user Staff¶	When I add contact¶		| Key          | Value             |¶		| FirstName    | New               |¶		| LastName     | Account           |¶		| Organization | OrgBorg           |¶		| Email        | test@imisdemo.com |¶		| Password     | 123asdad<Dasd     |¶		| ExpectError  | True              |¶	Then I verify the Invalid Character Warning¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Community/Contact.feature)
Diff(EQUAL,"#TODO Need to create a custom tag that doesn't conflict with others¶Feature: RiSE Test Suite¶¶ This feature tests everything dealing with the RiSE menu¶¶@Pipeline¶Scenario Outline: Activate OOTB sites¶	Given I am on the Staff site as designated user System Administrator¶	When I activate OOTB <Site> site¶	Then I verify OOTB <Site> site was activated¶¶Examples:¶	| Site              |¶	| Donor             |¶	| Annual Conference |¶	| Member Responsive |¶¶¶¶Scenario: Verify dynamic page title¶	When I go to the Leadership Summit event page on Annual Conference site¶	Then I verify the page uses the dynamic page title¶¶@ProcessAutomation¶Scenario: Verify Process Automation Log search functionality¶	When I search Task in Process Automation Log¶	Then I verify Task has Succeeded on Process Automation Log page¶¶	¶@ProcessAutomation¶Scenario: Verify Process Automation task runs successfully¶	Given I am on the Staff site as designated user System Administrator¶	When I run process automation task abandoned¶	Then I verify abandoned has Succeeded on Process Automation Log page¶¶	¶@ProcessAutomation¶Scenario: Verify Process Automation scheduled task runs successfully¶	Given I am on the Staff site as designated user System Administrator¶	When I run a scheduled process automation task expiring¶	Then I verify expiring has Completed on Process Automation Log page¶¶@Ignored¶#this test needs to be rewritten for reliability. A system that publishes quickly will fail¶Scenario: Verify Access Settings UI Disabled while Publish Pending¶	Given I am on the Staff site as designated user System Administrator¶	When I create and publish random content under @/¶	Then I verify @/, TestContent, Access settings are disabled¶¶Scenario: Verify CCO URL parameter name¶	Given I am on the Staff site as designated user System Administrator¶	And I Create Content with Content Collection Organizer¶	When I configure CCO¶	Then I verify CCO Url Parameter Name is not overwritten¶¶@PanelDesigner¶Scenario: Create Panel Designer panel and source and property with an explicit list¶	Given I am on the Staff site as designated user System Administrator¶	And I create a Contact type Single-Instance panel named PanelTest¶	When I add panel datasource properties items to PanelTest panel and continue¶		| Name          | PreDefinedValuesType | PredefinedValuesOption |¶		| TestPropertyA | ExplicitValues       | 3                      |¶		| TestPropertyB | ExplicitValues       | 3                      |¶		| TestPropertyC | ExplicitValues       | 3                      |¶	Then I verify panel property explicit list is cleared¶¶Scenario: Create Panel Designer panel and source and property with reserved name¶	Given I am on the Staff site as designated user System Administrator¶	And I create a Contact type Single-Instance panel named ReservedNameTest¶	When I add panel datasource property name¶		| ReservedNames     |¶		| Item              |¶		| MarkedForDeleteOn |¶	Then I verify reserved property names were not added¶¶@PanelDesignerCreate¶Scenario: Create every type of panel in Panel Designer¶	Given I am on the Staff site as designated user System Administrator¶	And I create a <panelType> type <panelInstance> panel named <panelName>¶	When I add 2 random properties to the <panelName> grid¶	Then I verify the <panelName> panel was created¶¶Examples:¶	| panelType  | panelInstance   | panelName             |¶	| Contact    | Single-Instance | SIContactPanelTest    |¶	| Contact    | Multi-Instance  | MIContactPanelTest    |¶	| Event      | Single-Instance | SIEventPanelTest      |¶	| Event      | Multi-Instance  | MIEventPanelTest      |¶	| Standalone | Multi-Instance  | MIStandalonePanelTest |¶¶Scenario: Create Single Instance panel with all available properties¶	Given I am on the Staff site as designated user System Administrator¶	And I create a Contact type Single-Instance panel named AllPropsSIContactPanel¶	When I add one of every property to the AllPropsSIContactPanel grid¶	Then I verify the AllPropsSIContactPanel panel was created¶¶Scenario: Create Multi Instance panel with all available properties¶	Given I am on the Staff site as designated user System Administrator¶	And I create a Contact type Multi-Instance panel named AllPropsMIContactPanel¶	When I add one of every property to the AllPropsMIContactPanel grid¶	Then I verify the AllPropsMIContactPanel panel was created¶¶@PanelDesignerDelete¶Scenario: Delete every type of panel in Panel Designer¶	Given I am on the Staff site as designated user System Administrator¶	And I create a <panelType> type <panelInstance> panel named <panelName>¶	And I add 2 random properties to the <panelName> grid¶	When I delete the <panelName> panel¶	Then I verify the <panelName> panel was deleted¶¶Examples:¶	| panelType  | panelInstance   | panelName                   |¶	| Contact    | Single-Instance | DeleteSIContactPanelTest    |¶	| Contact    | Multi-Instance  | DeleteMIContactPanelTest    |¶	| Event      | Single-Instance | DeleteSIEventPanelTest      |¶	| Event      | Multi-Instance  | DeleteMIEventPanelTest      |¶	| Standalone | Multi-Instance  | DeleteMIStandalonePanelTest |¶	| Standalone | Multi-Instance  | DeleteMIStandalonePanelTest |¶¶Scenario: Delete every type of source from panel in Panel Designer¶	Given I am on the Staff site as designated user System Administrator¶	And I create a <panelType> type <panelInstance> panel named <panelName>¶	And I add 2 random properties to the <panelName> grid¶	When I delete the <panelName> panel source¶	Then I verify the <panelName> panel source was deleted¶¶Examples:¶	| panelType  | panelInstance   | panelName                    |¶	| Contact    | Single-Instance | DeleteSIContactSourceTest    |¶	| Contact    | Multi-Instance  | DeleteMIContactSourceTest    |¶	| Event      | Single-Instance | DeleteSIEventSourceTest      |¶	| Event      | Multi-Instance  | DeleteMIEventSourceTest      |¶	| Standalone | Multi-Instance  | DeleteMIStandaloneSourceTest |¶	| Standalone | Multi-Instance  | DeleteMIStandaloneSourceTest |¶¶Scenario: Delete every type of property from source in Panel Designer¶	Given I am on the Staff site as designated user System Administrator¶	And I create a <panelType> type <panelInstance> panel named <panelName>¶	And I add one of every property to the <panelName> source¶	When I delete every property in the <panelName> source¶	Then I verify that all properties were deleted in the <panelName> source¶¶Examples:¶	| panelType | panelInstance   | panelName               |¶	| Contact   | Single-Instance | DelAllPropsSISourceTest |¶	| Contact   | Multi-Instance  | DelAllPropsMISourceTest |¶¶Scenario: Remove every type of property from grid in Panel Designer¶	Given I am on the Staff site as designated user System Administrator¶	And I create a <panelType> type <panelInstance> panel named <panelName>¶	And I add one of every property to the <panelName> grid¶	When I delete every property in the <panelName> grid¶	Then I verify that all properties were deleted in the <panelName> grid¶¶Examples:¶	| panelType | panelInstance   | panelName             |¶	| Contact   | Single-Instance | DelAllPropsSIGridTest |¶	| Contact   | Multi-Instance  | DelAllPropsMIGridTest |")
Diff(INSERT,"¶¶Scenario: Add and edit a datasource property attribute in Panel Designer¶    Given I am on the Staff site as designated user System Administrator¶    And I create a Contact type Single-Instance specific panel named APropertyTest¶    And I add specific Text property named TestProperty1 to the APropertyTest source¶	When I edit the attribute LogAllChanges for property TestProperty1 for the panel named APropertyTest		¶	Then I verify the attribute LogAllChanges changes for property TestProperty1¶¶Scenario: I navigate directly to the ContentItemEdit control¶    Given I am on the Staff site as designated user System Administrator¶	When I navigate to a page to configure a content item¶		| BasePage					| ContentItemName    |¶		| CommunitiesDashboardPage	| BigButtonPanelEdit |¶	Then I verify the correct BigButtonPanelEdit item was modified¶¶@RiSEMaintenance¶Scenario: Verify publishing servers page loads correctly¶    Given I am on the Staff site as designated user System Administrator¶	When I navigate to the publishing servers page¶	Then I verify publishing servers grid loads")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Rise/Rise.feature)
Diff(EQUAL,"Feature: PanelDesignerDuplicateMergeSource¶¶Test that standalone panel is not included in duplicate merge¶¶Background:¶    Given I am on the Staff site as designated user System Administrator¶    And I create a Standalone type Multi-Instance specific panel named StandaloneDupeMergeTest¶    When I add specific Text property named TestProperty1 to the StandaloneDupeMergeTest grid¶¶@PanelDesignerDuplicateMerge¶Scenario: Verify standalone panel source is not included in duplicate merge¶    Given I add new panel named StandaloneDupeMergeTest to content and publish¶    Then I navigate to the content page created named StandaloneDupeMergeTest¶")
Diff(INSERT,"     And I verify panel description exists¶")
Diff(EQUAL,"     And I add a value to StandaloneDupeMergeTestSource for TestProperty1 property¶    Then I navigate to duplicate merge page for 18043 to verify StandaloneDupeMergeTestSource does not exist¶     And I remove source and panel for StandaloneDupeMergeTest¶    Then I verify the StandaloneDupeMergeTest panel was deleted¶     And I purge the content record StandaloneDupeMergeTest")
Diff(INSERT,"¶¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Features/Rise/PanelDesignerDuplicateMerge.feature)
Diff(EQUAL,"{¶    [Binding]¶    public class TaxationStepDef¶    {¶        public TaxationStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            FinanceSettingsTestMethods = new FinanceSettingsTestMethods(driver, context);¶        }¶¶        private FinanceSettingsTestMethods FinanceSettingsTestMethods { get; set; }¶¶        [When(@"I set financial entity")]¶        public void WhenISetTheFinancialEntity(Table data)¶        {¶            var financialEntityData = data.AsiCreateInstance<FinancialEntityData>();¶            var organizationDefaultCultureData = data.AsiCreateInstance<OrganizationDefaultCultureData>();¶            FinanceSettingsTestMethods.SetUpFinancialEntities(financialEntityData, organizationDefaultCultureData);¶        }¶¶")
Diff(INSERT,"        [Given(@"I set financial entity if not already set")]¶")
Diff(EQUAL,"        [When(@"I set financial entity if not already set")]¶        public void WhenISetTheFinancialEntityIfNotAlreadySet(Table data)¶        {¶            var financialEntityData = data.AsiCreateInstance<FinancialEntityData>();¶            var organizationDefaultCultureData = data.AsiCreateInstance<OrganizationDefaultCultureData>();¶            FinanceSettingsTestMethods.SetUpFinancialEntitiesIfNotAlready(financialEntityData, organizationDefaultCultureData);¶        }¶¶        [Then(@"I verify financial entity is set")]¶        public void ThenIVerifyAustraliaFinancialEntityIsSet(Table data)¶        {¶            var financialEntityData = data.AsiCreateInstance<FinancialEntityData>();¶            var organizationDefaultCultureData = data.AsiCreateInstance<OrganizationDefaultCultureData>();¶            FinanceSettingsTestMethods.VerifyFinancialEntities(financialEntityData, organizationDefaultCultureData);¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/TaxationStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class RiseStepDef¶    {¶        public RiseStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            RiseTestMethods = new RiseTestMethods(driver, context);¶            ProcessAutomationTestMethods = new ProcessAutomationTestMethods(driver, context);¶        }¶¶        private RiseTestMethods RiseTestMethods { get; }¶        private ProcessAutomationTestMethods ProcessAutomationTestMethods { get; }¶¶        private string PanelName { get; set; }¶¶        [When(@"I go to the Leadership Summit event page on Annual Conference site")]¶        public void WhenIGoToLeadershipSummit()¶        {¶            RiseTestMethods.GoToLeaderShipSubmit();¶        }¶¶        [Then(@"I verify the page uses the dynamic page title")]¶        public void ThenIVerifyDynamicPageTitle()¶        {¶            RiseTestMethods.VerifyDynamicPageTitle();¶        }¶¶        [When($@"I run process automation task (.*)")]¶        public void WhenIRunSpecificTask(string name)¶        {¶            ProcessAutomationTestMethods.RunTask(name);¶        }¶¶        [When($@"I run a scheduled process automation task {StepRegex.SingleWord}")]¶        [Then($@"I run a scheduled process automation task {StepRegex.SingleWord}")]¶        public void WhenIRunSpecificScheduledTask(string name)¶        {¶            ProcessAutomationTestMethods.ScheduledRunTask(name);¶        }¶¶        [When($@"I search {StepRegex.SingleWord} in Process Automation Log")]¶        public void WhenISearchInProcessAutomation(string name)¶        {¶            ProcessAutomationTestMethods.VerifyLogSearchFunctionality(name);¶        }¶¶        [Then($@"I verify {StepRegex.SingleWord} has (\b(?:Completed|Succeeded)\b) on Process Automation Log page")]¶        public void ThenIVerifySearchResultsInProcessAutomation(string value, string status)¶        {¶            ProcessAutomationTestMethods.VerifyLogSearchResults(value, status);¶        }¶¶        [When(@"I Create and Publish (.*) under (.*)")]¶        public void WhenIOpenAndPublishContent(string content, string path)¶        {¶            RiseTestMethods.CreateAndPublish(content, path);¶        }¶¶        [When(@"I create and publish random content under (.*)")]¶        public void WhenICreateRandomContentAndPublishContent(string path)¶        {¶            RiseTestMethods.CreateAndPublish(TestHelper.GenerateRandomString(10), path);¶        }¶¶        [Then(@"I verify (.*), (.*), (.*) are disabled")]¶        public void ThenIVerifyDisabled(string path, string content, string tab)¶        {¶            RiseTestMethods.VerifyDisabled(path, content, tab);¶        }¶¶        [Given(@"I Create (.*) with (.*)")]¶        public void WhenICreateTestContentWithCCO(string folderType, string contentType)¶        {¶            RiseTestMethods.CreateTestContentWithCCO(folderType, contentType);¶        }¶¶        [When(@"I configure CCO")]¶        public void WhenIConfigureCCO()¶        {¶            RiseTestMethods.WhenIConfigureCCO();¶        }¶")
Diff(INSERT,"        ")
Diff(EQUAL,"¶        [Then(@"I verify CCO Url Parameter Name is not overwritten")]¶        public void ThenIVerifyCCOURLParameterNameIsNotOverwritten()¶        {¶            RiseTestMethods.VerifyCCOURLParameterNameIsNotOverwritten();¶        }¶¶        [Given($@"I create a unique {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        [When($@"I create a unique {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        public void WhenICreateUniquePanelWithName(string parentType, string panelType, string panelName)¶        {¶            PanelName = panelName;¶            RiseTestMethods.CreatePanelWithName(parentType, panelType, panelName, null, false);¶        }¶¶        [Given($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        [When($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        public void WhenICreatePanelWithName(string parentType, string panelType, string panelName)¶        {¶            RiseTestMethods.CreatePanelWithName(parentType, panelType, panelName);¶        }¶¶        [Given($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        [When($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) panel named {StepRegex.SingleWord}")]¶        public void WhenICreatePanelWithName(string parentType, string panelType, string panelName, Table table)¶        {¶            RiseTestMethods.CreatePanelWithName(parentType, panelType, panelName, table);¶        }¶¶        [When($@"I add panel datasource properties items to {StepRegex.SingleWord} panel")]¶        public void WhenIAddPanelDatasourcePropertyWithExplicitList(Table table, string panelName)¶        {¶            RiseTestMethods.AddPanelDatasourcePropertiesWithExplicitList(table, panelName);¶        }¶        [When($@"I add panel datasource properties items to {StepRegex.SingleWord} panel and (exit|continue)")]¶        public void WhenIAddPanelDatasourcePropertyWithExplicitListAndSpecifyAction(string panelName, string actionAfter, Table table)¶        {¶            RiseTestMethods.AddPanelDatasourcePropertiesWithExplicitList(table, panelName, actionAfter);¶        }¶¶        [Given($@"I add panel datasource properties items and (exit|continue)")]¶        [When($@"I add panel datasource properties items and (exit|continue)")]¶        public void WhenIAddPanelDatasourcePropertiesItems(string actionAfter, Table table)¶        {¶            RiseTestMethods.AddPanelDatasourcePropertiesToGridWithExplicitList(table, PanelName, actionAfter);¶        }¶¶        [Then(@"I verify panel property explicit list is cleared")]¶        public void ThenIVerifyPanelPropertiesExplicitListIsCleared()¶        {¶            RiseTestMethods.VerifyPanelPropertiesExplicitListIsCleared();¶        }¶¶        [When(@"I add panel datasource property name")]¶        public void WhenIAddPanelDatasourcePropertyWithReservedName(Table table)¶        {¶            RiseTestMethods.AddPanelDatasourcePropertyWithReservedName(table);¶        }¶¶        [Then(@"I verify reserved property names were not added")]¶        public void ThenIVerifyReservedPropertyNameWasNotAdded()¶        {¶            RiseTestMethods.VerifyReservedPropertyNameWasNotAdded();¶        }¶¶        [Then(@"I save the panel and verify success")]¶        public void WhenIVerifyICanSaveThePanel()¶        {¶            RiseTestMethods.SavePanelVerifySuccess();¶        }¶¶        [When(@"I save and exit the Panel Designer")]¶        public void WhenISaveAndExitThePanelDesigner()¶        {¶            RiseTestMethods.SaveAndExitPanelDesigner();¶        }¶¶        [Then($@"I verify the {StepRegex.SingleWord} panel was (created|deleted)")]¶        public void ThenIVerifyTestContactPanelWasCreated(string panelName, string createdOrDeleted)¶        {¶            bool shouldPanelExist = createdOrDeleted.Equals("created", StringComparison.OrdinalIgnoreCase);¶            RiseTestMethods.VerifyPanelInList(panelName, shouldPanelExist);¶        }¶¶        [Given($@"I add (\d) random properties to the {StepRegex.SingleWord} (source|grid)")]¶        [When($@"I add (\d) random properties to the {StepRegex.SingleWord} (source|grid)")]¶        public void GivenIAddRandomPropertiesToThePanelSourceOrGrid(int numProps, string panelName, string destination)¶        {¶            RiseTestMethods.AddRandomPropertiesToPanel(numProps, panelName, destination);¶        }¶¶        [Given($@"I add one of every property to the {StepRegex.SingleWord} (source|grid)")]¶        [When($@"I add one of every property to the {StepRegex.SingleWord} (source|grid)")]¶        public void GivenIAddOneOfEveryPropertyToThePanelSourceOrGrid(string panelName, string destination)¶        {¶            RiseTestMethods.AddAllPropertiesToPanel(panelName, destination);¶        }¶¶        [When($@"I delete the {StepRegex.SingleWord} panel")]¶        public void WhenIDeleteThePanel(string panelName)¶        {¶            RiseTestMethods.DeletePanel(panelName);¶        }¶¶        [When($@"I delete every property in the {StepRegex.SingleWord} (source|grid)")]¶        public void WhenIDeleteEveryPropertyInTheSource(string panelName, string destination)¶        {¶            RiseTestMethods.DeleteProperties(panelName, destination);¶        }¶¶        [Then($@"I verify that all properties were deleted in the {StepRegex.SingleWord} (source|grid)")]¶        public void ThenIVerifyThatAllPropertiesWereDeletedInThePanel(string panelName, string destination)¶        {¶            RiseTestMethods.VerifyPropertiesDeleted(panelName, destination);¶        }¶¶        [When($@"I delete the {StepRegex.SingleWord} panel source")]¶        public void WhenIDeleteTheDeleteTheSource(string panelName)¶        {¶            RiseTestMethods.DeletePanelSource(panelName);¶        }¶¶        [Then($@"I verify the {StepRegex.SingleWord} panel source was (created|deleted)")]¶        public void ThenIVerifyThePanelSourceWasDeleted(string panelName, string createdOrDeleted)¶        {¶            bool shouldSourceExist = createdOrDeleted.Equals("created", StringComparison.OrdinalIgnoreCase);¶            RiseTestMethods.VerifyPanelSourceInList(panelName, shouldSourceExist);¶        }¶¶        [Given($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) specific panel named {StepRegex.SingleWord}")]¶        [When($@"I create a {StepRegex.SingleWord} type (Single-Instance|Multi-Instance) specific panel named {StepRegex.SingleWord}")]¶        public void WhenICreatePanelWithSpecificName(string parentType, string panelType, string panelName)¶        {¶            RiseTestMethods.CreatePanelWithName(parentType, panelType, panelName, null, false);¶        }¶¶        [Given($@"I add specific {StepRegex.SingleWord} property named {StepRegex.SingleWord} to the {StepRegex.SingleWord}")]¶        [When($@"I add specific {StepRegex.SingleWord} property named {StepRegex.SingleWord} to the {StepRegex.SingleWord}")]¶        public void GivenIAddSpecificPropertyToThePanel(string propertyType, string propertyName, string panelName)¶        {¶            RiseTestMethods.AddSpecificPropertyToPanel(propertyType, propertyName, panelName);¶        }¶¶        [Then($@"I remove source and panel for {StepRegex.SingleWord}")]¶        public void ThenIRemoveSourceAndPanel(string panelName)¶        {¶            RiseTestMethods.SourceAndPanelCleanup(panelName);¶        }¶¶        [When(@"I activate OOTB (.*) site")]¶        public void WhenIActivateOOTBSite(string site)¶        {¶            RiseTestMethods.ActivateOOTBSites(site);¶        }¶¶        [Then(@"I verify OOTB (.*) site was activated")]¶        public void ThenIVerifyOOTBSiteWasActivated(string site)¶        {¶            RiseTestMethods.VerificationOOTBSites(site);¶        }¶¶        [Given($@"I add specific {StepRegex.SingleWord} property named {StepRegex.SingleWord} to the {StepRegex.SingleWord} (source|grid)")]¶        [When($@"I add specific {StepRegex.SingleWord} property named {StepRegex.SingleWord} to the {StepRegex.SingleWord} (source|grid)")]¶        public void GivenIAddSpecificPropertyToThePanelSourceOrGrid(string propertyType, string propertyName, string panelName, string destination)¶        {¶            RiseTestMethods.AddSpecificPropertyToPanelSourceOrGrid(propertyType, propertyName, panelName, destination);¶        }¶¶        [Then($@"I purge the content record {StepRegex.SingleWord}")]¶        public void ThenPurgeContentRecordStandaloneDupeMergeTest(string contentName)¶        {¶            RiseTestMethods.PurgeContentRecord(contentName);¶        }¶¶        [Given($@"I add new panel named {StepRegex.SingleWord} to content and publish")]¶        [When($@"I add new panel named {StepRegex.SingleWord} to content and publish")]¶        public void WhenIPublishContentTestPageWithPanel(string panelPageName)¶        {¶            RiseTestMethods.CreateWebsiteContent(panelPageName);¶            RiseTestMethods.AddPanelEditorContent(panelPageName);¶        }¶¶        [Then($@"I navigate to the content page created named {StepRegex.SingleWord}")]¶        public void ThenINavigateToThePage(string contentName)¶        {¶            RiseTestMethods.NavigateToContent(contentName);¶        }¶¶        [Then($@"I add a value to {StepRegex.SingleWord} for {StepRegex.SingleWord} property")]¶        public void ThenIAddAValueToTestPropertyPanelProperty(string panelSource, string fieldPropertyName)¶        {¶            RiseTestMethods.AddValueToPanelProperty(panelSource, fieldPropertyName);¶        }¶¶        [Then($@"I navigate to duplicate merge page for {StepRegex.SingleWord} to verify {StepRegex.SingleWord} does not exist")]¶        public void ThenINavigateToDuplicateMergePageFor(string partyId, string panelSourceName)¶        {¶            RiseTestMethods.NavigateToDuplicateMergePage(partyId, panelSourceName);¶        }¶")
Diff(INSERT,"     ¶        [When($@"I edit the attribute {StepRegex.SingleWord} for property {StepRegex.SingleWord} for the panel named {StepRegex.SingleWord}")]¶        public void WhenIEditTheDatasourceProperty(string attributeName, string propertyName, string panelName)¶        {¶            RiseTestMethods.EditPanelSource(attributeName, propertyName, panelName);¶        }¶¶        [Then($@"I verify the attribute {StepRegex.SingleWord} changes for property {StepRegex.SingleWord}")]¶        public void ThenIVerifyPropertyAttributeValue(string attributeName, string propertyName)¶        {¶            RiseTestMethods.VerifyPropertyAttributeValue(attributeName, propertyName);¶        }¶¶        [Then(@"I verify panel description exists")]¶        public void ThenIVerifyPanelDisplayPropertyExists()¶        {¶            RiseTestMethods.VerifyPageConfigureProperties();¶        }¶¶¶        [When(@"I navigate to a page to configure a content item")]¶        public void WhenINavigateToAPageToModifyContentItemEdit(Table table)¶        {                        ¶            RiseTestMethods.NavigateToTheContentItemToEdit(table);¶        }¶¶        [Then(@"I verify the correct BigButtonPanelEdit item was modified")]¶        public void ThenIVerifyTheCorrectItemWasModified()¶        {¶            RiseTestMethods.VerifyContentItemCorrect();¶        }¶¶        [When(@"I navigate to the publishing servers page")]¶        public void NavigateToThePublishingServersPage()¶        {¶            RiseTestMethods.NavigateToThePublishingServersPage();¶        }¶¶        [Then(@"I verify publishing servers grid loads")]¶        public void VerifyPublishingServersGridLoads()¶        {¶            RiseTestMethods.VerifyPublishingServersGridLoads();¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/RiseStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class LicenseManagementStepDef¶    {¶        public LicenseManagementStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            LicenseManagementTestMethods = new LicenseManagementTestMethods(driver, context);¶        }¶¶        private LicenseManagementTestMethods LicenseManagementTestMethods { get; set; }¶¶        [Given(@"I resync the license")]¶        [When(@"I resync the license")]¶        public void WhenIResyncTheLicense()¶        {¶            LicenseManagementTestMethods.Resync();¶        }¶¶        [When(@"I check that iMIS is Licensed To (.*)")]¶        [Then(@"I check that iMIS is Licensed To (.*)")]¶        public void ThenICheckTheIMISIsLicensedTo(string licenseName)¶        {¶            LicenseManagementTestMethods.CheckLicenseName(licenseName);¶        }¶¶        [Given(@"I update the license to (.*)")]¶        [When(@"I update the license to (.*)")]¶        [Then(@"I update the license to (.*)")]¶        public void WhenIUpdateTheLicenseToDemo(string licenseKey)¶        {¶            LicenseManagementTestMethods.UpdateAndSync(licenseKey);¶        }¶¶        [Then(@"I reset the license")]¶        public void ResetLicense()¶        {¶            LicenseManagementTestMethods.ResetLicense();¶        }¶¶        [When(@"I apply license for (.*)")]¶        public void WhenIApplyLicenseForMembership(string licenseKey)¶        {¶            LicenseManagementTestMethods.UpdateAndSync(licenseKey);¶        }¶¶        [Then(@"I verify (.*) displays under Licensed features")]¶        public void ThenIVerifyMembershipDisplaysUnderLicensedFeaturesInIMIS(string productName)¶        {¶            LicenseManagementTestMethods.CheckLicensedProductName(productName);¶        }¶¶")
Diff(DELETE,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/LicenseManagementStepDef.cs)
Diff(EQUAL,"{¶    public static class StepRegex¶    {¶")
Diff(INSERT,"        //Ensure all regex are encapsulated in "()"¶")
Diff(EQUAL,"        public const string CaseInsensitive = "(?i)";¶¶        public const string SingleWord = "(\\w*)";¶¶        public const string OneOrMoreWord = "([\\s\\a-zA-Z&]+)";¶¶")
Diff(INSERT,"        public const string WordContainsClub = "([\\s\\a-zA-Z&]+[Club])";¶¶")
Diff(EQUAL,"        public const string Date = "(\\d*/\\d*/\\d*)";¶¶        public const string AnyDigit = "(\\d*)";¶        public const string AnyDecimal = "(\\d*\\.\\d*)";")
Diff(INSERT,"¶        public const string ArrayOfDigits = "((?:\\d+,\\s)*\\d+)";")
Diff(EQUAL,"¶¶        public const string WithFileExt = "(\\w+\\.+[a-z]{0,4})";¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        public const string UrlComponent = "(\\w_?-?\\.?\\/?\\??\\=?%?)*";¶¶        //CRUD verbs any case and suffix¶        public const string CRUDVerb = $"({CreateVerb}|{ReadVerb}|{UpdateVerb}|{DeleteVerb})";¶¶        public const string RecurringOptions = $"({Recurring}|{NonRecurring})";¶¶        public const string AuthenticatedOptions = $"({Authenticated}|{UnAuthenticated})";¶¶        public const string CreateVerb = $"{CaseInsensitive}creat\\w*";¶        public const string ReadVerb = $"{CaseInsensitive}read\\w*";¶        public const string UpdateVerb = $"{CaseInsensitive}updat\\w*";¶        public const string DeleteVerb = $"{CaseInsensitive}delet\\w*";¶¶        public const string Recurring = $"{CaseInsensitive}recurring";¶        public const string NonRecurring = $"{CaseInsensitive}nonrecurring";¶¶        public const string Authenticated = $"{CaseInsensitive}authenticated";¶        public const string UnAuthenticated = $"{CaseInsensitive}unauthenticated";")
Diff(INSERT,"¶¶        public const string TrueOrFalse = $"({True}|{False})";¶        public const string True = $"{CaseInsensitive}true";¶        public const string False = $"{CaseInsensitive}false";")
Diff(EQUAL,"¶    }¶}")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/StepRegex.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class CartStepDef¶    {¶        public CartStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            CartTestMethods = new CartTestMethods(driver, context);¶        }¶¶        public CartTestMethods CartTestMethods { get; set; }¶¶")
Diff(INSERT,"        [Given(@"I checkout items in the cart")]¶")
Diff(EQUAL,"        [When(@"I checkout items in the cart")]¶")
Diff(DELETE,"")
Diff(EQUAL,"        public void WhenICheckoutItemsInTheCart(Table data)¶        {¶            CartTestMethods.Checkout(data.AsiCreateInstance<CartData>());¶        }¶¶")
Diff(INSERT,"        /// <summary>¶        /// This step goes through all of checkout, but does not submit the cart.¶        /// </summary>¶        /// <param name="data"></param>¶        [Given(@"I start checking out items in the cart")]¶        [When(@"I start checking out items in the cart")]¶        public void IStartCheckingOutItemsInTheCart(Table data)¶        {¶            CartTestMethods.Checkout(data.AsiCreateInstance<CartData>(), shouldSubmitCart: false);¶        }¶¶")
Diff(EQUAL,"        [Given(@"I conditionally checkout items in the cart")]¶        [When(@"I conditionally checkout items in the cart")]¶        public void WhenIConditionallyCheckoutItemsInTheCart(Table data)¶        {¶            CartTestMethods.CheckoutConditionally(data.AsiCreateInstance<CartData>());¶        }¶¶        [When(@"I verify items in the cart")]¶        public void WhenIVerifyItemsInTheCart(Table data)¶        {¶            CartTestMethods.VerifyCartItems(data);¶        }¶")
Diff(DELETE,"")
Diff(EQUAL,"        ¶")
Diff(INSERT,"        [Given(@"I empty the cart")]¶")
Diff(EQUAL,"        [When(@"I empty the cart")]¶        public void WhenIEmptyTheCart()¶        {¶            CartTestMethods.EmptyCart();¶        }¶¶        [When(@"I view the cart")]¶        public void WhenIViewTheCart()¶        {¶            CartTestMethods.ViewCart();¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/CartStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ProductStepDef¶    {¶")
Diff(INSERT,"        private const string CreateProductDataKey = "createProductData";¶¶")
Diff(EQUAL,"        public ProductStepDef(IWebDriver driver, IAsiWebContext context")
Diff(INSERT,", ProductContext productContext")
Diff(EQUAL,")¶        {¶            ProductTestMethods = new ProductTestMethods(driver, context")
Diff(DELETE,")")
Diff(INSERT,", productContext);¶            Context = context")
Diff(EQUAL,";¶        }¶¶        public ProductTestMethods ProductTestMethods { get; ")
Diff(DELETE,"set; }¶")
Diff(INSERT,"}¶        public IAsiWebContext Context { get; }¶¶        [Given(@"I create a simple product")]")
Diff(EQUAL,"¶        [When(@"I create a ")
Diff(INSERT,"simple ")
Diff(EQUAL,"product")]¶        public void WhenICreateAProduct(Table data)¶        {¶            var createProductData = data.AsiCreateInstance<CreateProductData>();¶            ProductTestMethods.CreateSimpleProduct(createProductData);¶        }¶¶        [Given(@"I order product")]¶        [When(@"I order product")]¶        public void WhenIOrderProduct(Table data)¶        {¶            var cartData = data.AsiCreateInstance<CartData>();¶            ProductTestMethods.OrderProduct(cartData);¶        }¶¶        [Then(@"I see similar products")]¶        public void WhenIAddItem(Table data)¶        {¶            var cartData = data.AsiCreateInstance<CartData>();¶            ProductTestMethods.CompareSimilarProduct(cartData);¶        }¶¶        [Then(@"I verify the product was ordered")]¶        public void ThenIVerifyTheProductWasOrdered(Table data)¶        {¶            var cartData = data.AsiCreateInstance<CartData>();¶            ProductTestMethods.VerifyOrderedProduct(cartData);¶        }¶¶        [Then(@"I verify cart submit button is disabled")]¶        public void WhenIVerifyCartSubmitButtonIsDisabled()¶        {¶            ProductTestMethods.VerifyCartButtonIsDisabled();¶        }¶¶        [Then(@"I verify the company product was ordered")]¶        public void ThenIVerifyTheCompanyProductWasOrdered(Table data)¶        {¶            ProductTestMethods.VerifyCompanyOrderedProduct(data.AsiCreateInstance<CartData>());¶        }¶¶")
Diff(INSERT,"        [Then(@"I verify the product was added")]¶        public void VerifyTheProductWasAdded()¶        {¶            ProductTestMethods.VerifyProductWasAdded();¶        }¶¶        [Then(@"I verify the product is available")]¶        public void VerifyProductIsAvailable()¶        {¶            ProductTestMethods.VerifyProductIsAvailable();¶        }¶¶        [When(@"I have product data")]¶        public void HaveProductData(Table data)¶        {¶            var createProductData = data.AsiCreateInstance<CreateProductData>();¶            Context.AddData(CreateProductDataKey, createProductData);¶        }¶¶        [When(@"I create a product with collection of items")]¶        public void CreateAProductWithCollectionOfItems(Table data)¶        {¶            var createProductData = Context.GetData<CreateProductData>(CreateProductDataKey);¶            var productItemsData = data.CreateSet<ProductItemData>();¶            ProductTestMethods.CreateProductWithItems(createProductData, productItemsData);¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/ProductStepDef.cs)
Diff(EQUAL,"{¶    ¶    [Binding]¶    public class ItemStepDef¶    {¶¶        public ItemStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            ItemTestMethods = new ItemTestMethods(driver, context);¶        }¶¶        public ItemTestMethods ItemTestMethods { get; set; }¶¶")
Diff(INSERT,"        [Given(@"I add the current item to the cart")]¶")
Diff(EQUAL,"        [When(@"I add the current item to the cart")]¶        public void WhenIAddTheCurrentItemToTheCart()¶        {¶            ItemTestMethods.AddCurrentItemToCart();¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Commerce/ItemStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class SettingsStepDef¶    {¶        IWebDriver _driver;¶        IAsiWebContext _context;¶        public SettingsStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶            AboutiMIS = new AboutiMIS();¶            SystemOptionsTestMethods = new SystemOptionsTestMethods(driver, context);¶            SettingsTestMethods = new SettingsTestMethods(driver, context);¶        }¶¶        private AboutiMIS AboutiMIS { get; set; }¶        private SystemOptionsTestMethods SystemOptionsTestMethods { get; set; }¶        private SettingsTestMethods SettingsTestMethods { get; set; }¶¶        [When(@"I access the Learn More Link in the AboutiMIS page")]¶        public void WhenIAccessTheLearnMoreLinkInTheAboutImisPage()¶        {¶            var user = new ImisUser("AboutiMIS", ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶            user.AttemptsTo(Browse.InStaffSite(AboutiMIS.BaseUrl));¶            user.AttemptsTo(Click.On(AboutiMIS.LearnMore));¶             ¶        }¶¶        [Then(@"I verify that the Learn More Link takes me to the why imis page")]¶        public void ThenIVerifyThatTheLearnMoreLinkTakesMeToTheWhyImisPage()¶        {¶            var user = new ImisUser("AboutiMIS", ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶")
Diff(INSERT,"            ¶            user.WaitsUntil( WindowCount.Of(), IsEqualTo.Value(2));¶")
Diff(EQUAL,"            var windowHandles = _driver.WindowHandles;¶            user.AttemptsTo(SwitchWindow.To(windowHandles[1]));¶            user.AsksFor(CurrentUrl.FromBrowser()).Should().Be("https://www.imis.com/why-imis");¶            user.AsksFor(Appearance.Of(AboutiMIS.ResourcesForYouTitle)).Should().BeTrue();¶        }¶¶        [Given(@"I create a lookup table (.*)")]¶        public void GivenICreateALookupTable(string tableName, Table table)¶        {¶            SystemOptionsTestMethods.CreateALookupTable(tableName, table);            ¶        }¶¶        [When($@"I access the {StepRegex.SingleWord} system configuration page")]¶        public void WhenIAccessTheSystemConfigPage(string pageName)¶        {¶            SettingsTestMethods.NavigateToSystemConfigPage(pageName);¶        }¶¶        [Then(@"I verify the system configuration fields are displayed")]¶        public void ThenIVerifyTheSystemConfigurationFieldsAreDisplayed(Table table)¶        {¶            SettingsTestMethods.VerifySystemConfigFields(table);¶        }¶¶    }¶")
Diff(INSERT,"¶     public class WindowCount : AbstractWebQuestion<int>¶    {¶        public static WindowCount Of() => new WindowCount();¶        public override int RequestAs(IActor actor, IWebDriver driver) => driver.WindowHandles.Count;¶        public override string ToString() {¶            return  $"window count";¶        }¶    }¶¶")
Diff(EQUAL,"}")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Settings/SettingsStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class MemberFieldStepDef¶    {¶¶        public MemberFieldStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            FormTestMethods = new FormTestMethods(driver, context);¶            RiseTestMethods = new RiseTestMethods(driver, context);¶        }¶        private FormTestMethods FormTestMethods { get; set; }¶        private RiseTestMethods RiseTestMethods { get; set; }¶        private string FormName { get; set; }¶        private string PageName { get; set; }¶¶        [Given($@"I create a new member form {StepRegex.SingleWord} with elements")]¶        public void WhenICreateANewFormWithElements(string name, Table table)¶        {         ¶            FormName = TestHelper.GenerateRandomName(name);¶            FormTestMethods.NavigateAndCreateForm(FormName, table);¶        }¶¶        [When(@"I edit the options for element (.*)")]¶        public void WhenIEditElements(string element, Table table)¶        {¶            FormTestMethods.EditElements(element, table);¶        }¶¶        [Given(@"I edit the options for unique element (.*) with id (.*)")]¶        [When(@"I edit the options for unique element (.*) with id (.*)")]¶        public void WhenIEditUniqueElements(string element, string uniqueId, Table table)¶        {¶            FormTestMethods.EditElements(element, table, uniqueId);¶        }¶¶        [Then(@"I verify the (.*) input (.*) for element (.*) is (.*)")]¶        public void ThenIVerifyTheAttributesForTheElements(string inputType, string optionName, string element, string enabled)¶        {¶            FormTestMethods.VerifyElementOptionEnabled(inputType, optionName, element, enabled == "enabled");¶        }¶¶        [When(@"I verify the (.*) option (.*) for element (.*) is (.*)")]¶        public void WhenIVerifyElementOptionValue(string inputType, string optionName, string element, string _checked)¶        {¶            FormTestMethods.VerifyElementOptionValue(inputType, optionName, element, _checked == "checked");¶        }¶¶        [When(@"I publish content (.*) with the member form")]¶        public void WhenIPublishContentTestPageWithMemberForm(string pageName)¶        {¶            PageName = TestHelper.GenerateRandomName(pageName);¶            RiseTestMethods.CreateWebsiteContent(PageName);¶            FormTestMethods.AddFormContent(FormName);¶        }¶¶        [Then(@"I navigate to the member page")]¶        public void ThenINavigateToThePage()¶        {¶            FormTestMethods.NavigateToContent(PageName);¶        }¶¶        [Then(@"I verify the (.*) field for element (.*) contains (.*) value")]¶        public void ThenIVerifyElementContainsValue(string inputType, string element, string value)¶        {¶            FormTestMethods.VerifyElementContainsValue(inputType, element.Replace(".", "_"), value);¶        }¶¶        [Then(@"I verify the (.*) field for element (.*) is (.*)")]¶        public void ThenIVerifyElementRequiredOption(string inputType, string element, string required)¶        {¶            FormTestMethods.VerifyElementRequiredOption(inputType, element.Replace(".", "_"), required);¶        }¶¶        [Then(@"I open website content record")]¶        public void ThenIOpenWebsiteContentRecord()¶        {¶            RiseTestMethods.OpenWebsiteContent(PageName);¶        }¶¶        [Then(@"I verify content record publish location url loads")]¶        public void ThenIVerifyPublishLocationUrlLoads()¶        {¶            RiseTestMethods.VerifyPublishLocationUrlLoads(PageName);¶        }¶¶")
Diff(INSERT,"        [Then(@"I verify the (.*) label in form section (.*) is (Left|Right) aligned")]¶        public void VerifyTheElementLabelLocation(string inputType, string section, string location)¶        {¶            FormTestMethods.VerifyElementLabelLocation(inputType, section, location);¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/MemberFieldStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ContactEmailAddressSyncSteps¶    {¶        public ")
Diff(INSERT," ")
Diff(EQUAL,"ContactEmailAddressSyncSteps(IWebDriver driver, IAsiWebContext context)¶        {¶            FormTestMethods = new FormTestMethods(driver, context);¶            SystemOptionsTestMethods = new SystemOptionsTestMethods(driver, context);¶            ContactTestMethods = new ContactTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶        }¶¶        private FormTestMethods FormTestMethods { get; set; }¶        private SystemOptionsTestMethods SystemOptionsTestMethods { get; set; }¶        private ContactTestMethods ContactTestMethods { get; set; }¶        private SignInTestMethods SignInTestMethods { get; set; }¶¶¶        [When(@"the Address Sync Options are configured")]¶        public void WhenTheAddressSyncOptionsAreConfigured(Table table)¶        {¶            SystemOptionsTestMethods.NavigateToSettings();¶            SystemOptionsTestMethods.SetAddressSyncSettings(table);¶            Thread.Sleep(2000); //delay while form submit finishes¶        }¶¶        [When(@"I submit the form")]¶        public void WhenISubmitTheForm()¶        {")
Diff(INSERT,"            ")
Diff(EQUAL,"¶            FormTestMethods.SubmitForm();¶            Thread.Sleep(2000); //delay while form submit finishes¶        }¶¶        [Then(@"I verify the mini profile values")]¶        public void WhenIVerifyTheMiniProfileValues(Table table)¶        {¶            ContactTestMethods.VerifyMiniProfileValues(table);¶        }¶¶        [Then(@"I verify the (.*) tab values")]¶        public void ThenIVerifyTheTabValues(string tab, Table table)¶        {¶            ContactTestMethods.VerifyProfileTabValues(tab, table);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/ContactEmailAddressSyncSteps.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class FormDesignerStepDef¶    {¶¶        public FormDesignerStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            FormTestMethods = new FormTestMethods(driver, context);¶            RiseTestMethods = new RiseTestMethods(driver, context);¶        }¶¶        private FormTestMethods FormTestMethods { get; set; }¶        private RiseTestMethods RiseTestMethods { get; set; }¶        private string FormName { get; set; }¶        private string FormSaveAsName { get; set; }¶        private string PageName { get; set; }¶¶        [Given($@"I add new form named {StepRegex.SingleWord} with elements")]¶        public void WhenICreateANewFormWithElements(string name, Table table)¶        {¶            ")
Diff(DELETE,"FormName = TestHelper.GenerateRandomName(name);")
Diff(INSERT,"WhenICreateANewFormWithElements(name, null, table);¶        }¶        [When($@"I add new form named {StepRegex.SingleWord} on {StepRegex.SingleWord} group with elements")]¶        public void WhenICreateANewFormWithElements(string name, string groupName, Table table)¶        {¶            FormName = TestHelper.GenerateRandomName(name);¶            if (!string.IsNullOrEmpty(groupName))¶                groupName = TestHelper.GenerateRandomName(groupName);¶")
Diff(EQUAL,"¶            FormTestMethods.NavigateAndCreateForm(FormName, table")
Diff(INSERT,", groupName: groupName")
Diff(EQUAL,");¶            FormSaveAsName = FormName;¶            PageName = FormName;¶        }¶¶")
Diff(INSERT,"        [Then($@"I add new form to content and publish")]¶")
Diff(EQUAL,"        [When($@"I add new form to content and publish")]¶        public void WhenIPublishContentTestPageWithMemberForm()¶        {¶            RiseTestMethods.CreateWebsiteContent(PageName);¶            FormTestMethods.AddFormContent(FormName);¶        }¶¶        [When($@"I attempt to save as with a {StepRegex.SingleWord} form name")]¶        public void GivenIAttemptToSaveAs(string saveAsType)¶        {¶            FormTestMethods.AttemptToSaveAs(FormSaveAsName, saveAsType);¶        }¶¶        [Then($@"I verify validation message is {StepRegex.SingleWord}")]¶        public void ThenIVerifyValidationMessage(string displayState)¶        {¶            FormTestMethods.VerifyValidationMessage(displayState);¶        }¶¶")
Diff(INSERT,"        [Then("I verify form has elements")]¶        public void ThenIVerifyFormHasElements(Table table)¶        {¶            FormTestMethods.VerifyFormHasElements(table);¶        }¶¶")
Diff(EQUAL,"        [Then(@"I convert new form to advanced mode")]¶        public void ThenIConvertFormToAdvancedMode()¶        {¶            FormTestMethods.ConvertFormToAdvancedMode(FormName);¶        }¶¶")
Diff(INSERT,"        [When(@"I navigate to the page created")]¶")
Diff(EQUAL,"        [Then(@"I navigate to the page created")]¶        public void ThenINavigateToThePage()¶        {¶            FormTestMethods.NavigateToContent(PageName);¶        }¶¶        [Then(@"I verify page does not contain and runtime message")]¶        public void ThenIVerifyPageDoesNotContainAndError()¶        {¶            FormTestMethods.CheckForRuntimeMessage();¶        }¶¶        [Given($@"I add new form named {StepRegex.SingleWord} that required approval with elements")]¶        [When($@"I add new form named {StepRegex.SingleWord} that required approval with elements")]¶        public void WhenICreateANewFormThatRequiredApprovalWithElements(string name, Table table)¶        {¶            FormName = TestHelper.GenerateRandomName(name);¶            FormTestMethods.NavigateAndCreateForm(FormName, table, true);¶            FormSaveAsName = FormName;¶            PageName = FormName;¶        }¶¶        [Then(@"I verify multi instance add button exists")]¶        public void ThenIVerifyMultiInstanceAddButtonExists()¶        {¶            FormTestMethods.VerifyMultiInstanceAddButtonExists();¶        }¶¶        [Then(@"I submit the form with values")]¶        public void ThenIModifyFormValuesAndSave(Table table)¶        {¶            FormTestMethods.ModifyFormValuesAndSave(table);¶        }¶¶        [Then(@"I verify form submitter link loads profile")]¶        public void ThenIVerifyFormSubmitterLinkLoadsProfile()")
Diff(DELETE," ")
Diff(EQUAL,"¶        {¶            FormTestMethods.VerifyFormSubmitterLinkLoadsProfile();¶        }¶¶")
Diff(INSERT,"        [Then(@"I verify client state text input field and submit rows")]¶        public void VerifyClientStateTextInputFieldAndSubmitRows(Table table)¶        {¶            FormTestMethods.CheckForRuntimeMessage();¶            FormTestMethods.VerifyValuesWithElements(table);¶            FormTestMethods.CheckForRuntimeMessage();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Forms/FormDesignerStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class EnterGiftsStepDef¶    {¶        public EnterGiftsTestMethods EnterGiftsTestMethods { get; }¶        public SignInTestMethods SignInTestMethods { get; set; }¶        public Asi.Selenium.Core.Utilities.Authentication Authentication { get; set; }")
Diff(INSERT,"¶        public ReceiptingTestMethods ReceiptingTestMethods { get; set; }")
Diff(EQUAL,"¶¶        //because for some of these we need to persist and verify the original gift data¶        private GiftData PersistedGiftInfo { get; set; }")
Diff(INSERT,"¶        public string ReceiptNumber { get; set; }")
Diff(EQUAL,"¶¶        public ContactTestMethods ContactTestMethods { get; }¶¶        public EnterGiftsStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            EnterGiftsTestMethods = new EnterGiftsTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶            Authentication = new Asi.Selenium.Core.Utilities.Authentication(driver, context);¶            ContactTestMethods = new ContactTestMethods(driver, context);¶")
Diff(INSERT,"            ReceiptingTestMethods = new ReceiptingTestMethods(driver, context);¶")
Diff(EQUAL,"        }¶¶        [When(@"I enter a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b)")]¶        public void WhenIEnterAGift(string giftType, Table data)¶        {¶            EnterGiftsTestMethods.EnterGift(giftType, data.CreateInstance<GiftData>(), data.CreateInstance<CartData>());¶        }¶¶        [Given(@"a System Administrator enters a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b)")]¶        public void GivenASystemAdministratorEntersAGift(string giftType, Table data)¶        {¶")
Diff(INSERT,"            GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(giftType, data);¶            Authentication.LogOut(false);¶        }¶¶        [Given(@"a System Administrator enters a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b) and remains logged in")]¶        public void GivenASystemAdministratorEntersAGiftAndRemainsLoggedIn(string giftType, Table data)¶        {¶")
Diff(EQUAL,"            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            var giftData = data.CreateInstance<GiftData>();¶            if (PersistedGiftInfo == null) PersistedGiftInfo = new GiftData();¶            if (giftData.FirstName == null) giftData.FirstName = TestHelper.GenerateRandomString(10);¶            if (giftData.LastName == null) giftData.LastName = giftData.FirstName;¶            EnterGiftsTestMethods.EnterGift(giftType, giftData, data.CreateInstance<CartData>());¶            PersistedGiftInfo = EnterGiftsTestMethods.PersistedGiftInfo;¶            PersistedGiftInfo.FirstName = giftData.FirstName;¶            PersistedGiftInfo.LastName = giftData.LastName;¶")
Diff(DELETE,"            Authentication.LogOut(false);¶")
Diff(EQUAL,"        }¶¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        [Given(@"a System Administrator enters a Pledge and (\b(?:makes a partial payment|pays in full|reverses a partial payment)\b)")]¶        public void GivenASystemAdministratorEntersAPledgeAndMakesAPartialPayment(string partialPayment, Table table)¶        {¶            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            var giftData = table.CreateInstance<GiftData>();¶            if (PersistedGiftInfo == null) PersistedGiftInfo = new GiftData();¶            if (giftData.FirstName == null) giftData.FirstName = TestHelper.GenerateRandomString(10);¶            if (giftData.LastName == null) giftData.LastName = giftData.FirstName;¶¶            EnterGiftsTestMethods.EnterGift("Pledge", giftData, new CartData()); //cart data isn't applicable to pledges")
Diff(INSERT," here")
Diff(EQUAL,"¶            PersistedGiftInfo = EnterGiftsTestMethods.PersistedGiftInfo;¶            PersistedGiftInfo.FirstName = giftData.FirstName;¶            PersistedGiftInfo.LastName = giftData.LastName;¶¶            var cartData = table.CreateInstance<CartData>();¶            if (cartData.CheckNumber == "Random") cartData.CheckNumber = TestHelper.GenerateRandomString(10);¶¶            EnterGiftsTestMethods.FindAndPayPledge(giftData, cartData);¶            if (partialPayment == "reverses a partial payment")¶                GivenIReverseThePledgePayment();¶        }¶¶        [Then(@"I find the invoice and verify the balance is (.*)")]¶        public void ThenIFindTheInvoiceAndVerifyTheBalance(string balance)¶        {¶            EnterGiftsTestMethods.FindAndViewInvoice(PersistedGiftInfo);¶            Thread.Sleep(3000);¶            EnterGiftsTestMethods.VerifyBalance(balance);¶        }¶¶        [Then(@"I verify the credit memo is for the amount (.*)")]¶        public void ThenIVerifyTheCreditMemo(string amount)¶        {¶            EnterGiftsTestMethods.VerifyCreditAmount(amount);¶        }¶¶        [Then(@"I verify the debit memo is for the amount (.*)")]¶        public void ThenIVerifyTheDebitMemoIsForTheAmount(string amount)¶        {¶            EnterGiftsTestMethods.VerifyDebitAmount(amount);¶        }¶¶        [Given(@"a System Administrator creates a (\b(?:Gift|Pledge|Installment Pledge|Pledge Payment)\b) without saving")]¶        public void GivenASystemAdministratorCreatesAGiftWithoutSaving(string giftType, Table data)¶        {¶            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            var giftData = data.CreateInstance<GiftData>();¶            if (PersistedGiftInfo == null) PersistedGiftInfo = new GiftData();¶            if (giftData.FirstName == null) giftData.FirstName = TestHelper.GenerateRandomString(10);¶            if (giftData.LastName == null) giftData.LastName = giftData.FirstName;¶            EnterGiftsTestMethods.CreateSingleGift(giftType, giftData, data.CreateInstance<CartData>());¶            PersistedGiftInfo = EnterGiftsTestMethods.PersistedGiftInfo;¶            PersistedGiftInfo.FirstName = giftData.FirstName;¶            PersistedGiftInfo.LastName = giftData.LastName;¶        }¶¶        [Given(@"the user enters soft credit info")]¶        public void GivenUserEntersSoftCreditInfo(Table data)¶        {¶            EnterGiftsTestMethods.ExpandSoftCreditEntry();¶            int rowindex = 0;¶            foreach (var row in data.Rows)¶            {¶                string amount, percentage, softcredit;¶                row.TryGetValue("Amount", out amount);¶                row.TryGetValue("Percentage", out percentage);¶                row.TryGetValue("SoftCredit", out softcredit);¶                var softCreditData = new SoftCreditData()¶                { ¶                    Amount = amount,¶                    SoftCredit = softcredit,¶                    Percentage = percentage                    ¶                };¶¶                EnterGiftsTestMethods.EnterSoftCreditData(softCreditData, ++rowindex);¶            }¶            Waiting.InSeconds(2);¶        }¶¶        [When(@"the user adjusts soft credit info")]¶        public void GivenUserAdjustsSoftCreditInfo(Table data)¶        {¶            int rowindex = 0;¶            foreach (var row in data.Rows)¶            {¶                string amount, percentage, softcredit;¶                row.TryGetValue("Amount", out amount);¶                row.TryGetValue("Percentage", out percentage);¶                row.TryGetValue("SoftCredit", out softcredit);¶                var softCreditData = new SoftCreditData()¶                {¶                    Amount = amount,¶                    SoftCredit = softcredit,¶                    Percentage = percentage¶                };¶¶                EnterGiftsTestMethods.EnterSoftCreditData(softCreditData, ++rowindex);¶            }¶            Waiting.InSeconds(2);¶        }¶¶        [Given(@"the user saves the (\b(?:gift|multi soft credit gift)\b) and processes the gift entry batch")]¶        public void GivenUserSavesAndProcessesGift(string multiSoftCredit)¶        {¶            EnterGiftsTestMethods.SaveGiftEntry(multiSoftCredit == "gift");¶            EnterGiftsTestMethods.ClickProcessBatch();¶            Authentication.LogOut(false);¶        }¶¶        [When(@"I make a payment on the pledge")]¶        public void WhenIMakeAPaymentOnThePledge(Table data)¶        {¶            EnterGiftsTestMethods.FindAndPayPledge(data.CreateInstance<GiftData>(), data.CreateInstance<CartData>());¶        }¶¶        [Then(@"I see Create Batch")]¶        public void ThenISeeCreateBatch()¶        {¶            EnterGiftsTestMethods.ClickCreateBatch();¶        }¶¶        [Then(@"I verify user has the following message displayed: (.*)")]¶        public void ThenIVerifyUserHasTheFollowingMessageDisplayed(string message)¶        {¶            EnterGiftsTestMethods.VerifyGiftAppMessage(message);¶        }¶¶¶        [Then(@"I verify user has the following date message displayed: (.*)")]¶        public void ThenIVerifyUserDateMessage(string message)¶        {¶            EnterGiftsTestMethods.VerifyGiftAppDateMessage(message);¶        }¶¶        [Then(@"I verify user does not have the following date message displayed: (.*)")]¶        public void ThenIVerifyUserDoesNotSeeTheMessage(string message)¶        {¶            EnterGiftsTestMethods.VerifyGiftAppDateMessage(message, false);¶        }¶¶        [When(@"I select the gift entry option (.*)")]¶        public void WhenISelectTheGiftEntryOption(string giftEntryOption)¶        {¶            EnterGiftsTestMethods.SelectGiftEntryOption(giftEntryOption);¶        }¶¶        [Given(@"I create a New Adjustment Batch")]¶        [When(@"I create a New Adjustment Batch")]¶        public void WhenICreateANewAdjustmentBatch(Table data)¶        {¶            var adjustmentBatchData = (data == null) ? new AdjustGiftBatchData() { BatchDate = "TODAY" }¶                                                        : data.AsiCreateInstance<AdjustGiftBatchData>();¶            EnterGiftsTestMethods.AdjustGift(adjustmentBatchData);¶            EnterGiftsTestMethods.ClickCreateBatch();¶        }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"        [Given(@"user (.*) adjusts the (\b(?:Pledge|Gift|Pledge With Multiple Soft Credits|Gift With Multiple Soft Credits)\b) for (.*)")]¶        [When(@"user (.*) adjusts the (\b(?:Pledge|Gift|Pledge With Multiple Soft Credits|Gift With Multiple Soft Credits)\b) for (.*)")]¶        public void GivenUserAdjustsTheGift(string userName, string giftType, string batchDate)¶        {¶            if (!string.IsNullOrEmpty(userName))¶                SignInTestMethods.ToTheSiteWithUserName(userName, "Staff");¶            var adjustmentBatchData = new AdjustGiftBatchData() { BatchDate = batchDate };¶            EnterGiftsTestMethods.AdjustGift(adjustmentBatchData);¶            EnterGiftsTestMethods.ClickCreateBatch();¶¶            var giftSearchData = new GiftSearchData();¶            giftSearchData.LastName = PersistedGiftInfo.LastName;¶            giftSearchData.FirstName = PersistedGiftInfo.FirstName;¶            giftSearchData.Donor = PersistedGiftInfo.Donor;¶            giftSearchData.Type = giftType.Contains("Gift") ? "Gift" : "Pledge";¶¶            EnterGiftsTestMethods.FindGiftToAdjust(giftSearchData);¶            PersistedGiftInfo = EnterGiftsTestMethods.GetGiftInfo(false, (giftType == "Gift") || (giftType == "Pledge"));¶            PersistedGiftInfo.FirstName = giftSearchData.FirstName;¶            PersistedGiftInfo.LastName = giftSearchData.LastName;¶        }¶¶        [Given(@"user (.*) adjusts a gift for (.*)")]¶        [When(@"user (.*) adjusts a gift for (.*)")]¶        public void GivenUserAdjustsAGift(string userName, string batchDate, Table data)¶        {¶            SignInTestMethods.ToTheSiteWithUserName(userName, "Staff");¶            var adjustmentBatchData = new AdjustGiftBatchData() { BatchDate = batchDate };¶            EnterGiftsTestMethods.AdjustGift(adjustmentBatchData);¶            EnterGiftsTestMethods.ClickCreateBatch();¶¶            var giftSearchData = data.AsiCreateInstance<GiftSearchData>();¶            EnterGiftsTestMethods.FindGiftToAdjust(giftSearchData);¶            PersistedGiftInfo = EnterGiftsTestMethods.GetGiftInfo(false);¶            PersistedGiftInfo.LastName = giftSearchData.LastName;¶            PersistedGiftInfo.FirstName = giftSearchData.FirstName;¶        }¶¶        [Then(@"I verify the hidden and read only adjust gift fields for a Level (.*) FR user")]¶        public void ThenIVerifyTheHiddenAndReadOnlyAdjustGiftFieldsForALevelFRUser(int level)¶        {¶            EnterGiftsTestMethods.VerifyHiddenAdjustGiftFields(level);¶            EnterGiftsTestMethods.VerifyReadOnlyAdjustGiftFields(level);¶        }¶¶        [Then(@"I verify the request field is read only")]¶        public void ThenIVerifyTheRequestFieldIsReadOnly()¶        {¶            EnterGiftsTestMethods.VerifyReadOnlyAdjustRequestFields();¶        }¶¶        [Then(@"I verify the following adjust gift default values")]¶        public void ThenIVerifyTheFollowingAdjustGiftDefaultValues(Table table)¶        {¶            EnterGiftsTestMethods.VerifyDefaultAdjustGiftValues(table.AsiCreateInstance<GiftData>());¶        }¶¶        [Then(@"I verify the adjust gift request default value is (.*)")]¶        public void ThenIVerifyTheAdjustGiftRequestDefaultValue(string request)¶        {¶            EnterGiftsTestMethods.VerifyDefaultAdjustGiftRequestValue(new GiftData()¶            {¶                Request = request¶            });¶        }¶¶        [Then(@"I verify the adjust gift default values")]¶        public void ThenIVerifyTheAdjustGiftDefaultValues()¶        {¶            EnterGiftsTestMethods.VerifyDefaultAdjustGiftValues(PersistedGiftInfo);¶        }¶¶        [Then(@"I verify (.*) has a value of (.*) and is (\b(?:enabled|disabled)\b), (\b(?:required|not required)\b)")]¶        public void ThenIVerifyBatchDateIsEditableRequiredAndHasValue(string fieldName, string fieldValue, string enabled, string required)¶        {¶           EnterGiftsTestMethods.VerifyField(fieldName, (enabled != "enabled"), (required == "required"), fieldValue == "<null>" ? null : fieldValue);¶        }¶¶        [Given(@"I find a gift to adjust")]¶        [When(@"I find a gift to adjust")]¶        public void WhenIFindAGiftToAdjust(Table data)¶        {¶            var giftSearchData = (data == null) ? new GiftSearchData() : data.AsiCreateInstance<GiftSearchData>();¶            if (String.IsNullOrEmpty(giftSearchData.Donor)) giftSearchData.Donor = PersistedGiftInfo.Donor;¶            EnterGiftsTestMethods.FindGiftToAdjust(giftSearchData);¶            var giftInfo = EnterGiftsTestMethods.GetGiftInfo(false);¶            giftInfo.FirstName = PersistedGiftInfo.FirstName;¶            giftInfo.LastName = PersistedGiftInfo.LastName;¶            PersistedGiftInfo = giftInfo;¶        }¶¶        [When(@"I find a gift to adjust with multiple soft credits")]¶        public void WhenIFindAGiftToAdjustWithMultipleSoftCredits(Table data)¶        {¶            var giftSearchData = (data == null) ? new GiftSearchData() : data.AsiCreateInstance<GiftSearchData>();¶            if (String.IsNullOrEmpty(giftSearchData.Donor)) giftSearchData.Donor = PersistedGiftInfo.Donor;¶            EnterGiftsTestMethods.FindGiftToAdjust(giftSearchData);¶            var giftInfo = EnterGiftsTestMethods.GetGiftInfo(false, false);¶            giftInfo.FirstName = PersistedGiftInfo.FirstName;¶            giftInfo.LastName = PersistedGiftInfo.LastName;¶            PersistedGiftInfo = giftInfo;¶        }¶¶        [Then(@"I verify the gift has a new invoice number")]¶        public void ThenIVerifyTheGiftHasANewInvoiceNumber()¶        {¶            EnterGiftsTestMethods.VerifyAdjustmentLogInvoiceNumberChange(new AdjustmentLogData() { Invoice = PersistedGiftInfo.InvoiceNumber });¶        }¶¶        [Then(@"I verify the gift has the same invoice number")]¶        public void ThenIVerifyTheGiftHasTheSameInvoiceNumber()¶        {¶            EnterGiftsTestMethods.VerifyAdjustmentLogInvoiceNumberChange(new AdjustmentLogData() { Invoice = PersistedGiftInfo.InvoiceNumber }, false);¶        }¶¶¶        [Then(@"I verify the (\b(?:Gift|Pledge)\b) is listed as anonymous")]¶        public void ThenIVerifyTheGiftIsListedAsAnonymous(string type)¶        {¶            WhenICreateANewAdjustmentBatch(null);¶            var giftSearchData = new GiftSearchData()¶            {¶                Donor = PersistedGiftInfo.Donor,¶                Type = type¶            };¶            EnterGiftsTestMethods.FindGiftToAdjust(giftSearchData);¶            var giftInfo = EnterGiftsTestMethods.GetGiftInfo(false);¶            giftInfo.FirstName = PersistedGiftInfo.FirstName;¶            giftInfo.LastName = PersistedGiftInfo.LastName;¶            PersistedGiftInfo = giftInfo;¶            EnterGiftsTestMethods.VerifyReadOnlyListAsField();¶        }¶¶¶        [Then(@"I verify the gift adjustment logs")]¶        public void ThenIVerifyTheGiftAdjustmentLogs(Table table)¶        {¶")
Diff(DELETE,"            //var logData = table.AsiCreateInstance<AdjustmentLogData>();¶")
Diff(EQUAL,"            EnterGiftsTestMethods.NavigateToAdjustmentLogs();¶            foreach (var logDataRow in table.Rows)¶            {¶                string newValue, oldValue, property, invoice, newInvoice;¶                logDataRow.TryGetValue("NewValue", out newValue);¶                logDataRow.TryGetValue("NewInvoice", out newInvoice);¶                logDataRow.TryGetValue("Invoice", out invoice);¶                logDataRow.TryGetValue("Property", out property);¶                logDataRow.TryGetValue("OldValue", out oldValue);¶                if (String.IsNullOrEmpty(invoice)) invoice = PersistedGiftInfo.InvoiceNumber;¶                var logData = new AdjustmentLogData()¶                {¶                    NewValue = newValue,¶                    OldValue = oldValue,¶                    Invoice = invoice,¶                    NewInvoice = newInvoice,¶                    Property = property¶                };¶                EnterGiftsTestMethods.VerifyAdjustmentLogs(logData);¶            }¶        }¶¶        [Then(@"I verify the gift values are unchanged")]¶        public void ThenIVerifyTheGiftValuesAreUnchanged()¶        {¶            EnterGiftsTestMethods.VerifyGiftInfo(PersistedGiftInfo);¶        }¶¶        [Given(@"I enter the adjustments")]¶        [When(@"I enter the adjustments")]¶        public void WhenIEnterTheAdjustments(Table data)¶        {¶            var adjustmentData = data.AsiCreateInstance<AdjustmentData>();¶            EnterGiftsTestMethods.EnterGiftAdjustment(adjustmentData);¶            if (adjustmentData.VerifyAdjustedValues)¶            {¶                var firstName = PersistedGiftInfo.FirstName;¶                var lastName = PersistedGiftInfo.LastName;¶                var donor = PersistedGiftInfo.Donor;¶                PersistedGiftInfo = EnterGiftsTestMethods.GetGiftInfo(false);¶                PersistedGiftInfo.FirstName = firstName;¶                PersistedGiftInfo.LastName = lastName;¶                PersistedGiftInfo.Donor = donor;¶            }¶        }¶¶        [When(@"I make soft credit adjustments")]¶        public void WhenIEnterTheSoftCreditAdjustments(Table data)¶        {¶            int rowindex = 0;¶            foreach (var row in data.Rows)¶            {¶                string amount, percentage, softcredit;¶                row.TryGetValue("Amount", out amount);¶                row.TryGetValue("Percentage", out percentage);¶                row.TryGetValue("SoftCredit", out softcredit);¶                var softCreditData = new SoftCreditData()¶                {¶                    Amount = amount,¶                    SoftCredit = softcredit,¶                    Percentage = percentage¶                };¶¶                EnterGiftsTestMethods.EnterSoftCreditAdjustments(softCreditData, ++rowindex);¶            }¶        }¶¶        [Then(@"I verify the adjusted soft credit values")]¶        public void ThenIVerifyTheAdjustedSoftCreditValues(Table data)¶        {¶")
Diff(DELETE,"           // var adjustmentData = data.AsiCreateInstance<List<SoftCreditData>>();¶")
Diff(EQUAL,"            int rowindex = 0;¶            foreach (var row in data.Rows)¶            {¶                string amount, percentage, softcredit;¶                row.TryGetValue("Amount", out amount);¶                row.TryGetValue("Percentage", out percentage);¶                row.TryGetValue("SoftCredit", out softcredit);¶                var softCreditData = new SoftCreditData()¶                {¶                    Amount = amount,¶                    SoftCredit = softcredit,¶                    Percentage = percentage¶                };¶¶                EnterGiftsTestMethods.VerifySoftCreditValues(softCreditData, ++rowindex);¶            }¶        }¶¶        [When(@"I process the Gift Adjustment batch")]¶        [Given(@"I process the Gift Adjustment batch")]¶        public void WhenIProcessTheGiftAdjustmentBatch()¶        {¶            EnterGiftsTestMethods.SaveGiftAdjustment();¶            EnterGiftsTestMethods.ClickProcessBatch();¶        }¶¶        [Then(@"I verify the gift item field is read only")]¶        public void ThenIVerifyTheGiftAdjustmentFieldsAreReadOnly()¶        {¶            EnterGiftsTestMethods.VerifyReadOnlyGiftItem();¶        }¶¶        [Then(@"I verify the read only gift date is (.*)")]¶        public void ThenIVerifyTheReadOnlyGiftDateIs(string date)¶        {¶            EnterGiftsTestMethods.VerifyReadOnlyAdjustedDate(date);¶        }¶¶        [Given(@"I find the gift")]¶        [When(@"I find the gift")]¶        public void WhenIFindTheGift(Table table)¶        {¶            var giftSearchData = table.AsiCreateInstance<GiftSearchData>();¶            if (giftSearchData.FirstName == null) giftSearchData.FirstName = PersistedGiftInfo.FirstName;¶            if (giftSearchData.LastName == null) giftSearchData.LastName = PersistedGiftInfo.LastName;¶            EnterGiftsTestMethods.FindGift(giftSearchData);¶        }¶¶        [Then(@"I verify the original (\b(?:Gift|Pledge)\b) date is (.*) and the adjusted date is (.*)")]¶        public void ThenIVerifyTheGiftDates(string giftType, string originalDate, string adjustedDate)¶        {¶            EnterGiftsTestMethods.VerifyGiftDates(originalDate, adjustedDate, giftType);¶        }¶¶        [Then(@"I verify there is (.*) result for the gift search")]¶        public void ThenIVerifyThereIsResultForTheGiftSearch(int p0)¶        {¶            EnterGiftsTestMethods.VerifyGiftResultCount(p0);¶        }¶¶        [Then(@"I verify the (\b(?:Gift|Pledge)\b) Details")]¶        public void ThenIVerifyTheGiftDetails(string giftType, Table table)¶        {¶            EnterGiftsTestMethods.VerifyGiftDetails(table, giftType);¶        }¶¶        [Given(@"I reverse the pledge payment")]¶        public void GivenIReverseThePledgePayment()¶        {¶            EnterGiftsTestMethods.FindAndViewInvoice(PersistedGiftInfo);¶            EnterGiftsTestMethods.ViewInvoicePayment();¶            EnterGiftsTestMethods.ReversePayment();¶        }¶¶")
Diff(INSERT,"        [Given(@"I issue receipts for the gift")]¶        public void GivenIPayForTheGiftAndIssueReceipts()¶        {¶            string donorName = $"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.FirstName}";¶            ReceiptingTestMethods.FindReceiptsToIssue(donorName, PersistedGiftInfo.GiftItem);¶            System.Threading.Thread.Sleep(2000);¶            ReceiptingTestMethods.IssueReceipts();¶            ReceiptingTestMethods.FindIssuedReceipts(donorName, null, null);¶            ReceiptNumber = ReceiptingTestMethods.GetReceiptNumber();¶            Authentication.LogOut();¶        }¶¶        [Then(@"I verify user sees the receipt will be voided message")]¶        public void ThenIVerifyUserSeesTheReceiptWillBeVoidedMessage()¶        {¶            EnterGiftsTestMethods.VerifyGiftAppReceiptMessage($"Receipt(s) {ReceiptNumber} will be voided");¶        }¶¶        [Then(@"I verify the receipt is voided")]¶        public void ThenIVerifyTheReceiptIsVoided()¶        {¶            ReceiptingTestMethods.FindIssuedReceipts($"{PersistedGiftInfo.FirstName} {PersistedGiftInfo.LastName}", ReceiptNumber, "Void");¶            System.Threading.Thread.Sleep(2000);¶            ReceiptingTestMethods.VerifyReceiptNumber(ReceiptNumber);¶        }¶¶        [Then(@$"I verify the single gift with invoice number {StepRegex.SingleWord} has been found")]¶        public void VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(string id)¶        {¶            EnterGiftsTestMethods.VerifyTheSingleGiftWithInvoiceNumberHasBeenFound(id);¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Fundraising/EnterGiftsStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class NavigationStepDef¶    {¶        public NavigationStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            NavigationTestMethods = new NavigationTestMethods(driver, context);¶        }¶¶        private NavigationTestMethods NavigationTestMethods { get; set; }¶¶        [When($@"I navigate to {StepRegex.SingleWord} with className {StepRegex.SingleWord} side menu (.*), (.*)")]¶        public void WhenINavigateToTheNavWithClassNameSideMenuFirstSecond(string navName, string navClassName, string firstLevel, string secondLevel)¶        {¶            NavigationTestMethods.NavigateTo(navName, navClassName, firstLevel, secondLevel);¶        }¶¶        [When(@"I navigate to (.*) and top menu (.*), (.*)")]¶        public void WhenINavigateToParentNavAndChildren(string navName, string firstLevel, string secondLevel)¶        {¶            NavigationTestMethods.NavigateTo(navName, firstLevel, secondLevel);¶        }¶¶")
Diff(INSERT,"        [Given(@"I navigate to top menu (.*)")]¶")
Diff(EQUAL,"        [When(@"I navigate to top menu (.*)")]¶        public void WhenINavigateToParentNav(string navName)¶        {¶            NavigationTestMethods.NavigateTo(navName);¶        }¶¶¶        [Then($@"I verify url contains {StepRegex.UrlComponent}")]¶        public void ThenIVerifyUrlContainsExpectedPage(string expectedPage)¶        {¶            NavigationTestMethods.VerifyExpectedPage(expectedPage);¶        }¶¶        [Then($@"I verify url contains {StepRegex.UrlComponent} in new tab")]¶        public void ThenIVerifyUrlContainsExpectedPageInSecondTab(string expectedPage)¶        {¶            NavigationTestMethods.VerifyExpectedPageInNewTab(expectedPage);¶        }¶¶        [Then(@"Server Error is not presented on screen")]¶        public void ThenServerErrorIsNotPresentedOnScreen()¶        {¶            NavigationTestMethods.ServerErrorNotOnScreen();¶        }¶¶¶    }¶}")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Site/NavigationStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class RegisterForAnEventStepDef¶    {¶        public RegisterForAnEventStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            RegisterForAnEventTestMethods = new RegisterForAnEventTestMethods(driver, context);¶        }¶¶        private RegisterForAnEventTestMethods RegisterForAnEventTestMethods { get; ")
Diff(DELETE,"set; }¶")
Diff(INSERT,"}¶¶        [Given(@"I register myself for an event")]")
Diff(EQUAL,"¶        [When(@"I register myself for an event")]¶        public void WhenIRegister")
Diff(DELETE,"SomeoneElse")
Diff(INSERT,"Myself")
Diff(EQUAL,"ForAnEvent(Table data)¶        {¶            var eventData = data.AsiCreateInstance<EventData>();¶            RegisterForAnEventTestMethods.RegisterYourselfToEvent(eventData);¶        }¶¶¶        [Then(@"I verify myself is registered")]¶        public void ThenIVerify")
Diff(DELETE,"SomeoneElse")
Diff(INSERT,"Myself")
Diff(EQUAL,"WasRegistered(Table data)¶        {¶            var eventData = data.AsiCreateInstance<EventData>();¶            RegisterForAnEventTestMethods.VerifyRegisterYourself(eventData);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Events/RegisterForAnEventStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ContactStepDef¶    {¶        public ContactStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            ContactTestMethod = new ContactTestMethods(driver, context);¶        }¶¶        public ContactTestMethods ContactTestMethod { get; set; }¶¶        [Given(@"I add contact")]¶        [When(@"I add contact")]¶        public void WhenIAddContact(Table data)¶        {¶            ContactTestMethod.AddContact(data.CreateInstance<ContactData>());¶        }¶¶        [When(@"I delete contact")]¶        public void WhenIDeleteContact()¶        {¶            ContactTestMethod.DeleteContact();¶        }¶¶        [When(@"I prep site for contact erasure")]¶        public void WhenIPrepSiteForContactErasure()¶        {¶            ContactTestMethod.PrepSiteForContactErasure();¶        }¶¶¶        [Then(@"I verify contact was added")]¶        public void ThenIVerifyContactWasAdded(Table table)¶        {¶            var contactData = table.AsiCreateInstance<ContactData>();¶            ContactTestMethod.VerifyContact(contactData);¶        }¶¶        [When(@"I create a new contact")]¶")
Diff(INSERT,"        [Given(@"I create a new contact")]¶")
Diff(EQUAL,"        public void WhenICreateANewContact(Table table)¶        {¶            var contactData = table.AsiCreateInstance<ContactData>();¶            ContactTestMethod.CreateNewContact(contactData);¶        }¶¶        [Then(@"I verify user was logged in")]¶        public void ThenIVerifyUserWasLoggedIn(Table table)¶        {¶            var contactData = table.AsiCreateInstance<ContactData>();¶            ContactTestMethod.VerifyLoggedInUserContact(contactData);¶        }¶¶        [Given(@"I access the account page with panel definition")]¶        public void GivenIAccessTheAccountPageWithPanelDefinition()¶        {¶            ContactTestMethod.AccessTheAccountPageWithPanelDefinition();¶        }¶¶        [When(@"I enter angle brackets in a panel text field")]¶        public void WhenIEnterAngleBracketsInAPanelTextField()¶        {¶            ContactTestMethod.EnterAngleBracketsInAPanelTextField();¶        }¶¶        [Then(@"I verify angle brackets exist")]¶        public void ThenIVerifyAngleBracketsExists()¶        {¶            ContactTestMethod.VerifyAngleBracketsExists();¶        }¶¶        [Given(@"I add a value to the profile panel")]¶        public void GivenIAddAValueToTheProfilePanel()¶        {¶            ContactTestMethod.AddAValueToTheProfilePanel();            ¶        }¶¶        [When(@"I configure profile panel editor property to read only")]¶        public void GivenISetPanelEditorPropertyToReadOnly()¶        {¶            ContactTestMethod.SetPanelEditorPropertyToReadOnly();¶        }¶¶        [Then(@"I verify profile panel value cannot be modified")]¶        public void ThenIVerifyProfilePanelValueCannotBeModified()¶        {¶            ContactTestMethod.VerifyProfilePanelValueCannotBeModified();¶        }")
Diff(INSERT,"¶¶        [Then(@"I verify the Invalid Character Warning")]¶        public void ThenIVerifyTheInvalidCharacterWarning()¶        {¶            ContactTestMethod.VerifyTheInvalidCharacterWarning();¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Community/ContactStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class LoginStepDef¶    {¶        public LoginStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            Authentication = new Authentication(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶        }¶        SignInTestMethods SignInTestMethods { get; set; }¶        Authentication Authentication { get; set; }¶¶        [When(@"I am on the (.*) site as designated user (.*)")]¶        [Given(@"I am on the (.*) site as designated user (.*)")]¶        public void GivenIAmOnTheSiteAsDesignatedUserName(string p0, string p1)¶        {¶            var user = string.IsNullOrEmpty(p1) ? "System Administrator" : p1;¶            var site = string.IsNullOrEmpty(p0) ? "Staff" : p0;¶            SignInTestMethods.SignInDesignatedUser(user, site);¶        }¶¶        [When(@"I log on the (.*) site as designated user (.*)")]¶        [Given(@"I log on the (.*) site as designated user (.*)")]¶        public void GivenILogOnTheSiteAsDesignatedUser(string p0, string p1)¶        {¶            WhenILogoutOnTheCurrentPage();¶            TestHelper.WaitForPageReload();¶            GivenIAmOnTheSiteAsDesignatedUserName(p0,p1);¶        }¶¶        [Given(@"I log onto the (.*) site as user (.*)")]¶")
Diff(INSERT,"        [When(@"I log onto the (.*) site as user (.*)")]¶")
Diff(EQUAL,"        public void ")
Diff(DELETE,"Given")
Diff(EQUAL,"ILogOnToTheSiteAsUserName(string site, string userName)¶        {¶            SignInTestMethods.ToTheSiteWithUserName(userName, site);¶        }¶¶        [Given(@"I am on the (.*) site as user (.*)")]¶        public void GivenIAmOnTheSiteAsUserName(string site, string userName)¶        {¶            Authentication.LogOut();¶            SignInTestMethods.ToTheSiteWithUserName(userName, site);¶        }¶¶        [Given(@"I am on the (.*) site")]¶        [When(@"I am on the (.*) site")]¶        public void GivenIAmOnDesignatedSite(string p0)¶        {¶            var site = string.IsNullOrEmpty(p0) ? "Staff" : p0;¶            SignInTestMethods.OnTheSite(site);¶        }¶¶        [Given(@"I logout on the current page")]¶        [When(@"I logout on the current page")]¶        [Then(@"I logout on the current page")]¶        public void WhenILogoutOnTheCurrentPage()¶        {¶            Authentication.LogOut(")
Diff(INSERT,"false, ")
Diff(EQUAL,"false);¶        }¶¶        [Given($@"I am on the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]¶        [When($@"I am on the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]¶        public void GivenIAmOnStaffCompanySiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)¶        {¶            var user = string.IsNullOrEmpty(tempuser) ? "System Administrator" : tempuser;¶            var site = string.IsNullOrEmpty(tempsite) ? "Staff" : tempsite;¶            SignInTestMethods.SignInDesignatedUserAndOBO(user, site, firstname, lastname);¶        }¶¶        [Given($@"I log onto the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]¶        [When($@"I log onto the (.*) site as (.*) on behalf user {StepRegex.SingleWord},{StepRegex.SingleWord}")]¶        public void ")
Diff(DELETE,"Given")
Diff(EQUAL,"IAmOnSiteAsBehalfUser(string tempsite, string tempuser, string firstname, string lastname)¶        {¶            var user = string.IsNullOrEmpty(tempuser) ? "System Administrator" : tempuser;¶            var site = string.IsNullOrEmpty(tempsite) ? "Staff" : tempsite;¶            WhenILogoutOnTheCurrentPage();¶")
Diff(DELETE,"            TestHelper.WaitForPageReload();¶")
Diff(EQUAL,"            SignInTestMethods.SignInDesignatedUserAndOBO(user, site, firstname, lastname);¶")
Diff(DELETE,"")
Diff(EQUAL,"        }¶")
Diff(INSERT,"¶        [Given(@"I log on the License Server site as user License Administrator")]¶        public void ILogOnTheLicenseServerSite()¶        {¶            SignInTestMethods.SignInToLicenseServer();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.Shared.V10/Steps/Authentication/LoginStepDef.cs)
Diff(EQUAL,"#TODO Need to create a custom tag that doesn't conflict with others¶Feature: Product Test Suite¶¶Background:¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶¶Scenario: Order a Product on Mbrr¶	Given I am on the Mbrr site as designated user Public user¶	When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶¶#10_MBRR_Shop_Verify_SimilarProducts¶Scenario: Verify Similar Products are being displayed¶	Given I am on the Mbrr site as designated user Staff¶	When I order product¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶	Then I see similar products¶		| Key            | Value                       |¶		| NumOfProducts  | 3                           |¶		| SimilarProduct | Certification Practice Exam |¶		| SimilarProduct | Going Mobile Workbook       |¶		| SimilarProduct | Social Media Fundraising    |¶#10_MBRR_Shop_Verify_PayByCheck_StaffUser¶Scenario: Verify paying by check¶	Given I am on the Mbrr site as designated user Staff¶	When I order product¶		| Key       | Value                    |¶		| Product   | Networking Your Business |¶		| ClearCart | true                     |¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		")
Diff(DELETE,"| PaymentMethodType | MainCheckingAccount |¶		")
Diff(EQUAL,"| CheckNumber   | 1234                  |¶	Then I verify the product was ordered¶		| Key     | Value                    |¶		| Product | Networking Your Business |¶¶")
Diff(INSERT,"¶")
Diff(EQUAL,"###MBRR_Shop_Verify_CompanyAdminPayNowBillCompany¶Scenario: Verify company admin can pay the bill now¶	Given I am on the MBRR site as designated user Director of Marketing¶	When I order product¶		| Key     | Value                    |¶		| Product | Networking Your Business |¶	And I checkout items in the cart¶		| Key                    | Value            |¶		| CompanyName            | Versaton US      |¶		| PaymentMethod          | IMIS Pay CC US   |¶		| PaymentMethodType      | CreditCard       |¶		| CardNumber             | 4111111111111111 |¶		| CardExpiry             | 05232025         |¶		| CardCVC                | 333              |¶		| PostalCode             | 78722            |¶	Then I verify the company product was ordered¶		| Key     | Value                    |¶		| Product | Networking Your Business |¶")
Diff(INSERT,"¶@SkipSetGatewayStep¶Scenario: Verify a simple product can be added¶	Given I am on the Staff site as designated user Staff¶	When I create a simple product¶		| Key           | Value                |¶		| Class         | Clothing Apparel     |¶		| Name          | My FFF Super Product |¶		| Description   | Super product        |¶		| StandardPrice | 10.00                |¶		| DiscountPrice | 10.00                |¶		| Beginning     | 01/01/2020 12:00 AM  |¶	Then I verify the product was added¶¶@SkipSetGatewayStep¶Scenario: Verify a product has become available after inventory receipt processing¶	Given I am on the Staff site as designated user Staff¶	When I create a simple product¶		| Key           | Value                |¶		| Class         | Gifts                |¶		| Name          | My WWW Super Product |¶		| Description   | Super product        |¶		| StandardPrice | 30.00                |¶		| DiscountPrice | 20.00                |¶		| Beginning     | 1/1/2020 12:00 AM    |¶	And I process inventory Receipt with positive quantity¶	Then I verify the product is available¶¶@SkipSetGatewayStep¶Scenario: Verify paying with PayPal express¶	Given I am on the Mbrr site as designated user Public user¶	When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key           | Value  |¶		| PaymentMethod | PayPal |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶¶@SkipSetGatewayStep¶Scenario: Verify a collection of items product can be added¶	Given I am on the Staff site as designated user Staff¶	When I have product data¶		| Key             | Value         |¶		| Class           | Gifts         |¶		| Name            | MUG Gifts     |¶		| Description     | my mug gifts  |¶		| PriceIsTotal    | True          |¶	And I create a product with collection of items¶		| Title      | Code   | Quantity |¶		| Modern Mug |        | 1        |¶		|            | FRMUG1 | 2        |¶	Then I verify the product was added")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/Products.feature)
Diff(EQUAL,"Feature: InventoryReceipts¶¶Scenario: I am verifying creating an inventory receipt¶	Given I am on the Staff site as designated user System Administrator¶	And I save P41 inventory details before update¶	When I process inventory Receipt ")
Diff(DELETE,"for Business Management Series: Communication Skills (P41) with positive quantity¶	Then I verify inventory Receipt for Business Management Series: Communication Skills (P41)")
Diff(INSERT,"with positive quantity¶	Then I verify inventory Receipt")
Diff(EQUAL," is applied¶¶Scenario: I am verifying creating a positive inventory adjustment¶	Given I am on the Staff site as designated user System Administrator¶	And I save P41 inventory details before update¶	When I process inventory Adjustment")
Diff(DELETE," for Business Management Series: Communication Skills (P41)")
Diff(EQUAL," with positive quantity¶	Then I verify inventory Adjustment")
Diff(DELETE," for Business Management Series: Communication Skills (P41)")
Diff(EQUAL," is applied¶¶Scenario: I am verifying creating a negative inventory adjustment¶	Given I am on the Staff site as designated user System Administrator¶	And I save P41 inventory details before update¶	When I process inventory Adjustment ")
Diff(DELETE,"for Business Management Series: Communication Skills (P41) with negative quantity¶	Then I verify inventory Adjustment for Business Management Series: Communication Skills (P41)")
Diff(INSERT,"with negative quantity¶	Then I verify inventory Adjustment")
Diff(EQUAL," is applied¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/InventoryReceipts.feature)
Diff(INSERT,"@UnitedKingdom¶")
Diff(EQUAL,"Feature: VatIncTaxation¶¶Commerce related tests specific to VATINC taxation¶These tests will set the default financial entity to VAT and modify country and currency settings.¶These will need to be manually reverted. The tests do not automatically restore settings.¶¶")
Diff(DELETE,"Scenario: Taxable sales product includes a VAT amount in the Cart")
Diff(INSERT,"Background:")
Diff(EQUAL,"¶	Given I am on the Staff site as System Administrator on behalf user Leisal,Gant¶	")
Diff(DELETE,"When")
Diff(INSERT,"And")
Diff(EQUAL," I set financial entity if not already set¶		| Key            | Value")
Diff(DELETE,"				")
Diff(INSERT,"                ")
Diff(EQUAL,"|¶		| Code           | VAT")
Diff(DELETE,"					")
Diff(INSERT,"                  ")
Diff(EQUAL,"|¶		| Country        | United Kingdom")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"|¶		| CultureType    | EnglishUnitedKingdom |¶		| DefaultCulture | true")
Diff(DELETE,"					")
Diff(INSERT,"                 ")
Diff(EQUAL,"|¶	And I empty the cart¶")
Diff(DELETE,"	And I create a product¶		| Key           | Value |¶		| Class         | Sales |¶		| StandardPrice | 10    |¶		| DiscountPrice | 10  ")
Diff(INSERT,"¶Scenario: Taxable sales product includes a VAT amount in the Cart¶	Given I create a simple product¶		| Key           | Value")
Diff(EQUAL,"  |¶		| IsTaxable     | True  ")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| TaxCode       | VAT_15")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| InventoryItem | False ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	")
Diff(DELETE,"And")
Diff(INSERT,"When")
Diff(EQUAL," I add the current item to the cart¶	Then I verify the cart contains VatInc tax for ")
Diff(DELETE,"item @DataStorage.ItemCode")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"¶¶Scenario: Taxable sales product includes a VAT amount on the order confirmation¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Leisal,Gant¶	When I set financial entity if not already set¶		| Key            | Value                |¶		| Code           | VAT					|¶		| Country        | United Kingdom		|¶		| CultureType    | EnglishUnitedKingdom |¶		| DefaultCulture | true					|¶	And I empty the cart¶	And I create a product¶		| Key           | Value |¶		| Class         | Sales |¶		| StandardPrice | 10    |¶		| DiscountPrice | 10  ")
Diff(INSERT,"create a simple product¶		| Key           | Value")
Diff(EQUAL,"  |¶		| IsTaxable     | True  ")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| TaxCode       | VAT_15")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| InventoryItem | False ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	And I add the current item to the cart¶	")
Diff(DELETE,"And")
Diff(INSERT,"When")
Diff(EQUAL," I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation contains VatInc tax¶¶Scenario: Non Taxable sales product does not include a VAT amount in the Cart¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Leisal,Gant")
Diff(INSERT,"create a simple product¶		| Key           | Value |¶		| IsTaxable     | False |¶		| InventoryItem | False |¶	When I add the current item to the cart¶	Then I verify the cart does not contain VatInc tax for the previously created item¶	¶Scenario: Non Taxable sales product does not include a VAT amount on the order confirmation¶	Given I create a simple product¶		| Key           | Value |¶		| IsTaxable     | False |¶		| InventoryItem | False |¶	And I add the current item to the cart¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |")
Diff(EQUAL,"¶	")
Diff(DELETE,"W")
Diff(INSERT,"T")
Diff(EQUAL,"hen I ")
Diff(DELETE,"set financial entity if not already set¶		| Key")
Diff(INSERT,"verify the order confirmation does not contain VatInc tax¶¶Scenario: Taxable event with taxable program item includes a VAT amount in the Cart¶	Given I create an event¶		| Key                       ")
Diff(EQUAL,"            | Value                ")
Diff(INSERT,"  ")
Diff(EQUAL,"|¶		| ")
Diff(DELETE,"Code           | VAT					|¶		| Country        | United Kingdom		|¶		| CultureType    | EnglishUnitedKingdom |¶		| DefaultCulture | true					|¶	And I empty the cart¶	And I create a product¶		| Key           | Value |¶		| Class         | Sales |¶		| Stand")
Diff(INSERT,"Status                                | Active                 |¶		| RegistrationOptionDefaultRegularPrice | 100                    |¶		| VatExceptionRule                      | Belgium VAT Exceptions |¶		| IsRegistrationOptionTaxable           | True                   |¶		| RegistrationOptionTaxCode             | VAT_15                 |¶		| ProgramItemDefaultRegularPrice        | 50                     |¶		| IsProgramItemTaxable                  | True                   |¶		| ProgramItemTaxCode                    | VAT_15                 |¶	When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart contains VatInc tax for the previously created item¶¶Scenario: Taxable event with taxable program item includes a VAT amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value                  |¶		| Status                                | Active                 |¶		| RegistrationOptionDefaultRegul")
Diff(EQUAL,"ar")
Diff(DELETE,"d")
Diff(EQUAL,"Price | 10")
Diff(DELETE,"    |¶		| DiscountPrice")
Diff(INSERT,"0                    |¶		| VatExceptionRule                      | Belgium VAT Exceptions |¶		| IsRegistrationOptionTaxable           | True                   |¶		| RegistrationOptionTaxCode             | VAT_15                 |¶		| ProgramItemDefaultRegularPrice       ")
Diff(EQUAL," | ")
Diff(DELETE,"1")
Diff(INSERT,"5")
Diff(EQUAL,"0    ")
Diff(DELETE,"|¶		| IsTaxable     | False |¶		| InventoryItem | False |¶	And I add the curren")
Diff(INSERT,"                 |¶		| IsProgramItemTaxable                  | True                   |¶		| ProgramItemTaxCode                    | VAT_15                 |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkou")
Diff(EQUAL,"t item")
Diff(DELETE," to")
Diff(INSERT,"s in")
Diff(EQUAL," the cart¶	")
Diff(DELETE,"Then I verify the cart does not")
Diff(INSERT,"	| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation")
Diff(EQUAL," contain")
Diff(INSERT,"s")
Diff(EQUAL," VatInc tax")
Diff(DELETE," for item @DataStorage.ItemCode¶	¶Scenario: Non Taxable sales product does not")
Diff(INSERT,"¶¶Scenario: Taxable event with non taxable program item includes a VAT amount in the Cart¶	Given I create an event¶		| Key                                   | Value                  |¶		| Status                                | Active                 |¶		| RegistrationOptionDefaultRegularPrice | 100                    |¶		| VatExceptionRule                      | Belgium VAT Exceptions |¶		| IsRegistrationOptionTaxable           | True                   |¶		| RegistrationOptionTaxCode             | VAT_15                 |¶		| ProgramItemDefaultRegularPrice        | 50                     |¶		| IsProgramItemTaxable                  | False                  |¶	When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart contains VatInc tax for the previously created item¶¶Scenario: Taxable event with non taxable program item")
Diff(EQUAL," include")
Diff(INSERT,"s")
Diff(EQUAL," a VAT amount on the order confirmation¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Leisal,Gant")
Diff(INSERT,"create an event¶		| Key                                   | Value                  |¶		| Status                                | Active                 |¶		| RegistrationOptionDefaultRegularPrice | 100                    |¶		| VatExceptionRule                      | Belgium VAT Exceptions |¶		| IsRegistrationOptionTaxable           | True                   |¶		| RegistrationOptionTaxCode             | VAT_15                 |¶		| ProgramItemDefaultRegularPrice        | 50                     |¶		| IsProgramItemTaxable                  | False                  |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |")
Diff(EQUAL,"¶	")
Diff(DELETE,"W")
Diff(INSERT,"T")
Diff(EQUAL,"hen I ")
Diff(DELETE,"set financial entity if not already set¶		| Key            | Value                |¶		| Code           | VAT					|¶		| Country        | United Kingdom		|¶		| CultureType    | EnglishUnitedKingdom |¶		| DefaultCulture | true					|¶	And I empty the cart¶	And I create a product¶		| Key")
Diff(INSERT,"verify the order confirmation contains VatInc tax¶¶Scenario: Non taxable event with taxable program item includes a VAT amount in the Cart¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | True   |¶		| ProgramItemTaxCode                    | VAT_15 |¶	When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart contains VatInc tax for the previously created item¶¶Scenario: Non taxable event with taxable program item includes a VAT amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | True   |¶		| ProgramItemTaxCode                    | VAT_15 |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation contains VatInc tax¶¶Scenario: Non taxable event with non taxable program item does not include a VAT amount in the Cart¶	Given I create an event¶		| Key                        ")
Diff(EQUAL,"           | Value ")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| ")
Diff(DELETE,"Clas")
Diff(INSERT,"Statu")
Diff(EQUAL,"s         ")
Diff(DELETE,"| Sales |¶		| Stand")
Diff(INSERT,"                       | Active |¶		| RegistrationOptionDefaultRegul")
Diff(EQUAL,"ar")
Diff(DELETE,"d")
Diff(EQUAL,"Price | 10")
Diff(INSERT,"0")
Diff(EQUAL,"    |¶		| ")
Diff(DELETE,"DiscountPrice | 10    |¶		| IsTaxable")
Diff(INSERT,"IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable             ")
Diff(EQUAL,"     | False ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	")
Diff(DELETE,"	| InventoryItem | Fals")
Diff(INSERT,"When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | Tru")
Diff(EQUAL,"e ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	")
Diff(DELETE,"And I add the current item to the cart¶	And I checkout items in the cart¶		| Key           	| Value               |¶		| PaymentMethod 	| MainCheckingAccount |¶		| PaymentMethodType | Check				 ")
Diff(INSERT,"Then I verify the cart does not contain VatInc tax for the previously created item¶¶Scenario: Non taxable event with non taxable program item does not include a VAT amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | False  |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount")
Diff(EQUAL," |¶	Then I verify the order confirmation does not contain VatInc tax")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/VatincTaxation.feature)
Diff(INSERT,"@Australia¶")
Diff(EQUAL,"Feature: GstIncTaxation¶¶Commerce related tests specific to GSTINC taxation¶These tests will set the default financial entity to GSTIN and modify country and currency settings.¶These will need to be manually reverted. The tests do not automatically restore settings.¶¶")
Diff(DELETE,"Scenario: Taxable sales product includes a GST amount in the Cart")
Diff(INSERT,"Background:")
Diff(EQUAL,"¶	Given I am on the Staff site as System Administrator on behalf user Joe,Rinehart¶	")
Diff(DELETE,"When")
Diff(INSERT,"And")
Diff(EQUAL," I set financial entity if not already set¶		| Key            | Value            |¶		| Code           | GSTIN            |¶		| Country        | Australia        |¶		| CultureType    | EnglishAustralia |¶		| DefaultCulture | true             |¶	And I empty the cart¶")
Diff(DELETE,"	And I create a product¶		| Key           | Value |¶		| Class         | Sales |¶		| StandardPrice | 10    |¶		| DiscountPrice | 10   ")
Diff(INSERT,"¶Scenario: Taxable sales product includes a GST amount in the Cart¶	Given I create a simple product¶		| Key           | Value")
Diff(EQUAL," |¶		| IsTaxable     | True  |¶		| InventoryItem | False |¶	")
Diff(DELETE,"And")
Diff(INSERT,"When")
Diff(EQUAL," I add the current item to the cart¶	Then I verify the cart contains GstInc tax for ")
Diff(DELETE,"item @DataStorage.ItemCode")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"¶¶Scenario: Taxable sales product includes a GST amount on the order confirmation¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Joe,Rinehart¶	When I set financial entity if not already set¶		| Key            | Value            |¶		| Code           | GSTIN            |¶		| Country        | Australia        |¶		| CultureType    | EnglishAustralia |¶		| DefaultCulture | true             |¶	And I empty the cart¶	And I create a product¶		| Key           | Value |¶		| Class         | Sales |¶		| StandardPrice | 10    |¶		| DiscountPrice | 10   ")
Diff(INSERT,"create a simple product¶		| Key           | Value")
Diff(EQUAL," |¶		| IsTaxable     | True  |¶		| InventoryItem | False |¶	And I add the current item to the cart¶	")
Diff(DELETE,"And")
Diff(INSERT,"When")
Diff(EQUAL," I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation contains GstInc tax¶¶Scenario: Non Taxable sales product does not include a GST amount in the Cart¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Joe,Rinehart")
Diff(INSERT,"create a simple product¶		| Key           | Value |¶		| IsTaxable     | False |¶		| InventoryItem | False |¶	When I add the current item to the cart¶	Then I verify the cart does not contain GstInc tax for the previously created item¶	¶Scenario: Non Taxable sales product does not include a GST amount on the order confirmation¶	Given I create a simple product¶		| Key           | Value |¶		| IsTaxable     | False |¶		| InventoryItem | False |¶	And I add the current item to the cart¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |")
Diff(EQUAL,"¶	")
Diff(DELETE,"W")
Diff(INSERT,"T")
Diff(EQUAL,"hen I ")
Diff(DELETE,"set financial entity if not already set¶		| Key            | Value            |¶		| Code           | GSTIN")
Diff(INSERT,"verify the order confirmation does not contain GstInc tax¶¶Scenario: Taxable event with taxable program item includes a GST amount in the Cart¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | True   |¶		| ProgramItemDefaultRegularPrice  ")
Diff(EQUAL,"      ")
Diff(DELETE," ")
Diff(INSERT,"| 50")
Diff(EQUAL,"     |¶		| ")
Diff(DELETE,"Country        | Australia        |¶		| CultureType    | EnglishAustralia |¶		| DefaultCulture | true             |¶	And I empty the cart¶	And I create a product¶		| Key")
Diff(INSERT,"IsProgramItemTaxable                  | True   |¶	When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart contains GstInc tax for the previously created item¶¶Scenario: Taxable event with taxable program item includes a GST amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | True   |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | True   |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation contains GstInc tax¶¶Scenario: Taxable event with non taxable program item includes a GST amount in the Cart¶	Given I create an event¶		| Key                        ")
Diff(EQUAL,"           | Value ")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| ")
Diff(DELETE,"Clas")
Diff(INSERT,"Statu")
Diff(EQUAL,"s         ")
Diff(DELETE,"| Sales |¶		| Stand")
Diff(INSERT,"                       | Active |¶		| RegistrationOptionDefaultRegul")
Diff(EQUAL,"ar")
Diff(DELETE,"d")
Diff(EQUAL,"Price | 10")
Diff(INSERT,"0")
Diff(EQUAL,"    |¶		| ")
Diff(DELETE,"DiscountPrice | 10")
Diff(INSERT,"IsRegistrationOptionTaxable           | True   |¶		| ProgramItemDefaultRegularPrice        | 50 ")
Diff(EQUAL,"    |¶		| Is")
Diff(INSERT,"ProgramItem")
Diff(EQUAL,"Taxable     ")
Diff(INSERT,"             ")
Diff(EQUAL,"| False ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	")
Diff(DELETE,"	| InventoryItem")
Diff(INSERT,"When I register myself for an event¶		| Key            ")
Diff(EQUAL," | ")
Diff(DELETE,"F")
Diff(INSERT,"V")
Diff(EQUAL,"al")
Diff(DELETE,"s")
Diff(INSERT,"u")
Diff(EQUAL,"e |¶	")
Diff(DELETE,"And I add the current item to the cart")
Diff(INSERT,"	| AddFirstProgram | True  |")
Diff(EQUAL,"¶	Then I verify the cart ")
Diff(DELETE,"does not ")
Diff(EQUAL,"contain")
Diff(INSERT,"s")
Diff(EQUAL," GstInc tax for ")
Diff(DELETE,"item @DataStorage.ItemCode¶	")
Diff(INSERT,"the previously created item¶")
Diff(EQUAL,"¶Scenario:")
Diff(DELETE," Non")
Diff(EQUAL," Taxable ")
Diff(DELETE,"sales product does not")
Diff(INSERT,"event with non taxable program item")
Diff(EQUAL," include")
Diff(INSERT,"s")
Diff(EQUAL," a GST amount on the order confirmation¶	Given I ")
Diff(DELETE,"am on the Staff site as System Administrator on behalf user Joe,Rinehart")
Diff(INSERT,"create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | True   |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | False  |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |")
Diff(EQUAL,"¶	")
Diff(DELETE,"W")
Diff(INSERT,"T")
Diff(EQUAL,"hen I ")
Diff(DELETE,"set financial entity if not already set¶		| Key            | Value            |¶		| Code           | GSTIN")
Diff(INSERT,"verify the order confirmation contains GstInc tax¶¶Scenario: Non taxable event with taxable program item includes a GST amount in the Cart¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice")
Diff(EQUAL,"        ")
Diff(DELETE," ")
Diff(INSERT,"| 50")
Diff(EQUAL,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"|¶		| ")
Diff(DELETE,"Country        | Australia        |¶		| CultureType    | EnglishAustralia |¶		| DefaultCulture | true             |¶	And I empty the cart¶	And I create a product¶		| Key")
Diff(INSERT,"IsProgramItemTaxable                  | True   |¶	When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart contains GstInc tax for the previously created item¶¶Scenario: Non taxable event with taxable program item includes a GST amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | True   |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount |¶	Then I verify the order confirmation contains GstInc tax¶¶Scenario: Non taxable event with non taxable program item does not include a GST amount in the Cart¶	Given I create an event¶		| Key                        ")
Diff(EQUAL,"           | Value ")
Diff(INSERT," ")
Diff(EQUAL,"|¶		| ")
Diff(DELETE,"Class")
Diff(INSERT,"Status                       ")
Diff(EQUAL,"         | ")
Diff(DELETE,"Sales")
Diff(INSERT,"Active")
Diff(EQUAL," |¶		| ")
Diff(DELETE,"Stand")
Diff(INSERT,"RegistrationOptionDefaultRegul")
Diff(EQUAL,"ar")
Diff(DELETE,"d")
Diff(EQUAL,"Price | 10")
Diff(INSERT,"0")
Diff(EQUAL,"    |¶		| ")
Diff(DELETE,"DiscountPrice | 10")
Diff(INSERT,"IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50 ")
Diff(EQUAL,"    |¶		| Is")
Diff(INSERT,"ProgramItem")
Diff(EQUAL,"Taxable     ")
Diff(INSERT,"             ")
Diff(EQUAL,"| False ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	")
Diff(DELETE,"	| InventoryItem | False |¶	And I add the current item to the cart¶	And I checkout items in the cart¶		| Key           	| Value               |¶		| PaymentMethod 	| MainCheckingAccount |¶		| PaymentMethodType | Check 			 ")
Diff(INSERT,"When I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	Then I verify the cart does not contain GstInc tax for the previously created item¶¶Scenario: Non taxable event with non taxable program item does not include a GST amount on the order confirmation¶	Given I create an event¶		| Key                                   | Value  |¶		| Status                                | Active |¶		| RegistrationOptionDefaultRegularPrice | 100    |¶		| IsRegistrationOptionTaxable           | False  |¶		| ProgramItemDefaultRegularPrice        | 50     |¶		| IsProgramItemTaxable                  | False  |¶	And I register myself for an event¶		| Key             | Value |¶		| AddFirstProgram | True  |¶	When I checkout items in the cart¶		| Key           | Value               |¶		| PaymentMethod | MainCheckingAccount")
Diff(EQUAL," |¶	Then I verify the order confirmation does not contain GstInc tax")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Commerce/GstIncTaxation.feature)
Diff(EQUAL,"Feature: EnterGifts¶¶Background:¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Gift¶	Given I am on the Staff site as designated user Staff¶	When I enter a Gift¶		| Key           | Value            |¶		| Donor         | New Contact      |¶		| FirstName     | Tester1          |¶		| LastName      | Tester1          |¶		| Amount        | Random           |¶		| GiftItem      | BLDG             |¶		| BillTo        | Tester1 Tester1  |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4111111111111111 |¶		| CardExpiry    | 0425             |¶		| CardCVC       | 123              |¶		| PostalCode    | 78741            |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶¶@AdjustPledgeAmountsLowerPartiallyPaidAmountWithCard¶Scenario: I adjust a partially paid with card pledge below the amount paid and verify credit memo and balance¶	Given a System Administrator enters a Pledge and makes a partial payment¶		| Key           | Value                |¶		| Donor         | New Contact          |¶		| Amount        | 100                  |¶		| GiftItem      | General Distribution |¶		| SoftCredit    | Teresa Spain         |¶		| MovesManager  | Andrew Cabot         |¶		| Tribute       | true                 |¶		| PaymentAmount | 50                   |¶		| BillTo        | Tester1 Tester1      |¶		| PaymentMethod | IMIS Pay CC US       |¶		| CardNumber    | 4111111111111111     |¶		| CardExpiry    | 0425                 |¶		| CardCVC       | 123                  |¶		| PostalCode    | 78741                |¶	And I logout on the current page¶	When user XSEALE adjusts the Pledge for TODAY¶	And I enter the adjustments¶		| SourceCode | Amount |¶		| Amount     | 40     |¶	And I process the Gift Adjustment batch¶	Then I find the invoice and verify the balance is -10.00¶	And I verify the credit memo is for the amount -60.00¶¶@AdjustPledgeAmountsHigherPartiallyPaidAmountWithCard¶Scenario: I adjust a partially paid with card pledge above the amount paid and verify debit memo and balance¶	Given a System Administrator enters a Pledge and makes a partial payment¶		| Key           | Value                |¶		| Donor         | New Contact          |¶		| Amount        | 100                  |¶		| GiftItem      | General Distribution |¶		| SoftCredit    | Teresa Spain         |¶		| MovesManager  | Andrew Cabot         |¶		| Tribute       | true                 |¶		| PaymentAmount | 50                   |¶		| PaymentMethod | MainCheckingAccount  |¶		| CheckNumber   | Random               |¶	And I logout on the current page¶	When user XSEALE adjusts the Pledge for TODAY¶	And I enter the adjustments¶		| SourceCode | Amount |¶		| Amount     | 110    |¶	And I process the Gift Adjustment batch¶	Then I find the invoice and verify the balance is 60.00¶	And I verify the debit memo is for the amount 10.00¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Pledge¶	Given I am on the Staff site as designated user Staff¶	When I enter a Pledge¶		| Key       | Value            |¶		| Donor     | New Contact      |¶		| FirstName | OpenPledgeTester |¶		| LastName  | OpenPledgeTester |¶		| Amount    | Random           |¶		| GiftItem  | BLDG             |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I verify an open pledge¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Installment Pledge¶	Given I am on the Staff site as designated user Staff¶	When I enter a Installment Pledge¶		| Key                  | Value                   |¶		| Donor                | New Contact             |¶		| FirstName            | InstallmentPledgeTester |¶		| LastName             | InstallmentPledgeTester |¶		| Amount               | Random                  |¶		| GiftItem             | BLDG                    |¶		| NumberOfInstallments | 2                       |¶		| Frequency            | Monthly                 |¶		| FirstIntallment      | 10/22/2022              |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I verify an open pledge¶¶Scenario: An FR level 3 user can adjust a credit card gift but not payment details¶	Given I am on the Staff site as designated user Staff¶	When I enter a Gift¶		| Key           | Value            |¶		| Donor         | New Contact      |¶		| FirstName     | GiftTester       |¶		| LastName      | GiftTester       |¶		| Amount        | Random           |¶		| GiftItem      | BLDG             |¶		| BillTo        | Tester1 Tester1  |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4111111111111111 |¶		| CardExpiry    | 0425             |¶		| CardCVC       | 123              |¶		| PostalCode    | 78741            |¶	And user XBRADSHAW adjusts the Gift for TODAY¶	Then I verify the hidden and read only adjust gift fields for a Level 3 FR user¶	And I verify the adjust gift default values¶¶Scenario: An FR level 3 user adjusts a credit card gift¶	Given I am on the Staff site as designated user Staff¶	When I enter a Gift¶		| Key           | Value            |¶		| Donor         | New Contact      |¶		| ListAs        | Original Test    |¶		| FirstName     | Lvl3Tester       |¶		| LastName      | Lvl3Tester       |¶		| Request       | 349              |¶		| Amount        | 55               |¶		| GiftItem      | BLDG             |¶		| SourceCode    | List A           |¶		| SoftCredit    | Teresa Spain     |¶		| MovesManager  | Andrew Cabot     |¶		| Tribute       | Yes              |¶		| DoNotReceipt  | Yes              |¶		| BillTo        | Tester1 Tester1  |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4111111111111111 |¶		| CardExpiry    | 0425             |¶		| CardCVC       | 123              |¶		| PostalCode    | 78741            |¶	And user XBRADSHAW adjusts the Gift for TODAY¶	And I enter the adjustments¶		| SourceCode | Amount | Request | ListAs      | SoftCredit | MovesManager   | Tribute | DoNotReceipt |¶		| List B     | 30     | 444     | Change Test | Susan Bee  | Katrina Devlin | No      | No           |¶	And I process the Gift Adjustment batch¶	And I find the gift¶		| Type | SourceCode |¶		| Gift | List B     |¶	Then I verify the gift adjustment logs¶		| BatchDate | Property     | OldValue      | NewValue       |¶		| TODAY     | Source Code  | List A        | List B         |¶		| TODAY     | Amount       | 55            | 30             |¶		| TODAY     | Request      | 349           | 444            |¶		| TODAY     | ListAs       | Original Test | Change Test    |¶		| TODAY     | SoftCredit   | Teresa Spain  | Susan Bee      |¶		| TODAY     | MovesManager | Andrew Cabot  | Katrina Devlin |¶		| TODAY     | Tribute      | True          | False          |¶		| TODAY     | DoNotReceipt | True          | False          |¶¶")
Diff(DELETE,"¶¶")
Diff(INSERT,"@SkipSetGatewayStep¶Scenario: Verify Find Gift¶	Given I am on the Staff site as designated user Staff¶	When I find the gift¶		| Key        | Value          |¶		| Type       | Gift           |¶		| FirstName  | Ms. Melissa F. |¶		| LastName   | Hodges         |¶		| Amount     | 50             |¶		| SourceCode | MAIL           |¶	Then I verify the single gift with invoice number R8042 has been found")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/EnterGifts.feature)
Diff(EQUAL,"Feature: Donor UK Test Suite v10¶¶Background: ¶	Given I set system up with a gateway¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                   |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Iats                    |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IA_CC_UK                |¶		| Region      ")
Diff(INSERT,"      ")
Diff(EQUAL,"| United Kingdom & Europe |¶		| Password    ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| rapidtest7              |¶		| AgentCode   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| UIAW88                  |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IATS CC UK              |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card             |¶		| GLAccount         | 1-1020: VISA            |¶	")
Diff(EQUAL,"¶¶Scenario: Verify error message when donating with empty credit card ¶	And I am on the Mbrr site as designated user Public user¶	When I submit a Give Now recurring donation¶		| Key           | Value     |¶		| SkipCardValidation | true |¶	Then I verify credit card validation message is ")
Diff(DELETE,"Invalid c")
Diff(INSERT,"C")
Diff(EQUAL,"ard number")
Diff(INSERT," is required")
Diff(EQUAL,".")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/DonorUK.feature)
Diff(EQUAL,"@QuickSweep¶Feature: GiftAid¶¶This feature is for testing out the Gift Aid feature¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶	And I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	When I activate Manage Gift Aid¶	And I create out of box Gift Aid Declaration¶¶Scenario: Verify you can submit Gift Aid donation using Give Now¶	Given I log on the Mbrr site as designated user Public user¶	When I submit Gift Aid donation¶		| Key                | Value            |¶		| SkipCardValidation | true             |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| PaymentMethodType  | CreditCard       |¶		| CardNumber         | 4012888888881881 |¶		| CardExpiry         | 05232025         |¶		| CardCVC            | 333              |¶		| PostalCode         | 78722            |¶	When I log on the Staff site as designated user System Administrator¶	Then I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 50.00 |¶¶Scenario: Verify you can submit Gift Aid donation using Give Now using OBO¶	Given I log onto the Mbrr site as System Administrator on behalf user Janice,Darrow¶	When I submit Gift Aid donation¶		| Key                | Value            |¶		| GiftAidDeclaration | Written          |¶		| SkipCardValidation | true             |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| PaymentMethodType  | CreditCard       |¶		| CardNumber         | 4012888888881881 |¶		| CardExpiry         | 05232025         |¶		| CardCVC            | 333              |¶		| PostalCode         | 78722            |¶	When I log on the Staff site as designated user System Administrator¶	Then I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 50.00 |¶¶Scenario: Verify user can browse to gift entry page to enter a Gift using Gift Aid¶	Given I log on the Staff site as designated user System Administrator¶	When I enter a Gift¶		| Key                | Value            |¶		| Donor              | New Contact      |¶		| FirstName          | Tester1          |¶		| LastName           | Tester1          |¶		| Amount             | 25               |¶		| GiftItem           | BLDG             |¶		| GiftAid            | true             |¶		| GiftAidDeclaration | Written          |¶		| NumGifts           | 3                |¶		| BillTo             | Tester1 Tester1  |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| CardNumber         | 4111111111111111 |¶		| CardExpiry         | 0425             |¶		| CardCVC            | 123              |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I run a scheduled process automation task retrieve¶	And I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 25.00 |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/GiftAid.feature)
Diff(EQUAL,"Feature: Fundraising¶¶¶@Ignore¶Scenario: Verify a user can't card attack paycentral¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	")
Diff(EQUAL,"And I am on the Staff site as designated user System Administrator¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶		| DefaultToRecurring  | true  |¶		| DefaultAutoRenew    | true  |¶	When I submit 2 Give Now Reocurring Donations¶		| Key           | Value            |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4111111111111111 |¶		| CardCVC       | 123              |¶		| PostalCode    | 55555            |¶	 Then I verify user error message Transaction submitted to OpenEdge returned an error. Code:¶	 ¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Fundraising/Staff/Staff.feature)
Diff(EQUAL,"@PaymentGateways @CiBuild¶Feature: United States demo payment gateways for v10¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Amend the country currency¶	When I add United States Payment country currency¶	Then I verify United States currency was added¶¶Scenario: Set currency code to empty not allowed¶	When I add Empty Payment country currency¶	Then I verify default currency validation message A currency code is required¶¶Scenario: Adding IMIS Pay CC US¶	When I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |		¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |		¶		")
Diff(EQUAL,"| GLAccount         | 1-1020: VISA                    ")
Diff(INSERT," ")
Diff(EQUAL,"|¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding IMIS Pay DD US¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | IMIS Pay DD US                   |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | Direct debit                     |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"                    |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | IMIS Pay DD US                   |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | Direct debit                     |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"                    |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding IATS CC US¶	When I setup a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_CC_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS CC US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | Credit card          |¶		| GLAccount         | 1-1020: VISA         |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_CC_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS CC US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | Credit card          |¶		| GLAccount         | 1-1020: VISA         |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding IATS DD US¶	When I setup a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_DD_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS DD US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| ")
Diff(DELETE,"PaymentMethodType | Direct debit         |¶		| GLAccount         | 1-1020: VISA")
Diff(INSERT,"GLAccount         | 1-1060: Debit        |¶		| PaymentMethodType | Direct debit")
Diff(EQUAL,"         |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_DD_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS DD US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | Direct debit         |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"        |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding Pay Flow CC US¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value          |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| PayFlowPro     |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| PF_CC_US       |¶		| Region      ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| United States  |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Pay Flow CC US |¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| qaperson1      |¶		| UserName    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| asicctest      |¶		| Partner     ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Verisign       |¶		| Vendor      ")
Diff(INSERT,"      ")
Diff(EQUAL,"| asicctest      |¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox        |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card    |¶		")
Diff(EQUAL,"| GLAccount   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1-1020: VISA   |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value          |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| PayFlowPro     |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| PF_CC_US       |¶		| Region      ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| United States  |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Pay Flow CC US |¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| qaperson1      |¶		| UserName    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| asicctest      |¶		| Partner     ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Verisign       |¶		| Vendor      ")
Diff(INSERT,"      ")
Diff(EQUAL,"| asicctest      |¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox        |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card    |¶		")
Diff(EQUAL,"| GLAccount   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1-1020: VISA   |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding Pay Flow DD US¶	When I setup a gateway suite¶		| Key               | Value          |¶		| GatewayType       | PayFlowPro     |¶		| AccountCode       | PF_DD_US       |¶		| Region            | United States  |¶		| AccountName       | Pay Flow DD US |¶		| Password          | qaperson1      |¶		| UserName          | asicctest      |¶		| Partner           | Verisign       |¶		| Vendor            | asicctest      |¶		| Environment       | Sandbox        |¶		| PaymentMethodType | Direct debit   |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"  |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key               | Value          |¶		| GatewayType       | PayFlowPro     |¶		| AccountCode       | PF_DD_US       |¶		| Region            | United States  |¶		| AccountName       | Pay Flow DD US |¶		| Password          | qaperson1      |¶		| UserName          | asicctest      |¶		| Partner           | Verisign       |¶		| Vendor            | asicctest      |¶		| Environment       | Sandbox        |¶		| PaymentMethodType | Direct debit   |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"  |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding Vantiv¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value        |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Vantiv       |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| VANTIV_US    |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Vantiv       |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1213807      |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card  |¶		")
Diff(EQUAL,"| GLAccount   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1-1020: VISA |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value        |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Vantiv       |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| VANTIV_US    |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Vantiv       |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1213807      |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card  |¶		")
Diff(EQUAL,"| GLAccount   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 1-1020: VISA |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding Bambora CC US¶	When I setup a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| BB_CC_US                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora CC US                    |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora NA                       |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 300212633                        |¶		| UserName     ")
Diff(INSERT,"     ")
Diff(EQUAL,"| johnasi                          |¶		| Password     ")
Diff(INSERT,"     ")
Diff(EQUAL,"| FullAccess777!                   |¶		| ApiKey       ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1bb1e53329fD4009887fB123A7Ae91A2 |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount    ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| BB_CC_US                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora CC US                    |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora NA                       |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 300212633                        |¶		| UserName     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| johnasi                          |¶		| Password     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| FullAccess777!                   |¶		| ApiKey       ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1bb1e53329fD4009887fB123A7Ae91A2 |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount    ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶¶Scenario: Adding Elavon CC US¶	When I setup a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                                                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                                                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| EL_CC_US                                                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                                                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon CC US                                                     |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon                                                           |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 0022")
Diff(DELETE,"579")
Diff(INSERT,"874")
Diff(EQUAL,"                                                          |¶		| UserName     ")
Diff(INSERT," ")
Diff(INSERT,"    ")
Diff(EQUAL,"| apiuser                                                          |¶		| Pin          ")
Diff(DELETE,"| T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A")
Diff(INSERT,"     | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | Credit card                                                     ")
Diff(EQUAL," |¶		| GLAccount    ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1-1020: VISA                                                     |¶	And I setup autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶	Then I verify a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                                                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                                                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| EL_CC_US                                                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                                                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon CC US                                                     |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon                                                           |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 0022")
Diff(DELETE,"579")
Diff(INSERT,"874")
Diff(EQUAL,"                                                          |¶		| UserName     ")
Diff(INSERT,"    ")
Diff(INSERT," ")
Diff(EQUAL,"| apiuser                                                          |¶		| Pin          ")
Diff(DELETE,"| T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A")
Diff(INSERT,"     | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | Credit card                                                     ")
Diff(EQUAL," |¶		| GLAccount    ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 1-1020: VISA                                                     |¶	And I verify autopay¶		| Key                             | Value |¶		| RecurringDonation               | true  |¶		| RenewingMemberships             | true  |¶		| AllowDonorsChangeAmount         | true  |¶        | AllowDonorsSelectCollectionDate | true  |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/UnitedStatesPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: Canada demo payment gateways for v10¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Amend the country currency¶	When I add Canada Payment country currency¶	Then I verify Canada currency was added¶¶Scenario: Adding IMIS Pay CC CA¶	When I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_CA                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| Canada                           |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033566                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC CA                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| rq5FjxL2nva2uubghavs3s2MfMdZktan |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_CA                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| Canada                           |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033566                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC CA                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| rq5FjxL2nva2uubghavs3s2MfMdZktan |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IMIS Pay DD CA¶	When I setup a gateway suite¶		| Key              | Value                            |¶		| GatewayType      | ImisPay                          |¶		| AccountCode      | IP_DD_CA                         |¶		| Region           | Canada                           |¶		| XWebId           | 800000022538                     |¶		| TerminalId       | 80033560                         |¶		| AccountName      | IMIS Pay DD CA                   |¶		| AuthorizationKey | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |¶	")
Diff(INSERT,"	| PaymentMethodType | Direct debit                    |¶		| GLAccount         | 1-1060: Debit                   |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key              | Value                            |¶		| GatewayType      | ImisPay                          |¶		| AccountCode      | IP_DD_CA                         |¶		| Region           | Canada                           |¶		| XWebId           | 800000022538                     |¶		| TerminalId       | 80033560                         |¶		| AccountName      | IMIS Pay DD CA                   |¶		| AuthorizationKey | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |¶	")
Diff(INSERT,"	| PaymentMethodType | Direct debit                    |¶		| GLAccount         | 1-1060: Debit                   |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IATS DD CA¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Iats                 |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IA_CC_CA             |¶		| Region      ")
Diff(INSERT,"  ")
Diff(INSERT,"    ")
Diff(EQUAL,"| United States/Canada |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IATS CC CA           |¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Test88               |¶		| AgentCode   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Test88               |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card          |¶		| GLAccount         | 1-1020: VISA         |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Iats                 |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IA_CC_CA             |¶		| Region      ")
Diff(INSERT,"     ")
Diff(INSERT," ")
Diff(EQUAL,"| United States/Canada |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IATS CC CA           |¶		| Password    ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| Test88               |¶		| AgentCode   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Test88               |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card          |¶		| GLAccount         | 1-1020: VISA         |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Bambora CC CA¶	When I setup a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| BB_CC_CA                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora CC CA                    |¶		| Spreedly")
Diff(DELETE,"GatewayType")
Diff(INSERT,"Type     ")
Diff(EQUAL," | Bambora NA                       |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 300212633                        |¶		| UserName     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| johnasi                          |¶		| Password     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| FullAccess777!                   |¶		| ApiKey       ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| 1bb1e53329fD4009887fB123A7Ae91A2 |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| BB_CC_CA                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora CC CA                    |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Bambora NA                       |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 300212633                        |¶		| UserName     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| johnasi                          |¶		| Password     ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| FullAccess777!                   |¶		| ApiKey       ")
Diff(INSERT,"   ")
Diff(INSERT,"  ")
Diff(EQUAL,"| 1bb1e53329fD4009887fB123A7Ae91A2 |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Elavon CC CA¶	When I setup a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                                                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                                                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| EL_CC_CA                                                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                                                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon CC CA                                                     |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon                                                           |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 002")
Diff(DELETE,"3010")
Diff(INSERT,"2874")
Diff(EQUAL,"                                                          |¶		| UserName     ")
Diff(INSERT,"     ")
Diff(EQUAL,"| apiuser                                                          |¶		| Pin          ")
Diff(DELETE,"| FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS")
Diff(INSERT,"     | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | Credit card                                                      |¶		| GLAccount         | 1-1020: VISA                                                    ")
Diff(EQUAL," |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key          ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value                                                            |¶		| GatewayType  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| ImisPassThrough                                                  |¶		| AccountCode  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| EL_CC_CA                                                         |¶		| Environment  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Sandbox                                                          |¶		| AccountName  ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon CC CA                                                     |¶		| SpreedlyType ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Elavon                                                           |¶		| MerchantId   ")
Diff(INSERT,"     ")
Diff(EQUAL,"| 002")
Diff(DELETE,"3010")
Diff(INSERT,"2874")
Diff(EQUAL,"                                                          |¶		| UserName     ")
Diff(INSERT," ")
Diff(INSERT,"    ")
Diff(EQUAL,"| apiuser                                                          |¶		| Pin          ")
Diff(INSERT," ")
Diff(DELETE,"| FD9J9FHQUNIVFHY3U0EJ9XNDWJICO23YXT2X0IFY0CR1SL37SEU6RMBBXRWXHLOS")
Diff(INSERT,"    | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | Credit card                                                      |¶		| GLAccount         | 1-1020: VISA                                                    ")
Diff(EQUAL," |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/CanadaPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: United Kingdom demo payment gateways for v10¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Amend the country currency¶	When I add United Kingdom Payment country currency¶	Then I verify United Kingdom currency was added¶¶Scenario: Adding IATS CC UK¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                   |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Iats                    |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IA_CC_UK                |¶		| ")
Diff(DELETE,"Region")
Diff(INSERT,"AccountName       | IATS CC UK              |¶		| Region      ")
Diff(EQUAL,"      | United Kingdom & Europe |¶		| Password    ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| rapidtest7              |¶		| AgentCode   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| UIAW88                  |¶		| ")
Diff(DELETE,"AccountName | IATS CC UK  ")
Diff(INSERT,"PaymentMethodType | Credit card             |¶		| GLAccount         | 1-1020: VISA")
Diff(EQUAL,"            |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                   |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Iats                    |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IA_CC_UK                |¶		")
Diff(INSERT,"| AccountName       | IATS CC UK              |¶		")
Diff(EQUAL,"| Region      ")
Diff(INSERT,"    ")
Diff(INSERT,"  ")
Diff(EQUAL,"| United Kingdom & Europe |¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| rapidtest7              |¶		| AgentCode   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| UIAW88                  |¶		| ")
Diff(DELETE,"AccountName | IATS CC UK  ")
Diff(INSERT,"PaymentMethodType | Credit card             |¶		| GLAccount         | 1-1020: VISA")
Diff(EQUAL,"            |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IMIS Pay CC UK¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ImisPay                              |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IP_CC_UK                             |¶		| Region      ")
Diff(INSERT,"     ")
Diff(INSERT," ")
Diff(EQUAL,"| United Kingdom & Europe              |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IMIS Pay CC UK                       |¶		| AccountId   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |¶		| AppKey      ")
Diff(INSERT,"    ")
Diff(INSERT,"  ")
Diff(EQUAL,"| wfENkB9cKTSftNoG                     |¶		| AppId       ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| MER_7e3e2c7df34f42819b3edee31022ee3f |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                          |¶		| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ImisPay                              |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IP_CC_UK                             |¶		| Region      ")
Diff(INSERT,"      ")
Diff(EQUAL,"| United Kingdom & Europe              |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IMIS Pay CC UK                       |¶		| AccountId   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |¶		| AppKey      ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| wfENkB9cKTSftNoG                     |¶		| AppId       ")
Diff(INSERT,"      ")
Diff(EQUAL,"| eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| MER_7e3e2c7df34f42819b3edee31022ee3f |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                          |¶		| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/UnitedKingdomPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: Australia demo payment gateways for v10¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Amend the country currency¶	When I add Australia Payment country currency¶	Then I verify Australia currency was added¶¶Scenario: Adding IMIS Pay CC AU¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ImisPay                              |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IP_CC_AU                             |¶		| Region      ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| Australia                            |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IMIS Pay CC AU                       |¶		| DigitalKey  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                          |¶		| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ImisPay                              |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IP_CC_AU                             |¶		| Region      ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| Australia                            |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IMIS Pay CC AU                       |¶		| DigitalKey  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                          |¶		| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IMIS Pay DD AU¶	When I setup a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_DD_AU                             |¶		| Region            | Australia                            |¶		| AccountName       | IMIS Pay DD AU                       |¶		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |¶		| PaymentMethodType | Direct debit                         |¶	")
Diff(INSERT,"	| GLAccount         | 1-1060: Debit                        |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_DD_AU                             |¶		| Region            | Australia                            |¶		| AccountName       | IMIS Pay DD AU                       |¶		| DigitalKey        | 542D4CF7-72EE-4BD8-0B33-C46FFD588BE5 |¶		| PaymentMethodType | Direct debit                         |")
Diff(INSERT,"¶		| GLAccount         | 1-1060: Debit                        |")
Diff(EQUAL,"¶¶Scenario: Adding Secure Pay CC AU¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value            |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SecurePay        |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SP_CC_AU         |¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| abc123           |¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox          |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Secure Pay CC AU |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ABC0001          |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card      |¶		| GLAccount         | 1-1020: VISA     |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value            |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SecurePay        |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SP_CC_AU         |¶		| Password    ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| abc123           |¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox          |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Secure Pay CC AU |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ABC0001          |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card      |¶		| GLAccount         | 1-1020: VISA     |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Secure Pay DD AU¶	When I setup a gateway suite¶		| Key")
Diff(DELETE,"				")
Diff(INSERT,"               ")
Diff(EQUAL,"| Value            |¶		| GatewayType")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| SecurePay        |¶		| AccountCode")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| SP_DD_AU         |¶		| Password")
Diff(DELETE,"			")
Diff(INSERT,"          ")
Diff(EQUAL,"| abc123           |¶		| Environment")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| Sandbox          |¶		| AccountName")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| Secure Pay DD AU |¶		| MerchantId")
Diff(DELETE,"		")
Diff(INSERT,"        ")
Diff(EQUAL,"| ABC0001          |¶		| PaymentMethodType | Direct debit     |¶	")
Diff(INSERT,"	| GLAccount         | 1-1060: Debit    |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key")
Diff(DELETE,"				")
Diff(INSERT,"               ")
Diff(EQUAL,"| Value            |¶		| GatewayType")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| SecurePay        |¶		| AccountCode")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| SP_DD_AU         |¶		| Password")
Diff(DELETE,"			")
Diff(INSERT,"          ")
Diff(EQUAL,"| abc123           |¶		| Environment")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| Sandbox          |¶		| AccountName")
Diff(DELETE,"		")
Diff(INSERT,"       ")
Diff(EQUAL,"| Secure Pay DD AU |¶		| MerchantId")
Diff(DELETE,"		")
Diff(INSERT,"        ")
Diff(EQUAL,"| ABC0001          |¶		| PaymentMethodType | Direct debit     |¶	")
Diff(INSERT,"	| GLAccount         | 1-1060: Debit    |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/AustraliaPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: New Zealand demo payment gateways for v10¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Amend the country currency¶	When I add New Zealand Payment country currency¶	Then I verify New Zealand currency was added¶¶Scenario: Adding IMIS Pay NZ CC¶	When I setup a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ                                |¶		| Region            | New Zealand                          |¶		| AccountName       | IMIS Pay NZ                          |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_CC_NZ                             |¶		| PaymentMethodName | IMIS Pay CC New Zealand              |¶		| PaymentMethodType | Credit card                          |¶	")
Diff(INSERT,"	| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ                                |¶		| Region            | New Zealand                          |¶		| AccountName       | IMIS Pay NZ                          |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_CC_NZ                             |¶		| PaymentMethodName | IMIS Pay CC New Zealand              |¶		| PaymentMethodType | Credit card                          |¶	")
Diff(INSERT,"	| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IMIS Pay NZ DD¶	When I setup a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ                                |¶		| Region            | New Zealand                          |¶		| AccountName       | IMIS Pay NZ                          |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_DD_NZ                             |¶		| PaymentMethodName | IMIS Pay DD New Zealand              |¶		| PaymentMethodType | Direct debit                         |¶	")
Diff(INSERT,"	| GLAccount         | 1-1060: Debit                        |¶	")
Diff(EQUAL,"And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ                                |¶		| Region            | New Zealand                          |¶		| AccountName       | IMIS Pay NZ                          |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_DD_NZ                             |¶		| PaymentMethodName | IMIS Pay DD New Zealand              |¶		| PaymentMethodType | Direct debit                         |¶	")
Diff(INSERT,"	| GLAccount         | 1-1060: Debit                        |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Secure Pay NZ")
Diff(INSERT," CC")
Diff(EQUAL,"¶	When I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value         ")
Diff(INSERT,"        ")
Diff(INSERT,"    ")
Diff(EQUAL,"|¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SecurePay     ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SP_NZ         ")
Diff(INSERT,"      ")
Diff(INSERT,"      ")
Diff(EQUAL,"|¶		| Password    ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| abc123        ")
Diff(INSERT,"     ")
Diff(INSERT,"       ")
Diff(EQUAL,"|¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox       ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Secure Pay NZ ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ABC0001       ")
Diff(INSERT,"            |¶		| PaymentMethodCode | SP_CC_NZ                  |¶		| PaymentMethodName | Secure Pay CC New Zealand |¶		| PaymentMethodType | Credit card               |¶		| GLAccount         | 1-1020: VISA              ")
Diff(EQUAL,"|¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key         ")
Diff(INSERT," ")
Diff(INSERT,"     ")
Diff(EQUAL,"| Value         ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SecurePay     ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| SP_NZ         ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| Password    ")
Diff(INSERT,"      ")
Diff(EQUAL,"| abc123        ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| Environment ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Sandbox       ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Secure Pay NZ ")
Diff(INSERT,"            ")
Diff(EQUAL,"|¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ABC0001       ")
Diff(INSERT,"            |¶		| PaymentMethodCode | SP_CC_NZ                  |¶		| PaymentMethodName | Secure Pay CC New Zealand |¶		| PaymentMethodType | Credit card               |¶		| GLAccount         | 1-1020: VISA              |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Secure Pay NZ DD¶	When I setup a gateway suite¶		| Key               | Value                     |¶		| GatewayType       | SecurePay                 |¶		| AccountCode       | SP_NZ                     |¶		| Password          | abc123                    |¶		| Environment       | Sandbox                   |¶		| AccountName       | Secure Pay NZ             |¶		| MerchantId        | ABC0001                   |¶		| PaymentMethodCode | SP_DD_NZ                  |¶		| PaymentMethodName | Secure Pay DD New Zealand |¶		| PaymentMethodType | Direct debit              |¶		| GLAccount         | 1-1060: Debit             |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                     |¶		| GatewayType       | SecurePay                 |¶		| AccountCode       | SP_NZ                     |¶		| Password          | abc123                    |¶		| Environment       | Sandbox                   |¶		| AccountName       | Secure Pay NZ             |¶		| MerchantId        | ABC0001                   |¶		| PaymentMethodCode | SP_DD_NZ                  |¶		| PaymentMethodName | Secure Pay DD New Zealand |¶		| PaymentMethodType | Direct debit              |¶		| GLAccount         | 1-1060: Debit             ")
Diff(EQUAL,"|¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/PaymentGateways/NewZealandPaymentGateways.feature)
Diff(EQUAL,"@RateCardDetails¶Feature:Step 5 Rate Card Details Test Suite v10¶¶Scenario: Verify insert ad color¶	Given I am on the Staff site as designated user Staff¶	When I insert ad color for ACRP Online, ACRP23d and 3 Color¶	Then I verify inserted ad color 3 Color¶¶Scenario: Verify insert ad size¶	Given I am on the Staff site as designated user Staff¶	When I insert ad size for ACRP Online, ACRP23d and Top Banner ¶	Then I verify inserted ad size Top Banner¶¶Scenario: Verify insert frequency¶	Given I am on the Staff site as designated user Staff¶	When I insert frequency for ACRP Online, ACRP23d and 15¶	Then I verify inserted frequency 15¶¶Scenario Outline: Verify insert rate card detail matrix¶	Given I am on the Staff site as designated user Staff¶	When I insert rate card detail matrix for <Media asset>, <Rate card> and <Ad color> ¶	    | Ad size    | Frequency |¶	    | Full Page  | 1         |¶	    | Back Cover | 3         |¶	Then I verify inserted rate card detail matrix for 4 Color¶	    | Ad size    | Frequency |¶	    | Full Page  | 1         |¶	    | Back Cover | 3         |¶    ¶	Examples:¶		| Media asset  | Rate card | Ad color |¶		| ACRP Online  | ACRP23d   | 4 Color  |¶		| ACRP Online  | ACRP24d   | 4 Color  |¶		| ACRP Online  | ACRP25d   | 4 Color  |¶¶Scenario Outline: Verify add rate in rate card detail matrix¶	Given I am on the Staff site as designated user Staff¶	When I add rate in rate card details matrix for <Media asset>, <Rate card> and <Ad color> ¶	Then I verify added rate in rate card detail matrix for 4 Color¶	Examples:¶		| Media asset  | Rate card | Ad color |¶		| ACRP Online  | ACRP23d   | 4 Color  |¶		| ACRP Online  | ACRP24d   | 4 Color  |¶		| ACRP Online  | ACRP25d   | 4 Color  |¶		¶Scenario Outline: Verify update rate card detail matrix¶	Given I am on the Staff site as designated user Staff¶	When I update rate card details matrix for <Media asset>, <Rate card> and <Ad color>¶	    | Ad size		| Frequency |¶	    | Full Page		| 1         |¶	    | Bottom Banner | 6         |¶	Then I verify updated rate card detail matrix for 4 Color¶	    | Ad size    | Frequency |¶		| Bottom Banner | 6      |¶	Examples:¶		| Media asset  | Rate card | Ad color |¶		| ACRP Online  | ACRP23d   | 4 Color  |¶		| ACRP Online  | ACRP24d   | 4 Color  |¶		| ACRP Online  | ACRP25d   | 4 Color  |¶¶Scenario Outline: Verify delete rate card detail matrix¶	Given I am on the Staff site as designated user Staff¶	When I delete rate card details matrix for <Media asset>, <Rate card> and <Ad color>¶	Then I verify deleted rate card details matrix 4 Color¶	Examples:¶		| Media asset  | Rate card | Ad color |¶		| ACRP Online  | ACRP23d   | 4 Color  |¶		| ACRP Online  | ACRP24d   | 4 Color  |¶		| ACRP Online  | ACRP25d   | 4 Color  |¶		¶Scenario: delete clear all icon from rate cards details input box¶	Given I am on the Staff site as designated user Staff¶	When I insert media asset ACRP Online and navigate to rate cards details screen¶	Then I verify clear all icon in rate card details input box")
Diff(INSERT,"¶¶Scenario: Verify Not able to update Rate card details matrix after deleting ad size(s) or Frequency ¶	Given I am on the Staff site as designated user Staff¶	When I update Rate card details matrix after deleting ad size(s) or Frequency for ACRP Online, ACRP23d and 4 Color ¶	    | Ad size    | Frequency |¶	    | Full Page  | 1         |¶	    | Back Cover | 3         | ¶	Then I verify message Select ad color, ad size and frequency in order to create rate card details matrix")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Advertising/MediaAsset/RateCardsDetails.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: UK Pay Central SDK Finance V10 Tests¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶	When I set financial entity if not already set¶		| Key            | Value                |¶		| Code           | VAT					|¶		| Country        | United Kingdom		|¶		| CultureType    | EnglishUnitedKingdom |¶		| DefaultCulture | true					|¶	¶	¶@PayCentralSDK¶Scenario: Checkout with a Credit Card Payment that does initiate a 3DS challenge¶	Given I setup a gateway suite¶		| Key         ")
Diff(INSERT,"      ")
Diff(EQUAL,"| Value                                |¶		| GatewayType ")
Diff(INSERT,"      ")
Diff(EQUAL,"| ImisPay                              |¶		| AccountCode ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IP_CC_UK                             |¶		| Region      ")
Diff(INSERT,"     ")
Diff(INSERT," ")
Diff(EQUAL,"| United Kingdom & Europe              |¶		| AccountName ")
Diff(INSERT,"      ")
Diff(EQUAL,"| IMIS Pay CC UK                       |¶		| AccountId   ")
Diff(INSERT,"      ")
Diff(EQUAL,"| TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |¶		| AppKey      ")
Diff(INSERT,"    ")
Diff(INSERT,"  ")
Diff(EQUAL,"| wfENkB9cKTSftNoG                     |¶		| AppId       ")
Diff(INSERT,"   ")
Diff(INSERT,"   ")
Diff(EQUAL,"| eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |¶		| MerchantId  ")
Diff(INSERT,"      ")
Diff(EQUAL,"| MER_7e3e2c7df34f42819b3edee31022ee3f |¶	")
Diff(INSERT,"	| PaymentMethodType | Credit card                          |¶		| GLAccount         | 1-1020: VISA                         |¶	")
Diff(EQUAL,"When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC UK   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4222000001227408 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| SDKOn             | false            |¶	Then I check that the 3DS challenge window is displayed¶	And I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Finance/UKPayCentralSDKFinance.feature)
Diff(EQUAL,"@Finance¶Feature: Pay Central SDK Finance Test Suite v10¶¶Background: ¶	Given I am on the Staff site as designated user System Administrator¶¶@PayCentralSDK¶Scenario: Checkout with a Credit Card payment that does not initiate a 3DS challenge¶	Given I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶		| SDKOn             | false            |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶¶@PayCentralSDK¶Scenario: Checkout with a Direct Debit payment¶	Given I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | IMIS Pay DD US                   |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | Direct debit                     |¶		| GLAccount         | 1-10")
Diff(DELETE,"2")
Diff(INSERT,"6")
Diff(EQUAL,"0: ")
Diff(DELETE,"VISA ")
Diff(INSERT,"Debit")
Diff(EQUAL,"                    |¶	When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I conditionally checkout items in the cart¶		| Key               | Value          |¶		| PaymentMethod     | IMIS Pay DD US |¶		| PaymentMethodType | DebitCard      |¶		| AccountNumber     | 001221111221   |¶		| RoutingNumber     | 026009593      |¶		| SDKOn             | false          |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Finance/PayCentralSDKFinance.feature)
Diff(EQUAL,"@Finance¶Feature: Finance Test Suite v10¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify a cash dues renewal can be adjusted and reversed¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName        | BillingCycle            |¶		| Regular Cash Mass Run | Regular Membership Fees |¶	Then I verify a renewals billing run can be reversed¶		| BillToName          | ProductName             | ProductDescription | AccountingMethod | Amount |¶		| Franklin C. Acevedo | Regular Membership Fees | Renewal Fees       | Cash             | 265.00 |¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify a cash dues renewal can adjust line items¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName        | BillingCycle            |¶		| Regular Cash Mass Run | Regular Membership Fees |¶	Then I verify a dues renewal can adjust line items¶		| BillToName    | ProductDescription | AccountingMethod | Amount | AmountFrom | AmountTo | AmountAdjusted |¶		| Mark V. Adams | Renewal Fees       | Cash             | 263.00 | 200.00     | 100.00   | -100.00        |¶¶@BillingFinanceQuickSweep¶Scenario: Verify an accrual dues invoice renewal can be adjusted¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName                | BillingCycle              |¶		| Associate accural renewal run | Associate Membership Fees |¶	* I verify a Accrual renewals billing run called Associate accural renewal run with a billing cycle of Associate Membership Fees¶	Then I verify an accrual dues invoice renewal can be adjusted¶		| BillToName    | ProductName           | AccountingMethod | Amount | Date  |¶		| Mary P. Miles | Associate Member Fees | Accrual          | 170.00 | Today |¶¶@BillingFinanceQuickSweep¶Scenario: Verify issuing invoice write offs¶	Given I am on the Staff site as designated user System Administrator¶	When I issue an invoice write off¶	Then I verify user has Any message displayed as 1 invoice was successfully written off.¶¶@BillingFinanceQuickSweep¶Scenario: Verify line items for accrual dues renewal can be adjusted¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName                | BillingCycle              |¶		| Associate accural renewal run | Associate Membership Fees |¶	* I verify a Accrual renewals billing run called Associate accural renewal run with a billing cycle of Associate Membership Fees¶	Then I verify a dues renewal can adjust line items¶		| BillToName    | ProductDescription    | AccountingMethod | Amount | Date  | AmountFrom | AmountTo | AmountAdjusted |¶		| Mary P. Miles | Associate Member Fees | Accrual          | 170.00 | Today | 150.00     | 100.00   | -50.00         |¶¶@BillingFinanceQuickSweep¶Scenario: Verify issuing refunds through Credit Invoices¶	Given I am on the Staff site as designated user System Administrator¶	When I issue a refund through Credit Invoices¶	Then I verify a refund of a Credit Invoice¶¶Scenario: Verify Invoice Detail loads¶	Given I am on the Staff site as designated user System Administrator¶	When I access Invoice Detail with invalid parameters¶		| ParamName | ParamValue |¶		| Invoid    | 0          |¶		| Invoice   | 1          |¶		| Id        | 2          |¶		| InvoiceId |            |¶		|           |            |¶	* I access Invoice Detail with invalid parameter values¶		| ParamName | ParamValue |¶		| InvoiceId | 010101     |¶		| InvoiceId | 020202     |¶		| InvoiceId | 0          |¶		| InvoiceId | A          |¶		| InvoiceId | 0A0B03     |¶	Then I access Invoice Detail with valid parameters and values¶		| ParamName | ParamValue |¶		| InvoiceId | 8032       |¶		| InvoiceId | 8033       |¶		| InvoiceId | 8034       |¶¶Scenario: Verify event invoice can be adjusted¶	Given I am on the Staff site as designated user Staff¶	When I access Invoice Detail¶		| ParamName | ParamValue |¶		| InvoiceId | 2681       |¶	Then I verify the event invoice can be adjusted¶		| EventName         | Registrant     |¶		| Annual Conference | Mr. Leo Barnes |¶¶¶Scenario: Verify slash doesnt disappear after entering expired card date¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	And I am on the Staff site as designated user System Administrator¶	When I add a product to the staff cart¶	And I ")
Diff(INSERT,"start ")
Diff(EQUAL,"check")
Diff(INSERT,"ing ")
Diff(EQUAL,"out items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶	Then I validate the slash is not lost¶¶@QuickSweep¶Scenario: Verify you can amend an expiration date¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	And I am on the Staff site as designated user System Administrator¶	When I amend a credit card expiration date¶	Then I verify contacts automatic payments credit expiry date")
Diff(INSERT,"¶¶Scenario: Verify unapply payment¶	Given I am on the Staff site as designated user System Administrator¶	And I order product¶		| Key       | Value                    |¶		| Product   | Networking Your Business |¶		| ClearCart | True                     |¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		| CheckNumber   | 1234                  |¶	And I save available credit value before update¶	When I adjust payment with Unapply adjustment type¶	Then I verify that the credit is open¶¶Scenario: Verify reversal payment¶	Given I am on the Staff site as designated user System Administrator¶	And I order product¶		| Key       | Value                    |¶		| Product   | Networking Your Business |¶		| ClearCart | True                     |¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		| CheckNumber   | 1234                  |¶	When I adjust payment with Reverse adjustment type¶	Then I verify that payment is reversed¶¶Scenario: Verify refund payment¶	Given I am on the Staff site as designated user System Administrator¶	And I order product¶		| Key       | Value                    |¶		| Product   | Networking Your Business |¶		| ClearCart | True                     |¶	And I create an event using existing event¶		| Key       | Value             |¶		| EventName | Annual Conference |¶		| Status    | Active            |¶	And I register myself for an event¶		| Key                | Value                      |¶		| RegistrationOption | Full Conference            |¶		| Program-1          | Exhibit Hall Hours - Day 1 |¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		| CheckNumber   | 1234                  |¶	When I adjust payment with Refund adjustment type and CASH payment method¶		| Description              | Percentage From Amount To Refund |¶		| Networking Your Business | 100                              |¶		| Annual Conference        | 50                               |¶	Then I verify that payment is refund¶¶Scenario: Verify Posting of Batches¶	Given I am on the Staff site as designated user Staff¶	And I order product¶		| Key     | Value                    |¶		| Product | Networking Your Business |¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		| CheckNumber   | 1234                  |¶	When I post the first batch¶	Then I verify that the batch is posted¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment IMIS Pay CC US   ¶	Given I set system up with a gateway¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | IMIS Pay CC US                   |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶		| Environment       | Sandbox                          |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key           | Value            |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4012888888881881 |¶		| CardExpiry    | 05/29            |¶		| PostalCode    | 123              |¶		| CardCVC       | 787              |¶	Then I verify successfully joined as a member Associate¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment IMIS Pay DD US¶	Given I set system up with a gateway¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | IMIS Pay DD US                   |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | Direct debit                     |¶		| GLAccount         | 1-1060: Debit                    |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key               | Value          |¶		| PaymentMethod     | IMIS Pay DD US |¶		| RoutingNumber     | 026009593      |¶		| AccountNumber     | 001221111221   |¶		| PaymentMethodType | Direct debit   |¶	Then I verify successfully joined as a member Associate¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment iATS CC US¶	Given I set system up with a gateway¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_CC_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS CC US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | Credit card          |¶		| GLAccount         | 1-1020: VISA         |¶		| Environment       | Sandbox              |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key           | Value            |¶		| PaymentMethod | IATS CC US       |¶		| CardNumber    | 4222222222222220 |¶		| CardExpiry    | 05/29            |¶		| PostalCode    | 90014            |¶		| CardCVC       | 787              |¶	Then I verify successfully joined as a member Associate¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment Payflow CC US¶	Given I set system up with a gateway¶		| Key               | Value          |¶		| GatewayType       | PayFlowPro     |¶		| AccountCode       | PF_CC_US       |¶		| Region            | United States  |¶		| AccountName       | Pay Flow CC US |¶		| Password          | qaperson1      |¶		| UserName          | asicctest      |¶		| Partner           | Verisign       |¶		| Vendor            | asicctest      |¶		| Environment       | Sandbox        |¶		| PaymentMethodType | Credit card    |¶		| GLAccount         | 1-1020: VISA   |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key                    | Value            |¶		| PaymentMethod          | Pay Flow CC US   |¶		| CardNumber             | 5555555555554444 |¶		| CardExpiry             | 05232025         |¶		| CardCVC                | 123              |¶		| PostalCode             | 78722            |¶	Then I verify successfully joined as a member Associate¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment Bambora CC US¶	Given I set system up with a gateway¶		| Key               | Value                            |¶		| GatewayType       | ImisPassThrough                  |¶		| AccountCode       | BB_CC_US                         |¶		| Environment       | Sandbox                          |¶		| AccountName       | Bambora CC US                    |¶		| SpreedlyType      | Bambora NA                       |¶		| MerchantId        | 300212633                        |¶		| UserName          | johnasi                          |¶		| Password          | FullAccess777!                   |¶		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |¶		| PaymentMethodType | Credit card                      |¶		| GLAccount         | 1-1020: VISA                     |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key                    | Value            |¶		| PaymentMethod          | Bambora CC US    |¶		| CardNumber             | 5555555555554444 |¶		| CardExpiry             | 05232025         |¶		| CardCVC                | 123              |¶		| PostalCode             | 78722            |¶	Then I verify successfully joined as a member Associate¶¶@QuickSweep¶@Payments¶Scenario: Verify if a public user can join a non recurring membership with payment Elavon CC US¶	Given I set system up with a gateway¶		| Key               | Value                                                            |¶		| GatewayType       | ImisPassThrough                                                  |¶		| AccountCode       | EL_CC_US                                                         |¶		| Environment       | Sandbox                                                          |¶		| AccountName       | Elavon CC US                                                     |¶		| SpreedlyType      | Elavon                                                           |¶		| MerchantId        | 0022874                                                          |¶		| UserName          | apiuser                                                          |¶		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | Credit card                                                      |¶		| GLAccount         | 1-1020: VISA                                                     |¶	And I select Join Associate membership on MBRR¶	When I add a new random MBRR contact and join Associate¶	And I submit a payment for a product¶		| Key                    | Value            |¶		| PaymentMethod          | Elavon CC US     |¶		| CardNumber             | 4012888888881881 |¶		| CardExpiry             | 05/29            |¶		| CardCVC                | 123              |¶		| PostalCode             | 78722            |¶	Then I verify successfully joined as a member Associate¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Finance/Finance.Feature)
Diff(EQUAL,"Feature: ContactSecurity¶¶Background:¶	Given I set system up with a gateway¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶¶Scenario: Register someone else should not require a SysAdmin or Company Admin¶	Given I verify 19066 is setup for this test with username LeoB¶	And I verify 19081 has a member type of Regular Member¶	And I am on the MBRR site as user LeoB¶	When I register someone else for an event¶		| Key                | Value                             |¶		| Registrant         | Joel Brown                        |¶		| EventCode          | MELGOLF                           |¶		| RegistrationOption | Pair of Tickets                   |¶		| Program-1          | Closest To the Pin Contest Ticket |¶		| Program-2          | Post-tournament BBQ Dinner        |¶		| BillTo             | Mr. Leo Barclay                   |¶	And I checkout items in the cart¶		| Key                    | Value            |¶		| Key                    | Value            |¶		| PaymentMethod          | IMIS Pay CC US   |¶		| PaymentMethodType      | CreditCard       |¶		| CardNumber             | 4111111111111111 |¶		| CardExpiry             | 05232025         |¶		| CardCVC                | 333              |¶		| PostalCode             | 78722            |¶		| CheckOrderConfirmation | true             |¶	Then I verify someone else was registered¶		| Key                | Value                             |¶		| Registrant         | Joel Brown                        |¶		| EventName          | CharityGolfTournament             |¶		| EventCode          | MELGOLF                           |¶		| RegistrationOption | Pair of Tickets                   |¶		| Program-1          | Closest To the Pin Contest Ticket |¶		| Program-2          | Post-tournament BBQ Dinner        |¶		| BillTo             | Mr. Leo Barclay                   |")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Staff/ContactSecurity.feature)
Diff(EQUAL,"Feature: LicenseManagement¶	¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶@LicenseDemo¶Scenario: Resync the Demo license¶	When I resync the license¶	Then I check that iMIS is Licensed To iMIS Enterprise Demonstration¶¶@Ignored¶@LicenseDev¶Scenario: Update the license to dev¶	When I update the license to dev¶	Then I check that iMIS is Licensed To iMIS Enterprise Development¶¶@Ignored¶@LicenseDev¶Scenario: Resync the Dev license¶	When I resync the license¶	Then I check that iMIS is Licensed To iMIS Enterprise Development¶¶@LicenseDemo¶Scenario: Update the license to demo¶	When I update the license to demo¶	Then I check that iMIS is Licensed To iMIS Enterprise Demonstration¶¶@LicenseOpenId¶Scenario: Update the license to openid¶	When I update the license to openid¶	Then I check that iMIS is Licensed To OpenID Test v10¶¶@LicenseDemo¶Scenario: Verify only licensed products are available to the user in IMIS¶	When I apply license for membership¶	Then I verify Membership displays under Licensed features¶¶@LicenseDemo¶Scenario: Verify a product can be purchased with ImisPay after applying a demo license¶	And I update the license to demo¶	And I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	When I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶¶@LicenseDemo¶Scenario: Verify a product can be purchased with ImisPay after resyncing demo license¶	And I setup a gateway suite¶		| Key              ")
Diff(INSERT," ")
Diff(EQUAL,"| Value                            |¶		| GatewayType      ")
Diff(INSERT," ")
Diff(EQUAL,"| ImisPay                          |¶		| AccountCode      ")
Diff(INSERT," ")
Diff(EQUAL,"| IP_CC_US                         |¶		| Region           ")
Diff(INSERT," ")
Diff(EQUAL,"| United States                    |¶		| XWebId           ")
Diff(INSERT," ")
Diff(EQUAL,"| 800000022538                     |¶		| TerminalId       ")
Diff(INSERT," ")
Diff(EQUAL,"| 80033565                         |¶		| AccountName      ")
Diff(INSERT," ")
Diff(EQUAL,"| IMIS Pay CC US                   |¶		| AuthorizationKey ")
Diff(INSERT," ")
Diff(EQUAL,"| L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| PaymentMethodType | Credit card                      |¶		")
Diff(EQUAL,"| GLAccount        ")
Diff(INSERT," ")
Diff(EQUAL,"| 1-1020: VISA                     |¶	When I resync the license¶	And I order product¶		| Key       | Value                  |¶		| Product   | Building a Strong Team |¶		| ClearCart | true                   |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Staff/LicenseManagement.feature)
Diff(EQUAL,"Feature: Events¶¶Background:¶	Given I am on the Staff site as designated user Staff¶¶Scenario: Verify an event is created with a pending status¶	Given I create an event¶		| Key       | Value              |¶		| EventName | Pending Test Event |¶		| Status    | Pending            |¶	Then I verify the event gets created¶		| Key       | Value              |¶		| EventName | Pending Test Event |¶		| Status    | Pending            |¶¶Scenario: Verify an event is created with an active status¶	Given I create an event¶		| Key       | Value             |¶		| EventName | Active Test Event |¶		| Status    | Active            |¶	Then I verify the event gets created¶		| Key       | Value             |¶		| EventName | Active Test Event |¶¶Scenario: Create an event template¶	Given I create an event template¶		| Key       | Value         |¶		| EventName | Testing Event |¶		| Status    | Active        |¶	Then I verify the event gets created¶		| Key       | Value                   |¶		| EventName | Template: Testing Event |¶¶¶Scenario: Create an event using a copy of an existing event¶	Given I create an event using existing event¶		| Key       | Value             |¶		| EventName | Annual Conference |¶		| Status    | Active            |¶	Then I verify the event gets created¶		| Key       | Value             |¶		| EventName | Annual Conference |¶¶Scenario Outline: Create an event using a template¶	Given I create an event using event template <Template>¶		| Key       | Value         |¶		| EventName | Testing Event |¶		| Status    | Active        |¶	Then I verify the event gets created¶		| Key       | Value         |¶		| EventName | Testing Event |¶Examples:¶	| Template   |¶	| Webinar    |¶	| Conference |¶¶")
Diff(INSERT,"@BUG74350¶Scenario Outline: Verify the cancel button is greyed out after deleting an event¶	Given I create an event¶		| Key       | Value             |¶		| EventName | SearchingForEvent |¶		| Status    | Active            |¶	When I cancel the event¶	Then I delete the event but dont exit¶	Then I verify the cancel button is greyed out¶")
Diff(EQUAL,"¶@QuickSweep¶Scenario: Verify you can cancel an event¶	Given I create an event¶		| Key       | Value             |¶		| EventName | Active Test Event |¶		| Status    | Active            |¶	When I cancel the event¶	Then I verify the event is cancelled¶¶¶@QuickSweep¶Scenario: Verify you can delete an event¶	Given I create an event¶		| Key       | Value             |¶		| EventName | Active Test Event |¶		| Status    | Active            |¶	When I cancel the event¶	And I delete the event¶	Then I verify the event is deleted")
Diff(INSERT," ")
Diff(EQUAL,"¶¶")
Diff(INSERT,"¶Scenario: Verify digits are rounded properly on resource quantity¶	Given I create an event using event template Webinar¶		| Key       | Value         |¶		| EventName | Testing Event |¶		| Status    | Active        |¶	When I add a resource with a quantity <NumberGiven>¶	Then I verify the resource is <NumberExpected>¶Examples:¶	| NumberGiven | NumberExpected |¶	| 15.2345     | 15.2345        |¶	| 15.2300     | 15.23          |¶	| 15.0000     | 15             |¶	| 15.24       | 15.24          |")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Events/EventsStaffUser.feature)
Diff(EQUAL,"@BillingFinance¶Feature: Billing¶¶@BillingFinanceQuickSweep¶Scenario: Verify running an individual billing run¶	Given I am on the Staff site as designated user System Administrator¶	When I generate individual membership renewal for a new contact¶		| contactFirstName | contactLastName | membershipType | productCode | productName             | payOption |¶		| Donald           | Duck            | Regular Member | M           | Regular Membership Fees | Pay Later |¶	Then I verify Billing Renewals Logs data¶		| contactFirstName | contactLastName | productName             | accountingMethod | amount | date  | number |¶		| Donald           | Duck            | Regular Membership Fees | Cash             | 220.00 | Today | 1      |¶¶@BillingFinanceQuickSweep¶Scenario: Verify adding and editing a new billing cycle¶	Given I am on the Staff site as designated user System Administrator¶	When I change billing cycle called Part-Time Professional to Account Method Cash¶	Then I verify billing cycle called Part-Time Professional Account Method is Cash¶¶@BillingFinanceQuickSweep¶Scenario: Verify generating a mass cash dues renewal run¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName        | BillingCycle            |¶		| Regular Cash Mass Run | Regular Membership Fees |¶	Then I verify a Cash renewals billing run called Regular Cash Mass Run with a billing cycle of Regular Membership Fees¶	¶@ThumbsDownBug¶Scenario: Verify apply other credit no longer works¶	Given I am on the Staff site as System Administrator on behalf user Marilou,Abbott¶	When I pay for Join Now product¶		| product             | AppliedCredit | TotalAmount |¶		| Student Member Join | -75.00        | 75.00       |¶	Then I verify the order confirmation¶		| BillTo         | AppliedCredit | TransTotalAmount | LineItem            | GrandTotalAmount |¶		| Marilou Abbott | -75.00        | 0.00             | Student Member Join | 75.00            |¶¶@ThumbsDownBug¶Scenario: Verify apply other credit no longer works second test¶	Given I am on the Staff site as System Administrator on behalf user James,Harrison¶	When I search for product¶		| product                               | AppliedCredit | GrandTotalAmount | ShippingAmount | HandlingAmount | TotalAmount |¶		| Keychain with Built-in LED Flashlight | -12.99        | 12.99            | 1              | 2              | 9.99        |¶	Then I verify the order confirmation¶		| BillTo                     | AppliedCredit | TransTotalAmount | LineItem                              | GrandTotalAmount |¶		| Mr. James H. Harrison, Jr. | -12.99        | 0.00             | Keychain with Built-in LED Flashlight | 12.99            |¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify generating a mass accrual dues list billing run¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName                | BillingCycle              |¶		| Associate accural renewal run | Associate Membership Fees |¶	Then I verify a Accrual renewals billing run called Associate accural renewal run with a billing cycle of Associate Membership Fees¶¶@BillingFinanceQuickSweep¶Scenario: Verify the Manage expired members¶	Given I am on the Staff site as designated user System Administrator¶	When I generate individual membership renewal for a new contact¶		| contactFirstName | contactLastName | membershipType | productCode | productName     | payOption |¶		| John             | Mouse           | Retired Member | RET         | Retired Members | Pay Later |¶	And I manage expired members of type Retired Member and change found to New Member Type of Non Member and Status to Active¶	Then I Verify accounts page Join Now button works¶¶@BillingFinanceQuickSweep¶Scenario: Verify a Join using the multi-term billing cycle¶	Given I am on the Staff site as designated user System Administrator¶	When I submit a billing order for a new contact¶		| contactFirstName | contactLastName | membershipType    | productCode | productName                 | termSpan | payOption |¶		| Minnie           | Mouse           | Community Partner | COMMP24     | Community Partner - 2 Years | 24       | Check     |¶	Then I verify order confirmation message Minnie Mouse will be billed for the balance due¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify Cash List billing through Generate Renewals¶	Given I am on the Staff site as designated user System Administrator¶	When I change billing cycle called List Billing to Account Method Cash¶	When I generate a renewals billing run¶		| BillingRunName         | BillingCycle |¶		| Cash dues list billing | List Billing |¶	Then I verify I can modify a cash dues list billing¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify Accrual List billing through Generate Renewals¶	Given I am on the Staff site as designated user System Administrator¶	When I generate a renewals billing run¶		| BillingRunName    | BillingCycle            | EffectiveDate |¶		| Accrual List Bill | Professional Membership | AddAYear      |¶	Then I verify I can modify an accrual list billing¶		| BillingRunName    | BillingCycle            | EffectiveDate |¶		| Accrual List Bill | Professional Membership | AddAYear      |¶¶@BillingFinanceQuickSweep¶Scenario: Verify a Join using the CHAPT wildcard billing cycle¶	Given I am on the Staff site as designated user System Administrator¶	When I Join Now and pay for a product for a new contact¶		| ContactFirstName | ContactLastName | AccountingMethod | ProductCode   | ProductName             | PayOption | UnitAmount |¶		| Victoria         | Mooney          | Cash             | North Chapter | Chapter Membership Fees | Pay Later | 45.00      |¶	* I Generate Renewal and Pay for Modified Chapter on behalf of¶		| ContactFirstName | ContactLastName | AccountingMethod | ProductCode   | ProductName             | PayOption | Amount |¶		| Victoria         | Mooney          | Cash             | North Chapter | Chapter Membership Fees | Pay Later | 45.00  |¶	Then I verify contacts membership details¶		| ContactFirstName | ContactLastName | MembershipType | Chapter       | ItemName1     | ItemAmount1 | ItemName2     | ItemAmount2 |¶		| Victoria         | Mooney          | Chapter Member | South Chapter | North Chapter | 0.00        | South Chapter | 43.00       |¶¶@NotReRunnable¶@BillingFinanceQuickSweep¶Scenario: Verify a public user can apply a payment for a cash bas")
Diff(DELETE,"h")
Diff(INSERT,"e")
Diff(EQUAL," renewal¶	Given I set system up with a gateway¶		| Key         | Value          |¶		| GatewayType | PayFlowPro     |¶		| AccountCode | PF_CC_US       |¶		| Region      | United States  |¶		| AccountName | Pay Flow CC US |¶		| Password    | qaperson1      |¶		| UserName    | asicctest      |¶		| Partner     | Verisign       |¶		| Vendor      | asicctest      |¶		| Environment | Sandbox        |¶		| GLAccount   | 1-1020: VISA   |¶	When I renew Membership fees on the Mbrr site¶		| Key                         | Value        |¶		| Username                    | teresas      |¶		| FullName                    | Teresa Spain |¶		| IndustryInsiderMagazine     | true         |¶		| PACContribution             | false        |¶		| ScholarshipFundContribution | true         |¶	And I checkout items in the cart¶		| Key                    | Value            |¶		| PaymentMethod          | Pay Flow CC US   |¶		| PaymentMethodType      | CreditCard       |¶		| CardNumber             | 5555555555554444 |¶		| CardExpiry             | 05232025         |¶		| CardCVC                | 123              |¶		| CheckOrderConfirmation | true             |¶	")
Diff(INSERT,"	| PostalCode             | 78722            |¶	")
Diff(EQUAL,"Then I verify the order confirmation details from context¶¶¶@BillingFinanceQuickSweep¶Scenario: Verify adding a new billing product¶	Given I am on the Staff site as designated user System Administrator¶	When I add new billing products¶		| Type            | Code    | Name                        | Description                 | StandardPrice | DiscountPrice | TermSpan |¶		| Membership Fees | COMMP1  | Community Partner monthly   | Community Partner monthly   | 20            | 20            | 1        |¶		| Membership Fees | SCOMMP1 | Special Partner half yearly | Special Partner half yearly | 200           | 120           | 6        |¶	Then I verify user has Any message displayed as Item successfully saved¶¶@BillingFinanceQuickSweep¶Scenario: Verify editing a prorate rule¶	Given I am on the Staff site as designated user System Administrator¶	When I edit prorate rule called PRORATE/12¶		| fiscalMonth | multiplier | options   |¶		| 8           | .50        |           |¶		| 9           | .50        |           |¶		| 10          | 1.0        | Bump Date |¶		| 11          | 1.0        |           |¶		| 12          | 1.0        |           |¶	Then I verify prorate rule called PRORATE/12¶		| fiscalMonth | multiplier | options |¶		| 8           | 0.50000    |         |¶		| 9           | 0.50000    |         |¶		| 10          | 1.00000    | B       |¶		| 11          | 1.00000    | B       |¶		| 12          | 1.00000    | B       |¶¶@BillingFinanceQuickSweep¶Scenario: Verify editing an existing customer type table¶	Given I am on the Staff site as designated user System Administrator¶	When I add new billing products¶		| Type            | Code   | Name                      | Description               | StandardPrice | DiscountPrice | TermSpan |¶		| Membership Fees | COMMP1 | Community Partner monthly | Community Partner monthly | 20            | 10            | 1        |¶	* I set Customer Type default to COMMP1 for product code Community Partner¶	* I verify new contact can join product¶		| ContactFirstName | ContactLastName | ProductCode                |¶		| Mickey           | Mouse           | CommunityPartnerMembership |¶	Then I verify contacts joined product is Community Partner monthly with term span of 1¶")
Diff(INSERT,"¶@BillingFinanceQuickSweep¶Scenario: Verify join no payment promotion¶	Given I am on the Staff site as designated user Staff¶	And I add a new contact¶		| Key       | Value   |¶		| FirstName | Test    |¶		| LastName  | Contact |¶	When I join now as StudentMemberJoin¶	And I checkout items in the cart¶		| Key           | Value           |¶		| PaymentMethod | Without payment |¶		| PromoCode     | DVETERAN        |¶	Then I verify order was submitted without payment¶¶@BillingFinanceQuickSweep¶Scenario: Verify Accrual dues invoice cancellation no payment¶	Given I am on the Staff site as designated user Staff¶	When I cancel renewal for user with id 20804¶	And I checkout items in the cart¶		| Key           | Value           |¶		| PaymentMethod | Without payment |¶	Then I verify order was submitted without payment¶¶@BillingFinanceQuickSweep¶Scenario: Verify Cash dues invoice cancellation no payment¶	Given I am on the Staff site as designated user Staff¶	When I cancel renewal for user with id 21566¶	And I checkout items in the cart¶		| Key           | Value           |¶		| PaymentMethod | Without payment |¶	Then I verify order was submitted without payment¶¶@BillingFinanceQuickSweep¶Scenario: Verify Join No Payment Complimentary¶	Given I am on the Staff site as designated user Staff¶	And I add a new contact¶		| Key       | Value   |¶		| FirstName | Test    |¶		| LastName  | Contact |¶	When I join now as RetiredMembers¶	And I checkout items in the cart¶		| Key           | Value           |¶		| PaymentMethod | Without payment |¶	Then I verify order was submitted without payment¶¶@MBRR¶Scenario: Verify a public user can join for a non-dues product¶	Given I am on the Mbrr site¶	And I create a new contact¶		| Key        | Value             |¶		| FirstName  | Bob               |¶		| LastName   | Smith             |¶		| Country    | Zambia            |¶		| Address1   | 123 Some Street   |¶		| City       | Austin            |¶		| PostalCode | 11111             |¶		| Email      | test@imisdemo.com |¶		| Password   | demo123           |¶	When I join now as NonMemberSubscriptions on Mbrr site¶		| Key       | Value   |¶		| ItemNames | Journal |¶	And I checkout items in the cart¶		| Key                 | Value |¶		| PurchaseOrderNumber | 123   |¶	Then I verify a non-dues product is ordered¶¶@BillingFinanceQuickSweep¶Scenario: Verify standard prorating works¶	Given I am on the Staff site as designated user System Administrator¶	And I change billing time to Annual for billing cycle Regular Membership Fees¶	And I add a new contact¶		| Key       | Value   |¶		| FirstName | Test    |¶		| LastName  | Contact |¶	When I join now as RegularMembershipFees¶	Then I verify Voluntary Contributions product price is 20.00¶	And I verify the membership expires at the end of the fiscal year¶¶@MBRR¶Scenario: Verify standard prorating works on Member site¶	Given I am on the Staff site as designated user System Administrator¶	And I change billing time to Annual for billing cycle Regular Membership Fees¶	And I am on the Mbrr site¶	And I logout on the current page¶	And I create a new contact¶		| Key       | Value   |¶		| FirstName | Test    |¶		| LastName  | Contact |¶	When I join now as RegularMembershipFees on Mbrr site¶		| Key       | Value            |¶		| ItemNames | PAC Contribution |¶		| AmountTo  | 120.00           |¶	Then I verify Voluntary Contributions product price is 120.00¶	And I verify the membership expires at the end of the fiscal year")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Membership/Billing.feature)
Diff(EQUAL,"Feature: Renewals¶¶¶¶Scenario: Verify reversing open invoices¶	Given I am on the Staff site as designated user System Administrator¶	When I reverse first open invoice¶	Then I verify open invoice is reversed¶")
Diff(INSERT,"¶Scenario: Verify renew in advance¶	Given I am on the Staff site as designated user System Administrator¶	When I renew membership for user with id 23220¶	And I checkout items in the cart¶		| Key           | Value                 |¶		| PaymentMethod | Main Checking Account |¶		| CheckNumber   | 1234                  |¶	Then I verify membership for user with id 23220 was renewed¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Features/Membership/Renewals.feature)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class CartStepDef¶    {¶")
Diff(DELETE,"        private readonly IWebDriver _driver;¶")
Diff(EQUAL,"        private readonly IAsiWebContext _context;¶¶        public CartStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(DELETE,"            _driver = driver;¶")
Diff(EQUAL,"            _context = context;¶            CartTestMethods = new CartTestMethods(driver, context);¶        ")
Diff(DELETE,"    CartTestMethodsV10 = new CartTestMethodsV10(driver, context);¶        }¶¶        public CartTestMethods CartTestMethods { get; set; }¶        public CartTestMethodsV10 CartTestMethodsV10")
Diff(INSERT,"}¶¶        public CartTestMethods CartTestMethods")
Diff(EQUAL," { get; set; }¶¶        [Then(@"I verify the cart contains GstInc tax for ")
Diff(DELETE,"item (.*)")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"")]¶        public void VerifyCartContainsGstIncTaxFor")
Diff(DELETE,"Item(string itemId")
Diff(INSERT,"PrevCreatedItem(")
Diff(EQUAL,")¶        {¶")
Diff(DELETE,"            if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];¶")
Diff(EQUAL,"            CartTestMethods")
Diff(DELETE,"V10")
Diff(EQUAL,".VerifyCartContainsGstIncTaxForItems(new")
Diff(DELETE," List<string>() { itemId")
Diff(INSERT,"[] { (string)_context.DataStorage["ItemCode"]")
Diff(EQUAL," });¶        }¶¶        [Then(@"I verify the cart does not contain GstInc tax for ")
Diff(DELETE,"item (.*)")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"")]¶        public void VerifyCartDoesNotContainGstIncTaxFor")
Diff(DELETE,"Item(string itemId")
Diff(INSERT,"PrevCreatedItem(")
Diff(EQUAL,")¶        {¶")
Diff(DELETE,"            if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];¶")
Diff(EQUAL,"            CartTestMethods")
Diff(DELETE,"V10")
Diff(EQUAL,".VerifyCartDoesNotContainGstIncTaxForItems(new")
Diff(DELETE," List<string>() { itemId")
Diff(INSERT,"[] { (string)_context.DataStorage["ItemCode"]")
Diff(EQUAL," });¶        }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        [Then(@"I verify the cart contains VatInc tax for ")
Diff(DELETE,"item (.*)")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"")]¶        public void VerifyCartContainsVatIncTaxFor")
Diff(DELETE,"Item(string itemId")
Diff(INSERT,"PrevCreatedItem(")
Diff(EQUAL,")¶        {¶")
Diff(DELETE,"            if (itemId == "@DataStorage.ItemCode") itemId = (string)_context.DataStorage["ItemCode"];¶")
Diff(EQUAL,"            CartTestMethods")
Diff(DELETE,"V10")
Diff(EQUAL,".VerifyCartContainsVatIncTaxForItems(new")
Diff(DELETE," List<string>() { itemId")
Diff(INSERT,"[] { (string)_context.DataStorage["ItemCode"]")
Diff(EQUAL," });¶        }¶¶        [Then(@"I verify the cart does not contain VatInc tax for ")
Diff(DELETE,"item (.*)")
Diff(INSERT,"the previously created item")
Diff(EQUAL,"")]¶        public void VerifyCartDoesNotContainVatIncTaxForItem(")
Diff(DELETE,"string itemId")
Diff(EQUAL,")¶        {¶            ")
Diff(DELETE,"if (itemId == "@DataStorage.ItemCode") itemId =")
Diff(INSERT,"CartTestMethods.VerifyCartDoesNotContainVatIncTaxForItems(new[] {")
Diff(EQUAL," (string)_context.DataStorage["ItemCode"]")
Diff(INSERT," })")
Diff(EQUAL,";¶")
Diff(INSERT,"        }¶¶        [Then(@"I verify the cart contains Canada tax")]¶        public void VerifyCartContainsCanadaTax()¶        {¶")
Diff(EQUAL,"            CartTestMethods")
Diff(DELETE,"V10")
Diff(EQUAL,".VerifyCart")
Diff(DELETE,"DoesNotContainVatIncTaxForItems(new List<string>() { itemId }")
Diff(INSERT,"ContainsCanadaTax();¶        }¶¶        [Then(@"I verify the cart does not contain Canada tax")]¶        public void VerifyCartDoesNotContainCanadaTax()¶        {¶            CartTestMethods.VerifyCartDoesNotContainCanadaTax(")
Diff(EQUAL,");¶        }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/CartStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class OrderConfirmationStepDef¶    {¶        public OrderConfirmationStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            OrderConfirmationTestMethods = new OrderConfirmationTestMethods(driver, context);¶            OrderConfirmationTestMethodsV10 = new OrderConfirmationTestMethodsV10(driver, context);¶        }¶¶        public OrderConfirmationTestMethods OrderConfirmationTestMethods { get; set; }¶        public OrderConfirmationTestMethodsV10 OrderConfirmationTestMethodsV10 { get; set; }¶¶        [Then(@"I verify the order confirmation contains GstInc tax")]¶        public void VerifyOrderConfirmationContainsGstIncTaxForAtLeastOneItem()¶        {¶            OrderConfirmationTestMethodsV10.VerifyAtLeastOneItemIncludeGstInc();¶        }¶¶        [Then(@"I verify the order confirmation does not contain GstInc tax")]¶        public void VerifyOrderConfirmationDoesNotContainGstIncTaxForAtLeastOneItem()¶        {¶            OrderConfirmationTestMethodsV10.VerifyAtLeastOneItemsDoNotIncludeGstInc();¶        }¶¶        [Then(@"I verify the order confirmation contains VatInc tax")]¶        public void VerifyOrderConfirmationContainsVatIncTaxForAtLeastOneItem()¶        {¶            OrderConfirmationTestMethodsV10.VerifyAtLeastOneItemIncludeVatInc();¶        }¶¶        [Then(@"I verify the order confirmation does not contain VatInc tax")]¶        public void VerifyOrderConfirmationDoesNotContainVatIncTaxForAtLeastOneItem()¶        {¶            OrderConfirmationTestMethodsV10.VerifyAtLeastOneItemsDoNotIncludeVatInc();¶        }¶¶")
Diff(INSERT,"        [Then(@"I verify the order confirmation contains Canada tax")]¶        public void VerifyOrderConfirmationContainsCanadaTax()¶        {¶            OrderConfirmationTestMethodsV10.VerifyOrderConfirmationContainsCanadaTax();¶        }¶¶        [Then(@"I verify the order confirmation does not contain Canada tax")]¶        public void VerifyOrderConfirmationDoesNotContainCanadaTax()¶        {¶            OrderConfirmationTestMethodsV10.VerifyOrderConfirmationDoesNotContainCanadaTax();¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/OrderConfirmationStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class InventoryReceiptsStepDef¶    {¶        public InventoryReceiptsStepDef(IWebDriver driver, IAsiWebContext context, ")
Diff(DELETE,"SpecFlowContext scenario")
Diff(INSERT,"ProductContext product")
Diff(EQUAL,"Context)¶        {¶            InventoryReceiptsTestMethods = new InventoryReceiptsTestMethods(driver, context, ")
Diff(DELETE,"scenario")
Diff(INSERT,"product")
Diff(EQUAL,"Context);¶        }¶¶        private InventoryReceiptsTestMethods InventoryReceiptsTestMethods { get; }¶¶        [Given($"I save {StepRegex.SingleWord} inventory details before update")]¶        public void Save")
Diff(DELETE,"Inventory")
Diff(INSERT,"Product")
Diff(EQUAL,"DetailsBeforeUpdate(string productCode)¶        {¶            InventoryReceiptsTestMethods.Save")
Diff(DELETE,"Inventory")
Diff(INSERT,"Product")
Diff(EQUAL,"DetailsBeforeUpdate(productCode);¶        }¶¶        [When("I process inventory (Receipt|Adjustment)")
Diff(DELETE," for (.*)")
Diff(EQUAL," with (positive|negative) quantity")]¶        public void ")
Diff(DELETE,"Select")
Diff(INSERT,"Process")
Diff(EQUAL,"InventoryReceipt")
Diff(DELETE,"sFromCommerce")
Diff(EQUAL,"(string type,")
Diff(DELETE," string productName,")
Diff(EQUAL," string quantityDirection)¶        {¶            InventoryReceiptsTestMethods.")
Diff(DELETE,"Select")
Diff(INSERT,"Process")
Diff(EQUAL,"InventoryReceipt")
Diff(DELETE,"sFromCommerce(type, productNam")
Diff(INSERT,"(typ")
Diff(EQUAL,"e, quantityDirection == "positive");¶        }¶¶        [Then("I verify inventory (Receipt|Adjustment)")
Diff(DELETE," for (.*)")
Diff(EQUAL," is applied")]¶        public void VerifyInventoryDetailsAreUpdated(string type")
Diff(DELETE,", string productName")
Diff(EQUAL,")¶        {¶            InventoryReceiptsTestMethods.VerifyInventoryDetailsAreUpdated(type")
Diff(DELETE,", productName")
Diff(EQUAL,");¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Commerce/InventoryReceiptsStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ReportWriterStepDef¶    {¶        IWebDriver _driver;¶        IAsiWebContext _context;¶        public ReportWriterStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶            ReportViewerPage = new ReportViewerPage();¶        }¶¶        private ReportViewerPage ReportViewerPage { get; set; }¶¶        [Given(@"I verify report (.*) is present without prompts")]¶        public void GivenIVerifyReportNameOfReportIsPresentWithoutPrompts(string reportName)¶        {¶            var user = new ImisUser("ReportWriterUser",")
Diff(DELETE," new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶            user.AttemptsTo(Browse.InStaffSite(ReportViewerPage.BaseUrl));¶            user.AttemptsTo(Click.On(ReportViewerPage.SearchBox));¶            user.AttemptsTo(SendKeys.To(ReportViewerPage.SearchBox, reportName));¶            user.AttemptsTo(Click.On(ReportViewerPage.TreeNode(reportName)));¶            var title = user.AsksFor(HtmlAttribute.Of(ReportViewerPage.SelectedNode, "data-title"));¶            title.Should().Be(reportName);¶¶            user.AttemptsTo(Click.On(ReportViewerPage.OnlyNodeRun));¶            user.AttemptsTo(Wait.Until(Existence.Of(ReportViewerPage.AnyPrompt), IsEqualTo.True()));¶            var promptsExist = user.AsksFor(Existence.Of(ReportViewerPage.AnyPrompt));¶            if (!promptsExist)¶                throw new Exception("Prompts were not found for this report.");¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Continuum/ReportWriterStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class GatewaySetupStepDef¶    {¶        public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context")
Diff(INSERT,", ScenarioContext scenarioContext")
Diff(EQUAL,")¶")
Diff(DELETE,"")
Diff(EQUAL,"        {¶            GatewayTestMethods = new GatewayTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶            Authentication = new Authentication(driver, context);¶")
Diff(INSERT,"            ScenarioContext = scenarioContext;¶")
Diff(EQUAL,"        }¶¶        GatewayTestMethods GatewayTestMethods { get; set; }¶        SignInTestMethods SignInTestMethods { get; set; }¶        Authentication Authentication { get; set; }")
Diff(INSERT,"¶        ScenarioContext ScenarioContext { get; }")
Diff(EQUAL,"¶¶        [Given(@"I set system up with a gateway")]¶        public void GivenISetSystemUpWithAGateway(Table data)¶")
Diff(DELETE,"")
Diff(EQUAL,"        {¶")
Diff(INSERT,"            if (ScenarioContext.ScenarioInfo.Tags.Contains("SkipSetGatewayStep"))¶                return;¶¶")
Diff(EQUAL,"            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            WhenISetupAGateway(data);¶            Authentication.LogOut();¶        }¶¶        [When(@"I setup a gateway suite")]¶        [Given(@"I setup a gateway suite")]¶        public void WhenISetupAGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.SetupGatewaySuite(data.CreateInstance<GatewayData>());¶        }¶¶        [When(@"I setup autopay")]¶        [Given(@"I setup autopay")]¶        public void WhenISetupAutoPay(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.SetupAutoPayData(data.CreateInstance<AutoPayData>());¶        }¶¶        [Then(@"I verify a gateway suite")]¶        public void WhenIVerifyAGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.VerifyGatewaySuite(data.CreateInstance<GatewayData>());¶        }¶¶        [Then(@"I verify autopay")]¶        public void WhenIVerifyAutoPay(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.VerifyAutoPayData(data.CreateInstance<AutoPayData>());¶        }¶¶¶        [Given(@"I am on a system configured with recurring options")]¶        [When(@"I am on a system configured with recurring options")]¶        public void GivenOnSystemConfiguredWithRecurringOptions(Table data)¶        {¶            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.SetupGatewaySuite(data.CreateInstance<GatewayData>());¶¶            var autoPayData = new AutoPayData¶            {¶                RecurringDonation = true,¶                RenewingMemberships = true,¶                DefaultToRecurring = true,¶                DefaultAutoRenew = true¶            };¶¶            GatewayTestMethods.SetupAutoPayData(autoPayData);¶            Authentication.LogOut();¶        }¶")
Diff(INSERT,"¶        [Given(@"I fill out the following in a new gateway")]¶        public void GivenIFillOutTheFollowingInANewGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.FillOutNewGateway(data.CreateInstance<GatewayData>());¶        }¶¶        [When(@"I save and close the gateway dialogue")]¶        public void WhenISaveAndCloseTheGatewayDialogue()¶        {¶            GatewayTestMethods.AttemptToSaveAndCloseGateway();¶        }¶¶        [Then(@"I should recieve a validation error")]¶        public void ThenIShouldRecieveAValidationError()¶        {¶            GatewayTestMethods.VerifyLinkValidationError();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/PaymentGateways/GatewaySetupStepDef.cs)
Diff(EQUAL,"{¶    [Binding, Scope(Tag = "RateCardDetails")]¶    public class RateCardsDetailsStepDef¶    {¶        public RateCardsDetailsStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            RateCardDetailsTestMethod = new RateCardDetailsTestMethod(driver, context);¶        }¶¶        public RateCardDetailsTestMethod RateCardDetailsTestMethod { get; private set; }¶¶        #region rate card details for media asset¶        [When(@"I insert ad color for (.*), (.*) and (.*)")]¶        public void WhenIInsertAdColor(string mediaAssets, string rateCardName, string adColor)¶        {¶            RateCardDetailsTestMethod.CreateNewAdColor(mediaAssets,rateCardName,adColor);¶        }¶¶        [Then(@"I verify inserted ad color (.*)")]¶        public void ThenIVerifyInsertedAdColor(string adColor)¶        {¶            RateCardDetailsTestMethod.VerifyCreteNewAdColor(adColor);¶        }¶¶        [When(@"I insert ad size for (.*), (.*) and (.*)")]¶        public void WhenIInsertAdSize(string mediaAssets, string rateCardName, string adSize)¶        {¶            RateCardDetailsTestMethod.CreateNewAdSize(mediaAssets,rateCardName,adSize);¶        }¶¶        [Then(@"I verify inserted ad size (.*)")]¶        public void ThenIVerifyInsertedAdSize(string adSize)¶        {¶            RateCardDetailsTestMethod.VerifyCreateNewAdSize(adSize);¶        }¶¶        [When(@"I insert frequency for (.*), (.*) and (.*)")]¶        public void WhenIInsertFrequency(string mediaAssets, string rateCardName, string frequency)¶        {¶            RateCardDetailsTestMethod.CreateNewFrequency(mediaAssets,rateCardName,frequency);¶        }¶¶        [Then(@"I verify inserted frequency (.*)")]¶        public void ThenIVerifyInsertedFrequency(string frequency)¶        {¶            RateCardDetailsTestMethod.VerifyCreateFrequency(frequency);¶        }¶¶        [When(@"I insert rate card detail matrix for (.*), (.*) and (.*)")]¶        public void WhenIInsertRateCardDetailMatrix(string mediaAsset, string rateCard, string adColor, Table table)¶        {¶            RateCardDetailsTestMethod.CreateRateCardDetailMatrix(mediaAsset, rateCard, adColor, table);¶        }¶¶        [Then(@"I verify inserted rate card detail matrix for (.*)")]¶        public void ThenIVerifyInsertedRateCardDetailMatrix(string adColor, Table table)¶        {¶            RateCardDetailsTestMethod.VerifyCreatedRateCardDetailMatrix(adColor, table);¶        }¶¶        [When(@"I add rate in rate card details matrix for (.*), (.*) and (.*)")]¶        public void WhenIAddRateInRateCardDetailsMatrixForNGOWebsiteACRPdAndColor(string mediaAsset, string rateCard, string adColor)¶        {¶            RateCardDetailsTestMethod.AddRatesInRateCardDetailMatrix(mediaAsset,rateCard,adColor);¶        }¶¶        [Then(@"I verify added rate in rate card detail matrix for (.*)")]¶        public void ThenIVerifyAddedRateInRateCardDetailMatrixForColor(string adColor)¶        {¶            RateCardDetailsTestMethod.VerifyAddedRatesInRateCardDetailMatrix(adColor);¶        }¶¶        [When(@"I update rate card details matrix for (.*), (.*) and (.*)")]¶        public void WhenIUpdateRateCardDetailsMatrix(string mediaAsset, string rateCard, string adColor, Table table)¶        {¶            RateCardDetailsTestMethod.UpdateRateCardDetailsMatrix(mediaAsset, rateCard, adColor, table);¶        }¶¶        [Then(@"I verify updated rate card detail matrix for (.*)")]¶        public void ThenIVerifyUpdatedRateCardDetailMatrix(string adColor, Table table)¶        {¶            RateCardDetailsTestMethod.VerifyCreatedRateCardDetailMatrix(adColor, table);¶        }¶¶        [When(@"I delete rate card details matrix for (.*), (.*) and (.*)")]¶        public void WhenIDeleteRateCardDetailsMatrix(string mediaAsset, string rateCard, string adColor)¶        {¶            RateCardDetailsTestMethod.DeleteRateCardDetailsMatrix(mediaAsset,rateCard,adColor);¶        }¶¶        [Then(@"I verify deleted rate card details matrix (.*)")]¶        public void ThenIVerifyDeletedRateCardDetailsMatrix(string adColor)¶        {¶            RateCardDetailsTestMethod.VerifyDeletedRateCardDetailsMatrix(adColor);¶        }¶        #endregion¶¶        #region remove x icon from rate cards details¶        [When(@"I insert media asset (.*) and navigate to rate cards details screen")]¶        public void WhenIInsertMediaAssetACRPOnlineAndNavigateToRateCardsDetailsScreen(string mediaAssets)¶        {¶            RateCardDetailsTestMethod.CreateMediaAssetAndNavigateToRateCardsDetailsScreen(mediaAssets);¶        }¶¶        [Then(@"I verify clear all icon in rate card details input box")]¶        public void ThenIVerifyClearAllIconInRateCardDetailsInputBox()¶        {¶            RateCardDetailsTestMethod.VerifyClearAllIconNotExist();¶        }¶        #endregion")
Diff(INSERT,"¶¶        [When(@"I update Rate card details matrix after deleting ad size\(s\) or Frequency for (.*), (.*) and (.*)")]¶        public void WhenIUpdateRateCardDetailsMatrixAfterDeletingAdSizeSOrFrequencyForACRPOnlineACRPdAndColor(string mediaAsset,string rateCard,string adColor, Table table)¶        {¶            RateCardDetailsTestMethod.UpdateRateCardDetailsMatrixAfterDeletingADSizeFrequency(mediaAsset, rateCard, adColor, table);¶        }¶¶        [Then(@"I verify message (.*)")]¶        public void ThenIVerifyMessage(string message)¶        {¶            RateCardDetailsTestMethod.VerifyMessage(message);¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Advertising/MediaAsset/RateCardsDetailsStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class MarketingStepDef¶    {¶        IWebDriver _driver;¶        IAsiWebContext _context;¶        public MarketingStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶            CreateCommunicationPage = new CreateCommunicationPage();¶        }¶¶        public CreateCommunicationPage CreateCommunicationPage { get; set; }¶¶        [When(@"I inspect the communication template with communicationId (.*)")]¶        public void WhenIInspectTheCommunicationTemplate(string communicationId)¶        {¶            var user = new ImisUser("CommunicationTemplateUser", ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶            user.AttemptsTo(Browse.InStaffSite(CreateCommunicationPage.Url(communicationId)));¶            user.AttemptsTo(Click.On(CreateCommunicationPage.Communication.TabGroup.GetTab("Body")));¶            user.AttemptsTo(Click.On(CreateCommunicationPage.Communication.Body.AddAttachmentLink));¶        }¶¶        [Then(@"I verify CheckBoxName is (check|notchecked)")]¶        public void ThenIVerifyCheckBoxNameIsUnchecked()¶        {¶            //TODO: fill steps¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Marketing/MarketingStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public sealed class FinanceStepDef¶    {¶        public FinanceStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            FinanceTestMethods = new FinanceTestMethods(driver, context);¶            FinanceSettingsTestMethods = new FinanceSettingsTestMethods(driver, context);¶        }¶¶        FinanceTestMethods FinanceTestMethods { get; set; }¶        FinanceSettingsTestMethods FinanceSettingsTestMethods { get; set; }¶¶        [When(@"I add (\b(?:Canada|United Kingdom|United States|Australia|New Zealand|Empty)\b) Payment country currency")]¶        public void WhenIAddPaymentCountryCurrency(string gateway)¶        {¶            FinanceTestMethods.AmendCountryCurrency(gateway);¶        }¶¶        [Then($@"I verify default currency validation message (.*)")]¶        public void ThenIVerifyDefaultCurrencyValidationMessage(string validationMessage)¶        {¶            FinanceSettingsTestMethods.VerifyDefaultCurrencyValidationMessage(validationMessage);¶        }¶¶        [When(@"I verify (\b(?:Canada|United Kingdom|United States|Australia|New Zealand)\b) currency was added")]¶        [Then(@"I verify (\b(?:Canada|United Kingdom|United States|Australia|New Zealand)\b) currency was added")]¶        public void ThenIVerifyCurrencyWasAdded(string gateway)¶        {¶            FinanceTestMethods.VerifyCountryCurrency(gateway);¶        }¶¶        [Then(@"I verify a renewals billing run can be reversed")]¶        public void ThenIVerifyARenewalsBillingRunCanBeReversed(Table table)¶        {¶            FinanceTestMethods.VerifyARenewalsBillingRunCanBeReversed(table);¶        }¶       ¶        [Then(@"I verify a dues renewal can adjust line items")]¶        public void ThenIVerifyADuesRenewalCanAdjustLineItems(Table table)¶        {¶            FinanceTestMethods.VerifyADuesRenewalCanAdjustLineItems(table);¶        }¶¶        [Then(@"I verify an accrual dues invoice renewal can be adjusted")]¶        public void ThenIVerifyAnAccrualDuesInvoiceRenewalCanBeAdjusted(Table table)¶        {¶            FinanceTestMethods.VerifyAnAccrualDuesInvoiceRenewalCanBeAdjusted(table);¶        }¶¶        [When(@"I issue an invoice write off")]¶        public void WhenIIssueAnInvoiceWriteOff()¶        {¶            FinanceTestMethods.WhenIIssueAnInvoiceWriteOff();¶        }¶¶        [When(@"I issue a refund through Credit Invoices")]¶        public void WhenIIssueARefundThroughCreditInvoices()¶        {¶            FinanceTestMethods.IssueARefundThroughCreditInvoices();¶        }¶        ¶        [Then(@"I verify a refund of a Credit Invoice")]¶        public void ThenIVerifyARefundOfACreditInvoice()¶        {¶            FinanceTestMethods.VerifyRefundOfCreditInvoice();¶        }¶¶        [When(@"I access Invoice Detail with invalid parameters")]¶        public void WhenIAccessAInvalidEventInvoice(Table table)¶        {¶            FinanceTestMethods.AccessAInvalidEventInvoice(table);¶        }¶¶        [When(@"I access Invoice Detail with invalid parameter values")]¶        public void WhenIAccessAMissingInvoiceDetail(Table table)¶        {¶            FinanceTestMethods.AccessAMissingInvoiceDetail(table);¶        }¶¶        [Then(@"I access Invoice Detail with valid parameters and values")]¶        public void ThenIAccessAValidInvoiceDetail(Table table)¶        {¶            FinanceTestMethods.AccessAValidInvoiceDetail(table);¶        }¶¶        [When(@"I access Invoice Detail")]¶        public void WhenIAccessInvoiceDetail(Table table)¶        {¶            FinanceTestMethods.AccessAValidInvoiceDetail(table);¶        }¶        ¶        [Then(@"I verify the event invoice can be adjusted")]¶        public void ThenIVerifyTheEventInvoiceCanBeAdjusted(Table data)¶        {¶            FinanceTestMethods.VerifyAnEventRegistrationInvoiceCanBeAdjusted(data.AsiCreateInstance<EventData>());¶        }¶¶        [When(@"I submit a payment for a product")]¶        public void ISubmitAPaymentForAProduct(Table data)¶        { ¶            FinanceTestMethods.SubmitPaymentForProduct(data.AsiCreateInstance<CartData>());¶        }¶¶        [When(@"I add a product to the staff cart")]¶        public void IAddAProductToTheStaffCart()¶        {¶            FinanceTestMethods.AddProductToStaffCart();¶        }¶¶        [Then(@"I validate the slash is not lost")]¶        public void IValidateTheSlashIsNotLost()¶        {¶            FinanceTestMethods.ValidateCardDetails();¶        }¶¶        [When(@"I amend a credit card expiration date")]¶        public void AmendAnExpirationDate()¶        {¶            FinanceTestMethods.AmendCreditCardExpirationDate();¶        }¶        ¶        [Then(@"I verify contacts automatic payments credit expiry date")]¶        public void VerifyContactsAutomaticPaymentsCreditExpiryDate()¶        {¶            FinanceTestMethods.VerifyContactsAutomaticPaymentsCreditExpiryDate();¶        }¶¶        [Then(@"I check that the 3DS challenge window is displayed")]¶        public void WhenICheckThatTheThreeDSChallengeWindowIsDisplayed()¶        {¶            FinanceTestMethods.VerifyThreeDSChallengeWindowIsDisplayed();¶        }¶¶")
Diff(INSERT,"        [Given(@"I save available credit value before update")]¶        public void SaveAvailableCreditValueBeforeUpdate()¶        {¶            FinanceTestMethods.SaveAvailableCreditValue();¶        }¶¶        [When($@"I adjust payment with (Unapply|Reverse) adjustment type")]¶        public void AdjustPaymentWithAdjustmentType(string adjustmentType)¶        {¶            FinanceTestMethods.AdjustPayment(adjustmentType);¶        }¶¶        [When(@$"I adjust payment with Refund adjustment type and (DUMMYVISA|CASH2|CASH|PAYPAL) payment method")]¶        public void AdjustPaymentWithRefundAdjustmentType(string paymentMethod, Table data)¶        {¶            var refundDataSet = data.CreateSet<RefundData>();¶            FinanceTestMethods.RefundPayment(paymentMethod, refundDataSet);¶        }¶¶        [Then(@"I verify that the credit is open")]¶        public void VerifyThatTheCreditIsOpen()¶        {¶            FinanceTestMethods.VerifyThatCreditIsOpen();¶        }¶¶        [Then(@"I verify that payment is reversed")]¶        public void VerifyThatPaymentIsReversed()¶        {¶            FinanceTestMethods.VerifyThatPaymentIsReversed();¶        }¶¶        [Then(@"I verify that payment is refund")]¶        public void VerifyThatPaymentIsRefund()¶        {¶            FinanceTestMethods.VerifyThatPaymentIsRefund();¶        }¶¶        [When(@"I post the first batch")]¶        public void PostTheFirstBatch()¶        {¶            FinanceTestMethods.PostTheFirstBatch();¶        }¶¶        [Then(@"I verify that the batch is posted")]¶        public void VerifyThatTheBatchIsPosted()¶        {¶            FinanceTestMethods.VerifyThatTheBatchIsPosted();¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Finance/FinanceStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class OpenIdStepDef¶    {¶        public OpenIdStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            OpenIdTestMethods = new OpenIdTestMethods(driver, context);¶        }¶¶        public OpenIdTestMethods OpenIdTestMethods { get; }¶        public LicenseManagementTestMethods LicenseManagementTestMethods { get; }¶¶        [When(@"I configure openidconnect")]¶        public void WhenIConfigureOpenidconnect()¶        {¶            try¶            {¶                OpenIdTestMethods.ConfigureOpenId();¶            }¶            catch (Exception")
Diff(DELETE," e")
Diff(EQUAL,")¶            {¶                LicenseManagementTestMethods.ResetLicense();¶                throw")
Diff(DELETE," e")
Diff(EQUAL,";¶            }¶        }¶¶        [Then(@"I verify openidconnect configuration")]¶        public void ThenIVerifyOpenIdConfiguration()¶        {¶            try¶            {¶                OpenIdTestMethods.VerifyOpenIdConfiguration();¶            }¶            catch (Exception")
Diff(DELETE," e")
Diff(EQUAL,")¶            {¶                LicenseManagementTestMethods.ResetLicense();¶                throw")
Diff(DELETE," e")
Diff(EQUAL,";¶            }¶        }¶    }¶}¶¶¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Staff/OpenIdStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class StaffStepDef¶    {¶        public StaffStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            SignInTestMethods = new SignInTestMethods(driver, context);¶            MiscNavigationTestMethods = new MiscNavigationTestMethods(driver, context);¶            AccountPageTestMethods = new AccountPageTestMethods(driver, context);¶        }¶¶        public SignInTestMethods SignInTestMethods { get; }¶        public MiscNavigationTestMethods MiscNavigationTestMethods { get; }¶        public AccountPageTestMethods AccountPageTestMethods { get; }¶¶        [When(@"I Go to Reset Password with a bad resettoken")]¶        public void WhenIGoToResetPasswordWithABadResettoken()¶        {¶            SignInTestMethods.GoToResetWithBadToken();¶        }¶¶        [Then(@"I Verify the Reset Password Page looks correct")]¶        public void ThenVerifyPassowordResetPageLooksCorrect()¶        {¶            SignInTestMethods.VerifyPasswordResetPage();¶        }¶¶¶        [When(@"I view Pay Central Settings tab Gateways")]¶        public void WhenIViewPayCentralSettingsTab()¶        {¶            MiscNavigationTestMethods.GotoPayCentralTab();¶        }¶¶        [Then(@"I am on the Gateways tab")]¶        public void ThenIamOnTheDesiredTab()¶        {¶            MiscNavigationTestMethods.VerifyOnCorrectTab();¶        }¶¶        [When(@"I update the User ID (.*) email with (.*) in contact details panel with accented characters")]¶        public void WhenIUpdateTheEmailInContactDetailsPanelWithAccentedCharacters(string partyID, string email)¶        {¶            AccountPageTestMethods.NegativePathUpdateAccountPageEmail(partyID, email);¶        }¶¶        [When(@"I update the User ID (.*) email with (.*) in contact details panel with non accented characters")]¶        public void WhenIUpdateTheEmailInContactDetailsPanelWithNonAccentedCharacters(string partyID, string email)¶        {¶            AccountPageTestMethods.GreenPathUpdateAccountPageEmail(partyID, email);¶        }¶¶        [Then(@"I verify User ID (.*) email is updated with (.*)")]¶        public void ThenIVerifyEmailWasUpdated(string partyID, string email)¶        {¶            AccountPageTestMethods.VerifyAccountPageEmailUpdated(partyID, email);¶        }¶¶        [Then(@"I verify User ID (.*) email is not updated with (.*)")]¶        public void ThenIVerifyEmailWasNotUpdated(string partyID, string email)¶        {¶            AccountPageTestMethods.VerifyAccountPageEmailNotUpdated(partyID, email);¶        }¶¶        [When($@"I access the {StepRegex.SingleWord} account page transactions payments grid for User ID {StepRegex.SingleWord}")]¶        public void WhenIAccessTheAccountPageTransactions(string accountPageType, string partyID)¶        {¶            AccountPageTestMethods.AccountPageTransactionsPayments(accountPageType, partyID);¶        }¶¶        [Then(@"I verify that the payments grid contains a print receipt option")]¶        public void ThenIVerifyThatThePaymentsGridContainsAPrintReceiptOption()¶        {¶            AccountPageTestMethods.PaymentsPrintReceipt();¶        }¶¶        [When($@"I open the mini profile editor to add a new designation for User ID {StepRegex.SingleWord}")]¶        public void WhenIOpenTheMiniProfileEditorAndAddANewDesignation(string partyID)¶        {¶            AccountPageTestMethods.OpenMiniProfileEditor(partyID);¶        }¶¶        [When($@"I add a new random designation")]¶        public void WhenIAddANewDesignationNamedTestDesignation()¶        {¶            AccountPageTestMethods.AddNewDesignationToParty();¶        }¶¶        [Then($@"I verify the new random designation displays correctly")]¶        public void ThenIVerifyNewDesignationDisplayCorrectly()¶        {¶            AccountPageTestMethods.VerifyPartyDesignationDisplays();¶        }¶¶    ")
Diff(INSERT,"    [When("I click on Account Area Batch Toggle icon")]¶        public void IClickOnAccountAreaBatchToggleIcon()¶        {¶            MiscNavigationTestMethods.ClickOnAccountAreaBatchToggleIcon();¶        }¶¶        [Then("I verify manual batch dropdown doesn't exist")]¶        public void ThenIVerifyElementContainsSelectTransactionDate()¶        {¶            MiscNavigationTestMethods.VerifyExistanceOfBatchSelectVisibilityPanelDiv();¶        }¶    ")
Diff(EQUAL,"}¶}")
Diff(DELETE,"¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Staff/StaffStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class EventStepDef¶    {¶        public EventStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            EventTestMethods = new EventTestMethods(driver, context);¶        }¶¶        private EventTestMethods EventTestMethods { get; set; }¶¶        [When(@"I cancel the event")]¶        public void WhenICancelTheEvent()¶        {¶            EventTestMethods.CancelEvent();¶        }¶¶        [Then(@"I verify the event is cancelled")]¶        public void ThenIVerifyTheEventIsCancelled()¶        {¶            EventTestMethods.VerifyCancelEvent();¶        }¶")
Diff(INSERT,"¶        [Then(@"I delete the event but dont exit")]¶        public void ThenIDeleteTheEventButDontExit()¶        {¶            EventTestMethods.DeleteTheEventButDontExit();¶        }¶¶        [Then(@"I verify the cancel button is greyed out")]¶        public void ThenIVerifyTheCancelButtonIsGreyedOut()¶        {¶            EventTestMethods.VerifyTheCancelButtonIsGreyedOut();¶        }¶¶        [When(@"I add a resource with a quantity (.*)")]¶        public void WhenIAddAResourceWithAQuantity(decimal quantity)¶        {¶            EventTestMethods.AddAResourceWithQuantity(quantity);¶        }¶¶¶        [Then(@"I verify the resource is (.*)")]¶        public void ThenIVerifyTheResourceIs(decimal expectedQuantity)¶        {¶            EventTestMethods.VerifyTheResourceIs(expectedQuantity);¶        }¶¶        [Given(@"I add a pricing group to an event function")]¶        [When(@"I add a pricing group to an event function")]¶        public void IAddEventPricingGroup(Table data)¶        {¶            EventTestMethods.AddEventPricingGroup(data);¶        }¶¶        [When(@$"I select existing event {StepRegex.SingleWord} and function {StepRegex.SingleWord} pricing group")]¶        public void SelectExistingEventFunctionPricingGroup(string eventKey, string functionKey)¶        {¶            EventTestMethods.SelectExistingEventFunctionPricingGroup(eventKey, functionKey);¶        }¶¶        [Then(@"I verify existing pricing group")]¶        public void SelectExistingPricingGroups()¶        {¶            EventTestMethods.SelectExistingPricingGroups();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Events/EventStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ContactStepDef¶    {¶        public ContactStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            ContactTestMethod = new ContactTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶        }¶¶        public ContactTestMethods ContactTestMethod { get; set; }¶        public SignInTestMethods SignInTestMethods { get; set; }¶¶        [Then(@"I search for contact")]¶        public void ThenISearchForContact(Table table)¶        {¶            var contactData = table.AsiCreateInstance<ContactData>();¶            ContactTestMethod.FindContact(contactData.LastName, contactData.FirstName);¶        }¶¶        [When(@"I view the contact (.*), (.*) as designated user (.*)")]¶        public void WhenIViewTheContact(string lastName, string firstName, string user)¶        {¶            SignInTestMethods.SignInDesignatedUser(user, "Staff");¶            ContactTestMethod.FindContact(lastName, firstName);¶        }¶¶        [Then(@"I verify the contact was erased")]¶        public void ThenIVerifyTheContactWasErased(Table data)¶        {¶            var contactData = data.AsiCreateInstance<ContactData>();¶            ContactTestMethod.VerifyLoggedInUserContact(contactData.LastName, contactData.FirstName);¶        }¶")
Diff(INSERT,"¶        [Given(@"I add a new contact")]¶        [When(@"I add a new contact")]¶        public void WhenIAddNewContact(Table data)¶        {¶            ContactTestMethod.AddNewContact(data.CreateInstance<ContactData>());¶        }¶¶        [Given(@"I add a new random contact")]¶        [When(@"I add a new random contact")]¶        public void WhenIAddNewRandomContact()¶        {¶            ContactTestMethod.AddNewRandomContact();¶        }¶¶        [Given(@"I add a new duplicate contact from context")]¶        [When(@"I add a new duplicate contact from context")]¶        public void WhenIAddANewDuplicateContactFromContext()¶        {¶            ContactTestMethod.AddANewDuplicateContactFromContext();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Community/ContactStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class RenewalsStepDef¶    {¶        public RenewalsStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            RenewalsTestMethods = new RenewalsTestMethods(driver, context);¶            CartTestMethods = new CartTestMethods(driver, context);¶        }¶¶        public RenewalsTestMethods RenewalsTestMethods { get; set; }¶        public CartTestMethods CartTestMethods { get; set; }¶¶¶        [Then(@"I verify I can modify a cash dues list billing")]¶        public void IVerifyICanModifyACashDuesListBilling()¶        {¶            RenewalsTestMethods.IVerifyICanModifyACashDuesListBilling();¶        }¶¶        [Then(@"I verify I can modify an accrual list billing")]¶        public void IVerifyICanModifyAccrualListBilling(Table table)¶        {¶            RenewalsTestMethods.ModifyAccrualListBilling(table);¶        }¶¶        [When(@"I renew Membership fees on the Mbrr site")]¶        public void RenewMembershipFeesOnTheMbrrSite(Table data)¶        {¶            RenewalsTestMethods.RenewMembershipFeesOnTheMbrrSite(data.CreateInstance<ItemizedRenewalData>(), data.CreateInstance<CartData>());¶        }¶¶        [Then(@"I verify the order confirmation details from context")]¶        public void IVerifyTheOrderConfirmationDetailsFromContext()¶        {¶            CartTestMethods.VerifyOrderConfirmationDetails();¶        }¶¶        [When("I reverse first open invoice")]¶        public void ReverseFirstOpenInvoice()¶        {¶            RenewalsTestMethods.ReverseFirstOpenInvoice();¶        }¶¶        [Then("I verify open invoice is reversed")]¶        public void VerifyOpenInvoiceIsReversed()¶        {¶            RenewalsTestMethods.VerifyOpenInvoiceIsReversed();¶        }")
Diff(INSERT,"¶¶        [When($"I renew membership for user with id {StepRegex.AnyDigit}")]¶        public void RenewUserMembership(int userId)¶        {¶            RenewalsTestMethods.RenewUserMembership(userId);¶        }¶¶        [Then($"I verify membership for user with id {StepRegex.AnyDigit} was renewed")]¶        public void VerifyUserMembershipWasRenewed(int userId)¶        {¶            RenewalsTestMethods.VerifyUserMembershipWasRenewed(userId);¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/RenewalsStepDefs.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class BillingFinanceStepDef¶    {¶        public BillingFinanceStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            BillingFinanceTestMethods = new BillingFinanceTestMethods(driver, context);¶        }¶¶        public BillingFinanceTestMethods BillingFinanceTestMethods { get; set; }¶¶        [When(@"I generate individual membership renewal for a new contact")]¶        public void WhenIGenerateMembershipRenewalForANewContact(Table billingTable)¶        {¶            BillingFinanceTestMethods.GenerateIndividualMembershipRenewalForNewContact(billingTable);¶        }¶¶        [Then(@"I verify Billing Renewals Logs data")]¶        public void ThenIVerifyBillingRenewalsLogsData(Table billingTable)¶        {¶            BillingFinanceTestMethods.VerifyBillingRenewalsLogsData(billingTable);¶        }¶¶        [When(@"I change billing cycle called (.*) to Account Method (.*)")]¶        public void WhenIChangeBillingCycleCalledToAccountMethod(string billingCycle, string accountingMethod)¶        {¶            BillingFinanceTestMethods.ChangeBillingCycleAccountMethod(billingCycle, accountingMethod);¶        }¶¶        [Then(@"I verify billing cycle called (.*) Account Method is (.*)")]¶        public void ThenIVerifyBillingCycleCalledPartTimeProfessionalAccountMethodIsCash(string billingCycle, string accountingMethod)¶        {¶            BillingFinanceTestMethods.VerifyBillingCycleAccountMethod(billingCycle, accountingMethod);¶        }¶¶        [When(@"I generate a renewals billing run")]¶        public void WhenIGenerateARenewalsBillingRun(Table table)¶        {¶            BillingFinanceTestMethods.GenerateARenewalsBillingRun(table);¶        }¶¶        [Then(@"I verify a (.*) renewals billing run called (.*) with a billing cycle of (.*)")]¶        [When(@"I verify a (.*) renewals billing run called (.*) with a billing cycle of (.*)")]¶        public void ThenIVerifyARenewalsBillingRunCalledWithABillingCycleOf(string accountingMethod, string billingRunName, string billingCycle)¶        {¶            BillingFinanceTestMethods.VerifyNewestRenewalsBillingRun(accountingMethod, billingRunName, billingCycle);¶        }¶¶        [When(@"I manage expired members of type (.*) and change found to New Member Type of (.*) and Status to (.*)")]¶        public void WhenIManageExpiredMembersOfTypeAndChangeFoundToNewMemberTypeOfAndStatusTo(string expiredMemberType, string newMemberType, string newStatus)¶        {¶            BillingFinanceTestMethods.ManageExpiredMembers(expiredMemberType, newMemberType, newStatus);¶        }¶¶        [Then(@"I Verify accounts page Join Now button works")]¶        public void WhenIVerifyAccountsPageJoinNowButton()¶        {¶            BillingFinanceTestMethods.VerifyAccountsPageJoinNowButtonWorks();¶        }¶¶")
Diff(INSERT,"        [Given(@"I pay for Join Now product")]¶")
Diff(EQUAL,"        [When(@"I pay for Join Now product")]¶        public void ")
Diff(DELETE,"When")
Diff(EQUAL,"IClickJoinNowProduct(Table table)¶        {¶            BillingFinanceTestMethods.ClickJoinProduct(table);¶        }¶¶        [Then(@"I verify the order confirmation")]¶        public void ThenIVerifyOrderConfirmation(Table table)¶        {¶            BillingFinanceTestMethods.VerifyOrderConfirmation(table);¶        }¶¶        [When(@"I search for product")]¶        public void WhenISearchForProduct(Table table)¶        {¶            BillingFinanceTestMethods.SearchForProduct(table);¶        }¶        ¶")
Diff(INSERT,"        [Given(@"I submit a billing order for a new contact")]¶")
Diff(EQUAL,"        [When(@"I submit a billing order for a new contact")]¶        public void ")
Diff(DELETE,"When")
Diff(EQUAL,"ISubmitABillingOrderForANewContact(Table billingTable)¶        {¶            BillingFinanceTestMethods.SubmitABillingOrderForNewContact(billingTable);¶        }¶¶        [Then(@"I verify order confirmation message (.*)")]¶        public void ThenIVerifyOrderConfirmationMessage(string message)¶        {¶            BillingFinanceTestMethods.VerifyOrderConfirmationMessage(message);¶        }¶        ¶        [When(@"I Join Now and pay for a product for a new contact")]¶        public void ThenIJoinNowAndPayForAProductForANewContact(Table joinNowData)¶        {¶            BillingFinanceTestMethods.JoinNowAndPayForAProductForANewContact(joinNowData);¶        }¶¶        [When(@"I Generate Renewal and Pay for Modified Chapter on behalf of")]¶        public void WhenIGenerateRenewalAndPayForModifiedChapterOnBehalfOf(Table billingTable)¶        {¶            BillingFinanceTestMethods.GenerateRenewalAndPayForModifiedChapterOnBehalfOf(billingTable);¶        }¶¶        [Then(@"I verify contacts membership details")]¶        public void ThenIVerifyContactsMembershipDetails(Table billingTable)¶        {¶            BillingFinanceTestMethods.VerifyContactsMembershipDetails(billingTable);¶        }¶¶        [When(@"I add new billing products")]¶        public void WhenIAddNewBillingProducts(Table productTable)¶        {¶            BillingFinanceTestMethods.AddNewBillingProducts(productTable);¶        }¶¶        [When(@"I edit prorate rule called (.*)")]¶        public void WhenIEditProrateRule(string prorateRule, Table prorateTable)¶        {¶            BillingFinanceTestMethods.EditProrateRule(prorateRule, prorateTable);¶        }¶¶        [Then(@"I verify prorate rule called (.*)")]¶        public void ThenIVerifyProrateRule(string prorateRule, Table prorateTable)¶        {¶            BillingFinanceTestMethods.VerifyProrateRule(prorateRule, prorateTable);¶        }¶¶        [When(@"I set Customer Type default to (.*) for product code (.*)")]¶        public void WhenISetCustomerTypesDefaultToFor(string defaultCode, string CustomerTypeName)¶        {¶            BillingFinanceTestMethods.SetCustomerTypeDefault(CustomerTypeName, defaultCode);¶        }¶¶        [When(@"I verify new contact can join product")]¶        public void WhenIVerifyContactCanJoinProduct(Table table)¶        {¶            BillingFinanceTestMethods.AddContactAndJoin(table);¶        }¶¶        [Then(@"I verify contacts joined product is (.*) with term span of (.*)")]¶        [When(@"I verify contacts joined product is (.*) with term span of (.*)")]¶        public void ThenIVerifyContactsJoinedProductIsWithTermSpanOf(string productName, string termSpan)¶        {¶            BillingFinanceTestMethods.VerifyContactsJoinedProductTermSpanOf(productName, termSpan);¶        }¶¶")
Diff(INSERT,"        [When($"I join now as {StepRegex.SingleWord}")]¶        public void JoinNowAs(string memberType)¶        {¶            BillingFinanceTestMethods.JoinNowAs(memberType);¶        }¶¶        [When($"I cancel renewal for user with id {StepRegex.AnyDigit}")]¶        public void CancelRenewalForUser(int id)¶        {¶            BillingFinanceTestMethods.CancelRenewalForUser(id);¶        }¶¶        [Then("I verify order was submitted without payment")]¶        public void VerifyOrderWasSubmittedWithoutPayment()¶        {¶            BillingFinanceTestMethods.VerifyOrderWasSubmittedWithoutPayment();¶        }¶¶        [When(@$"I join now as {StepRegex.SingleWord} on (Mbrr|Staff) site")]¶        public void JoinNowAsOnSite(string memberType, string site, Table data)¶        {¶            var joinNowData = data.CreateInstance<JoinNowData>();¶            BillingFinanceTestMethods.JoinNowAs(memberType, site, joinNowData);¶        }¶¶        [Then(@"I verify a non-dues product is ordered")]¶        public void VerifyANonDuesProductIsOrdered()¶        {¶            BillingFinanceTestMethods.VerifyANonDuesProductIsOrdered();¶        }¶¶        [Given(@$"I change billing time to (Default|Annual|Anniversary) for billing cycle {StepRegex.OneOrMoreWord}")]¶        public void ChangeBillingTimeAnnualForBillingCycleRegular(string billingTime, string billingCycle)¶        {¶            BillingFinanceTestMethods.ChangeBillingTimeForBillingCycle(billingTime, billingCycle);¶        }¶¶        [Then(@"I verify the membership expires at the end of the fiscal year")]¶        public void VerifyTheMembershipExpiresAtTheEndOfTheFiscalYear()¶        {¶            BillingFinanceTestMethods.VerifyTheMembershipPeriod();¶        }¶¶        [Then(@$"I verify {StepRegex.OneOrMoreWord} product price is {StepRegex.AnyDecimal}")]¶        public void VerifyProductPriceIs(string productName, string price)¶        {¶            BillingFinanceTestMethods.VerifyProductPriceIs(productName, price);¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/BillingFinanceStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class MemberResponsiveStepDef¶    {¶        IWebDriver _driver;¶        IAsiWebContext _context;¶        public MemberResponsiveStepDef(IWebDriver driver, IAsiWebContext context) ¶        { ¶            _driver = driver;¶            _context = context;¶            AccountPage = new AccountPage();¶        ")
Diff(DELETE,"}¶¶        private AccountPage AccountPage")
Diff(INSERT,"    MemberResponsiveTestMethods = new MemberResponsiveTestMethods(driver, context); ;¶            Authentication = new Authentication(driver, context); ;¶            SignInTestMethods = new SignInTestMethods(driver, context); ;¶            FinanceTestMethods = new FinanceTestMethods(driver, context); ;¶            NavigationTestMethods = new NavigationTestMethods(driver, context); ;¶        }¶¶        private AccountPage AccountPage { get; set; }¶        private MemberResponsiveTestMethods MemberResponsiveTestMethods { get; set; }¶        private Authentication Authentication { get; set; }¶        private SignInTestMethods SignInTestMethods { get; set; }¶        private FinanceTestMethods FinanceTestMethods { get; set; }¶        private NavigationTestMethods NavigationTestMethods")
Diff(EQUAL," { get; set; }¶¶        [When(@"I visit the (.*) tab on the account page for (.*)")]¶        public void WhenIVisitTheTabOnTheAccountPage(string tabName, string partyId)¶        {¶            var user = new ImisUser("MemberUser",")
Diff(DELETE," new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶            user.AttemptsTo(Browse.InMemberSite(AccountPage.Url(partyId, tabName)));¶        }¶¶        [Then(@"I verify the (.*) Tab is selected")]¶        public void ThenIVerifyTheTabIsSelected(string tabName)¶        {¶            var user = new ImisUser("MemberUser", ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶¶            var selecteTab = user.AsksFor(Text.Of(AccountPage.SelectedTab));¶            selecteTab.Should().Be(tabName);¶        }¶")
Diff(INSERT,"¶        [Given(@"I select (.*) membership on MBRR")]¶        [When(@"I select (.*) membership on MBRR")]¶        public void GivenISelectMembershipOnMBRR(string memberType)¶        {¶            SignInTestMethods.OnTheSite("MBRR");¶            NavigationTestMethods.NavigateTo("Membership");¶            MemberResponsiveTestMethods.SelectMembershipOnMBRR(memberType);¶        }¶¶        [Given(@"I add a new random MBRR contact and join (.*)")]¶        [When(@"I add a new random MBRR contact and join (.*)")]¶        public void WhenIAddNewRandomMBRRContact(string joinType)¶        {¶            MemberResponsiveTestMethods.AddNewRandomMBRRContactAndJoin(joinType);¶        }¶¶        [Then(@"I verify successfully joined as a member (.*)")]¶        public void ThenIVerifySuccessfullyJoinedAsAMember(string joinType)¶        {¶            MemberResponsiveTestMethods.VerifySuccessfullyJoinedAsAMember(joinType);¶            Authentication.LogOut();¶            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            FinanceTestMethods.VerifyPaymentPayCentralLive();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V10/Asi.Selenium.V10/Steps/Membership/MemberResponsiveStepDef.cs)
- /Asi.Selenium.Shared.V100/appsettings.json
- /Asi.Selenium.Shared.V100/appsettings.AppService.json
- /Asi.Selenium.Shared.V100/appsettings.Development.json
- /Asi.Selenium.Web.V100/TestMethods/Fundraising/ReceiptingTestMethods.cs.txt
- /Asi.Selenium.V100/Features/LicenseManagement.feature
+ /Asi.Selenium.Web.V100/Asi.Selenium.Web.V100.csproj
+ /Asi.Selenium.Web.V100/Interactions/Community/AddContact.cs
+ /Asi.Selenium.Web.V100/Interactions/Membership/RedirectProfiles.cs
+ /Asi.Selenium.Web.V100/Interactions/Membership/JoinNow.cs
+ /Asi.Selenium.Web.V100/Interactions/Membership/AdjustClubStaff.cs
+ /Asi.Selenium.Web.V100/Interactions/Membership/AdjustMember.cs
+ /Asi.Selenium.Web.V100/TestMethods/Fundraising/ReceiptingTestMethods.cs
+ /Asi.Selenium.Web.V100/TestMethods/Community/ManageDuplicatesTestMethods.cs
+ /Asi.Selenium.Web.V100/TestMethods/Membership/ClubStaffTestMethods.cs
+ /Asi.Selenium.Web.V100/Pages/Membership/HouseholdContactProfileStaffPage.cs
+ /Asi.Selenium.Web.V100/Pages/Membership/ClubOrganizationStaffPage.cs
+ /Asi.Selenium.Web.V100/Pages/Membership/AddContactPage.cs
+ /Asi.Selenium.Web.V100/Pages/Membership/ClubCheckInPage.cs
+ /Asi.Selenium.V100/Asi.Selenium.V100.csproj
+ /Asi.Selenium.V100/Features/PaymentGateways/Stripe.feature
+ /Asi.Selenium.V100/Features/Staff/LicenseManagement.feature
+ /Asi.Selenium.V100/Features/Community/ManageDuplicates.feature
+ /Asi.Selenium.V100/Steps/ClubStaff/MembershipStepDef.cs
+ /Asi.Selenium.V100/Steps/Community/ManageDuplicatesStepDef.cs
Diff(EQUAL,"{¶    public class SetupGateway : AsiAbstractWebTask¶    {¶        private SetupGateway(GatewayTypeEnum gatewayType, GatewayData gatewayData)¶        {¶            if (gatewayType == GatewayTypeEnum.DefaultData)¶                GatewayType = (GatewayTypeEnum)Enum.Parse(typeof(GatewayTypeEnum), gatewayData.GatewayType);¶            else¶                GatewayType = gatewayType;¶            GatewayData = gatewayData;¶            GatewaysPage = new GatewaysPage();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        #region Properties¶¶        private GatewayTypeEnum GatewayType { get; set; }¶        private GatewayData GatewayData { get; set; }¶        private GatewaysPage GatewaysPage { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶")
Diff(INSERT,"        private bool ShouldSaveGateway { get; set; } = true;¶")
Diff(EQUAL,"        #endregion¶")
Diff(DELETE,"")
Diff(EQUAL,"¶        public static SetupGateway ImisPay(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.ImisPay, gatewayData);¶        public static SetupGateway Iats(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.Iats, gatewayData);¶        public static SetupGateway SecurePay(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.SecurePay, gatewayData);¶        public static SetupGateway PayFlowPro(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.PayFlowPro, gatewayData);¶        public static SetupGateway PayPal(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.PayPal, gatewayData);¶        public static SetupGateway ImisPassThrough(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.ImisPassThrough, gatewayData);¶        public static SetupGateway WithGatewayData(GatewayData gatewayData) => new SetupGateway(GatewayTypeEnum.DefaultData, gatewayData);¶¶")
Diff(INSERT,"        public SetupGateway AndDontSaveGateway()¶        {¶            ShouldSaveGateway = false;¶            return this;¶        }¶¶")
Diff(EQUAL,"        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(INSERT,"            context.UpsertData("GatewayData", GatewayData);¶")
Diff(EQUAL,"            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Gateways")));¶¶            user.WaitsUntil(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.Grid), IsEqualTo.True());¶            if (user.AsksFor(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.LinkInTable(GatewayData.AccountName))))¶                return;¶            user.AttemptsTo(Click.On(GatewaysPage.GatewayAccounts.Grid.AddToGrid));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(SetWhenProvided.DropDown(GatewayAccountDialog.GatewayTypeCode.Control, GatewayType.GetDisplayName()));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶¶            PerformGatewayDataEntry(user);¶¶")
Diff(INSERT,"            //switch (based on settings) to stop¶            if (ShouldSaveGateway)¶            {¶    ")
Diff(EQUAL,"            //Exit out of dialogs¶")
Diff(INSERT,"    ")
Diff(EQUAL,"            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"user.AttemptsTo(ClickCommandButton.SaveAndClose());¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AttemptsTo(SwitchFrame.ToDefaultFrame());¶")
Diff(DELETE,"¶")
Diff(INSERT,"                //TODO: check it was added to the table¶    ")
Diff(EQUAL,"            user.WaitsUntil(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.LinkInTable(GatewayData.AccountName)), IsEqualTo.True());¶            ")
Diff(INSERT,"    ")
Diff(EQUAL,"user.AsksFor(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.LinkInTable(GatewayData.AccountName))).Should().BeTrue();¶")
Diff(INSERT,"            }¶")
Diff(EQUAL,"        }¶¶        private void PerformGatewayDataEntry(IActor user)¶        {¶            switch (GatewayType)¶            {¶                case GatewayTypeEnum.ImisPay:¶                    SetImisPay(user);¶                    break;¶                case GatewayTypeEnum.Iats:¶                    SetIats(user);¶                    break;¶                case GatewayTypeEnum.SecurePay:¶                    SetSecurePay(user);¶                    break;¶                case GatewayTypeEnum.PayFlowPro:¶                    SetPayflowPro(user);¶                    break;¶                case GatewayTypeEnum.PayPal:¶                    SetPayPal(user);¶                    break;¶                case GatewayTypeEnum.ImisPassThrough:¶                    SetImisPassThrough(user);¶                    break;¶")
Diff(INSERT,"                case GatewayTypeEnum.GoCardless:¶                    SetGoCardless(user);¶                    break;¶                case GatewayTypeEnum.Stripe:¶                    SetStripe(user);¶                    break;¶")
Diff(EQUAL,"            }¶        }¶¶        public void SetImisPay(IActor user)¶        {¶            //Set Region first to show/hide the correct elements ¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPayDialog.Region, GatewayData.Region));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.XWebId, GatewayData.XWebId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.TerminalId, GatewayData.TerminalId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AuthorizationKey, GatewayData.AuthorizationKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.DigitalKey, GatewayData.DigitalKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AppId, GatewayData.AppId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AppKey, GatewayData.AppKey));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.MerchantId, GatewayData.MerchantId));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPayDialog.AccountId, GatewayData.AccountId));¶        }¶¶        public void SetIats(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(IatsDialog.Region, GatewayData.Region));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.AgentCode, GatewayData.AgentCode));¶            user.AttemptsTo(SetWhenProvided.TextBox(IatsDialog.Password, GatewayData.Password));¶        }¶¶        public void SetSecurePay(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(SecurePayDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.MerchantId, GatewayData.MerchantId));¶            user.AttemptsTo(SetWhenProvided.TextBox(SecurePayDialog.Password, GatewayData.Password));¶        }¶¶        public void SetPayflowPro(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(PayFlowDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Vendor, GatewayData.Vendor));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Partner, GatewayData.Partner));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.User, GatewayData.UserName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayFlowDialog.Password, GatewayData.Password));¶        }¶¶        public void SetPayPal(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.Vendor, GatewayData.Vendor));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.UserName, GatewayData.UserName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PayPalDialog.Password, GatewayData.Password));¶        }¶¶        public void SetImisPassThrough(IActor user)¶        {¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPassThroughDialog.Environment, GatewayData.Environment));¶            user.AttemptsTo(SetWhenProvided.DropDown(ImisPassThroughDialog.GatewayType, GatewayData.SpreedlyType));¶            user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.AccountName, GatewayData.AccountName));¶            if (GatewayData.SpreedlyType.Equals("Elavon"))¶            {¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.MerchantId(SpreedlyGatewayType.Elavon), GatewayData.MerchantId));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.User, GatewayData.UserName));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Pin, GatewayData.Pin));¶            }¶            else¶            {¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.MerchantId(SpreedlyGatewayType.Bambora), GatewayData.MerchantId));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Username, GatewayData.UserName));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.Password, GatewayData.Password));¶                user.AttemptsTo(SetWhenProvided.TextBox(ImisPassThroughDialog.ApiKey, GatewayData.ApiKey));¶            }¶        }¶¶")
Diff(INSERT,"        public void SetGoCardless(IActor user)¶        {¶            //Fill out fields¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessDialog.AccountName, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.DropDown(GoCardlessDialog.Environment, GatewayData.Environment));¶¶            if (!GatewayData.CompleteOnboarding)¶                return;¶¶            // Onboarding and OAuth completion¶            user.AttemptsTo(Click.On(GoCardlessDialog.GoCardlessOauthLink));¶            TestHelper.WaitForPageReload();¶            var goCardlessHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];¶            user.AttemptsTo(SwitchWindow.To(goCardlessHandle));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.SigninLink));¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.EmailInput, GatewayData.Email));¶            user.AttemptsTo(SetWhenProvided.TextBox(GoCardlessOAuth.PasswordInput, GatewayData.Password));¶            user.AttemptsTo(ScrollToElement.At(GoCardlessOAuth.ConnectAccountButton));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.ToSCheckBox));¶            user.AttemptsTo(Click.On(GoCardlessOAuth.ConnectAccountButton));¶            TestHelper.WaitForPageReload();¶            var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];¶            user.AttemptsTo(SwitchWindow.To(imisWebHandle));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶        }¶¶        public void SetStripe(IActor user)¶        {¶            //Fill out fields¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeDialog.AccountName, GatewayData.AccountName));¶¶            if (!GatewayData.CompleteOnboarding)¶                return;¶¶            // Onboarding completion¶            user.AttemptsTo(Click.On(StripeDialog.StripeConnectLink));¶            for (int i = 0; i < 30; i++)¶            {¶                int tabCount = user.Using<TestImis>().WebDriver.WindowHandles.Count;¶                if (tabCount > 1)¶                    break;¶                user.AttemptsTo(Waiting.InSeconds(1));¶            }¶            var stripeHandle = user.Using<TestImis>().WebDriver.WindowHandles[1];¶            user.AttemptsTo(SwitchWindow.To(stripeHandle));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.EmailInputBox, GatewayData.Email));¶            user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.PasswordInputBox, GatewayData.Password));¶            user.AttemptsTo(Click.On(StripeOnboarding.SubmitButton));¶            string codeToEnter = MultiFactorAuthentication.Generate2FACode(GatewayData.MFACode);¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.VerificationCodeInputBox, codeToEnter));¶¶            //After entering the code, we should be redirected to the next page which allows you to continue.¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.ContinueButton), IsEqualTo.True());¶            // Incase there are any saved credentials, we need to skip the first page which asks to use existing info¶            bool promptedToUseSavedInfo = user.AsksFor(Appearance.Of(StripeOnboarding.Span("Use your saved information")));¶            if (promptedToUseSavedInfo)¶                user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton)); //Continue through onboarding wizard to get to starting page and create new business¶¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Let’s start with some basics")), IsEqualTo.True());¶            //Let’s start with some basics¶            // We are just going to continue with a UK business location and Individual type of business, and fill out all data with dummy data.¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶¶            //Personal Details¶            // Name¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Verify your personal details")), IsEqualTo.True());¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("First name"), "Timmy"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Last name"), "Tester"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("you@example.com"), GatewayData.Email ?? "Somebody@advsol.com"));¶            // Date of birth¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("MM"), "05"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("DD"), "05"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("YYYY"), "1960"));¶            // Home address¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Address line 1"), "798 New Road"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Town or City"), "London"));¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Postal code"), "W49 3IX"));¶¶            // Phone number¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("121 234 5678"), "121 234 5678"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Professional Details¶            // Industry¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Professional details")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Please select your industry…")));¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Software")));¶            // Website¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("www.example.com"), "www.imis.com"));¶            // Product description¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.ProductDescriptionBox, "We test websites"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Add your bank to receive payouts¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add your bank to receive payouts")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.Span("Use test account")));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Add public details for customers¶            // Shortened Descriptor¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Add public details for customers")), IsEqualTo.True());¶            user.AttemptsTo(SetWhenProvided.TextBox(StripeOnboarding.InputBox("Business"), "iMIS"));¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Setting climate contribution¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.ClimateContributionLabel), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.ContinueButton));¶¶            //Agreeing and submitting all data¶            user.WaitsUntil(Appearance.Of(StripeOnboarding.Span("Review and finish up")), IsEqualTo.True());¶            user.AttemptsTo(Click.On(StripeOnboarding.AgreeAndSubmitButon));¶            user.WaitsUntil(Appearance.Of(ImisRedirectPage.returnSpan), IsEqualTo.True());¶¶            // Return to iMIS¶            var imisWebHandle = user.Using<TestImis>().WebDriver.WindowHandles[0];¶            user.AttemptsTo(SwitchWindow.To(imisWebHandle));¶            user.AttemptsTo(SwitchFrame.ToPayCentralFrame());¶        }¶¶")
Diff(EQUAL,"        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Gateways")));¶            user.WaitsUntil(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.Grid), IsEqualTo.True());¶            user.AsksFor(Appearance.Of(GatewaysPage.GatewayAccounts.Grid.LinkInTable(GatewayData.AccountName))).Should().BeTrue();¶        }¶¶        private enum GatewayTypeEnum¶        {¶            [Display(Name = "iMIS Pay")]¶            ImisPay,¶            [Display(Name = "iATS")]¶            Iats,¶            [Display(Name = "SecurePay")]¶            SecurePay,¶            [Display(Name = "Payflow Pro")]¶            PayFlowPro,¶            [Display(Name = "PayPal")]¶            PayPal,¶            [Display(Name = "iMIS Pass-through Gateway")]¶")
Diff(DELETE,"")
Diff(EQUAL,"            ImisPassThrough,¶")
Diff(INSERT,"            [Display(Name = "GoCardless")]¶            GoCardless,¶            [Display(Name = "Stripe")]¶            Stripe,¶")
Diff(EQUAL,"            DefaultData¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupGateway.cs)
Diff(EQUAL,"{¶    public class SetupPaymentMethod : AsiAbstractWebTask¶    {¶        private SetupPaymentMethod(GatewayData gatewayData)¶        {¶            GatewayData = gatewayData;¶            PaymentMethodsPage = new PaymentMethodsPage();¶            PaymentMethodDialog = new PaymentMethodDialog();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        #region Properties¶¶        private GatewayData GatewayData { get; set; }¶        private PaymentMethodsPage PaymentMethodsPage { get; set; }¶        private PaymentMethodDialog PaymentMethodDialog { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶        #endregion¶¶        public static SetupPaymentMethod WithGatewayData(GatewayData gatewayData) => new SetupPaymentMethod(gatewayData);¶        public static SetupPaymentMethod WithGatewayAccount(string paymentMethodCode, string paymentMethodName) => ¶            new SetupPaymentMethod(new GatewayData() { PaymentMethodCode = paymentMethodCode, PaymentMethodName = paymentMethodName });¶¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));¶            user.WaitsUntil(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.Grid), IsEqualTo.True());¶            var code = string.IsNullOrEmpty(GatewayData.PaymentMethodCode) ? GatewayData.AccountCode : GatewayData.PaymentMethodCode;¶            var name = string.IsNullOrEmpty(GatewayData.PaymentMethodName) ? GatewayData.AccountName : GatewayData.PaymentMethodName;¶¶            if (user.AsksFor(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(code))))¶                return;¶            user.AttemptsTo(Click.On(PaymentMethodsPage.PaymentMethods.Grid.AddToGrid));¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶¶            user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.Type.Control, GatewayData.PaymentMethodType));¶¶            user.AttemptsTo(SetWhenProvided.CheckBox(PaymentMethodDialog.DisplayPaymentAuthoirizationCheckbox, GatewayData.DisplayPaymentAuthoirizationCheckbox));¶        ¶            user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.GatewayAccount, GatewayData.AccountName));¶            user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.Name.Control, code));¶            user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.DisplayName.Control, name));¶            if (!string.IsNullOrEmpty(GatewayData.GLAccount))¶            {¶                user.AttemptsTo(SetWhenProvided.DropDown(PaymentMethodDialog.FinancialEntity.Control, GatewayData.FinancialEntity")
Diff(INSERT," ?? "iMIS International"")
Diff(EQUAL,"));¶                user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.CashAccount.GLAccountCodeBox, GatewayData.GLAccount));¶                user.AttemptsTo(DoubleClick.On(PaymentMethodDialog.CashAccount.ValidateButton));¶            }¶            if (user.AsksFor(Appearance.Of(PaymentMethodDialog.PaymentAuthorizationTermsAndConditions)))¶                user.AttemptsTo(SetWhenProvided.TextBox(PaymentMethodDialog.PaymentAuthorizationTermsAndConditions, GatewayData.PaymentAuthorizationTermsAndConditions));¶¶            driver.WaitInSeconds(2);¶            user.AttemptsTo(ClickCommandButton.Save().AndExpectMessage());¶            VerifyAs(user, driver, context);¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Payment methods")));¶            user.WaitsUntil(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.Grid), IsEqualTo.True());¶            user.")
Diff(DELETE,"AsksFor")
Diff(INSERT,"WaitsUntil")
Diff(EQUAL,"(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(GatewayData.AccountName))")
Diff(DELETE,").Should().Be")
Diff(INSERT,", IsEqualTo.")
Diff(EQUAL,"True()")
Diff(INSERT,")")
Diff(EQUAL,";¶            if(string.IsNullOrEmpty(GatewayData.PaymentMethodCode))¶                user.AsksFor(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(GatewayData.AccountCode))).Should().BeTrue();¶            else¶                user.AsksFor(Appearance.Of(PaymentMethodsPage.PaymentMethods.Grid.SpanInTable(GatewayData.PaymentMethodCode))).Should().BeTrue();¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupPaymentMethod.cs)
Diff(EQUAL,"{¶    public class SetupAutoPay : AsiAbstractWebTask¶    {¶        #region Contructors¶        private SetupAutoPay(AutoPayData autoPayData)¶        {¶            AutomaticPaymentPage = new AutomaticPaymentPage();¶            AutoPayData = autoPayData;¶            PayCentralPage = new PayCentralPage();¶        }¶        #endregion¶¶        #region Properties¶        private AutomaticPaymentPage AutomaticPaymentPage { get; set; }¶        private AutoPayData AutoPayData { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶        #endregion¶¶        #region Builder Methods¶        public static SetupAutoPay WithAutoPayData(AutoPayData autoPayData) => new SetupAutoPay(autoPayData);¶        #endregion¶¶        #region Methods¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Automatic payments")));¶            user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.RecurringDonation, AutoPayData.RecurringDonation));¶            if (AutoPayData.RecurringDonation)¶            {¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring, AutoPayData.DefaultToRecurring));¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount, AutoPayData.AllowDonorsChangeAmount));¶            }¶            user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships, AutoPayData.RenewingMemberships));¶            if (AutoPayData.RenewingMemberships)¶            {¶                user.AttemptsTo(SetWhenProvided.CheckBox(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew, AutoPayData.DefaultAutoRenew));¶            }¶            user.AttemptsTo(ClickCommandButton.Save());¶            ")
Diff(DELETE,"var userMessage = user.AsksFor(UserMessageContents.First());¶            if (userMessage.Equals("Settings successfully updated.")) return;¶            else¶                throw new Exception("Autopay settings were not saved."")
Diff(INSERT,"user.WaitsUntil(UserMessageContents.First(), IsEqualTo.Value("Settings successfully updated.")")
Diff(EQUAL,");¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.Url("Automatic payments")));¶            user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RecurringDonation)).Should().Be(AutoPayData.RecurringDonation);¶            if (AutoPayData.RecurringDonation)¶            {¶                user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultToRecurring)).Should().Be(AutoPayData.DefaultToRecurring);¶                user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.AllowDonorsChangeAmount)).Should().Be(AutoPayData.AllowDonorsChangeAmount);¶            }¶            user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.RenewingMemberships)).Should().Be(AutoPayData.RenewingMemberships);¶            if (AutoPayData.RenewingMemberships)¶            {¶                user.AsksFor(SelectedState.Of(AutomaticPaymentPage.AutoPaySettings.DefaultAutoRenew)).Should().Be(AutoPayData.DefaultAutoRenew);¶            }¶        }¶        #endregion¶    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/Interactions/PayCentral/SetupAutoPay.cs)
Diff(EQUAL,"{¶    public class GatewayTestMethods : TestMethodBase¶    {¶        public GatewayTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            PayCentralServicePage = new PayCentralServicePage();¶            PayCentralPage = new PayCentralPage();¶        }¶¶        public PayCentralServicePage PayCentralServicePage { get; set; }¶        private PayCentralPage PayCentralPage { get; set; }¶¶        private ImisUser User() => User("GatewayUser");¶¶        public void EnsurePayCentralIsReady()¶        {¶            var user = User();¶            user.AttemptsTo(Browse.InStaffSite(PayCentralPage.BaseUrl));¶            var statusMessage = user.AsksFor(Text.Of(PayCentralServicePage.StatusMessageBody(5)));¶            if (statusMessage.Equals("Could not create a new Pay Central service account. Please ensure the service is working."))¶            {¶                user.AttemptsTo(ManageLicense.Resync());¶                user.AttemptsTo(Browse.InStaffSite(PayCentralPage.BaseUrl));¶            }¶        }¶¶        public void SetupAutoPayData(AutoPayData autoPayData)¶        {¶            var user = User();¶            user.AttemptsTo(SetupAutoPay.WithAutoPayData(autoPayData));¶        }¶¶        public void SetupGatewaySuite(GatewayData gatewayData)¶        {¶            var user = User();¶            user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData));¶            user.AttemptsTo(SetupPaymentMethod.WithGatewayData(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToStaff(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToGiftEntry(gatewayData));¶            user.AttemptsTo(SetupPaymentMethodSet.AddToPublic(gatewayData));¶        }¶¶        public void VerifyAutoPayData(AutoPayData autoPayData)¶        {¶            var user = User();¶            user.Verifies(SetupAutoPay.WithAutoPayData(autoPayData));¶        }¶¶        public void VerifyGatewaySuite(GatewayData gatewayData)¶        {¶            var user = User();¶            user.Verifies(SetupGateway.WithGatewayData(gatewayData));¶            user.Verifies(SetupPaymentMethod.WithGatewayData(gatewayData));¶            user.Verifies(SetupPaymentMethodSet.AddToStaff(gatewayData));¶            user.Verifies(SetupPaymentMethodSet.AddToGiftEntry(gatewayData));¶            user.Verifies(SetupPaymentMethodSet.AddToPublic(gatewayData));¶        }¶¶        public void SetDefaultCountryCode(GatewayData gatewayData)¶        {¶            var user = User();¶            user.AttemptsTo(SelectDefaultCountry.ByText(gatewayData));¶        }¶¶        public void VerifyDefaultCountryCode(GatewayData gatewayData)¶        {¶            var user = User();¶            user.Verifies(SelectDefaultCountry.ByText(gatewayData));¶        }")
Diff(INSERT,"¶¶        public void FillOutNewGateway(GatewayData gatewayData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SetupGateway.WithGatewayData(gatewayData).AndDontSaveGateway());¶        }¶¶        public void VerifyLinkValidationError()¶        {¶            var user = LoggedInUser();¶            var gatewayData = _context.GetData<GatewayData>("GatewayData");¶            user.Verifies(ValidationForLink.WithGatewayData(gatewayData));¶        }¶¶        public void AttemptToSaveAndCloseGateway()¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(SwitchFrame.ToGenericWindow());¶            user.AttemptsTo(ClickCommandButton.SaveAndClose());¶        }")
Diff(EQUAL,"¶    }¶}¶¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/TestMethods/Settings/Finance/PayCentral/Gateway/GatewayTestMethods.cs)
Diff(EQUAL,"{¶    public class ContactTestMethods : TestMethodBase¶    {¶        public ContactTestMethods(IWebDriver driver, IAsiWebContext context) : base(driver, context)¶        {¶            FindContactsPage = new FindContactsPage();¶            AccountPageStaff = new AccountPageStaff();¶        }¶¶        public FindContactsPage FindContactsPage { get; set; }¶        public AccountPageStaff AccountPageStaff { get; set; }¶        public void FindContact(string lastName, string firstName)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(Browse.InImis(FindContactsPage.BaseUrl));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("All common criteria", "First name starts with")).Textbox, firstName));¶            user.AttemptsTo(SendKeys.To(((QueryTextParameter)FindContactsPage.SelectAQuery.GetParameter("All common criteria", "Last name starts with")).Textbox, lastName));¶            user.AttemptsTo(ClickCommandButton.Submit());¶            user.AttemptsTo(Click.On(FindContactsPage.SelectAQuery.FirstCellLink));¶        }¶¶        public void VerifyOpenPledge()¶        {¶            var user = LoggedInUser();¶            FindContact(_context.GetData<string>("FirstName"), _context.GetData<string>("LastName"));¶            user.AttemptsTo(Click.On(AccountPageStaff.Tab("Giving")));¶            user.AttemptsTo(ScrollToElement.At(AccountPageStaff.GivingTab.OpenInvoiceListDisplay.CollapsiblePanelToggle));¶            user.AttemptsTo(Click.On(AccountPageStaff.GivingTab.OpenInvoiceListDisplay.OpenInvoicesGrid.FirstCell));¶        }")
Diff(INSERT,"¶¶        public void AddNewContact(ContactData contactData)¶        {¶            var user = LoggedInUser();¶            user.AttemptsTo(AddContact.AddIndividual(contactData));¶        }¶¶        /// <summary>¶        /// Add a new contact with a random name¶        /// </summary>¶        public void AddNewRandomContact()¶        {¶            var user = LoggedInUser();¶            // create a new contact¶            var contact = new ContactData()¶            {¶                FirstName = $"{TestHelper.GenerateRandomString(5)}First",¶                MiddleName = $"{TestHelper.GenerateRandomString(5)}Middle",¶                LastName = $"{TestHelper.GenerateRandomString(5)}Last",¶            };¶            contact.Email = $"{contact.LastName}@netfake.com";¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶        }¶¶        /// <summary>¶        /// Add a new duplicate contact from exisiting contact name saved in the context¶        /// </summary>¶        public void AddANewDuplicateContactFromContext()¶        {¶            var user = LoggedInUser();¶            // create a new dupe contact from context¶            var contact = new ContactData()¶            {¶                FirstName = _context.GetData<string>("FirstName"),¶                MiddleName = _context.GetData<string>("MiddleName"),¶                LastName = _context.GetData<string>("LastName"),¶                Email = _context.GetData<string>("Email"),¶            };¶            user.AttemptsTo(AddContact.AddIndividual(contact));¶        }¶¶")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/TestMethods/Community/ContactTestMethods.cs)
Diff(EQUAL,"{¶    public class IssueReceiptsPage : PageBase¶    {¶        public IssueReceiptsPage()¶        {¶            BaseUrl = new ImisUrl("iCore/Fundraising/Issue_receipts.aspx");¶            Grid1 = new RadGrid("Grid1");¶        }¶        public RadGrid Grid1 { get; set; }¶        public IWebLocator GridCurrentPage => LocatorByCSS("a", "class", "rgCurrentPage");¶")
Diff(INSERT,"        public IWebLocator IssueReceiptsButton => LocatorByXPath("GenerateReceipts", "input");¶        public Lister SelectAQuery;¶¶        private static Lister BuildLister()¶        {¶            var lister = new Lister("ResultsGrid");¶            lister.Queries.Add("All gifts elligible for receipting", BuildAllQuery());¶            return lister;¶        }¶¶        private static ListerSheet BuildAllQuery()¶        {¶            var query = new ListerSheet();¶            query.Parameters.Add("Gift date between start", new QueryDateParameter());¶            query.Parameters.Add("Gift date between end", new QueryDateParameter());¶            query.Parameters.Add("Donor name contains", new QueryTextParameter());¶            query.Parameters.Add("Gift item contains", new QueryTextParameter());¶            return query;¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.Web.V100/Pages/Fundraising/IssueReceiptsPage.cs)
Diff(EQUAL,"#TODO Need to create a custom tag that doesn't conflict with others¶Feature: Product Test Suite¶	¶Background:¶	Given I set system up with a gateway¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | IMIS Pay CC US                   |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| GLAccount         | 1-1020: VISA                     |¶		")
Diff(EQUAL,"| PaymentMethodType | CreditCard (iMIS Pay)            |¶¶Scenario: Order a Product on Mbrr¶	Given I am on the Mbrr site as designated user Public user¶	When I order product¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶	And I checkout items in the cart¶		| Key               | Value            |¶		| PaymentMethod     | IMIS Pay CC US   |¶		| PaymentMethodType | CreditCard       |¶		| CardNumber        | 4111111111111111 |¶		| CardExpiry        | 05232025         |¶		| CardCVC           | 333              |¶		| PostalCode        | 78722            |¶	Then I verify the product was ordered¶		| Key     | Value                  |¶		| Product | Building a Strong Team |¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/Commerce/Products.feature)
Diff(EQUAL,"Feature: Membership¶¶This feature tests everything dealing with Club Staff Membership¶¶")
Diff(DELETE,"¶#More code will be written here by contractors ¶Scenario: Tests logging in¶")
Diff(INSERT,"Scenario: Verify club undo button works¶	Given I am on the Club Staff site as designated user System Administrator¶	When I select Copper Heights Club ¶	* I verify I can check in/out member¶		| ID     | Verification1 | Verification2 |¶		| 123172 | Check in at   | Sofia Camp    |¶	Then I verify Club Staff undo button works¶¶Scenario: Verify Club was selected¶    Given I am on the Club Staff site as designated user System Administrator¶    When I select Copper Heights Club¶    Then I verify Copper Heights Club club was selected¶¶###100_ClubStaff_Verify_JoinClubUnitPrice¶Scenario: Verify unit price after joining a club¶    Given I am on the Club Staff site as designated user System Administrator¶    When I create club contact¶        | FirstName | LastName  | Address1      | City       | PostalCode | State |¶        | Tri       | Carpenter | 1202 Rice Ave | Cedar Park | 78613      | Texas |¶    * I Join Now and pay for a new contact¶        | ClubName            | UnitAmount |¶        | Copper Heights Club | 5.00       |¶    Then I verify Join Now and pay for a new contact¶        | ClubName            | UnitAmount |¶        | Copper Heights Club | 5.00       |¶¶Scenario: Verify club Staff redirector¶	")
Diff(EQUAL,"Given I am on the Club")
Diff(INSERT," ")
Diff(EQUAL,"Staff site as designated user S")
Diff(DELETE,"taff")
Diff(INSERT,"ystem Administrator¶	When I am on Copper Heights Club club landing page¶	* I redirect to different club staff profiles¶		| Name              | Verification1 | Verification2      | Verification3 | Verification4       | Verification5     |¶		| Alice Powers      | Household     | Emergency contacts | Relationships | Medical information | Membership        |¶		| Oscar Cecil       | Volunteering  | Transactions       | Preferences   | Check-in history    | Oscar Cecil       |¶		| Ms. Jasmine Singh | Clubs         | Volunteering       | Transactions  | Preferences         | Ms. Jasmine Singh |¶	When I search item of Maria Powers¶	Then I verify messages being displayed¶		| message       |¶		| Household     |¶		| Relationships |")
Diff(EQUAL,"¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/ClubStaff/Membership.feature)
Diff(EQUAL,"Feature: EnterGifts¶Background:¶	Given I set system up with a gateway¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | IMIS Pay CC US                   |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		")
Diff(INSERT,"| GLAccount         | 1-1020: VISA                     |¶		")
Diff(EQUAL,"| PaymentMethodType | CreditCard (iMIS Pay)            |¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Gift¶	Given I am on the Staff site as designated user Staff¶	When I enter a Gift¶		| Key           | Value            |¶		| Donor         | New Contact      |¶		| FirstName     | Tester1          |¶		| LastName      | Tester1          |¶		| Amount        | Random           |¶		| GiftItem      | CASHFUND         |¶		| BillTo        | Tester1 Tester1  |¶		| PaymentMethod | IMIS Pay CC US   |¶		| CardNumber    | 4111111111111111 |¶		| CardExpiry    | 0425             |¶		| CardCVC       | 123              |¶		| PostalCode    | 78741            |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Pledge¶	Given I am on the Staff site as designated user Staff¶	When I enter a Pledge¶		| Key       | Value       |¶		| Donor     | New Contact |¶		| FirstName | Tester1     |¶		| LastName  | Tester1     |¶		| Amount    | Random      |¶		| GiftItem  | CASHFUND    |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I verify an open pledge¶¶Scenario: Verify nonadmin staff user can browse to gift entry page to enter a Installment Pledge¶	Given I am on the Staff site as designated user Staff¶	When I enter a Installment Pledge¶		| Key                  | Value       |¶		| Donor                | New Contact |¶		| FirstName            | Tester1     |¶		| LastName             | Tester1     |¶		| Amount               | Random      |¶		| GiftItem             | CASHFUND    |¶		| NumberOfInstallments | 2           |¶		| Frequency            | Monthly     |¶		| FirstIntallment      | 10/22/2022  |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I verify an open pledge¶¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/Fundraising/EnterGifts.feature)
Diff(EQUAL,"@QuickSweep¶Feature: GiftAid¶¶This feature is for testing out the Gift Aid feature¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶	  And I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | IMIS Pay CC US                   |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		| PaymentMethodType | CreditCard (iMIS Pay)            |¶	")
Diff(INSERT,"	| GLAccount         | 1-1000-000                       |¶	")
Diff(EQUAL,"When I activate Manage Gift Aid¶¶¶Scenario: Verify you can submit Gift Aid donation using Give Now¶	Given I log on the Mbrr site as designated user Public user¶	When I submit Gift Aid donation¶		| Key               | Value            |¶		| SkipCardValidation | true             |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| PaymentMethodType  | CreditCard       |¶		| CardNumber         | 4012888888881881 |¶		| CardExpiry         | 05232025         |¶		| CardCVC            | 333              |¶	When I log on the Staff site as designated user System Administrator¶	Then I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 50.00 |¶¶Scenario: Verify you can submit Gift Aid donation using Give Now using OBO¶	Given I log onto the Mbrr site as System Administrator on behalf user Janice,Darrow¶	When I submit Gift Aid donation¶		| Key                | Value            |¶		| GiftAidDeclaration | Written          |¶		| SkipCardValidation | true             |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| PaymentMethodType  | CreditCard       |¶		| CardNumber         | 4012888888881881 |¶		| CardExpiry         | 05232025         |¶		| CardCVC            | 333              |¶	When I log on the Staff site as designated user System Administrator¶	Then I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 50.00 |¶¶Scenario: Verify user can browse to gift entry page to enter a Gift using Gift Aid¶	Given I log on the Staff site as designated user System Administrator¶	When I enter a Gift¶		| Key                | Value            |¶		| Donor              | New Contact      |¶		| FirstName          | Tester1          |¶		| LastName           | Tester1          |¶		| Amount             | 25               |¶		| GiftItem           | BLDG             |¶		| GiftAid            | true             |¶		| GiftAidDeclaration | Written          |¶		| NumGifts           | 3                |¶		| BillTo             | Tester1 Tester1  |¶		| PaymentMethod      | IMIS Pay CC US   |¶		| CardNumber         | 4111111111111111 |¶		| CardExpiry         | 0425             |¶		| CardCVC            | 123              |¶		| PostalCode         | 78741            |¶	Then I verify user has the following message displayed: Batch successfully submitted for posting.¶	And I review gift is available for Gift Aid Claims¶		| Key           | Value |¶		| PaymentAmount | 25.00 |¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/Fundraising/GiftAid.feature)
Diff(EQUAL,"@PaymentGateways @CiBuild¶Feature: United States demo payment gateways for v100¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Adding ImisPay CC US¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | ImisPay CC US                    |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		| PaymentMethodType | CreditCard (iMIS Pay)            |¶		| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033565                         |¶		| AccountName       | ImisPay CC US                    |¶		| AuthorizationKey  | L7N8BF3n9I6BNSzkqsgisrNnlVAyxxhC |¶		| PaymentMethodType | CreditCard (iMIS Pay)            |¶	")
Diff(INSERT,"	| GLAccount         | 1-1000-000                       |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding ImisPay DD US¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | ImisPay DD US                    |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | DirectDebit (iMIS Pay)           |¶		| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_US                         |¶		| Region            | United States                    |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80031389                         |¶		| AccountName       | ImisPay DD US                    |¶		| AuthorizationKey  | 7lM4UcEjJmnVJMHKIaSXwzanJoNynX0R |¶		| PaymentMethodType | DirectDebit (iMIS Pay)           |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IATS CC US¶	When I setup a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_CC_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS CC US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | CreditCard (iATS)    |¶		| FinancialEntity   | iMIS International   |¶		| GLAccount         | 1-1000-000           |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                |¶		| GatewayType       | Iats                 |¶		| AccountCode       | IA_CC_US             |¶		| Region            | United States/Canada |¶		| AccountName       | IATS CC US           |¶		| Password          | Test88               |¶		| AgentCode         | Test88               |¶		| PaymentMethodType | CreditCard (iATS)    |¶		| FinancialEntity   | iMIS International   |¶		| GLAccount         | 1-1000-000           |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Pay Flow CC US¶	When I setup a gateway suite¶		| Key               | Value                    |¶		| GatewayType       | PayFlowPro               |¶		| AccountCode       | PF_CC_US                 |¶		| Region            | United States            |¶		| AccountName       | Pay Flow CC US           |¶		| Password          | qaperson1                |¶		| UserName          | asicctest                |¶		| Partner           | Verisign                 |¶		| Vendor            | asicctest                |¶		| Environment       | Sandbox                  |¶		| PaymentMethodType | CreditCard (Payflow Pro) |¶		| FinancialEntity   | iMIS International       |¶		| GLAccount         | 1-1000-000               |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                    |¶		| GatewayType       | PayFlowPro               |¶		| AccountCode       | PF_CC_US                 |¶		| Region            | United States            |¶		| AccountName       | Pay Flow CC US           |¶		| Password          | qaperson1                |¶		| UserName          | asicctest                |¶		| Partner           | Verisign                 |¶		| Vendor            | asicctest                |¶		| Environment       | Sandbox                  |¶		| PaymentMethodType | CreditCard (Payflow Pro) |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding Bambora CC US¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPassThrough                  |¶		| AccountCode       | BB_CC_US                         |¶		| Environment       | Sandbox                          |¶		| AccountName       | Bambora CC US                    |¶		| SpreedlyType      | Bambora NA                       |¶		| MerchantId        | 300212633                        |¶		| UserName          | johnasi                          |¶		| Password          | FullAccess777!                   |¶		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)   |¶		| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPassThrough                  |¶		| AccountCode       | BB_CC_US                         |¶		| Environment       | Sandbox                          |¶		| AccountName       | Bambora CC US                    |¶		| SpreedlyType      | Bambora NA                       |¶		| MerchantId        | 300212633                        |¶		| UserName          | johnasi                          |¶		| Password          | FullAccess777!                   |¶		| ApiKey            | 1bb1e53329fD4009887fB123A7Ae91A2 |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)   |¶	")
Diff(INSERT,"	| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶¶Scenario: Adding Elavon CC US¶	When I setup a gateway suite¶		| Key               | Value                                                            |¶		| GatewayType       | ImisPassThrough                                                  |¶		| AccountCode       | EL_CC_US                                                         |¶		| Environment       | Sandbox                                                          |¶		| AccountName       | Elavon CC US                                                     |¶		| SpreedlyType      | Elavon                                                           |¶		| MerchantId        | 0022")
Diff(DELETE,"579")
Diff(INSERT,"874")
Diff(EQUAL,"                                                          |¶		| UserName          | apiuser                                                          |¶		| Pin               | ")
Diff(DELETE,"T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A")
Diff(INSERT,"RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR")
Diff(EQUAL," |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |¶		| FinancialEntity   | iMIS International                                               |¶		| GLAccount         | 1-1000-000                                                       |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                                            |¶		| GatewayType       | ImisPassThrough                                                  |¶		| AccountCode       | EL_CC_US                                                         |¶		| Environment       | Sandbox                                                          |¶		| AccountName       | Elavon CC US                                                     |¶		| SpreedlyType      | Elavon                                                           |¶		| MerchantId        | 0022")
Diff(DELETE,"579")
Diff(INSERT,"874")
Diff(EQUAL,"                                                          |¶		| UserName          | apiuser                                                          |¶		| Pin               | ")
Diff(DELETE,"T6IOLAANS6IMG3V0UHZF8SRTWGY3R0UIIDDOO50AF9O1FROAYS3DU1LPNGRCB45A")
Diff(INSERT,"RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR")
Diff(EQUAL," |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |¶	And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/UnitedStatesPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: Canada demo payment gateways for v100¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Adding ImisPay  CC CA¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_CA                         |¶		| Region            | Canada                           |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033566                         |¶		| AccountName       | ImisPay CC CA                    |¶		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |¶		| PaymentMethodType | CreditCard (iMIS Pay)            |¶		| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_CC_CA                         |¶		| Region            | Canada                           |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033566                         |¶		| AccountName       | ImisPay CC CA                    |¶		| AuthorizationKey  | rq5FjxL2nva2uubghavs3s2MfMdZktan |¶		| PaymentMethodType | CreditCard (iMIS Pay)            |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding ImisPay  DD CA¶	When I setup a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_CA                         |¶		| Region            | Canada                           |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033560                         |¶		| AccountName       | ImisPay DD CA                    |¶		| AuthorizationKey  | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |¶		| PaymentMethodType | DirectDebit (iMIS Pay)           |¶		| FinancialEntity   | iMIS International               |¶		| GLAccount         | 1-1000-000                       |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                            |¶		| GatewayType       | ImisPay                          |¶		| AccountCode       | IP_DD_CA                         |¶		| Region            | Canada                           |¶		| XWebId            | 800000022538                     |¶		| TerminalId        | 80033560                         |¶		| AccountName       | ImisPay DD CA                    |¶		| AuthorizationKey  | S6bQV1AgjCQGALnYrP9t46cnpGs0C3wW |¶		| PaymentMethodType | DirectDebit (iMIS Pay)           |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶")
Diff(INSERT,"¶Scenario: Adding Elavon CC CA¶	When I setup a gateway suite¶		| Key               | Value                                                            |¶		| GatewayType       | ImisPassThrough                                                  |¶		| AccountCode       | EL_CC_CA                                                         |¶		| Environment       | Sandbox                                                          |¶		| AccountName       | Elavon CC CA                                                     |¶		| SpreedlyType      | Elavon                                                           |¶		| MerchantId        | 0022874                                                          |¶		| UserName          | apiuser                                                          |¶		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |¶		| FinancialEntity   | iMIS International                                               |¶		| GLAccount         | 1-1000-000                                                       |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                                            |¶		| GatewayType       | ImisPassThrough                                                  |¶		| AccountCode       | EL_CC_CA                                                         |¶		| Environment       | Sandbox                                                          |¶		| AccountName       | Elavon CC CA                                                     |¶		| SpreedlyType      | Elavon                                                           |¶		| MerchantId        | 0022874                                                          |¶		| UserName          | apiuser                                                          |¶		| Pin               | RMQB9JG62FT9HYSHHYQX6JI2S6WG9PFIPCE935NC8WLA5WVU7CNAJ7ZJSMSJ9VPR |¶		| PaymentMethodType | CreditCard (iMIS Pass-through)                                   |¶	And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/CanadaPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: United Kingdom demo payment gateways for v100¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Adding IATS CC UK¶	When I setup a gateway suite¶		| Key               | Value                   |¶		| GatewayType       | Iats                    |¶		| AccountCode       | IA_CC_UK                |¶		| Region            | United Kingdom & Europe |¶		| Password          | asi14650                |¶		| AgentCode         | TE1588                  |¶		| AccountName       | IATS CC UK              |¶		| PaymentMethodType | CreditCard (iATS)       |¶		| FinancialEntity   | iMIS International      |¶		| GLAccount         | 1-1000-000              |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                   |¶		| GatewayType       | Iats                    |¶		| AccountCode       | IA_CC_UK                |¶		| Region            | United Kingdom & Europe |¶		| Password          | asi14650                |¶		| AgentCode         | TE1588                  |¶		| AccountName       | IATS CC UK              |¶		| PaymentMethodType | CreditCard (iATS)       |¶	")
Diff(INSERT,"	| GLAccount         | 1-1000-000              |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding IATS DD UK¶	When I setup a gateway suite¶		| Key               | Value                   |¶		| GatewayType       | Iats                    |¶		| AccountCode       | IA_DD_UK                |¶		| Region            | United Kingdom & Europe |¶		| Password          | asi14650                |¶		| AgentCode         | TE1588                  |¶		| AccountName       | IATS DD UK              |¶		| PaymentMethodType | UKDirectDebit           |¶		| CurrencyCode      | GBP                     |¶		| FinancialEntity   | iMIS International      |¶		| GLAccount         | 1-1000-000              |¶¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key               | Value                   |¶		| GatewayType       | Iats                    |¶		| AccountCode       | IA_DD_UK                |¶		| Region            | United Kingdom & Europe |¶		| Password          | asi14650                |¶		| AgentCode         | TE1588                  |¶		| AccountName       | IATS DD UK              |¶		| PaymentMethodType | UKDirectDebit           |¶		| CurrencyCode      | GBP                     |¶	")
Diff(INSERT,"	| GLAccount         | 1-1000-000              |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶¶Scenario: Adding ImisPay  CC UK¶	When I setup a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_CC_UK                             |¶		| Region            | United Kingdom & Europe              |¶		| AccountName       | ImisPay CC UK                        |¶		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |¶		| AppKey            | wfENkB9cKTSftNoG                     |¶		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |¶		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |¶		| PaymentMethodType | CreditCard (iMIS Pay)                |¶		| FinancialEntity   | iMIS International                   |¶		| GLAccount         | 1-1000-000                           |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_CC_UK                             |¶		| Region            | United Kingdom & Europe              |¶		| AccountName       | ImisPay CC UK                        |¶		| AccountId         | TRA_c9967ad7d8ec4b46b6dd44a61cde9a91 |¶		| AppKey            | wfENkB9cKTSftNoG                     |¶		| AppId             | eqhwuxZgrq0n1Oebd7cAekjW9il8xEkE     |¶		| MerchantId        | MER_7e3e2c7df34f42819b3edee31022ee3f |¶		| PaymentMethodType | CreditCard (iMIS Pay)                |¶	")
Diff(INSERT,"	| GLAccount         | 1-1000-000                           |¶	")
Diff(EQUAL,"And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/UnitedKingdomPaymentGateways.feature)
Diff(EQUAL,"@PaymentGateways¶Feature: New Zealand demo payment gateways for v100¶¶Background:¶	Given I am on the Staff site as designated user System Administrator¶¶Scenario: Adding ImisPay  NZ CC¶	When I setup a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ                                |¶		| Region            | New Zealand                          |¶		| AccountName       | ImisPay CC NZ                        |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_CC_NZ                             |¶		| PaymentMethodName | ImisPay CC New Zealand               |¶		| PaymentMethodType | CreditCard (iMIS Pay)                |¶		| FinancialEntity   | iMIS International                   |¶		| GLAccount         | 1-1000-000                           |¶	And I setup autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶	Then I verify a gateway suite¶		| Key               | Value                                |¶		| GatewayType       | ImisPay                              |¶		| AccountCode       | IP_NZ_CC                             |¶		| Region            | New Zealand                          |¶		| AccountName       | ImisPay CC NZ                        |¶		| DigitalKey        | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode | IP_CC_NZ                             |¶		| PaymentMethodName | ImisPay CC New Zealand               |¶		| PaymentMethodType | CreditCard (iMIS Pay)                |¶	And I verify autopay¶		| Key                 | Value |¶		| RecurringDonation   | true  |¶		| RenewingMemberships | true  |¶¶Scenario: Adding ImisPay  NZ DD¶	When I setup a gateway suite¶		| Key                                    | Value                                |¶		| GatewayType                            | ImisPay                              |¶		| AccountCode                            | IP_DD_NZ                             |¶		| Region                                 | New Zealand                          |¶		| AccountName                            | ImisPay DD NZ                        |¶		| DigitalKey                             | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode                      | IP_DD_NZ                             |¶		| PaymentMethodName                      | ImisPay DD New Zealand               |¶		| PaymentMethodType                      | DirectDebit (iMIS Pay)               |¶		| PaymentAuthorizationTermsAndConditions | I agree                              |¶		| DisplayPaymentAuthoirizationCheckbox   | True                                 |¶		| FinancialEntity                        | iMIS International                   |¶		| GLAccount                              | 1-1000-000                           |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key                                    | Value                                |¶		| GatewayType                            | ImisPay                              |¶		| AccountCode                            | IP_DD_NZ                             |¶		| Region                                 | New Zealand                          |¶		| AccountName                            | ImisPay DD NZ                        |¶		| DigitalKey                             | 450F8531-598C-4A0B-529B-9711B7C27C6E |¶		| PaymentMethodCode                      | IP_DD_NZ                             |¶		| PaymentMethodName                      | ImisPay DD New Zealand               |¶		| PaymentMethodType                      | DirectDebit (iMIS Pay)               |¶		| PaymentAuthorizationTermsAndConditions | I agree                              |¶		| DisplayPaymentAuthoirizationCheckbox   | True                                 |¶	And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶Scenario: Adding Secure Pay CC NZ¶	When I setup a gateway suite¶		| Key               | Value                  |¶		| GatewayType       | SecurePay              |¶		| AccountCode       | SP_NZ                  |¶		| Password          | abc123                 |¶		| Environment       | Sandbox                |¶		| AccountName       | Secure Pay NZ          |¶		| MerchantId        | ABC0001                |¶		| PaymentMethodCode | SP_CC_NZ               |¶		| PaymentMethodName | SecurePay CC NZ        |¶		")
Diff(DELETE,"| PaymentMethodType | Credit card            |¶		")
Diff(EQUAL,"| PaymentMethodType | CreditCard (SecurePay) |¶		| FinancialEntity   | iMIS International     |¶		| GLAccount         | 1-1000-000             |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key               | Value                  |¶		| GatewayType       | SecurePay              |¶		| AccountCode       | SP_NZ                  |¶		| Password          | abc123                 |¶		| Environment       | Sandbox                |¶		| AccountName       | Secure Pay NZ          |¶		| MerchantId        | ABC0001                |¶		| PaymentMethodCode | SP_CC_NZ               |¶		| PaymentMethodName | SecurePay CC NZ        |¶		")
Diff(DELETE,"| PaymentMethodType | Credit card            |¶		")
Diff(EQUAL,"| PaymentMethodType | CreditCard (SecurePay) |¶	And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶Scenario: Adding Secure Pay DD NZ¶	When I setup a gateway suite¶		| Key                                    | Value                   |¶		| GatewayType                            | SecurePay               |¶		| AccountCode                            | SP_NZ                   |¶		| Password                               | abc123                  |¶		| Environment                            | Sandbox                 |¶		| AccountName                            | Secure Pay NZ           |¶		| MerchantId                             | ABC0001                 |¶		| PaymentMethodCode                      | SP_DD_NZ                |¶		| PaymentMethodName                      | SecurePay DD NZ         |¶		| PaymentMethodType                      | DirectDebit (SecurePay) |¶		| PaymentAuthorizationTermsAndConditions | I agree                 |¶		| DisplayPaymentAuthoirizationCheckbox   | True                    |¶		| FinancialEntity                        | iMIS International      |¶		| GLAccount                              | 1-1000-000              |¶	And I setup autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶	Then I verify a gateway suite¶		| Key                                    | Value                   |¶		| GatewayType                            | SecurePay               |¶		| AccountCode                            | SP_NZ                   |¶		| Password                               | abc123                  |¶		| Environment                            | Sandbox                 |¶		| AccountName                            | Secure Pay NZ           |¶		| MerchantId                             | ABC0001                 |¶		| PaymentMethodCode                      | SP_DD_NZ                |¶		| PaymentMethodName                      | SecurePay DD NZ         |¶		| PaymentMethodType                      | DirectDebit (SecurePay) |¶		| PaymentAuthorizationTermsAndConditions | I agree                 |¶		| DisplayPaymentAuthoirizationCheckbox   | True                    |¶	And I verify autopay¶		| Key                     | Value |¶		| RecurringDonation       | true  |¶		| RenewingMemberships     | true  |¶		| AllowDonorsChangeAmount | true  |¶¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Features/PaymentGateways/NewZealandPaymentGateways.feature)
Diff(EQUAL,"{¶    [Binding]¶    public class GatewaySetupStepDef¶    {¶        public GatewaySetupStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            GatewayTestMethods = new GatewayTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶            Authentication = new Authentication(driver, context);¶        }¶¶        GatewayTestMethods GatewayTestMethods { get; set; }¶        SignInTestMethods SignInTestMethods { get; set; }¶        Authentication Authentication { get; set; }¶¶        [Given(@"I set system up with a gateway")]¶        public void GivenISetSystemUpWithAGateway(Table data)¶        {¶            SignInTestMethods.SignInDesignatedUser("System Administrator", "Staff");¶            WhenISetupAGateway(data);¶            Authentication.LogOut();¶        }¶¶¶        [Given(@"I setup a gateway suite")]¶        [When(@"I setup a gateway suite")]¶        public void WhenISetupAGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.SetupGatewaySuite(data.CreateInstance<GatewayData>());¶        }¶¶        [When(@"I setup autopay")]¶        public void WhenISetupAutoPay(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.SetupAutoPayData(data.CreateInstance<AutoPayData>());¶        }¶¶        [Then(@"I verify a gateway suite")]¶        public void WhenIVerifyAGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.VerifyGatewaySuite(data.CreateInstance<GatewayData>());¶        }¶¶        [Then(@"I verify autopay")]¶        public void WhenIVerifyAutoPay(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.VerifyAutoPayData(data.CreateInstance<AutoPayData>());¶        }¶¶        [When(@"I set country code")]¶        public void WhenISetCountryCode(Table data)¶        {¶            GatewayTestMethods.SetDefaultCountryCode(data.CreateInstance<GatewayData>());¶        }¶¶        [Then(@"I verify the country code is set to")]¶        public void WhenIVerifyCountryCode(Table data)¶        {¶            GatewayTestMethods.VerifyDefaultCountryCode(data.CreateInstance<GatewayData>());¶        }¶¶")
Diff(INSERT,"        [Given(@"I fill out the following in a new gateway")]¶        public void GivenIFillOutTheFollowingInANewGateway(Table data)¶        {¶            GatewayTestMethods.EnsurePayCentralIsReady();¶            GatewayTestMethods.FillOutNewGateway(data.CreateInstance<GatewayData>());¶        }¶¶        [When(@"I save and close the gateway dialogue")]¶        public void WhenISaveAndCloseTheGatewayDialogue()¶        {¶            GatewayTestMethods.AttemptToSaveAndCloseGateway();¶        }¶¶        [Then(@"I should recieve a validation error")]¶        public void ThenIShouldRecieveAValidationError()¶        {¶            GatewayTestMethods.VerifyLinkValidationError();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Steps/PaymentGateways/GatewaySetupStepDef.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class ContactStepDef¶    {¶        public ContactStepDef(IWebDriver driver, IAsiWebContext context)¶        {¶            ContactTestMethod = new ContactTestMethods(driver, context);¶            SignInTestMethods = new SignInTestMethods(driver, context);¶        }¶¶        public ContactTestMethods ContactTestMethod { get; set; }¶        public SignInTestMethods SignInTestMethods { get; set; }¶¶        [Then(@"I search for contact")]¶        public void ThenISearchForContact(Table table)¶        {¶            var contactData = table.AsiCreateInstance<ContactData>();¶            ContactTestMethod.FindContact(contactData.LastName, contactData.FirstName);¶        }¶¶        [When(@"I view the contact (.*), (.*) as designated user (.*)")]¶        public void WhenIViewTheContact(string lastName, string firstName, string user)¶        {¶            SignInTestMethods.SignInDesignatedUser(user, "Staff");¶            ContactTestMethod.FindContact(lastName, firstName);¶        }¶")
Diff(INSERT,"¶        [Given(@"I add a new contact")]¶        [When(@"I add a new contact")]¶        public void WhenIAddNewContact(Table data)¶        {¶            ContactTestMethod.AddNewContact(data.CreateInstance<ContactData>());¶        }¶¶        [Given(@"I add a new random contact")]¶        [When(@"I add a new random contact")]¶        public void WhenIAddNewRandomContact()¶        {¶            ContactTestMethod.AddNewRandomContact();¶        }¶¶        [Given(@"I add a new duplicate contact from context")]¶        [When(@"I add a new duplicate contact from context")]¶        public void WhenIAddANewDuplicateContactFromContext()¶        {¶            ContactTestMethod.AddANewDuplicateContactFromContext();¶        }¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/V100/Asi.Selenium.V100/Steps/Community/ContactStepDef.cs)
- /Helpers/Wait/Wait.cs.txt
- /Interfaces/IWebDriverFactory.cs.txt
+ /SeleniumCore.csproj
+ /StepContext/Commerce/ProductContext.cs
+ /TestFiles/Sample_MP4_66MB.mp4
+ /TestFiles/Sample_MP4_126MB.mp4
+ /WebDriver/BrowserType.cs
+ /WebDriver/WebDriverFactory.cs
+ /WebDriver/ChromeDriverInstaller.cs
+ /Helpers/Wait/Wait.cs
+ /Helpers/MultiFactorAuthentication/MultiFactorAuthentication.cs
+ /Interfaces/IWebDriverFactory.cs
+ /DataClasses/Commerce/ProductItemData.cs
+ /DataClasses/Commerce/PricingGroupTable.cs
+ /DataClasses/Commerce/OrderData.cs
+ /DataClasses/Commerce/OrderItemData.cs
+ /DataClasses/Finance/RefundData.cs
Diff(EQUAL,"{¶    public class DisplayStaticBase¶    {¶")
Diff(INSERT,"        /// <summary>¶        /// Generates the predicate to find a function or attribute that contains or exactly matches a value¶        /// <br />¶        /// Predicates are the search terms in the square brackets of the XPath. I.E. a[contains(text(),'This is the text in the element')]¶        /// </summary>¶        /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>¶        /// <param name="expectedValue">The expected value to be found when searching</param>¶        /// <param name="exactMatch">Boolean to determine whether to check if the attribute or function contains or exactly matches the value</param>¶        /// <returns></returns>¶        public string Predicate(string searchIn, string expectedValue, bool exactMatch = false) => exactMatch ? ExactValuePredicate(searchIn, expectedValue) : ContainsValuePredicate(searchIn, expectedValue);¶¶        /// <summary>¶        /// Predicate in XPath to detemine if an HTML attribute contains a value¶        /// </summary>¶        /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>¶        /// <param name="expectedValue">The expected value to be found when searching</param>¶        /// <returns></returns>¶        public string ContainsValuePredicate(string searchIn, string expectedValue)¶        {¶            bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');¶            if (searchWithFunction)¶                return $"contains({searchIn},'{expectedValue}')";¶            else¶                return $"contains(@{searchIn},'{expectedValue}')";¶        }¶¶        /// <summary>¶        /// Predicate in XPath to determine if an HTML attribute is equal to a value¶        /// </summary>¶        /// <param name="searchIn">The function or attribute to search in. You can specify "text()", "class", or any other function or attribute</param>¶        /// <param name="expectedValue">The expected value to be found when searching</param>¶        /// <returns></returns>¶        public string ExactValuePredicate(string searchIn, string expectedValue)¶        {¶            bool searchWithFunction = searchIn.Contains('(') || searchIn.Contains(')');¶            if (searchWithFunction)¶                return $"{searchIn}='{expectedValue}'";¶            else¶                return $"@{searchIn}='{expectedValue}'";¶        }¶¶")
Diff(EQUAL,"        /// <summary>¶        /// Create a By of the element using XPath¶        /// </summary>¶        /// <param name="elementId">The id of the element</param>¶        /// <param name="tag">the type of tag: span, input, button</param>¶        /// <param name="attribute">the attribute type of the element/column</param>¶        /// <param name="postXPath">appended xpath at the end</param>¶        /// <returns>a By object</returns>¶        public static By ByXPath(string elementId, string tag = "*", string attribute = "id", string postXPath = "")¶        {¶            return By.XPath($"//{tag}[contains(@{attribute},'{elementId}')]{postXPath}");¶        }¶¶        /// <summary>¶        /// Create locator of the element using XPath¶        /// </summary>¶        /// <param name="elementId">The id of the element</param>¶        /// <param name="tag">the type of tag: span, input, button</param>¶        /// <param name="attribute">the attribute type of the element/column</param>¶        /// <param name="postXPath">appended xpath at the end</param>¶        /// <returns>an IWebLocator object</returns>¶        public static IWebLocator LocatorByXPath(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>¶            WebLocator.L($"XPath for \"{elementId}\"", ByXPath(elementId, tag, attribute, postXPath));¶¶        /// <summary>¶        /// Create a By of the element using XPath¶        /// </summary>¶        /// <param name="elementId">The id of the element</param>¶        /// <param name="tag">the type of tag: span, input, button</param>¶        /// <param name="attribute">the attribute type of the element/column</param>¶        /// <param name="postXPath">appended xpath at the end</param>¶        /// <returns>a By object</returns>¶        public static By ByXPathExact(string elementId, string tag = "*", string attribute = "id", string postXPath = "")¶        {¶            return By.XPath($"//{tag}[@{attribute}='{elementId}']{postXPath}");¶        }¶¶        /// <summary>¶        /// Create locator of the element using XPath¶        /// </summary>¶        /// <param name="elementId">The id of the element</param>¶        /// <param name="tag">the type of tag: span, input, button</param>¶        /// <param name="attribute">the attribute type of the element/column</param>¶        /// <param name="postXPath">appended xpath at the end</param>¶        /// <returns>an IWebLocator object</returns>¶        public static IWebLocator LocatorByXPathExact(string elementId, string tag = "*", string attribute = "id", string postXPath = "") =>¶            WebLocator.L($"XPath for \"{elementId}\"", ByXPathExact(elementId, tag, attribute, postXPath));¶¶        /// <summary>¶        /// Creates a By for a table cell¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="row">the row number</param>¶        /// <param name="column">the column number</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="tableSection">tbody, thead, tfoot</param>¶        /// <returns> a By object</returns>¶        public static By GetTableXPath(string tableName, int row, int column, bool link = false, string postXPath = "", string tag = "id", string tableSection = "tbody")¶        {¶            var linkTag = link ? "//a" : "";¶            return By.XPath($"//table[contains(@{tag},'{tableName}')]/{tableSection}/tr[{row}]/td[{column}]{linkTag}{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a By for a table cell using a provided selector¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="tdSelector">the selector that will be used to identify the td element e.g. "contains(text(),'hello')"</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <param name="tableSection">tbody, thead, tfoot</param>¶        /// <returns>a By object</returns>¶        public static By GetTableXPath(string tableName, string tdSelector, bool link = false, string postXPath = "", string tag = "id", string tableSection = "tbody")¶        {¶            var linkTag = link ? "//a" : "";¶            var td = string.IsNullOrEmpty(tdSelector) ? "" : $"[{tdSelector}]";¶            return By.XPath($"//table[contains(@{tag},'{tableName}')]/{tableSection}//td{td}{linkTag}{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a By for a table cell¶        /// </summary>¶        /// <param name="tableName">the name of the table by it's element class</param>¶        /// <param name="row">the row number</param>¶        /// <param name="column">the column number</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <returns> a By object</returns>¶        public static By GetTableXPathByClass(string tableName, int row = 1, int column = 1, bool link = false, string postXPath = "")¶        {¶            var linkTag = link ? "/a" : "";¶            return By.XPath($"//table[contains(@class,'{tableName}')]/tbody/tr[{row}]/td[{column}]{linkTag}{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a By for a table cell¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="row">the row number</param>¶        /// <param name="column">the column number</param>¶        /// <param name="link">adds xpath for an anchor tag when true</param>¶        /// <param name="postXPath">post pends xpath to the default table row/column</param>¶        /// <returns> a By object</returns>¶        public static By GetNestedTableXPath(string tableName, int parentRow, int row, int column, bool link = false, string postXPath = "")¶        {¶            var linkTag = link ? "/a" : "";¶            return By.XPath($"//table[contains(@id,'{tableName}')]/tbody/tr[{parentRow}]/following-sibling::tr/td[2]/table/tbody/tr[{row}]/td[{column}]{linkTag}{postXPath}");¶        }¶¶¶        /// <summary>¶        /// Creates a By for all rows in a table¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="postXPath">post pends xpath</param>¶        /// <returns>a By object</returns>¶        public static By GetTableRowsXPath(string tableName, string postXPath = "")¶        {¶            return By.XPath($"//table[contains(@id,'{tableName}')]/tbody/tr{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a By for all cells in a given row of table¶        /// </summary>¶        /// <param name="tableName">the name of the table</param>¶        /// <param name="row">the row</param>¶        /// <param name="postXPath">post pends xpath</param>¶        /// <returns>a By object</returns>¶        public static By GetTableCellsXPath(string tableName, int row, string postXPath = "")¶        {¶            return By.XPath($"//table[contains(@id,'{tableName}')]/tbody/tr[{row}]/td{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a by of the element with the given text¶        /// </summary>¶        /// <param name="elementText">The text in the element</param>¶        /// <param name="tag">the type of tag : span, input, button</param>¶        /// <param name="contains">partial text</param>¶        /// <returns>a By object</returns>¶        public static By ByTextXPath(string elementText, string tag = "*", bool contains = false, string postXPath ="")¶        {¶            if (contains)¶                return By.XPath($"//{tag}[contains(text(),'{elementText}')]{postXPath}");¶            return By.XPath($"//{tag}[text()='{elementText}']{postXPath}");¶        }¶¶        /// <summary>¶        /// Creates a WebLocator of the element with the given text¶        /// </summary>¶        /// <param name="elementText">The text in the element</param>¶        /// <param name="tag">the type of tag : span, input, button</param>¶        /// <param name="contains">partial text</param>¶        /// <returns>a WebLocator object</returns>¶        public static IWebLocator LocatorByTextXPath(string elementText, string tag = "*", bool contains = false, string postXPath = "") =>¶          WebLocator.L($"XPath for \"{elementText}\"", ByTextXPath(elementText, tag, contains, postXPath));¶¶        /// <summary>¶        /// Creates a WebLocator of the element using two parts with and "contains"¶        /// </summary>¶        /// <param name="part1">the first part to search for</param>¶        /// <param name="part2">the second part to search for</param>¶        /// <param name="tag">the type of tag: span, input, button</param>¶        /// <param name="attribute">the attribute type of the element</param>¶        /// <param name="postXPath">appended xpath at the end</param>¶        /// <returns></returns>¶        public static IWebLocator LocatorDoubleContains(string part1, string part2, string tag = "*", string attribute = "id", string postXPath = "")¶        {¶            return WebLocator.L($"XPath with double ")
Diff(DELETE,"{attribute")
Diff(INSERT,"contains: //{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath")
Diff(EQUAL,"}", By.XPath($"//{tag}[contains(@{attribute},'{part1}') and contains(@{attribute},'{part2}')]{postXPath}"));¶        }¶¶        /// <summary>¶        /// Creates a WebLocator with the given XPath and index¶        /// </summary>¶        /// <param name="xpath">the full XPath to use</param>¶        /// <param name="index">index of WebLocator</param>¶        /// <param name="postXpath">appended xpath at the end</param>¶        /// <returns>a WebLocator object</returns>¶        public static IWebLocator LocatorForXpath(string xpath, string index = "", string postXpath = "")¶        {¶            if (!string.IsNullOrEmpty(index))¶                return WebLocator.L($"Custom XPath")
Diff(INSERT,": ({xpath})[{index}]{postXpath}")
Diff(EQUAL,"", By.XPath($"({xpath})[{index}]{postXpath}"));¶            return WebLocator.L($"Custom XPath")
Diff(INSERT,": {xpath}")
Diff(EQUAL,"", By.XPath(xpath));¶        }¶¶        /// <summary>¶        /// Return a By for a table cell¶        /// </summary>¶        /// <param name="attributeValue">Table tag attribute value</param>¶        /// <param name="cellValue">Table tag cell value</param>¶        /// <param name="attribute">Table tag attribute : id, class</param>¶        /// <param name="linkAttributeValue">Link tag attribute value</param>¶        /// <param name="linkAttribute">Link tag attribute : title, id</param>¶        /// <param name="secondCellValue">Table tag cell value</param>¶        /// <returns></returns>¶        public static By GetTableByCellValueXPath(string attributeValue, string cellValue, string attribute = "id", string linkAttributeValue = "", string linkAttribute = "title", string secondCellValue = "")¶        {¶            var linkPath = string.IsNullOrEmpty(linkAttributeValue) ? "" : $"//a[contains(@{linkAttribute},'{linkAttributeValue}')]";¶            var cellPath = string.IsNullOrEmpty(secondCellValue) ? "" : $"//following-sibling::td [contains(text(),'" + secondCellValue + "')]";¶            return By.XPath($"//table[contains(@{attribute},'{attributeValue}')]//tbody//tr//td[contains(text(),'{cellValue}')]{cellPath}//parent::tr{linkPath}");¶        }¶¶        /// <summary>¶        /// Identify the element by using weblocator¶        /// </summary>¶        /// <param name="attributeValue">Table tag attribute value</param>¶        /// <param name="cellValue">Table tag cell value</param>¶        /// <param name="attribute">Table tag attribute : id, class</param>¶        /// <param name="linkAttributeValue">Link tag attribute value</param>¶        /// <param name="linkAttribute">Link tag attribute : title, id</param>¶        /// <param name="secondCellValue">Table Second tag attribute value</param>¶        /// <returns></returns>¶        public static IWebLocator LocatorByTableXPath(string attributeValue, string cellValue, string attribute = "id", string linkAttributeValue = "", string linkAttribute = "title", string secondCellValue = "") =>¶           WebLocator.L($"XPath for \"{attributeValue}\"", GetTableByCellValueXPath(attributeValue, cellValue, attribute, linkAttributeValue, linkAttribute, secondCellValue));¶¶")
Diff(INSERT,"        /// <summary>¶        /// Identify the element by using CSS selector¶        /// </summary>¶        /// <param name="secondElement"></param>¶        /// <param name="attribute"></param>¶        /// <param name="value"></param>¶        /// <param name="firstElement"></param>¶        /// <returns></returns>¶")
Diff(EQUAL,"        public static By ByCSS(string secondElement, string attribute, string value, string firstElement = "")¶        {¶            string element = string.IsNullOrEmpty(firstElement) ? $"{secondElement}" : $"{firstElement} {secondElement}";¶            return By.CssSelector($"{element}[{attribute}='{value}']");¶        }¶¶        ")
Diff(DELETE,"public static IWebLocator LocatorByCSS(string secondElement, string attribute, string value, string firstElement = "") =>¶            WebLocator.L($"CSS for \"{secondElement}\"", ByCSS(secondElement, attribute, value, firstElement")
Diff(INSERT,"/// <summary>¶        /// Create a By of the element using CSS selector¶        /// </summary>¶        /// <param name="secondElement"></param>¶        /// <param name="attribute"></param>¶        /// <param name="value"></param>¶        /// <param name="firstElement"></param>¶        /// <returns></returns>¶        public static IWebLocator LocatorByCSS(string secondElement, string attribute, string value, string firstElement = "") =>¶            WebLocator.L($"CSS for \"{secondElement}\"", ByCSS(secondElement, attribute, value, firstElement));¶¶        /// <summary>¶        /// Identify the element by using name locator¶        /// </summary>¶        /// <param name="elementName"></param>¶        /// <returns></returns>¶        public static By ByName(string elementName)¶        {¶            return By.Name($"{elementName}");¶        }¶¶        /// <summary>¶        /// Create a By of the element using Name¶        /// </summary>¶        /// <param name="elementName"></param>¶        /// <returns></returns>¶        public static IWebLocator LocatorByName(string elementName) =>¶            WebLocator.L($"XPath for \"{elementName}\"", ByName(elementName));¶¶        public IWebLocator PartialLinkText(string linkName) =>¶         WebLocator.L($"XPath for \"{linkName}\"", By.PartialLinkText(linkName")
Diff(EQUAL,"));¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DisplayStaticBase.cs)
Diff(EQUAL,"{¶    public class StaffPageObject : NavigationBase¶    {¶        public StaffPageObject(IWebDriver driver, IAsiWebContext context) : base(driver, context) { }¶¶        /**Variables**/¶¶        public By StaffPageLoaded => By.CssSelector("input[id$=_SearchTerms]");¶        public By UserMessage => By.XPath("//*[@class='AsiError']");¶        public By MobilPhoneField => By.XPath("//input[contains(@id,'MobilePhone')]");¶        public By EditIcon => By.XPath("//*[contains(@class,'sysicon sysicon-edit')]");¶        public By SaveAndClose => By.XPath("//input[contains(@title,'Save & Close')]");¶        public By Save => By.XPath("//input[contains(@title,'Save')]");¶        public By SearchFieldBox => By.XPath("//div[@id='SimpleSearchBlock']//input[@type='text' and contains(@id,'SearchTerms')]");¶        public By CancelButton => By.XPath("//*[contains(@title,'Cancel')]");¶        public By EditButton => By.XPath("//*[contains(@id,'EditMenuItem')]");¶        public By CancelRegisterMyselfButton => By.XPath("//input[contains(@value,'Cancel')]");¶        //needs refactoring¶        public By Edit => By.XPath("//form/div[2]/div/main/div[2]/div/div/div[4]/div/div/div/div[1]/div[2]/div/div/div[1]/div/div[3]");¶        //needs refactoring¶        public By EventsCheckBox => By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div[1]/div[2]/div/div/div[1]/div[2]/div[2]/div[1]/span/input");¶        public By MainPanel => By.XPath("//*[contains(@id,'MainPanel')]");¶        //needs refactoring¶        public By ContactsCheckBox => By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div[1]/div[2]/div/div/div[1]/div[2]/div[1]/div[1]/span/input");¶        public List<SiteList> siteList;¶¶        /**Methods**/¶        public void DisplayDatesUsingDayFirst()¶        {¶¶            SideMenuSettings.GoToAboutImis();¶            var expirationDate = By.CssSelector("span[id$=_ExpirationValue]");¶            Wait.ExpectedCondition(expirationDate, WaitExpectedCondition.ElementIsVisible);¶            VerifyTextIsDisplayed(driver.FindElement(expirationDate), "31/12/3000");¶        }¶        public void EnglishTranlsationOptionRespectsDefaultCulture(string selectedEnglishCulture)¶        {¶            var englishLanguageOptions = driver.FindElement(By.CssSelector("select.LanguageSelector option[value^='en']"));¶            StringAssert.")
Diff(INSERT,"Are")
Diff(EQUAL,"Equal")
Diff(DELETE,"s")
Diff(INSERT,"IgnoringCase")
Diff(EQUAL,"(selectedEnglishCulture")
Diff(DELETE,".ToLower()")
Diff(EQUAL,", englishLanguageOptions.GetAttribute("value")")
Diff(DELETE,".ToLower()")
Diff(EQUAL,");¶        }¶¶        public void SetSystemCulture(string p1)¶        {¶            var language = string.IsNullOrEmpty(p1) ? "English (Australian)" : p1;¶¶            Wait.ExpectedCondition(StaffPageLoaded, WaitExpectedCondition.ElementIsVisible);¶            if (!VerifyTextIsDisplayedBool(Body, "Communities"))¶            {¶                SideMenuSettings.GoToSettings();¶                SideMenuSettings.GoToOrganization();¶            }¶            else¶            {¶                SideMenuSettings.GoToOrganization();¶            }¶            if (language.Equals("Default"))¶            {¶                // radio button not clickable due to overlap with label, so click the label instead¶                var displayCultureRadioSelector = By.CssSelector("label[for$=_DisplayCultureRadioButtonList_0]");¶                Wait.ExpectedCondition(displayCultureRadioSelector, WaitExpectedCondition.ElementIsVisible);¶                driver.FindElement(displayCultureRadioSelector).Click();¶            }¶            else¶            {¶                // select to use the organization culture¶                // radio button not clickable due to overlap with label, so click the label instead¶                var displayCultureRadioSelector = By.CssSelector("label[for$=_DisplayCultureRadioButtonList_1]");¶                Wait.ExpectedCondition(displayCultureRadioSelector, WaitExpectedCondition.ElementIsVisible);¶                driver.FindElement(displayCultureRadioSelector).Click();¶                // select English (Australia) from the dropdown¶                var cultureDropdownSelector = "select[id$=_DefaultCultureDropDown]";¶                Wait.ExpectedConditionsElementToBeClickable(By.CssSelector(cultureDropdownSelector));¶                //ExplicitWait(100);¶                Select(By.CssSelector(cultureDropdownSelector), language);¶            }¶            driver.FindElement(By.CssSelector("input[id$=_SaveButton]")).Click(); // save¶            ExplicitWait(100);¶            SettingsPageObject.ClearCache();¶        }¶¶        public void ValidateTheContentTypes()¶        {¶            SideMenu.GoToRiSE();¶            SideMenuRiSe.GoToMaintenance();¶            SideMenuRiSe.GoToContentTypes();¶            Click(EditButton);¶            SwitchFrame("ObjectBrowserDialog");¶            VerifyTextIsDisplayed(MainPanel, "Properties");¶            Click(CancelButton);¶            DefaultFrame();¶        }¶¶        public void ValidateContentDesigner()¶        {¶            SideMenu.GoToRiSE();¶            SideMenuRiSe.GoToPageBuilder();¶            SideMenuRiSe.GoToManageContent();¶            Click(EditButton);¶            SwitchFrame("ObjectBrowserDialog");¶            VerifyTextIsDisplayed(Body, "Properties");¶            Click(CancelButton);¶            DefaultFrame();¶        }¶¶        public void verifyLoginError()¶        {¶            VerifyTextIsDisplayed(UserMessage, "The username or password you entered is incorrect.");¶        }¶¶        public void VerifyMobilePhoneTxtFieldChanges()¶        {¶            Enter(SearchFieldBox, "Versaton");¶            Enter(SearchFieldBox, Keys.Enter);¶            Click(By.PartialLinkText("Versaton"));¶            Click(EditIcon);¶            SwitchFrame("GenericWindow");¶            ExplicitWait(3000);¶            string BeforeText = GetLocatorValue(MobilPhoneField);¶            Clear(MobilPhoneField);¶            Enter(MobilPhoneField, "2144757896");¶            ExplicitWait(3000);¶            string AfterText = GetLocatorValue(MobilPhoneField);¶            Assert.AreNotEqual(BeforeText, AfterText);¶            Click(SaveAndClose);¶        }¶¶        public void VerifyMessage(string message)¶        {¶            VerifyTextIsDisplayed(Body, message);¶        }¶¶        public void VerifyMessage(Table table)¶        {¶            siteList = table.CreateSet<SiteList>().ToList<SiteList>();¶            foreach (SiteList e in siteList)¶            {¶                VerifyTextIsDisplayed(Body, e.message);¶            }¶        }¶¶        public void AddProduct(string product)¶        {¶            //Navigate to shop page directly¶            Navigation.GoToSite("MBRR", "Shop/iCore/Store/StoreLayouts/Store_Home.aspx?hkey=2de73a64-ae57-4dbf-963f-a66e8d4137b6");¶            //Search for product¶            Enter(SearchFieldBox, product);¶            Enter(SearchFieldBox, Keys.Enter);¶            //Verify product is displayed¶            VerifyTextIsDisplayed(Body, product);¶            //Click on product¶            Click(By.PartialLinkText(product));¶        }¶¶        public void VerifyMessageNotBeingDisplayed(string message)¶        {¶            VerifyTextIsNotDisplayed(Body, message);¶        }¶¶        public void VerifyProductInAccount(string message)¶        {¶            AccountPageObject.NavigateToAccount_TransactionsPage();¶            VerifyTextIsDisplayed(Body, message);¶        }¶¶        public void ValidateNoAccessPage()¶        {¶            Navigation.GoToSite("/mbrr/blah.aspx");¶            VerifyTextIsDisplayed(ErrorBody, " HTTP 404");¶            //Need to go back to logout¶            Navigation.Back();¶        }¶¶        public void ValidatePage(Table table)¶        {¶            siteList = table.CreateSet<SiteList>().ToList<SiteList>();¶            foreach (SiteList a in siteList)¶            {¶                Navigation.GoToSite(a.Site);¶                VerifyTextIsDisplayed(Body, a.message);¶            }¶        }¶¶        public void VerifyTranslationPage()¶        {¶            Navigation.GoToSite("Staff", "Settings/Language_translation/Translation_Cultures/iCore/Translation/Cultures.aspx?hkey=31e67617-ce0d-407a-b57f-35636b5e9eee");¶            Click(By.PartialLinkText("Versions"));¶            VerifyTextIsDisplayed(Body, "List of versions");¶            Click(By.PartialLinkText("Return to list of cultures"));¶            VerifyTextIsDisplayed(Body, "Translation cultures");¶        }¶¶        public void VerifyItemsOnNonMemberPage()¶        {¶            //Verify items on item page¶            Navigation.GoToSite("/ItemDetail?iProductCode=FRKEY&Category=GIFTS&WebsiteKey=e7590042-1672-4d0f-a20c-335e0bf62de2");¶            VerifyTextIsDisplayed(Body, "24.99");¶            VerifyTheElementIsNotDisplayed(Edit);¶            //Verify event items on page¶            Navigation.GoToSite("/iSamples/MemberR/Event_Display.aspx?EventKey=WEBDEC&WebsiteKey=e7590042-1672-4d0f-a20c-335e0bf62de2");¶            VerifyTextIsDisplayed(Body, "350.00");¶            VerifyTheElementIsNotDisplayed(CancelRegisterMyselfButton);¶        }¶¶        public void RefreshSixTimes(string message)¶        {¶            for (int cycle = 0; cycle <= 6; cycle++)¶            {¶                if (VerifyTextIsDisplayedBool(Body, message))¶                {¶                    break;¶                }¶                else¶                {¶                    Navigation.Refresh();¶                    ExplicitWait(2000);¶                    VerifyTextIsNotDisplayed(Body, "There was a problem loading this area");¶                }¶            }¶        }¶¶        public void SiteIndexing()¶        {¶            //navigate to Find Events¶            Navigation.GoToSite("Staff", "Events/Find_events/iCore/Events/Events_List.aspx?hkey=dcdc7569-3b80-45bb-a311-f199898b6011");¶            VerifyTextIsNotDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶            //Navigate to Site indexing¶            Navigation.GoToSite("Staff", "Settings/RiSE/Indexing/iCore/System_Settings/Indexing_Preferences.aspx");¶            VerifyTextIsDisplayed(Body, "Indexing preferences");¶            //Uncheck events¶            FillRadioButton(EventsCheckBox);¶            //Click Save¶            Click(Save);¶            //Verify Message¶            VerifyTextIsDisplayed(Body, "Settings successfully updated.");¶            //navigate to Find Events¶            Navigation.GoToSite("Staff", "Events/Find_events/iCore/Events/Events_List.aspx?hkey=dcdc7569-3b80-45bb-a311-f199898b6011");¶            //Need to refresh 6 times for changes to take place¶            RefreshSixTimes("No search results match your specified criteria. Please try again with fewer or different criteria.");¶            VerifyTextIsDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶            //Navigate to Site indexing¶            Navigation.GoToSite("Staff", "Settings/RiSE/Indexing/iCore/System_Settings/Indexing_Preferences.aspx");¶            VerifyTextIsDisplayed(Body, "Indexing preferences");¶            //check events¶            FillRadioButton(EventsCheckBox);¶            //Click Save¶            Click(Save);¶            //Verify Message¶            VerifyTextIsDisplayed(Body, "Settings successfully updated.");¶            //navigate to Find Events¶            Navigation.GoToSite("Staff", "Events/Find_events/iCore/Events/Events_List.aspx?hkey=dcdc7569-3b80-45bb-a311-f199898b6011");¶            //Refresh 6 times¶            RefreshSixTimes("Charity Golf Tournament");¶            VerifyTextIsNotDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶        }¶¶        public void VerifySiteIndexContactsPage()¶        {¶            //Navigate to Dominque Barclay page¶            Enter(SearchFieldBox, "Dominique Barclay");¶            Enter(SearchFieldBox, Keys.Enter);¶            //Refresh 6 times¶            RefreshSixTimes("Dominique");¶            VerifyTextIsNotDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶            //Navigate to Site indexing¶            Navigation.GoToSite("Staff", "Settings/RiSE/Indexing/iCore/System_Settings/Indexing_Preferences.aspx");¶            VerifyTextIsDisplayed(Body, "Indexing preferences");¶            //Uncheck events¶            FillRadioButton(ContactsCheckBox);¶            //Click Save¶            Click(Save);¶            //Verify Message¶            VerifyTextIsDisplayed(Body, "Settings successfully updated.");¶            //Navigate to Dominque Barclay page¶            Enter(SearchFieldBox, "Dominique Barclay");¶            Enter(SearchFieldBox, Keys.Enter);¶            //Need to refresh 6 times for changes to take place¶            RefreshSixTimes("No search results match your specified criteria. Please try again with fewer or different criteria.");¶            VerifyTextIsDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶            //Navigate to Site indexing¶            Navigation.GoToSite("Staff", "Settings/RiSE/Indexing/iCore/System_Settings/Indexing_Preferences.aspx");¶            VerifyTextIsDisplayed(Body, "Indexing preferences");¶            //check events¶            FillRadioButton(ContactsCheckBox);¶            //Click Save¶            Click(Save);¶            //Verify Message¶            VerifyTextIsDisplayed(Body, "Settings successfully updated.");¶            //Navigate to Dominque Barclay page¶            Enter(SearchFieldBox, "Dominique Barclay");¶            Enter(SearchFieldBox, Keys.Enter);¶            //Refresh 6 times¶            RefreshSixTimes("Dominique");¶            VerifyTextIsNotDisplayed(Body, "No search results match your specified criteria. Please try again with fewer or different criteria.");¶        }¶¶    }¶}")
<> ../iMIS/test/Selenium/SeleniumCore/PageObjects/Navigation/Staff/StaffPageObject.cs)
Diff(EQUAL,"{¶    [Binding]¶    public class AnnualConferencePageObject : Base¶    {¶        public AnnualConferencePageObject(IWebDriver driver, IAsiWebContext context) : base(driver, context) { }¶¶        /**Variables**/¶¶        By EventDetails => By.PartialLinkText("Event Details");¶        By AnnualConferenceBody => By.XPath("//*[contains(@id,'masterContentArea')]");¶¶¶        /**Methods**/¶¶        public void GoToEventDetails()¶        {¶            Click(EventDetails);¶            VerifyTextIsDisplayed(AnnualConferenceBody, "Conference Program");¶        }¶¶        public void GoTo404Page()¶        {¶            Navigation.GoToSite("iMISAnnualConference", "iSamples/SharedContent/404-Page-Not-Found.aspx");¶            driver.WaitForPageLoaded();¶        }¶¶        public void VerifyPropertiesForEventDetailsPage()¶        {¶            // verify title uses defined page suffix¶            StringAssert.Contains("- iMIS Annual Conference", driver.Title);¶¶            // verify url does not contain navigation path¶            StringAssert.Contains("/iMISAnnualConference/iSamples/AnnualConference/Event_Details.aspx?hkey=", driver.Url);¶¶            // verify the site is using the defined custom favicon¶            var faviconTag = driver.FindElement(By.XPath("//link[@rel='shortcut icon']"));¶            StringAssert.Contains("/images/samples/icons/imis_favicon_purple.ico", faviconTag.GetAttribute("href"));¶¶            // verify canonical link¶            var canonicalTag = driver.FindElement(By.XPath("//link[@rel='canonical']"));¶            StringAssert.Contains("/iMISAnnualConference/iSamples/AnnualConference/Event_Details.aspx", canonicalTag.GetAttribute("href"));¶        }¶¶        public void VerifyNoIndexTagIsPresent()¶        {¶            var faviconTag = driver.FindElement(By.XPath("//meta[@name='robots']"));¶            StringAssert.")
Diff(INSERT,"Are")
Diff(EQUAL,"Equal")
Diff(DELETE,"s")
Diff(INSERT,"IgnoringCase")
Diff(EQUAL,"("noindex", faviconTag.GetAttribute("content")")
Diff(DELETE,".ToLower()")
Diff(EQUAL,");¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/PageObjects/Navigation/AnnualConference/AnnualConferencePageObject.cs)
Diff(EQUAL,"/*¶ * Purpose of this class is to hold most of the Finance code (Test Script verbage) in a single class¶ * So that the Step Defintion files will just call these certain methods¶ * This will be perfect for resuability in case certain stepdefintion files reuse the same steps¶ * ¶ * Author Joel Musita¶ */¶namespace Asi.Selenium.Core.PageObject¶{¶    public class FinancePageObject : FinanceBase¶    {¶        public FinancePageObject(IWebDriver driver, IAsiWebContext context) : base(driver, context) { }¶¶¶¶        public By ShoppingCartButton => By.XPath("//a[contains(@id,'NavigationLink')]");¶        public By PrePaymentCheckbox => By.XPath("//*[contains(@name,'PrePaymentCheckBox')]");¶        public By PrePaymentAmount => By.XPath("//*[contains(@name,'txtPaymentAmountEdit')]");¶        public By InvoiceNumberTextBox => By.XPath("//input[contains(@name,'TextBox1')]");¶        public By UnitPriceTextBox => By.XPath("//*[contains(@name,'UnitPriceTextbox')]");¶        public By InvoiceNumber => By.PartialLinkText("44");¶        public By UpdateButton => By.XPath("//*[contains(@title,'Update')]");¶        public By GeneralLookupTable => By.XPath("//select[contains(@id,'GenTablesList')]");¶        public By GLAccountNumber => By.XPath("//input[contains(@id,'ctl28_EditButton')]");¶        public By Description => By.XPath("//input[contains(@id,'Description')]");¶        public By AdjustButton => By.XPath("//input[contains(@value,'Adjust Invoice')]");¶        public By ContinueButton => By.XPath("//input[contains(@value,'Continue')]");¶        public By SubmitButton => By.XPath("//input[contains(@value,'Submit')]");¶        public By AdjustmentType => By.XPath("//select[contains(@name,'AdjustmentTypeList')]");¶        public By ReasonTextBox => By.XPath("//*[contains(@name,'AdjustmentReasonComments')]");¶        public By PayInvoiceButton => By.XPath("//input[contains(@value,'Pay Invoice')]");¶        public By AdjustPayment => By.XPath("//input[contains(@value,'Adjust Payment')]");¶        public By Submit => By.XPath("//input[contains(@value,'Submit')]");¶        public By CloseButton => By.XPath("//*[contains(@title,'Close')]");¶        public By BeginDate => By.XPath("//form/div[2]/div[2]/div[3]/div[2]/div[2]/div/div[2]/div[1]/div/div/div[1]/div/div/div/div/input[1]");¶        public By EndDate => By.XPath("//form/div[2]/div[2]/div[3]/div[2]/div[2]/div/div[2]/div[1]/div/div/div[2]/div/div/div/div/input[1]");¶        public By CreateExportButton => By.XPath("//*[contains(@title,'Create Export File')]");¶        public By OkButton => By.XPath("//*[contains(@value,'OK')]");¶        public By Input4 => By.XPath("//input[contains(@name,'Input4')]");¶        public By FirstResult => By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div/div[2]/div/div/div[2]/div[1]/div[2]/div[2]/table/tbody/tr[1]/td[1]/a");¶        public By PostSelected => By.XPath("//*[contains(@title,'Post Selected')]");¶        public By SelectItem => By.XPath("//a[contains(@title,'Select this item')]");¶        public By PieChart => By.XPath("//img[contains(@id,'PieChart')]");¶        public By KeywordSearch => By.XPath("//img[contains(@id,'SearchTerms')]");¶        public By ExportButton => By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div/div/div/div/fieldset/div[2]/div/div[1]/div[2]/div[1]/div[3]/div/div/button");¶        public By SetStatusButton => By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div/div/div/div/fieldset/div[2]/div/div[2]/div/a");¶¶¶        /**Methods**/¶¶        public void BatchPosting()¶        {¶            SideMenu.GoToFinance();¶            SideMenuFinance.GoToBatches();¶            VerifyElementIsDisplayed(PostSelected);¶            VerifyElementIsDisplayed(ExportButton);¶            VerifyElementIsDisplayed(SetStatusButton);¶        }¶¶        public void VerifyGLAccount()¶        {¶            SideMenu.GoToFinance();¶            SideMenuFinance.GoToClosingProcedures();¶            SideMenuFinance.GoToGeneralLedgerExports();¶            VerifyTextIsDisplayed(Body, "Begin date");¶            VerifyTextIsDisplayed(Body, "End date");¶            VerifyTextIsDisplayed(Body, "Export log");¶            VerifyTextIsDisplayed(Body, "Create export file");¶            Enter(BeginDate, "10/1/2019");¶            Enter(EndDate, "9/30/2019");¶            Click(CreateExportButton);¶            AcceptAlert();¶            VerifyTextIsDisplayed(Body, "Invalid date range");¶            Clear(BeginDate);¶            Enter(BeginDate, "09/1/2019");¶            Click(CreateExportButton);¶            AcceptAlert();¶            //Takes a while for the modal to pop up¶            Wait.ExplicitWait(10000);¶            ActiveElement();¶            Click(OkButton);¶            DefaultFrame();¶            VerifyTextIsDisplayed(Body, "9/1/2019");¶            VerifyTextIsDisplayed(Body, "9/30/2019");¶        }¶¶        public void ReversePayment()¶        {¶            //navigating to the site¶            Navigation.GoToSite("/iCore/Finance/Payments/Find_Payments/iCore/Finance/Payments.aspx?hkey=de5927de-4cbe-4e0a-ad77-85472bd1be3b");¶            //Search User¶            Enter(Input4, "Alex Morgan");¶            Enter(Input4, Keys.Enter);¶            //Click first result¶            Click(FirstResult);¶            VerifyTextIsDisplayed(Body, "Payment detail");¶            VerifyTextIsDisplayed(Body, "Payment ID");¶            VerifyTextIsDisplayed(Body, "Payment date");¶            VerifyTextIsDisplayed(Body, "Payment method");¶            VerifyTextIsDisplayed(Body, "Reference");¶            VerifyTextIsDisplayed(Body, "Amount");¶            VerifyTextIsDisplayed(Body, "Payer");¶            VerifyTextIsDisplayed(Body, "Batch");¶            VerifyTextIsDisplayed(Body, "Financial entity");¶            VerifyTextIsDisplayed(Body, "Status");¶            VerifyTextIsDisplayed(Body, "Payment category");¶            // Refund the Payment¶            Click(AdjustPayment);¶            Select(AdjustmentType, "Reverse the Payment");¶            //Click Submit Button¶            Click(Submit);¶            //Verify it got reversed¶            VerifyTextIsDisplayed(Body, "-25.49");¶        }¶¶        public void VerifyCampaignPieChart()¶        {¶            bool decision;¶            SideMenu.GoToMarketing();¶            SideMenuMarketing.GoToCampaign();¶            SideMenuMarketing.GoToDefineCampaigns();¶            ExplicitWait(2000);¶            Click(SelectItem);¶            IWebElement ImageFile = driver.FindElement(PieChart);¶            bool ImagePresent = (bool)((IJavaScriptExecutor)driver).ExecuteScript("return arguments[0].complete && typeof arguments[0].naturalWidth != \"undefined\" && arguments[0].naturalWidth > 0", ImageFile);¶            if (ImagePresent)¶            {¶                decision = true;¶                Assert.")
Diff(DELETE,"Is")
Diff(EQUAL,"True(decision);¶            }¶            else¶            {¶                decision = false;¶                Assert.")
Diff(DELETE,"Is")
Diff(EQUAL,"True(decision);¶            }¶        }¶¶        public void ReverseInvoiceShippingHandling()¶        {¶            Navigation.GoToSite("/ItemDetail?iProductID=ea38f919-2b53-4a0a-bedf-49a4d5b88064&Class=09c61659-a500-41dc-ac03-4dd71a7120b7&WebsiteKey=4243d9e2-e91e-468c-97c2-2046d70c1e1a");¶            Payment.VerifyProductTitle("Building a Strong Team");¶            Payment.AddToCart();¶            Payment.VerifyShipping_Handling("1.00", "2.00");¶            //     CreditCardVisa.CreditCardPayment();¶            AccountPageObject.NavigateToAccount_TransactionsPage();¶            transactionsPageObject.verifyClosedInvoice();¶            driver.FindElement(By.XPath("//div/div[1]/div[2]/div/div[1]/div[2]/div[3]/div/div/div/div/div/div[7]/div[1]/div[2]/div/div/div[2]/div[1]/div/div[2]/table/tbody/tr/td[1]/a")).Click();¶            InvoicePageObject.ReverseInvoice();¶            AccountPageObject.NavigateToAccount_TransactionsPage();¶            transactionsPageObject.verifyClosedInvoice();¶            transactionsPageObject.verifyClosedInvoiceText();¶        }¶¶        public void ReverseInvoiceGroupMember()¶        {¶            Enter(KeywordSearch, "Association CEO's Guide to Improving Organizational Performance");¶            Enter(KeywordSearch, Keys.Enter);¶            Click(By.PartialLinkText("Association CEO's Guide"));¶            Payment.VerifyProductTitle("Association CEO's Guide");¶            Payment.AddToCart();¶            //   CreditCardVisa.CustomCreditCardPayment();¶            AccountPageObject.NavigateToAccount();¶            AccountPageObject.NavigateToAccount_TransactionsPage();¶            transactionsPageObject.verifyClosedInvoice();¶            driver.FindElement(By.XPath("//div/div[1]/div[2]/div[3]/div/div/div/div/div/div[7]/div[1]/div[2]/div/div/div[2]/div[1]/div/div[2]/table/tbody/tr/td[1]/a")).Click();¶            InvoicePageObject.ReverseInvoice();¶            AccountPageObject.NavigateToAccount_TransactionsPage();¶            transactionsPageObject.verifyClosedInvoiceText();¶        }¶¶        public void VerifyPrePayment()¶        {¶            Click(ShoppingCartButton);¶            FillRadioButton(PrePaymentCheckbox);¶            Clear(PrePaymentAmount);¶            Enter(PrePaymentAmount, "22.00");¶        }¶¶        public void EditPaymentInvoice()¶        {¶            SideMenu.GoToFinance();¶            SideMenuFinance.GoToInvoices();¶            Enter(InvoiceNumberTextBox, "44");¶            Enter(InvoiceNumberTextBox, Keys.Enter);¶            Click(InvoiceNumber);¶            Click(PayInvoiceButton);¶        }¶¶        public void RefundPayment()¶        {¶            SideMenu.GoToFinance();¶            SideMenuFinance.GoToPayCentral();¶            SideMenuFinance.GoToFindPayments();¶            Click(By.XPath("//form/div[2]/div[2]/div[3]/div[3]/div/div/div/div[1]/div/div/div/div[2]/div/div/div[2]/div[2]/div[2]/table/tbody/tr[1]/td[1]/a"));¶            SwitchFrame("GenericWindow");¶            Click(AdjustPayment);¶            Click(Submit);¶            VerifyTextIsDisplayed(Body, "Refund");¶            DefaultFrame();¶            Click(CloseButton);¶        }¶¶        public void EditGLAccount()¶        {¶            SideMenu.GoToSettings();¶            SideMenuSettings.GoToFinance();¶            SideMenuSettings.GoToGLAccounts();¶            Click(GLAccountNumber);¶            Clear(Description);¶            Enter(Description, "Texas State Sales Tax");¶            Click(UpdateButton);¶            SideMenuSettings.GoToFinance();¶            SideMenuSettings.GoToGeneralLookupTables();¶            Select(GeneralLookupTable, "GL_ACCOUNT");¶            Click(GLAccountNumber);¶            Clear(Description);¶            Enter(Description, "State Sales Tax");¶            Click(UpdateButton);¶            SideMenuSettings.GoToFinance();¶            SideMenuSettings.GoToGLAccounts();¶        }¶¶        public void EditInvoiceItemPrice()¶        {¶            Navigation.GoToSite("/iCore/Finance/Order_Invoice_Detail.aspx?InvoiceId=217");¶            VerifyTextIsDisplayed(Body, "112.08");¶            VerifyTextIsDisplayed(Body, "Video - Creating a New Business");¶            VerifyTextIsDisplayed(Body, "Video - Is Fast Food Franchising for YOU!");¶            Click(AdjustButton);¶            Select(AdjustmentType, "Adjust prices");¶            Click(ContinueButton);¶            Enter(ReasonTextBox, "Adjusting price.");¶            Clear(UnitPriceTextBox);¶            Enter(UnitPriceTextBox, "60.00");¶            Tab(UnitPriceTextBox);¶            Click(UpdateButton);¶            VerifyTextIsDisplayed(Body, "60.00");¶            Click(SubmitButton);¶            VerifyTextIsDisplayed(Body, "Successfully submitted adjustments.");¶            VerifyTextIsDisplayed(Body, "134.39");¶            Click(PayInvoiceButton);¶            LoginPageObject.VerifyOnBehalfUser("Mary", "O'Conner");¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/PageObjects/Finance/FinancePageObject.cs)
Diff(EQUAL,"{¶    public class Authentication¶    {¶        private readonly IWebDriver _driver;¶        private IAsiWebContext _context;¶¶        private IWebLocator ProfileDropDown => WebLocator.L("ProfileDropDown", By.XPath("//*[contains(@id,'PartyName')]"));¶        private IWebLocator SignOut => WebLocator.L("SignOut", By.PartialLinkText("Sign out"));¶        public Authentication(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶        }¶¶        private ImisUser User(string name)¶        {¶            var user = new ImisUser(name, ")
Diff(DELETE,"new Console")
Diff(INSERT,"_context.")
Diff(EQUAL,"Logger());¶            user.Can(TestImis.With(_driver, _context));¶            return user;¶        }¶        /// <summary>¶        /// Logs the user out of any site¶        /// </summary>¶        public void LogOut(bool navigate =")
Diff(INSERT," true, bool waitForDropDown =")
Diff(EQUAL," true)¶        {¶            var user = User("LogOut");¶            if (navigate)¶            {¶                //Grabs the URL¶                string site = _driver.Url;¶                _driver.Navigate().GoToUrl(site);¶            }¶¶            if (")
Diff(DELETE,"user.AsksFor(Appeara")
Diff(INSERT,"waitForDropDown)¶                user.WaitsUntil(Existe")
Diff(EQUAL,"nce.Of(ProfileDropDown)")
Diff(DELETE,"))¶    ")
Diff(INSERT,",IsEqualTo.True());¶")
Diff(EQUAL,"            user.AttemptsTo(Click.On(ProfileDropDown));¶            user.AttemptsTo(Click.On(SignOut));¶        }¶¶")
Diff(INSERT,"        public void VerifyUserIsLoggedIn()¶        {¶            var user = User("LoggedInUser");¶            user.AttemptsTo(Waiting.InSeconds(3));¶            user.AttemptsTo(Click.On(ProfileDropDown));¶            user.AsksFor(Appearance.Of(SignOut)).Should().BeTrue();¶        }¶¶        public void VerifyLoggedInUserName(string expectedName)¶        {¶            var user = User("LoggedInUser");¶            user.AsksFor(Text.Of(ProfileDropDown)).Should().Contain(expectedName);¶        }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/Utilities/Authentication.cs)
Diff(EQUAL,"{¶    public static class ExtensionMethods¶    {¶        /// <summary>¶        ///     A generic extension method that aids in reflecting ¶        ///     and retrieving any attribute that is applied to an `Enum`.¶        /// </summary>¶        public static TAttribute GetAttribute<TAttribute>(this Enum enumValue)¶                where TAttribute : Attribute¶        {¶            return enumValue.GetType()¶                            .GetMember(enumValue.ToString())¶                            .First()¶                            .GetCustomAttribute<TAttribute>();¶        }¶¶        /// <summary>¶¶        /// </summary>¶        public static string GetDisplayName(this Enum enumValue)¶        {¶            return enumValue.GetAttribute<DisplayAttribute>().Name;¶        }¶¶")
Diff(INSERT,"        public static string GetFeatureDescription(this Enum enumValue)¶        {¶            var attr = enumValue.GetAttribute<FeatureAttribute>();¶            var description = attr.Description;¶            return description;¶        }¶¶        public static LicensePlatformData[] GetFeaturePlatform(this Enum enumValue)¶        {¶            var attr = enumValue.GetAttribute<FeatureAttribute>();¶            var platformData = attr.Platform;¶            return platformData;¶        }¶¶")
Diff(EQUAL,"        /// <summary>¶¶        /// </summary>¶        public static string GetEnumName<T>(this Enum enumValue)¶        {¶            return Enum.GetName(typeof(T), enumValue);¶        }¶¶        public static void WaitInSeconds(this IWebDriver driver, int seconds)¶        {¶            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(seconds);¶        }¶¶        public static string GetValue(this Table data, string key)¶        {¶            return data.Rows[0][key];¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/Utilities/ExtensionMethods.cs)
Diff(EQUAL,"{¶    public class AsiWebContext : IAsiWebContext¶    {¶        public AsiWebContext()¶        {¶            DataStorage = new Dictionary<string, object>();¶")
Diff(INSERT,"            Random = new Random();¶")
Diff(EQUAL,"        }¶")
Diff(DELETE,"")
Diff(EQUAL,"¶        public Uri BaseUrl { get; set; }¶        public string Website { get; set; }¶        public string UserName { get; set; }¶        public string Password { get; set; }¶        public string Token { get; set; }¶        public string LoggedInPartyId { get; set; }¶        public string SelectedPartyId { get; set; }¶        public Dictionary<string, object> DataStorage { get; set; }¶        public bool IsV10 { get; set; }¶        public bool IsLocalDev { get; set; }¶        public string AccountName { get; set; }¶        public string OnBehalfName { get; set; }¶        public int WaitMultiplier { get; set; }¶        public int AdditionalWaitInMiliseconds { get; set; }¶")
Diff(INSERT,"        public Uri LicenseUrl { get; set; }¶        public Random Random { get; set; }¶        public ILogger logger { get; set; }¶        public ILogger Logger() {¶            return logger?? new ConsoleLogger();¶        }")
Diff(EQUAL,"¶")
Diff(DELETE,"")
Diff(EQUAL,"        public void AddData(string key, object value)¶        {¶            DataStorage.Add(key, value);¶        }¶¶        public T GetData<T>(string key)¶        {¶            try¶            {¶                return (T)DataStorage[key];¶            }¶            catch (KeyNotFoundException)¶            {¶                return default(T);¶            }¶        }¶¶        public void UpsertData(string key, object value)¶        {¶            if (DataStorage.ContainsKey(key))¶                DataStorage.Remove(key);¶")
Diff(DELETE,"")
Diff(EQUAL,"            DataStorage.Add(key, value);¶        }")
Diff(INSERT,"¶¶        /// <summary>¶        ///  This method is used to populate website, username and password by specifying a role.¶        ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for users whose role matches¶        /// </summary>¶        /// <param name="site"></param>¶        /// <param name="UserNameValue"></param>¶        /// <param name="role"></param>¶        public void SetContextByRole(string site, string UserRole)¶        {¶            var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");¶            var userSelection = userList.Where(t => t.Role.Equals(UserRole));¶            var user = userSelection.ElementAt(Random.Next(userSelection.Count()));¶¶            Website = site;¶            UserName = user.UserName;¶            Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";¶¶        }¶¶        /// <summary>¶        ///  This method is used to populate website, username and password by specifying a role.¶        ///  Getting UserData in form of list from User.Json, Iterating through the list to get Username and Password for user whose name matches¶        /// </summary>¶        /// <param name="site"></param>¶        /// <param name="UserNameValue"></param>¶        /// <param name="name"></param>¶        public void SetContextByName(string site, string UserNameValue)¶        {¶            var userList = FileHelper.GetListFromJson<UserData>(@"Users.json");¶            var usersWithName = userList.Where(t => t.UserName.Equals(UserNameValue));¶            var user = new UserData();¶            if (usersWithName.Count() != 0)¶            {¶                user = usersWithName.ElementAt(0);¶            }¶¶            Website = site;¶            UserName = !string.IsNullOrEmpty(user.UserName) ? user.UserName : UserNameValue;¶            Password = !string.IsNullOrEmpty(user.Password) ? user.Password : "demo123";¶¶        }")
Diff(EQUAL,"¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/AsiWebContext.cs)
Diff(EQUAL,"{¶    public class ClickCommandButton : AsiAbstractWebTask¶    {¶        #region Constructors¶        ¶        private ClickCommandButton(CommandButtonBarButtons selectedButton)¶        {¶            SelectedButton = selectedButton;¶        }¶¶        private ClickCommandButton(CommandButtonBarButtons selectedButton, IWebLocator webLocator)¶        {¶            SelectedButton = selectedButton;¶            WebLocator = webLocator;¶        }¶¶        #endregion¶¶        #region Builder Methods¶¶        public static ClickCommandButton WithWebLocator(IWebLocator webLocator) => new ClickCommandButton(CommandButtonBarButtons.Custom, webLocator);¶        public static ClickCommandButton Save() => new ClickCommandButton(CommandButtonBarButtons.SaveButton);¶        public static ClickCommandButton Submit() => new ClickCommandButton(CommandButtonBarButtons.SubmitButton);¶        public static ClickCommandButton SaveAndNew() => new ClickCommandButton(CommandButtonBarButtons.SaveAndNewButton);¶        public static ClickCommandButton SaveAndClose() => new ClickCommandButton(CommandButtonBarButtons.SaveAndCloseButton);¶        public static ClickCommandButton SaveAs() => new ClickCommandButton(CommandButtonBarButtons.SaveAsButton);¶        public static ClickCommandButton Ok() => new ClickCommandButton(CommandButtonBarButtons.OkButton);¶        public static ClickCommandButton Continue() => new ClickCommandButton(CommandButtonBarButtons.ContinueButton);¶        public static ClickCommandButton Next() => new ClickCommandButton(CommandButtonBarButtons.NextButton);¶        public static ClickCommandButton Cancel() => new ClickCommandButton(CommandButtonBarButtons.CancelButton);¶        public static ClickCommandButton Delete() => new ClickCommandButton(CommandButtonBarButtons.DeleteButton);¶        public static ClickCommandButton Find() => new ClickCommandButton(CommandButtonBarButtons.FindButton);")
Diff(INSERT,"¶        public static ClickCommandButton Close() => new ClickCommandButton(CommandButtonBarButtons.CloseButton);")
Diff(EQUAL,"¶¶        public static IWebLocator ButtonLocator(CommandButtonBarButtons button) => ¶            DisplayStaticBase.LocatorByXPath(Enum.GetName(typeof(CommandButtonBarButtons),button), "input");¶¶        public ClickCommandButton AndExpectMessage()¶        {¶            ExpectMessage = true;¶            return this;¶        }¶¶        public ClickCommandButton AndUseJavaScript()¶        {¶            UseJavaScript = true;¶            return this;¶        }¶¶        #endregion¶¶        #region Properties¶¶        private CommandButtonBarButtons SelectedButton { get; set; }¶        private bool ExpectMessage { get; set; }¶        private bool UseJavaScript { get; set; }¶        private IWebLocator WebLocator { get; set; }¶        #endregion¶¶        #region Methods¶        ¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶")
Diff(DELETE,"¶")
Diff(EQUAL,"            var button = SelectedButton == CommandButtonBarButtons.Custom ? WebLocator : ButtonLocator(SelectedButton);¶¶            //Hover above the button before clicking¶")
Diff(DELETE,"            // jkh - added here, was missing some buttons. AsksFor does not wait by default.¶            user.WaitsUntil(Appearance.Of(button),IsEqualTo.True());¶")
Diff(EQUAL,"            user.AttemptsTo(Hover.Over(button));¶            if (UseJavaScript && user.AsksFor(Appearance.Of(button)))¶                user.AttemptsTo(JavaScriptClick.On(button));¶¶            if (user.AsksFor(Appearance.Of(button)))¶            {¶")
Diff(DELETE,"                // this is an extension to use Playwright rules of not forcing. Some Click.On's fail if we do this universally though.¶                // todo: bring back the force false¶")
Diff(EQUAL,"                user.AttemptsTo(Click.On(button));¶                if (!ExpectMessage ||¶                    (ExpectMessage && user.AsksFor(UserMessageState.HasAny())))¶                    return;¶            }¶            if (user.AsksFor(Appearance.Of(button)))¶                user.AttemptsTo(JavaScriptClick.On(button));¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new NotImplementedException();¶        }¶¶        #endregion¶¶        public enum CommandButtonBarButtons¶        {¶            Custom,¶            SubmitButton,¶            SaveButton,¶            SaveAndNewButton,¶            SaveAndCloseButton,¶            SaveAsButton,¶            OkButton,¶            ContinueButton,¶            NextButton,¶            CancelButton,¶            DeleteButton,¶")
Diff(DELETE,"")
Diff(EQUAL,"            FindButton")
Diff(INSERT,",¶            CloseButton")
Diff(EQUAL,"¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/ClickCommandButton.cs)
Diff(EQUAL,"{¶    public class Browse : AsiAbstractWebTask¶    {¶        #region Constructors¶¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        /// <param name="site">The target site.</param>¶        /// <param name="iMIsUrl">The target url object containing a v10 url and possibly a v100.</param>¶        private Browse(SitesToBrowse site, ImisUrl iMIsUrl)¶        {¶            ImisUrl = iMIsUrl;¶            Site = site;¶        }¶¶        /// <summary>¶        /// Private constructor.¶        /// (Use static builder methods to construct.)¶        /// </summary>¶        /// <param name="url">The target URL.</param>¶        private Browse(string url)¶        {¶            Url = url;¶            ImisUrl = new ImisUrl("");¶        }¶¶        #endregion¶¶        #region Properties¶¶        private ImisUrl ImisUrl { get; set; }¶¶        /// <summary>¶        /// The target Url.¶        /// </summary>¶        private string Url { get; set; }¶¶        #endregion¶¶        #region Builder Methods¶¶        /// <summary>¶        /// Constructs the Task object for the given URL.¶        /// </summary>¶        /// <param name="url">The full target URL, usually outside of iMIS.</param>¶        /// <returns></returns>¶        public static Browse ToUrl(string url) => new Browse(url);¶        public static Browse InImis(ImisUrl url, SitesToBrowse site) => new Browse(site, url);¶        public static Browse InImis(SitesToBrowse site) => new Browse(site, new ImisUrl(""));¶        public static Browse InImis(ImisUrl url, string siteUrl) => new Browse")
Diff(INSERT," ")
Diff(EQUAL,"((SitesToBrowse)Enum.Parse(typeof(SitesToBrowse), siteUrl.Replace(" ", ""), true),")
Diff(DELETE," ")
Diff(EQUAL,"url);¶        public static Browse InImis(ImisUrl url) => new Browse(SitesToBrowse.NotSet, url);¶        public static Browse InStaffSite(ImisUrl url) => new Browse(SitesToBrowse.Staff, url);¶        public static Browse InMemberSite(ImisUrl url) => new Browse(SitesToBrowse.Mbrr, url);¶        public static Browse InDonorSite(ImisUrl url) => new Browse(SitesToBrowse.Donor, url);¶        public static Browse InAnnualConferenceSite(ImisUrl url) => new Browse(SitesToBrowse.AnnualConference, url);¶        public static Browse InClubSite(ImisUrl url) => new Browse(SitesToBrowse.Club, url);¶        public static Browse InClubStaffSite(ImisUrl url) => new Browse(SitesToBrowse.ClubStaff, url);¶¶        #endregion¶¶        #region Methods¶¶        /// <summary>¶        /// Navigates the browser to the target URL.¶        /// </summary>¶        /// <param name="actor">The Screenplay Actor.</param>¶        /// <param name="driver">The WebDriver.</param>¶        /// <param name="context">The Context.</param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            if (!string.IsNullOrEmpty(Url))¶            {")
Diff(INSERT," ")
Diff(EQUAL,"¶                driver.Navigate().GoToUrl(Url);¶                user.Logger.Info($"user will navigate to '{Url}'");¶            }¶            else¶            {¶                Url = context.BaseUrl.ToString();¶                var siteUrl = GoToSite(context);¶                user.Logger.Info($"user will navigate to '{siteUrl}'");¶                driver.Navigate().GoToUrl(siteUrl);¶            }¶            var lblError = DisplayStaticBase.LocatorByXPath("lblNormalError");¶            if (user.AsksFor(Existence.Of(lblError)))¶                if (user.AsksFor(Text.Of(lblError)).Equals("Redirect Loop"))¶                {¶                    driver.WaitInSeconds(10);¶                    driver.Navigate().Refresh();¶                }¶        }¶¶        /// <summary>¶        /// Returns a description of the Task.¶        /// </summary>¶        /// <returns></returns>¶        public override string ToString() => $"navigate browser to {Site}. Driver Url: '{Url}' and page: '{ImisUrl.BaseUrlV10}' or `{ImisUrl.BaseUrlV100}`";¶¶        private string GoToSite(IAsiWebContext context)¶        {¶            return $"{GetSiteUrl(context)}/{ImisUrl.GetUrl(context)}";¶        }¶¶        private string GetSiteUrl(IAsiWebContext context)¶        {¶            switch (Site)¶            {¶                case SitesToBrowse.Staff:¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"Staff";¶                case SitesToBrowse.Mbrr:¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"MBRR";¶                case SitesToBrowse.Donor:¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"imisdonor";¶                case SitesToBrowse.AnnualConference:¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"iMISAnnualConference";¶                case SitesToBrowse.Club:¶                    if")
Diff(DELETE," ")
Diff(EQUAL,"(context.IsV10)¶                        return Url;¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"imisclub";¶                case SitesToBrowse.ClubStaff:¶                    if (context.IsV10)¶                        return Url;¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"ClubStaff";¶                default:¶                    return Url;¶            }¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            throw new NotImplementedException();¶        }¶¶        #endregion¶    }¶¶    public enum SitesToBrowse¶    {¶        NotSet,¶        Staff,¶        Mbrr,¶        Donor,¶        AnnualConference,¶        Club,¶        ClubStaff¶    }¶¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/Browse.cs)
Diff(EQUAL,"{¶    public class Waiting : AsiAbstractWebTask¶    {¶¶        #region Constructor¶        private Waiting(WaitingType waitingType, double time)¶        {¶            WaitingTypeValue = waitingType;¶            Time = time;¶        }¶¶        #endregion¶¶        #region Properties¶        private WaitingType WaitingTypeValue { get; set; }¶        private double Time { get; set; }¶¶        private int AdditionalMiliSeconds { get; set; }¶        private int WaitMultiplier { get; set; }¶¶¶        #endregion¶¶        #region BuilderMethods¶        public static Waiting InMilliSeconds(double time) => new Waiting(WaitingType.MilliSeconds, time);¶        public static Waiting InSeconds(double time) => new Waiting(WaitingType.Seconds, time);¶        public static Waiting InMinutes(double time) => new Waiting(WaitingType.Minutes, time);¶        public static Waiting ForRecaptcha() => new Waiting(WaitingType.Seconds, 3);¶        public static Waiting ForAutomationTask() => new Waiting(WaitingType.Minutes, 1.5);¶        public static Waiting ForPageReload() => new Waiting(WaitingType.Seconds, 1);¶¶        #endregion¶¶        #region Methods¶¶        /// <summary>¶        /// Takes the time from the builder method and multiply it¶        /// by it's respective time¶        /// </summary>¶        /// <param name="user"></param>¶        /// <param name="driver"></param>¶        /// <param name="context"></param>¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            AdditionalMiliSeconds = context.AdditionalWaitInMiliseconds;¶            WaitMultiplier = context.WaitMultiplier;¶            if(WaitMultiplier < 1)¶                WaitMultiplier = 1;¶¶            switch (WaitingTypeValue)¶            {¶                case WaitingType.MilliSeconds:¶                    TimeModifier(1")
Diff(DELETE,"00")
Diff(EQUAL,");¶                    break;¶                case WaitingType.Seconds:¶                    TimeModifier(1000);¶                    break;¶                case WaitingType.Minutes:¶                    TimeModifier(60000);¶                    break;¶                default:¶                    break;¶            }¶        }¶¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            //None is required¶            throw new NotImplementedException();¶        }¶¶        /// <summary>¶        /// Multiplies the time then waits¶        /// </summary>¶        /// <param name="timeModifier"></param>¶        public void TimeModifier(int timeModifier)¶        {¶            Time *= timeModifier;¶            Time = (Time + AdditionalMiliSeconds) * WaitMultiplier;¶            Thread.Sleep((int)Time);¶        }¶       ¶        #endregion¶¶        /// <summary>¶        /// To determine how slow/fast the wait.¶        /// Hours was not included, since you'll most¶        /// likely be timed out by the system¶        /// </summary>¶        private enum WaitingType¶        {¶            MilliSeconds,¶            Seconds,¶            Minutes¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/Waiting.cs)
Diff(DELETE,"/* jkh 3/11/2023¶We need to change this to mean Set when there is a value to set. This will no doubt break lots of tests since this is a substantial change in semantics. But there is a fundamental race condition currently that must be addressed:¶1. SetWhenProvided("fubar","value") ¶2. Program looks, there is no fubar, so carries on.¶3. fubar shows up, but now it will get no value¶4. Test crashes because of missing values¶¶Sprinkling waits through this will not fix the bug since no wait will be "correct".¶The change in semantics is that if there is a value wh¶*/¶¶namespace Asi.Selenium.Core.WebDriver¶")
Diff(EQUAL,"{¶    public class SetWhenProvided : AsiAbstractWebTask¶    {¶        private SetWhenProvided(LocatorTypeEnum type, IWebLocator webLocator, string value)¶        {¶            LocatorType = type;¶            WebLocator = webLocator;¶            locatorValue = value;¶        }¶¶        private LocatorTypeEnum LocatorType { get; set; }¶        private IWebLocator WebLocator { get; set; }¶        private string locatorValue { get; set; }¶        private bool IsClear { get; set; }¶        private bool IsWaitingAfterInput { get; set; }¶        private int WaitingTime { get; set; }¶¶        public static SetWhenProvided TextBox(IWebLocator webLocator, string value) => new SetWhenProvided(LocatorTypeEnum.TextBox, webLocator, value);¶        public static SetWhenProvided TextBox(IWebLocator webLocator, decimal? value) => new SetWhenProvided(LocatorTypeEnum.TextBox, webLocator, value?.ToString(CultureInfo.CurrentUICulture));¶        public static SetWhenProvided DropDown(IWebLocator webLocator, string value) => new SetWhenProvided(LocatorTypeEnum.DropDown, webLocator, value);¶        public static SetWhenProvided CheckBox(IWebLocator webLocator, bool? value) => new SetWhenProvided(LocatorTypeEnum.CheckBox, webLocator, value?.ToString());¶¶        public SetWhenProvided Clear()¶        {¶            IsClear = true;¶            return this;¶        }¶¶        public SetWhenProvided WaitAfterInput(int time)¶        {¶            IsWaitingAfterInput = true;¶            WaitingTime = time;¶            return this;¶        }¶¶        public override void PerformAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            ")
Diff(DELETE,"// jkh: remove the idea of skipping boxes that don't exist.¶            // if (string.IsNullOrEmpty(locatorValue) || !user.AsksFor(Existence.Of(WebLocator)")
Diff(INSERT,"if (string.IsNullOrEmpty(locatorValue")
Diff(EQUAL,"))¶           ")
Diff(DELETE," //")
Diff(EQUAL,"     return;¶¶            ")
Diff(DELETE,"// jkh:  new semantic is to ignore this value if value we are trying to set is ""¶            // we use the value ~~~~ to indicate that we actually want to set "".¶            if (locatorValue=="" || locatorValue==null ){¶                return;¶            } ¶            if (locatorValue=="~~~~"){¶                locatorValue="";¶            }")
Diff(INSERT,"user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True());")
Diff(EQUAL,"¶            switch (LocatorType)¶            {¶                case LocatorTypeEnum.TextBox:¶                    TextBox(user);¶                    break;¶                case LocatorTypeEnum.DropDown:¶                    DropDown(user);¶                    break;¶                case LocatorTypeEnum.CheckBox:¶                    CheckBox(user);¶                    break;¶            }¶            if (IsWaitingAfterInput)¶                user.AttemptsTo(Waiting.InSeconds(WaitingTime));¶        }¶¶        private void TextBox(IActor user)¶        {¶            if (IsClear)¶                user.AttemptsTo(SendKeys.To(WebLocator, locatorValue).UsingClearMethod());¶            else¶                user.AttemptsTo(SendKeys.To(WebLocator, locatorValue));¶           ")
Diff(DELETE,"// jkh: remove waiting¶           //")
Diff(INSERT," ")
Diff(EQUAL,"user.AttemptsTo(Waiting.InSeconds(1));¶        }¶¶        private void VerifyStringValue(IActor user)¶        {¶            user.AsksFor(ValueAttribute.Of(WebLocator)).Should().Be(locatorValue);¶        }¶¶        private void DropDown(IActor user)¶        {¶            user.AttemptsTo(Select.ByText(WebLocator, locatorValue));¶            ")
Diff(DELETE,"//")
Diff(EQUAL,"user.AttemptsTo(Waiting.InSeconds(1));¶        }¶¶        private void CheckBox(IActor user)¶        {¶            var value = user.AsksFor(SelectedState.Of(WebLocator));¶            if (bool.Parse(locatorValue) != value)¶            {¶                user.AttemptsTo(Click.On(WebLocator));¶            }¶        }¶        private void VerifyCheckBox(IActor user)¶        {¶            user.AsksFor(SelectedState.Of(WebLocator)).Should().Be(bool.Parse(locatorValue));¶        }¶¶        public override void VerifyAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            if (string.IsNullOrEmpty(locatorValue)")
Diff(DELETE," || !user.AsksFor(Existence.Of(WebLocator)))¶                return")
Diff(INSERT,")¶                return;¶¶            user.WaitsUntil(Existence.Of(WebLocator), IsEqualTo.True())")
Diff(EQUAL,";¶            switch (LocatorType)¶            {¶                case LocatorTypeEnum.TextBox:¶                case LocatorTypeEnum.DropDown:¶                    VerifyStringValue(user);¶                    break;¶                case LocatorTypeEnum.CheckBox:¶                    VerifyCheckBox(user);¶                    break;¶            }¶        }¶¶        private enum LocatorTypeEnum¶        {¶            TextBox,¶            DropDown,¶            CheckBox¶        }¶    }¶¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Tasks/SetWhenProvided.cs)
Diff(EQUAL,"{¶    public class UserMessageState : AsiAbstractWebQuestion<bool>¶    {¶        #region Constructors¶¶        private UserMessageState(UserMessageStateOperation operation)¶        {¶            Operation = operation;¶        }¶¶        #endregion¶¶        #region Properties¶¶        private UserMessageStateOperation Operation { get; }¶        private string Message { get; set; }¶¶        #endregion¶¶        #region Builder Methods¶¶        public static UserMessageState HasAny() => new UserMessageState(UserMessageStateOperation.Any);¶        public static UserMessageState HasErrors() => new UserMessageState(UserMessageStateOperation.Error);¶        public static UserMessageState HasWarnings() => new UserMessageState(UserMessageStateOperation.Warning);¶        public static UserMessageState HasInfoMessages() => new UserMessageState(UserMessageStateOperation.Information);¶¶        public UserMessageState WithMessage(string message)¶        {¶            Message = message;¶            return this;¶        }¶¶        #endregion¶¶        #region Methods¶¶        private IWebLocator UserMessageItem(string cssClass) => DisplayStaticBase.LocatorByXPath("_Messages", postXPath: PostPath(cssClass));¶¶        private string PostPath(string cssClass = "")¶        {¶            var text = string.IsNullOrEmpty(Message) ? string.Empty : $"[contains(text(), '{Message}')]";¶            if (string.IsNullOrEmpty(cssClass))¶                return $"//li//div{text}";¶            return $"//li[contains(@class,'{cssClass}')]//div{text}";¶        }¶¶        public override bool RequestAs(IActor user, IWebDriver driver, IAsiWebContext context)¶        {¶            var cssClass = string.Empty;¶            switch (Operation)¶            {¶                case UserMessageStateOperation.Error:¶                    cssClass = "AsiError";¶                    break;¶                case UserMessageStateOperation.Warning:¶                    cssClass = "AsiWarning";¶                    break;¶                case UserMessageStateOperation.Information:¶                    cssClass = "AsiInformation";¶                    break;¶            }¶")
Diff(INSERT,"            user.AttemptsTo(Waiting.ForPageReload());¶")
Diff(EQUAL,"            return user.AsksFor(Existence.Of(UserMessageItem(cssClass)));¶        }¶¶        #endregion¶¶        private enum UserMessageStateOperation¶        {¶            Any,¶            Error,¶            Warning,¶            Information¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Questions/UserMessageState.cs)
Diff(INSERT,"{¶    ")
Diff(EQUAL,"/// <summary>¶")
Diff(INSERT,"    ")
Diff(EQUAL,"/// Question about whether an element is the current focus of the web driver.¶")
Diff(INSERT,"    ")
Diff(EQUAL,"/// </summary>¶")
Diff(DELETE,"namespace Asi.Selenium.Core.WebDriver.Boa {¶")
Diff(INSERT,"    ")
Diff(EQUAL,"public class FocusState : ")
Diff(INSERT,"Boa.")
Diff(EQUAL,"AsiAbstractWebQuestion<bool>¶")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶   ")
Diff(EQUAL,"    ")
Diff(INSERT," ")
Diff(EQUAL,"#region Constructors¶¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    private FocusState(IWebLocator locator)¶    ")
Diff(INSERT,"  ")
Diff(DELETE,"{¶")
Diff(INSERT,"  {¶    ")
Diff(EQUAL,"        Locator = locator;¶    ")
Diff(INSERT,"  ")
Diff(DELETE,"}¶")
Diff(INSERT,"  }¶    ")
Diff(EQUAL,"    #endregion¶¶    ")
Diff(INSERT," ")
Diff(INSERT,"   ")
Diff(EQUAL,"#region Properties¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    private IWebLocator Locator { get; set; }¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    #endregion¶¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    #region Builder Methods¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    public static FocusState CheckError(IWebLocator locator) => new FocusState(locator);¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    #endregion¶¶    ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"#region Methods¶¶    ")
Diff(INSERT,"   ")
Diff(INSERT," ")
Diff(EQUAL,"public static FocusState Of(IWebLocator locator)¶    ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶   ")
Diff(EQUAL,"        ")
Diff(INSERT," ")
Diff(EQUAL,"return new FocusState(locator);¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    }¶¶    ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"/// <summary>¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    /// Determines if page focus is on the locator element¶    ")
Diff(INSERT,"  ")
Diff(INSERT,"  ")
Diff(EQUAL,"/// </summary>¶")
Diff(INSERT,"    ")
Diff(EQUAL,"    private bool LocatorInFocus(IWebLocator ")
Diff(DELETE,"locator, ")
Diff(INSERT,"x,")
Diff(EQUAL,"IWebDriver driver)")
Diff(DELETE,"¶    {¶        // BUGBUG - ??¶")
Diff(INSERT," {¶     ")
Diff(EQUAL,"       ")
Diff(DELETE," ")
Diff(EQUAL,"var targetElement = ")
Diff(DELETE,"driver")
Diff(INSERT,"x")
Diff(EQUAL,".FindElement(")
Diff(DELETE,"By.Id(""));¶")
Diff(INSERT,"driver);¶    ")
Diff(EQUAL,"        var activeElement = driver.SwitchTo().ActiveElement();¶        ")
Diff(INSERT,"    ")
Diff(EQUAL,"return activeElement.Equals(targetElement);¶    ")
Diff(INSERT," ")
Diff(DELETE,"}¶¶")
Diff(INSERT,"   }¶¶    ")
Diff(EQUAL,"    public override bool RequestAs(IActor user, IWebDriver driver, IAsiWebContext context)¶    ")
Diff(DELETE,"{¶")
Diff(INSERT,"    {¶    ")
Diff(EQUAL,"        return LocatorInFocus(Locator,")
Diff(DELETE," ")
Diff(EQUAL,"driver);¶    ")
Diff(DELETE,"}¶")
Diff(INSERT,"    }¶   ")
Diff(EQUAL,"    ")
Diff(INSERT," ")
Diff(EQUAL,"#endregion¶")
Diff(INSERT,"    }¶")
Diff(EQUAL,"}¶")
Diff(DELETE,"¶}")
<> ../iMIS/test/Selenium/SeleniumCore/WebDriver/Boa/Questions/FocusState.cs)
Diff(EQUAL,"/*¶ * Purpose of this class is to be able to navigate around the site¶ * For example if you want to navigate (Ex Google site) to a site¶ * Use the following function GoTo("https://www.google.com")¶ * ¶ * Author Joel Musita¶ */¶¶namespace Asi.Selenium.Core.Helper¶{¶    public class Navigation : ICoreNavigation¶    {¶        private readonly IWebDriver _driver;¶        private readonly IAsiWebContext _context;¶¶        public Navigation(IWebDriver driver, IAsiWebContext context)¶        {¶            _driver = driver;¶            _context = context;¶        }¶¶        public string Url => _context.BaseUrl.ToString();¶¶        public void GoToSite(string url)¶        {¶            GoToUrl(GetSiteUrl(url));¶        }¶¶        public void GoToSite(string url, string path)¶        {¶            GoToUrl($"{GetSiteUrl(url)}/{path}");¶        }¶¶        public string GetSiteUrl(string url)¶        {¶            switch (url)¶            {¶                case "Staff":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"Staff";¶                case "MBRR":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"MBRR";¶                case "Donor":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"imisdonor";¶                case "Annual Conference":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"iMISAnnualConference";¶                case "Club":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"imisclub";¶                case "Club Staff":¶                    return $"{Url}")
Diff(INSERT,"/")
Diff(EQUAL,"ClubStaff";¶                default:¶                    return Url;¶            }¶        }¶¶        /// <summary>¶        /// Navigates back to the previous page¶        /// </summary>¶        public void Back()¶        {¶            _driver.Navigate().Back();¶        }¶¶        /// <summary>¶        /// Navigates forward to the next page¶        /// </summary>¶        public void Forward()¶        {¶            _driver.Navigate().Forward();¶        }¶¶        /// <summary>¶        /// Reloads the current page¶        /// </summary>¶        public void Refresh()¶        {¶            _driver.Navigate().Refresh();¶        }¶¶        public void GoToUrl(string url)¶        {¶            _driver.Navigate().GoToUrl(url);¶        }¶¶        public void GoToUrl(Uri url)¶        {¶            _driver.Navigate().GoToUrl(url);¶        }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/Helpers/Navigation/Navigation.cs)
Diff(EQUAL,"{¶    public interface IAsiWebContext¶    {¶        Uri BaseUrl { get; set; }¶")
Diff(INSERT,"        Uri LicenseUrl { get; set; }¶")
Diff(EQUAL,"        string Website { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        string UserName { get; set; }¶        string Password { get; set; }¶        string Token { get; set; }¶        string AccountName { get; set; }¶        string OnBehalfName { get; set; }¶        string LoggedInPartyId { get; set; }¶        string SelectedPartyId { get; set; }¶        Dictionary<string, object> DataStorage { get; set; }¶        public bool IsV10 { get; set; }¶        public bool IsLocalDev { get; set; }¶        public int WaitMultiplier { get; set; }¶        public int AdditionalWaitInMiliseconds { get; set; }¶¶")
Diff(INSERT,"        /// <summary>¶        /// access logger for test¶        /// </summary>¶        public ILogger Logger();¶")
Diff(EQUAL,"        /// <summary>¶        /// Adds the data for the given key, will throw an error if the data already exists¶        /// </summary>¶        /// <param name="key"></param>¶        /// <param name="value"></param>¶        public void AddData(string key, object value);¶¶        /// <summary>¶        /// Adds or Updates the data for the given key¶        /// </summary>¶        /// <param name="key"></param>¶        /// <param name="value"></param>¶        public void UpsertData(string key, object value);¶¶        /// <summary>¶        /// Returns the value for the given key from DataStorage¶        /// </summary>¶        /// <typeparam name="T"></typeparam>¶        /// <param name="key"></param>¶        /// <returns></returns>¶")
Diff(DELETE,"")
Diff(EQUAL,"        public T GetData<T>(string key);¶")
Diff(INSERT,"¶        /// <summary>¶        /// This method is used to populate website, username and password by specifying a role¶        /// </summary>¶        /// <param name="site"></param>¶        /// <param name="UserRole"></param>¶        public void SetContextByRole(string site, string UserRole);¶¶        /// <summary>¶        ///  This method is used to populate website, username and password by specifying username¶        /// </summary>¶        /// <param name="site"></param>¶        /// <param name="UserName"></param>¶        public void SetContextByName(string site, string UserName);¶¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/Interfaces/IAsiWebContext.cs)
Diff(EQUAL,"{¶    public class BillingLookUpTable¶    {¶        public string ContactFirstName { get; set; }¶        public string ContactLastName { get; set; }¶        public string BillToName { get; set; }¶        public string MembershipType { get; set; }¶        public string Chapter { get; set; }¶        public string ProductCode { get; set; }¶        public string ProductName { get; set; }¶        public string ProductDescription { get; set; }¶        public int TermSpan { get; set; }¶        public string PayOption{ get; set; }¶")
Diff(INSERT,"        public bool PayNow { get; set; }¶")
Diff(EQUAL,"        public string AccountingMethod { get; set; }¶        public string Amount { get; set; }¶        public string Date { get; set; }¶        public string Number { get; set; }¶        public string AmountFrom { get; set; }¶        public string AmountTo { get; set; }¶        public string AmountAdjusted { get; set; }¶        public string ItemName1 { get; set; }¶        public string ItemAmount1 { get; set; }¶        public string ItemName2 { get; set; }¶        public string ItemAmount2 { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/BillingList.cs)
Diff(EQUAL,"{¶    public class UserData¶    {¶        [JsonPropertyName("username")]¶        public string UserName { get; set; }¶")
Diff(INSERT,"        [JsonPropertyName("password")]¶        public string Password { get; set; }¶")
Diff(EQUAL,"        [JsonPropertyName("firstname")]¶        public string FirstName { get; set; }¶        [JsonPropertyName("lastname")]¶        public string LastName { get; set; }¶        [JsonPropertyName("role")]¶        public string Role { get; set; }¶        [JsonPropertyName("title")]¶        public string Title { get; set; }¶        public int Id { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/UserData.cs)
Diff(EQUAL,"{¶    public class CartData¶    {¶        public bool IsPayCentralSdkOn;¶        public string PaymentAmount { get; set; }¶        public string BillTo { get; set; }¶        public string PaymentMethod { get; set; }¶")
Diff(INSERT,"        /// <summary>¶        /// This is an internal enum that dictates how to check out when performing in CheckOut.cs¶        /// <br /><br />¶        /// Not to be confused with CartData.PaymentMethod, which will fill the payment method drop down.¶        /// This should be specified as the same payment method in the gateway¶        /// </summary>¶")
Diff(EQUAL,"        public string PaymentMethodType { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        public string CheckNumber { get; set; }¶        public string POBoxNumber { get; set; }¶        public string CardNumber { get; set; }¶        public string AccountNumber { get; set; }¶        public string RoutingNumber { get; set; }¶        public string CardExpiry{ get; set; }¶        public string CardCVC { get; set; }¶        public string PostalCode { get; set; }¶        public string PaymentErrorMessage { get; set; }¶        public string CartItem { get; set; }¶        public string PurchaseOrderNumber { get; set; } ¶        public string Product { get; set; }¶")
Diff(INSERT,"        public int Quantity { get; set; } = 1;¶")
Diff(EQUAL,"        public string SimilarProduct { get; set; }¶        public string CompanyName { get; set; }¶        public bool SkipCardValidation { get; set; }¶        public int NumOfProducts { get; set; } = 1;¶")
Diff(DELETE,"")
Diff(EQUAL,"        public bool ClearCart { get; set; }¶")
Diff(INSERT,"        public string PromoCode { get; set; }¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Commerce/CartData.cs)
Diff(EQUAL,"{¶    public class CreateProductData¶    {¶        public string ItemCode { get; set; }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"        /// <summary>¶        /// Synonymous with Category¶        /// </summary>¶        public string Class { get; set; }¶        public string Name { get; set; }¶        public string Description { get; set; }¶")
Diff(INSERT,"        public bool PriceIsTotal { get; set; }¶")
Diff(EQUAL,"        public decimal")
Diff(INSERT,"?")
Diff(EQUAL," StandardPrice { get; set; }¶        public decimal")
Diff(INSERT,"?")
Diff(EQUAL," DiscountPrice { get; set; }¶        public string Status {")
Diff(INSERT," ")
Diff(EQUAL,"get;")
Diff(INSERT," ")
Diff(EQUAL,"set; }¶        public string FinancialEntity {")
Diff(INSERT," ")
Diff(EQUAL,"get;")
Diff(INSERT," ")
Diff(EQUAL,"set; }¶        public string TaxCode { get; set; }¶        public bool")
Diff(DELETE,"?")
Diff(EQUAL," IsTaxable { get; set; }¶        public bool")
Diff(DELETE,"?")
Diff(INSERT," IsPstEnabled { get; set; }¶        public bool IsGstHstEnabled { get; set; }¶        public bool")
Diff(EQUAL," IncursShipping { get; set; }¶        public bool")
Diff(DELETE,"?")
Diff(EQUAL," IncursHandling { get; set; }¶        public bool")
Diff(DELETE,"?")
Diff(EQUAL," InventoryItem { get; set; }¶")
Diff(INSERT,"        public DateTime? Beginning { get; set; }¶        public DateTime? Ending { get; set; }¶        public bool HasAccountingInformation => !string.IsNullOrEmpty(FinancialEntity) || IsTaxable || IsPstEnabled || IsGstHstEnabled || IncursHandling || IncursShipping || InventoryItem;¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Commerce/CreateProductData.cs)
Diff(EQUAL,"{¶    public class GatewayData¶    {¶        public string GatewayType { get; set; }¶        public string AccountCode { get; set; }¶        public string Region { get; set; }¶        public string AccountName { get; set; }¶        public string Password { get; set; }¶")
Diff(INSERT,"        /// <summary>¶        /// Multi-Factor Auth key for getting MFA access to third party applications¶        /// </summary>¶        public string MFACode { get; set; }¶")
Diff(EQUAL,"        public string UserName { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        public string Vendor { get; set; }¶        public string AgentCode { get; set; }¶        public string AuthorizationKey { get; set; }¶        public string Environment { get; set; }¶        public string Partner { get; set; }¶        public string MerchantId { get; set; }¶        public string XWebId { get; set; }¶        public string TerminalId { get; set; }¶        public string SpreedlyType { get; set; }¶        public string Pin { get; set; }¶        public string ApiKey { get; set; }¶        public string AppKey { get; set; }¶        public string AppId { get; set; }¶        public string DigitalKey { get; set; }¶        public string AccountId { get; set; }¶")
Diff(INSERT,"        /// <summary>¶        /// This is the text set in the Payment Method type drop down.¶        /// <br />¶        /// Not to be confused with PaymentMethodType in CartData.¶        /// </summary>¶")
Diff(EQUAL,"        public string PaymentMethodType { get; set; }¶        public string FinancialEntity { get; set; }¶        public string PaymentMethodCode { get; set; }¶        public string PaymentMethodName { get; set; }¶        public string GLAccount { get; set; }¶        public string Country { get; set; }¶        public bool RequireCSC { get; set; }¶        public bool DisplayPaymentAuthoirizationCheckbox { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        public string PaymentAuthorizationTermsAndConditions { get; set; }¶")
Diff(INSERT,"        public string Email { get; set; }¶        public bool CompleteOnboarding { get; set; } = true;¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Commerce/GatewayData.cs)
Diff(EQUAL,"{¶    public class CreateEventData¶    {¶        public string EventName { get; set; }¶        public string EventCode { get; set; }¶        public string RegistrationType { get; set; }¶        public string Status { get; set; }¶        public string Category { get; set; }¶        public string Description { get; set; }¶        public string StartDate { get; set; }¶        public string StartTime { get; set; }¶        public string EndDate { get; set; }¶        public string EndTime { get; set; }¶        public string EventTimeZone { get; set; }¶        public string HideTimeZone { get; set; }¶        public string VirtualMeetingURL { get; set; }¶        public string Country { get; set; }¶        public string Address { get; set; }¶        public string City { get; set; }¶        public string PostalCode { get; set; }¶        public string Directions { get; set; }¶        public string Notes { get; set; }¶        public string Room { get; set; }¶        public string Tags { get; set; }¶")
Diff(INSERT,"        public string TaxCode { get; set; }¶        public bool TaxByAddress { get; set; }¶        public string VatExceptionRule { get; set; }¶        public double RegistrationOptionDefaultRegularPrice { get; set; }¶        public bool IsRegistrationOptionTaxable { get; set; }¶        public bool IsRegistrationOptionPstEnabled { get; set; }¶        public bool IsRegistrationOptionGstHstEnabled { get; set; }¶        public string RegistrationOptionTaxCode { get; set; }¶        public double ProgramItemDefaultRegularPrice { get; set; }¶        public bool IsProgramItemTaxable { get; set; }¶        public bool IsProgramItemPstEnabled { get; set; }¶        public bool IsProgramItemGstHstEnabled { get; set; }¶        public string ProgramItemTaxCode { get; set; }¶¶        public bool HasPricingData => !string.IsNullOrEmpty(TaxCode) || TaxByAddress || !string.IsNullOrEmpty(VatExceptionRule) || HasRegistrationOptionData;¶        public bool HasRegistrationOptionData => RegistrationOptionDefaultRegularPrice != 0 || HasRegistrationOptionTax || !string.IsNullOrEmpty(RegistrationOptionTaxCode);¶        public bool HasProgramItemData => ProgramItemDefaultRegularPrice != 0 || HasProgramItemTax || !string.IsNullOrEmpty(ProgramItemTaxCode);¶        public bool HasRegistrationOptionTax => IsRegistrationOptionTaxable || IsRegistrationOptionPstEnabled || IsRegistrationOptionGstHstEnabled;¶        public bool HasProgramItemTax => IsProgramItemTaxable || IsProgramItemPstEnabled || IsProgramItemGstHstEnabled;¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Events/CreateEventData.cs)
Diff(EQUAL,"{¶    public class EventData : CreateEventData¶    {¶        public string Registrant { get; set; }¶        public string YesNoQuestion { get; set; }¶        public string HowDidYouHear { get; set; }¶        public string RegistrationOption { get; set;}¶        [TableAliases("Program[-]?(\\d)*")]¶        public List<string> Programs { get; set; }¶")
Diff(INSERT,"        public bool AddFirstProgram { get; set; }¶")
Diff(EQUAL,"        public string BillTo { get; set; }¶        public ")
Diff(INSERT,"new ")
Diff(EQUAL,"string EventCode { get; set; }¶")
Diff(DELETE,"¶")
Diff(EQUAL,"    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Events/EventData.cs)
Diff(EQUAL,"{¶    public class PanelPropertyData¶    {¶        private static readonly Random _random = new Random();¶        private static readonly HashSet<string> _allTypes = new HashSet<string>¶            {"Currency", "Date", "Date and Time", "Decimal", "Email", "File upload", "Integer","Text","Time","URL","Yes/No"};¶        private static readonly Dictionary<string,string> _preDefExamplesDicV10 = new Dictionary<string, string>¶            { { "Query", "$/System/System log" } , { "SourceTable", "ADDRESS_PURPOSE" } , { "ExplicitValues", "3" } };¶        private static readonly Dictionary<string, string> _preDefExamplesDicV100 = new Dictionary<string, string>¶            { { "Query", "$/System/System log" } , { "ExplicitValues", "3" } };¶¶        public string Name { get; set; }¶        public string Type { get; set; }¶        public bool ShouldAllowMultiSelect { get; set; }¶        public string SingleOrMultiLineTextBox { get; set; }¶        public string PreDefinedValuesType { get; set; }¶        public string PredefinedValuesOption { get; set; }¶        public bool ShouldLogChanges { get;  set; }¶        public bool ShouldIndexProperty { get;  set; }¶        public int Col = -1;¶        public int Row = -1;¶¶        public bool HasGridCoordinate()¶        {¶            return Col  > -1 && Row  > -1;¶        }¶¶        /// <summary>¶        /// Generates one of every property type¶        /// </summary>¶        public static IEnumerable<PanelPropertyData> GenerateAllProperties(bool allocateGridCoordinates = false, bool isV10 = true)¶        {¶            List<PanelPropertyData> props = new List<PanelPropertyData>();¶            //Allocate coordinate systems if applicable¶            int[] lastUsedGridCoord = { };¶            if (allocateGridCoordinates)¶                lastUsedGridCoord = new[] { 0, 0 };¶¶            //Allocate a property for every property type¶            foreach (string type in _allTypes)¶                props.Add(GenerateRandomProperty(isV10, lastUsedGridCoord, type));¶¶            //Ensure we also add every type of Text pre defined values property¶            Dictionary<string, string> preDefinedValuesDic = isV10 ? _preDefExamplesDicV10 : _preDefExamplesDicV100;¶            foreach (KeyValuePair<string,string> valType in preDefinedValuesDic)¶                props.Add(GenerateRandomProperty(isV10, lastUsedGridCoord, "Text", valType.Key));¶¶            return props;¶        }¶¶        /// <summary>¶        /// Generates a number of random PanelProperty object for use in tests where properties don't matter¶        /// If you allocate the properties to grid -- It will add the properties after the last used row specified¶        /// </summary>¶        /// <remarks>If you want to allocate grid coordinates to random properties -- ensure that you start off with an empty grid, because the¶        /// function assumes that there are no existing properties already allocated to the grid</remarks>¶        public static IEnumerable<PanelPropertyData> GenerateRandomProperties(int numPropertiesToGenerate, bool allocateGridCoordinates = false, bool isV10 = true)¶        {¶            List<PanelPropertyData> props = new List<PanelPropertyData>();¶            //Allocate coordinate systems if applicable¶            int[] lastUsedGridCoord = { };¶            if (allocateGridCoordinates)¶                lastUsedGridCoord = new[] { 0, 0 };¶¶            for (int i = 0; i < numPropertiesToGenerate; i++)¶                props.Add(GenerateRandomProperty(isV10, lastUsedGridCoord));¶            return props;¶        }¶¶        /// <summary>¶        /// Generates a random PanelProperty object for use in tests where properties don't matter¶        /// </summary>¶        /// <param name="Coords">Optionally specify the grid coordinate the property should be located at</param>¶        /// <param name="specificType">Optionally specify the type of the generated property</param>¶        /// <param name="specificPreDefType">If type is property -- this allows you to specify what pre defined values type to use for the property</param>¶        public static PanelPropertyData GenerateRandomProperty(bool isV10, int[] Coords = null, string specificType = null, string specificPreDefType = null)¶        {¶            PanelPropertyData prop = new PanelPropertyData();¶¶            //Allocate general property fields¶            prop.Name = $"Prop{TestHelper.GenerateRandomString(10)}";¶            prop.Type = specificType")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty()")
Diff(EQUAL," ? _allTypes.ElementAt(_random.Next(_allTypes.Count)) : specificType;¶            if (!_allTypes.Contains(prop.Type))¶                throw new NotImplementedException("PanelProperty can not currently generate property for type " + prop.Type);¶¶            prop.ShouldIndexProperty = TestHelper.CoinFlip();¶            prop.ShouldLogChanges = TestHelper.CoinFlip();¶¶            if (prop.Type == "Text")¶                RandomizeTextBasedAttributes(prop, isV10, specificPreDefType);¶¶            //Handle Coordinate System¶            if (!")
Diff(DELETE,"(")
Diff(EQUAL,"Coords")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty(")
Diff(EQUAL,"))¶                HandleGridCoordinates(prop, Coords);¶            return prop;¶        }¶¶        private static void RandomizeTextBasedAttributes(PanelPropertyData prop, bool isV10, string specificPreDefType)¶        {¶            //Make decision to set either predefined values or single-line/multi-line textbox as they are mutually exclusive¶            if (!")
Diff(DELETE,"(")
Diff(EQUAL,"specificPreDefType")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty(")
Diff(EQUAL,") || TestHelper.CoinFlip())¶                RandomizePredefinedValues(prop, isV10, specificPreDefType);¶            else¶                prop.SingleOrMultiLineTextBox = TestHelper.CoinFlip() ? "Single" : "Multiple";¶        }¶¶        private static void RandomizePredefinedValues(PanelPropertyData prop, bool isV10, string preDefinedValuesType = null)¶        {¶            prop.ShouldAllowMultiSelect = TestHelper.CoinFlip();¶            AssignPreDefProps(isV10 ? _preDefExamplesDicV10 : _preDefExamplesDicV100);¶¶            void AssignPreDefProps(Dictionary<string, string> preDefValDic)¶            {¶                string preDefValType;¶                if (preDefinedValuesType")
Diff(DELETE," is {Length:>0}")
Diff(INSERT,".IsNullOrEmpty()")
Diff(EQUAL,")¶                    preDefValType = GetRandomPreDefValuesType(preDefValDic);¶                else¶                    preDefValType = preDefinedValuesType;¶¶                prop.PreDefinedValuesType = preDefValType;¶                if (!preDefValDic.ContainsKey(preDefValType))¶                    throw new NotImplementedException($"Predefined Values Dictionary does not implement for the type {preDefValType}");¶                prop.PredefinedValuesOption = preDefValDic[preDefValType];¶            }¶¶            string GetRandomPreDefValuesType(Dictionary<string, string> valDictionary)¶            {¶                return valDictionary.Keys.ElementAt(_random.Next(valDictionary.Count));¶            }¶        }¶¶        private static void HandleGridCoordinates(PanelPropertyData prop, int[] lastUsedGridCoord)¶        {¶            prop.Col = lastUsedGridCoord[0];¶            prop.Row = lastUsedGridCoord[1];¶¶            //Iterate to next grid cell, next column or overflow to next row and reset column¶            if (lastUsedGridCoord[0]++ < 2)¶                return;¶            //Handle column overflow if applicable¶            lastUsedGridCoord[0] = 0;¶            lastUsedGridCoord[1]++;¶            return;¶        }¶¶        /// <summary>¶        /// Generates a specific PanelProperty object¶        /// </summary>¶        /// <param name="propertyType">Specify the type of the generated property</param>¶        /// <param name="propertyName">Specific property name</param>¶        /// <param name="allocateGridCoordinates">Add property to grid</param>¶        public static PanelPropertyData GenerateSpecificProperty(string propertyType, string propertyName, bool allocateGridCoordinates = false)¶        {¶            PanelPropertyData prop = new PanelPropertyData();¶¶            //Add specific property¶            prop.Name = $"{propertyName}";¶            prop.Type = propertyType;¶            if (!_allTypes.Contains(prop.Type))¶                throw new NotImplementedException("PanelProperty can not currently generate property for type " + prop.Type);¶¶            if (allocateGridCoordinates)¶            {¶                int[] lastUsedGridCoord = new[] { 0, 0 };¶                HandleGridCoordinates(prop, lastUsedGridCoord);¶            }¶¶            return prop;¶        }¶¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/RiSE/PanelPropertyData.cs)
Diff(EQUAL,"{¶    public class JoinNowData¶    {¶        public string ContactFirstName { get; set; }¶        public string ContactLastName { get; set; }¶        public string BillToName { get; set; }¶        public string MembershipType { get; set; }¶        public string Chapter { get; set; }¶        public string ProductCode { get; set; }¶        public string ProductName { get; set; }¶")
Diff(INSERT,"        public string ClubName { get; set; }¶")
Diff(EQUAL,"        public string ProductDescription { get; set; }¶        public int TermSpan { get; set; }¶        public string PayOption { get; set; }¶        public string AccountingMethod { get; set; }¶        public string Amount { get; set; }¶        public string Date { get; set; }¶        public string Number { get; set; }¶        public string AmountFrom { get; set; }¶        public string AmountTo { get; set; }¶        public string UnitAmount { get; set; }¶        public string AdjustedUnitAmount { get; set; }¶        public string")
Diff(DELETE," ItemName1 { get; set; }¶        public string ItemAmount1 { get; set; }¶        public string ItemName2 { get; set; }¶        public string ItemAmount2")
Diff(INSERT,"[] ItemNames")
Diff(EQUAL," { get; set; }¶    }¶}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Membership/JoinNowData.cs)
Diff(EQUAL,"{¶    public class ContactData¶    {¶        public PrefixEnum Prefix { get; set; }¶")
Diff(INSERT,"        public string PrefixString => PrefixToStringDic[Prefix];¶        public Dictionary<PrefixEnum, string> PrefixToStringDic = new Dictionary<PrefixEnum, string>¶        {¶            {PrefixEnum.None, "(None)"},¶            {PrefixEnum.Dr, "Dr." },¶            {PrefixEnum.Hon, "Hon." },¶            {PrefixEnum.LtCol, "Lt.Col." },¶            {PrefixEnum.Miss, "Miss" },¶            {PrefixEnum.Mr, "Mr." },¶            {PrefixEnum.Mrs, "Mrs." },¶            {PrefixEnum.Ms, "Ms." },¶            {PrefixEnum.Pastor, "Pastor"},¶            {PrefixEnum.Rev, "Rev."},¶        };¶")
Diff(EQUAL,"        public string FirstName { get; set; }¶")
Diff(DELETE,"")
Diff(EQUAL,"        public string MiddleName { get; set; }¶        public string LastName { get; set; }¶        public SuffixEnum Suffix { get; set; }¶        public string Designation { get; set; }¶        public string InformalName { get; set; }¶        public string Title { get; set; }¶        public string Organization { get; set; }¶        public string Email { get; set; }¶        public string Phone { get; set; }¶        public string MobilePhone { get; set; }¶        public string Country { get; set; } //CountryEnum?¶        public string Address1 { get; set; }¶        public string Address2 { get; set; }¶        public string Address3 { get; set; }¶        public string City { get; set; }¶        public string State { get; set; } //StateEnum?¶        public string PostalCode { get; set; }¶        public string Password { get; set; }¶        public string ConfirmPassword { get; set; }¶")
Diff(INSERT,"        public bool ExpectError { get; set; }¶        public string ContactType { get; set; }¶        public string Gender { get; set; }¶        public string Birthday { get; set; }¶        public string MaritalStatus { get; set; }¶¶")
Diff(EQUAL,"    }¶¶    public enum PrefixEnum¶    {¶        None,¶        Dr,¶        Hon,¶        LtCol,¶        Miss,¶        Mr,¶        Mrs,¶        Ms,¶        Pastor,¶        Rev¶    }¶¶    public enum SuffixEnum¶    {¶        None,¶        II,¶        III,¶        IV,¶        Jr,¶        Sr¶")
Diff(DELETE,"")
Diff(EQUAL,"    }¶")
Diff(INSERT,"¶")
Diff(EQUAL,"}¶")
<> ../iMIS/test/Selenium/SeleniumCore/DataClasses/Membership/ContactData.cs)
